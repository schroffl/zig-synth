pub const int_least8_t = i8;
pub const int_least16_t = i16;
pub const int_least32_t = i32;
pub const int_least64_t = i64;
pub const uint_least8_t = u8;
pub const uint_least16_t = u16;
pub const uint_least32_t = u32;
pub const uint_least64_t = u64;
pub const int_fast8_t = i8;
pub const int_fast16_t = i16;
pub const int_fast32_t = i32;
pub const int_fast64_t = i64;
pub const uint_fast8_t = u8;
pub const uint_fast16_t = u16;
pub const uint_fast32_t = u32;
pub const uint_fast64_t = u64;
pub const __int8_t = i8;
pub const __uint8_t = u8;
pub const __int16_t = c_short;
pub const __uint16_t = c_ushort;
pub const __int32_t = c_int;
pub const __uint32_t = c_uint;
pub const __int64_t = c_longlong;
pub const __uint64_t = c_ulonglong;
pub const __darwin_intptr_t = c_long;
pub const __darwin_natural_t = c_uint;
pub const __darwin_ct_rune_t = c_int;
const union_unnamed_1 = extern union {
    __mbstate8: [128]u8,
    _mbstateL: c_longlong,
};
pub const __mbstate_t = union_unnamed_1;
pub const __darwin_mbstate_t = __mbstate_t;
pub const __darwin_ptrdiff_t = c_long;
pub const __darwin_size_t = c_ulong;
pub const __darwin_va_list = __builtin_va_list;
pub const __darwin_wchar_t = c_int;
pub const __darwin_rune_t = __darwin_wchar_t;
pub const __darwin_wint_t = c_int;
pub const __darwin_clock_t = c_ulong;
pub const __darwin_socklen_t = __uint32_t;
pub const __darwin_ssize_t = c_long;
pub const __darwin_time_t = c_long;
pub const __darwin_blkcnt_t = __int64_t;
pub const __darwin_blksize_t = __int32_t;
pub const __darwin_dev_t = __int32_t;
pub const __darwin_fsblkcnt_t = c_uint;
pub const __darwin_fsfilcnt_t = c_uint;
pub const __darwin_gid_t = __uint32_t;
pub const __darwin_id_t = __uint32_t;
pub const __darwin_ino64_t = __uint64_t;
pub const __darwin_ino_t = __darwin_ino64_t;
pub const __darwin_mach_port_name_t = __darwin_natural_t;
pub const __darwin_mach_port_t = __darwin_mach_port_name_t;
pub const __darwin_mode_t = __uint16_t;
pub const __darwin_off_t = __int64_t;
pub const __darwin_pid_t = __int32_t;
pub const __darwin_sigset_t = __uint32_t;
pub const __darwin_suseconds_t = __int32_t;
pub const __darwin_uid_t = __uint32_t;
pub const __darwin_useconds_t = __uint32_t;
pub const __darwin_uuid_t = [16]u8;
pub const __darwin_uuid_string_t = [37]u8;
pub const struct___darwin_pthread_handler_rec = extern struct {
    __routine: ?fn (?*c_void) callconv(.C) void,
    __arg: ?*c_void,
    __next: [*c]struct___darwin_pthread_handler_rec,
};
pub const struct__opaque_pthread_attr_t = extern struct {
    __sig: c_long,
    __opaque: [56]u8,
};
pub const struct__opaque_pthread_cond_t = extern struct {
    __sig: c_long,
    __opaque: [40]u8,
};
pub const struct__opaque_pthread_condattr_t = extern struct {
    __sig: c_long,
    __opaque: [8]u8,
};
pub const struct__opaque_pthread_mutex_t = extern struct {
    __sig: c_long,
    __opaque: [56]u8,
};
pub const struct__opaque_pthread_mutexattr_t = extern struct {
    __sig: c_long,
    __opaque: [8]u8,
};
pub const struct__opaque_pthread_once_t = extern struct {
    __sig: c_long,
    __opaque: [8]u8,
};
pub const struct__opaque_pthread_rwlock_t = extern struct {
    __sig: c_long,
    __opaque: [192]u8,
};
pub const struct__opaque_pthread_rwlockattr_t = extern struct {
    __sig: c_long,
    __opaque: [16]u8,
};
pub const struct__opaque_pthread_t = extern struct {
    __sig: c_long,
    __cleanup_stack: [*c]struct___darwin_pthread_handler_rec,
    __opaque: [8176]u8,
};
pub const __darwin_pthread_attr_t = struct__opaque_pthread_attr_t;
pub const __darwin_pthread_cond_t = struct__opaque_pthread_cond_t;
pub const __darwin_pthread_condattr_t = struct__opaque_pthread_condattr_t;
pub const __darwin_pthread_key_t = c_ulong;
pub const __darwin_pthread_mutex_t = struct__opaque_pthread_mutex_t;
pub const __darwin_pthread_mutexattr_t = struct__opaque_pthread_mutexattr_t;
pub const __darwin_pthread_once_t = struct__opaque_pthread_once_t;
pub const __darwin_pthread_rwlock_t = struct__opaque_pthread_rwlock_t;
pub const __darwin_pthread_rwlockattr_t = struct__opaque_pthread_rwlockattr_t;
pub const __darwin_pthread_t = [*c]struct__opaque_pthread_t;
pub const u_int8_t = u8;
pub const u_int16_t = c_ushort;
pub const u_int32_t = c_uint;
pub const u_int64_t = c_ulonglong;
pub const register_t = i64;
pub const user_addr_t = u_int64_t;
pub const user_size_t = u_int64_t;
pub const user_ssize_t = i64;
pub const user_long_t = i64;
pub const user_ulong_t = u_int64_t;
pub const user_time_t = i64;
pub const user_off_t = i64;
pub const syscall_arg_t = u_int64_t;
pub const intmax_t = c_long;
pub const uintmax_t = c_ulong;
pub extern fn _Block_copy(aBlock: ?*const c_void) ?*c_void;
pub extern fn _Block_release(aBlock: ?*const c_void) void;
pub extern fn _Block_object_assign(?*c_void, ?*const c_void, c_int) void;
pub extern fn _Block_object_dispose(?*const c_void, c_int) void;
pub extern var _NSConcreteGlobalBlock: [32]?*c_void;
pub extern var _NSConcreteStackBlock: [32]?*c_void;
pub fn _OSSwapInt16(arg__data: __uint16_t) callconv(.C) __uint16_t {
    var _data = arg__data;
    return @bitCast(__uint16_t, @truncate(c_short, ((@bitCast(c_int, @as(c_uint, _data)) << @intCast(@import("std").math.Log2Int(c_int), 8)) | (@bitCast(c_int, @as(c_uint, _data)) >> @intCast(@import("std").math.Log2Int(c_int), 8)))));
} // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/libkern/i386/_OSByteOrder.h:60:9: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const _OSSwapInt32 = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/libkern/i386/_OSByteOrder.h:74:9: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const _OSSwapInt64 = @compileError("unable to translate function");
pub const u_char = u8;
pub const u_short = c_ushort;
pub const u_int = c_uint;
pub const u_long = c_ulong;
pub const ushort = c_ushort;
pub const uint = c_uint;
pub const u_quad_t = u_int64_t;
pub const quad_t = i64;
pub const qaddr_t = [*c]quad_t;
pub const caddr_t = [*c]u8;
pub const daddr_t = i32;
pub const dev_t = __darwin_dev_t;
pub const fixpt_t = u_int32_t;
pub const blkcnt_t = __darwin_blkcnt_t;
pub const blksize_t = __darwin_blksize_t;
pub const gid_t = __darwin_gid_t;
pub const in_addr_t = __uint32_t;
pub const in_port_t = __uint16_t;
pub const ino_t = __darwin_ino_t;
pub const ino64_t = __darwin_ino64_t;
pub const key_t = __int32_t;
pub const mode_t = __darwin_mode_t;
pub const nlink_t = __uint16_t;
pub const id_t = __darwin_id_t;
pub const pid_t = __darwin_pid_t;
pub const off_t = __darwin_off_t;
pub const segsz_t = i32;
pub const swblk_t = i32;
pub const uid_t = __darwin_uid_t;
pub const clock_t = __darwin_clock_t;
pub const time_t = __darwin_time_t;
pub const useconds_t = __darwin_useconds_t;
pub const suseconds_t = __darwin_suseconds_t;
pub const rsize_t = __darwin_size_t;
pub const errno_t = c_int;
pub const struct_fd_set = extern struct {
    fds_bits: [32]__int32_t,
};
pub const fd_set = struct_fd_set;
pub fn __darwin_fd_isset(arg__n: c_int, arg__p: [*c]const struct_fd_set) callconv(.C) c_int {
    var _n = arg__n;
    var _p = arg__p;
    return (_p.*.fds_bits[(@bitCast(c_ulong, @as(c_long, _n)) / (@sizeOf(__int32_t) *% @bitCast(c_ulong, @as(c_long, @as(c_int, 8)))))] & (@bitCast(__int32_t, @truncate(c_uint, ((@bitCast(c_ulong, @as(c_long, @as(c_int, 1)))) << @intCast(@import("std").math.Log2Int(c_ulong), (@bitCast(c_ulong, @as(c_long, _n)) % (@sizeOf(__int32_t) *% @bitCast(c_ulong, @as(c_long, @as(c_int, 8)))))))))));
}
pub const fd_mask = __int32_t;
pub const pthread_attr_t = __darwin_pthread_attr_t;
pub const pthread_cond_t = __darwin_pthread_cond_t;
pub const pthread_condattr_t = __darwin_pthread_condattr_t;
pub const pthread_mutex_t = __darwin_pthread_mutex_t;
pub const pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub const pthread_once_t = __darwin_pthread_once_t;
pub const pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub const pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub const pthread_t = __darwin_pthread_t;
pub const pthread_key_t = __darwin_pthread_key_t;
pub const fsblkcnt_t = __darwin_fsblkcnt_t;
pub const fsfilcnt_t = __darwin_fsfilcnt_t;
pub const UInt8 = u8;
pub const SInt8 = i8;
pub const UInt16 = c_ushort;
pub const SInt16 = c_short;
pub const UInt32 = c_uint;
pub const SInt32 = c_int;
pub const struct_wide = extern struct {
    lo: UInt32,
    hi: SInt32,
};
pub const wide = struct_wide;
pub const struct_UnsignedWide = extern struct {
    lo: UInt32,
    hi: UInt32,
};
pub const UnsignedWide = struct_UnsignedWide;
pub const SInt64 = c_longlong;
pub const UInt64 = c_ulonglong;
pub const Fixed = SInt32;
pub const FixedPtr = [*c]Fixed;
pub const Fract = SInt32;
pub const FractPtr = [*c]Fract;
pub const UnsignedFixed = UInt32;
pub const UnsignedFixedPtr = [*c]UnsignedFixed;
pub const ShortFixed = c_short;
pub const ShortFixedPtr = [*c]ShortFixed;
pub const Float32 = f32;
pub const Float64 = f64;
pub const struct_Float80 = extern struct {
    exp: SInt16,
    man: [4]UInt16,
};
pub const Float80 = struct_Float80;
pub const struct_Float96 = extern struct {
    exp: [2]SInt16,
    man: [4]UInt16,
};
pub const Float96 = struct_Float96;
pub const struct_Float32Point = extern struct {
    x: Float32,
    y: Float32,
};
pub const Float32Point = struct_Float32Point;
pub const Ptr = [*c]u8;
pub const Handle = [*c]Ptr;
pub const Size = c_long;
pub const OSErr = SInt16;
pub const OSStatus = SInt32;
pub const LogicalAddress = ?*c_void;
pub const ConstLogicalAddress = ?*const c_void;
pub const PhysicalAddress = ?*c_void;
pub const BytePtr = [*c]UInt8;
pub const ByteCount = c_ulong;
pub const ByteOffset = c_ulong;
pub const Duration = SInt32;
pub const AbsoluteTime = UnsignedWide;
pub const OptionBits = UInt32;
pub const ItemCount = c_ulong;
pub const PBVersion = UInt32;
pub const ScriptCode = SInt16;
pub const LangCode = SInt16;
pub const RegionCode = SInt16;
pub const FourCharCode = UInt32;
pub const OSType = FourCharCode;
pub const ResType = FourCharCode;
pub const OSTypePtr = [*c]OSType;
pub const ResTypePtr = [*c]ResType;
pub const Boolean = u8;
pub const ProcPtr = ?fn () callconv(.C) c_long;
pub const Register68kProcPtr = ?fn () callconv(.C) void;
pub const UniversalProcPtr = ProcPtr;
pub const ProcHandle = [*c]ProcPtr;
pub const UniversalProcHandle = [*c]UniversalProcPtr;
pub const PRefCon = ?*c_void;
pub const URefCon = ?*c_void;
pub const SRefCon = ?*c_void;
pub const noErr = @enumToInt(enum_unnamed_2.noErr);
const enum_unnamed_2 = extern enum(c_int) {
    noErr = 0,
    _,
};
pub const kNilOptions = @enumToInt(enum_unnamed_3.kNilOptions);
const enum_unnamed_3 = extern enum(c_int) {
    kNilOptions = 0,
    _,
};
pub const kVariableLengthArray = @enumToInt(enum_unnamed_4.kVariableLengthArray);
const enum_unnamed_4 = extern enum(c_int) {
    kVariableLengthArray = 1,
    _,
};
pub const kUnknownType = @enumToInt(enum_unnamed_5.kUnknownType);
const enum_unnamed_5 = extern enum(c_int) {
    kUnknownType = 1061109567,
    _,
};
pub const UnicodeScalarValue = UInt32;
pub const UTF32Char = UInt32;
pub const UniChar = UInt16;
pub const UTF16Char = UInt16;
pub const UTF8Char = UInt8;
pub const UniCharPtr = [*c]UniChar;
pub const UniCharCount = c_ulong;
pub const UniCharCountPtr = [*c]UniCharCount;
pub const Str255 = [256]u8;
pub const Str63 = [64]u8;
pub const Str32 = [33]u8;
pub const Str31 = [32]u8;
pub const Str27 = [28]u8;
pub const Str15 = [16]u8;
pub const Str32Field = [34]u8;
pub const StrFileName = Str63;
pub const StringPtr = [*c]u8;
pub const StringHandle = [*c]StringPtr;
pub const ConstStringPtr = [*c]const u8;
pub const ConstStr255Param = [*c]const u8;
pub const ConstStr63Param = [*c]const u8;
pub const ConstStr32Param = [*c]const u8;
pub const ConstStr31Param = [*c]const u8;
pub const ConstStr27Param = [*c]const u8;
pub const ConstStr15Param = [*c]const u8;
pub const ConstStrFileNameParam = ConstStr63Param;
pub const struct_ProcessSerialNumber = extern struct {
    highLongOfPSN: UInt32,
    lowLongOfPSN: UInt32,
};
pub const ProcessSerialNumber = struct_ProcessSerialNumber;
pub const ProcessSerialNumberPtr = [*c]ProcessSerialNumber;
pub const struct_Point = extern struct {
    v: c_short,
    h: c_short,
};
pub const Point = struct_Point;
pub const PointPtr = [*c]Point;
pub const struct_Rect = extern struct {
    top: c_short,
    left: c_short,
    bottom: c_short,
    right: c_short,
};
pub const Rect = struct_Rect;
pub const RectPtr = [*c]Rect;
pub const struct_FixedPoint = extern struct {
    x: Fixed,
    y: Fixed,
};
pub const FixedPoint = struct_FixedPoint;
pub const struct_FixedRect = extern struct {
    left: Fixed,
    top: Fixed,
    right: Fixed,
    bottom: Fixed,
};
pub const FixedRect = struct_FixedRect;
pub const CharParameter = c_short;
pub const normal = @enumToInt(enum_unnamed_6.normal);
pub const bold = @enumToInt(enum_unnamed_6.bold);
pub const italic = @enumToInt(enum_unnamed_6.italic);
pub const underline = @enumToInt(enum_unnamed_6.underline);
pub const outline = @enumToInt(enum_unnamed_6.outline);
pub const shadow = @enumToInt(enum_unnamed_6.shadow);
pub const condense = @enumToInt(enum_unnamed_6.condense);
pub const extend = @enumToInt(enum_unnamed_6.extend);
const enum_unnamed_6 = extern enum(c_int) {
    normal = 0,
    bold = 1,
    italic = 2,
    underline = 4,
    outline = 8,
    shadow = 16,
    condense = 32,
    extend = 64,
    _,
};
pub const Style = u8;
pub const StyleParameter = c_short;
pub const StyleField = Style;
pub const TimeValue = SInt32;
pub const TimeScale = SInt32;
pub const CompTimeValue = wide;
pub const TimeValue64 = SInt64;
pub const struct_TimeBaseRecord = @OpaqueType();
pub const TimeBase = ?*struct_TimeBaseRecord;
pub const struct_TimeRecord = extern struct {
    value: CompTimeValue,
    scale: TimeScale,
    base: TimeBase,
};
pub const TimeRecord = struct_TimeRecord;
pub const struct_NumVersion = extern struct {
    nonRelRev: UInt8,
    stage: UInt8,
    minorAndBugRev: UInt8,
    majorRev: UInt8,
};
pub const NumVersion = struct_NumVersion;
pub const developStage = @enumToInt(enum_unnamed_7.developStage);
pub const alphaStage = @enumToInt(enum_unnamed_7.alphaStage);
pub const betaStage = @enumToInt(enum_unnamed_7.betaStage);
pub const finalStage = @enumToInt(enum_unnamed_7.finalStage);
const enum_unnamed_7 = extern enum(c_int) {
    developStage = 32,
    alphaStage = 64,
    betaStage = 96,
    finalStage = 128,
    _,
};
pub const union_NumVersionVariant = extern union {
    parts: NumVersion,
    whole: UInt32,
};
pub const NumVersionVariant = union_NumVersionVariant;
pub const NumVersionVariantPtr = [*c]NumVersionVariant;
pub const NumVersionVariantHandle = [*c]NumVersionVariantPtr;
pub const struct_VersRec = extern struct {
    numericVersion: NumVersion,
    countryCode: c_short,
    shortVersion: Str255,
    reserved: Str255,
};
pub const VersRec = struct_VersRec;
pub const VersRecPtr = [*c]VersRec;
pub const VersRecHndl = [*c]VersRecPtr;
pub const Byte = UInt8;
pub const SignedByte = SInt8;
pub const WidePtr = [*c]wide;
pub const UnsignedWidePtr = [*c]UnsignedWide;
pub const extended80 = Float80;
pub const extended96 = Float96;
pub const VHSelect = SInt8;
pub extern fn Debugger() void;
pub extern fn DebugStr(debuggerMsg: ConstStr255Param) void;
pub extern fn SysBreak() void;
pub extern fn SysBreakStr(debuggerMsg: ConstStr255Param) void;
pub extern fn SysBreakFunc(debuggerMsg: ConstStr255Param) void;
pub extern var kCFCoreFoundationVersionNumber: f64;
pub const CFTypeID = c_ulong;
pub const CFOptionFlags = c_ulong;
pub const CFHashCode = c_ulong;
pub const CFIndex = c_long;
pub const CFTypeRef = ?*const c_void;
pub const struct___CFString = @OpaqueType();
pub const CFStringRef = ?*const struct___CFString;
pub const CFMutableStringRef = ?*struct___CFString;
pub const CFPropertyListRef = CFTypeRef;
pub const CFComparisonResult = CFIndex;
pub const kCFCompareLessThan = @enumToInt(enum_unnamed_8.kCFCompareLessThan);
pub const kCFCompareEqualTo = @enumToInt(enum_unnamed_8.kCFCompareEqualTo);
pub const kCFCompareGreaterThan = @enumToInt(enum_unnamed_8.kCFCompareGreaterThan);
const enum_unnamed_8 = extern enum(c_int) {
    kCFCompareLessThan = -1,
    kCFCompareEqualTo = 0,
    kCFCompareGreaterThan = 1,
    _,
};
pub const CFComparatorFunction = ?fn (?*const c_void, ?*const c_void, ?*c_void) callconv(.C) CFComparisonResult;
pub const kCFNotFound: CFIndex = @bitCast(CFIndex, @as(c_long, -@as(c_int, 1)));
const struct_unnamed_9 = extern struct {
    location: CFIndex,
    length: CFIndex,
};
pub const CFRange = struct_unnamed_9;
pub fn CFRangeMake(arg_loc: CFIndex, arg_len: CFIndex) callconv(.C) CFRange {
    var loc = arg_loc;
    var len = arg_len;
    var range: CFRange = undefined;
    range.location = loc;
    range.length = len;
    return range;
}
pub extern fn __CFRangeMake(loc: CFIndex, len: CFIndex) CFRange;
pub const struct___CFNull = @OpaqueType();
pub const CFNullRef = ?*const struct___CFNull;
pub extern fn CFNullGetTypeID() CFTypeID;
pub extern const kCFNull: CFNullRef;
pub const struct___CFAllocator = @OpaqueType();
pub const CFAllocatorRef = ?*const struct___CFAllocator;
pub extern const kCFAllocatorDefault: CFAllocatorRef;
pub extern const kCFAllocatorSystemDefault: CFAllocatorRef;
pub extern const kCFAllocatorMalloc: CFAllocatorRef;
pub extern const kCFAllocatorMallocZone: CFAllocatorRef;
pub extern const kCFAllocatorNull: CFAllocatorRef;
pub extern const kCFAllocatorUseContext: CFAllocatorRef;
pub const CFAllocatorRetainCallBack = ?fn (?*const c_void) callconv(.C) ?*const c_void;
pub const CFAllocatorReleaseCallBack = ?fn (?*const c_void) callconv(.C) void;
pub const CFAllocatorCopyDescriptionCallBack = ?fn (?*const c_void) callconv(.C) CFStringRef;
pub const CFAllocatorAllocateCallBack = ?fn (CFIndex, CFOptionFlags, ?*c_void) callconv(.C) ?*c_void;
pub const CFAllocatorReallocateCallBack = ?fn (?*c_void, CFIndex, CFOptionFlags, ?*c_void) callconv(.C) ?*c_void;
pub const CFAllocatorDeallocateCallBack = ?fn (?*c_void, ?*c_void) callconv(.C) void;
pub const CFAllocatorPreferredSizeCallBack = ?fn (CFIndex, CFOptionFlags, ?*c_void) callconv(.C) CFIndex;
const struct_unnamed_10 = extern struct {
    version: CFIndex,
    info: ?*c_void,
    retain: CFAllocatorRetainCallBack,
    release: CFAllocatorReleaseCallBack,
    copyDescription: CFAllocatorCopyDescriptionCallBack,
    allocate: CFAllocatorAllocateCallBack,
    reallocate: CFAllocatorReallocateCallBack,
    deallocate: CFAllocatorDeallocateCallBack,
    preferredSize: CFAllocatorPreferredSizeCallBack,
};
pub const CFAllocatorContext = struct_unnamed_10;
pub extern fn CFAllocatorGetTypeID() CFTypeID;
pub extern fn CFAllocatorSetDefault(allocator: CFAllocatorRef) void;
pub extern fn CFAllocatorGetDefault() CFAllocatorRef;
pub extern fn CFAllocatorCreate(allocator: CFAllocatorRef, context: [*c]CFAllocatorContext) CFAllocatorRef;
pub extern fn CFAllocatorAllocate(allocator: CFAllocatorRef, size: CFIndex, hint: CFOptionFlags) ?*c_void;
pub extern fn CFAllocatorReallocate(allocator: CFAllocatorRef, ptr: ?*c_void, newsize: CFIndex, hint: CFOptionFlags) ?*c_void;
pub extern fn CFAllocatorDeallocate(allocator: CFAllocatorRef, ptr: ?*c_void) void;
pub extern fn CFAllocatorGetPreferredSizeForSize(allocator: CFAllocatorRef, size: CFIndex, hint: CFOptionFlags) CFIndex;
pub extern fn CFAllocatorGetContext(allocator: CFAllocatorRef, context: [*c]CFAllocatorContext) void;
pub extern fn CFGetTypeID(cf: CFTypeRef) CFTypeID;
pub extern fn CFCopyTypeIDDescription(type_id: CFTypeID) CFStringRef;
pub extern fn CFRetain(cf: CFTypeRef) CFTypeRef;
pub extern fn CFRelease(cf: CFTypeRef) void;
pub extern fn CFAutorelease(arg: CFTypeRef) CFTypeRef;
pub extern fn CFGetRetainCount(cf: CFTypeRef) CFIndex;
pub extern fn CFEqual(cf1: CFTypeRef, cf2: CFTypeRef) Boolean;
pub extern fn CFHash(cf: CFTypeRef) CFHashCode;
pub extern fn CFCopyDescription(cf: CFTypeRef) CFStringRef;
pub extern fn CFGetAllocator(cf: CFTypeRef) CFAllocatorRef;
pub extern fn CFMakeCollectable(cf: CFTypeRef) CFTypeRef;
pub const kAudio_UnimplementedError = @enumToInt(enum_unnamed_11.kAudio_UnimplementedError);
pub const kAudio_FileNotFoundError = @enumToInt(enum_unnamed_11.kAudio_FileNotFoundError);
pub const kAudio_FilePermissionError = @enumToInt(enum_unnamed_11.kAudio_FilePermissionError);
pub const kAudio_TooManyFilesOpenError = @enumToInt(enum_unnamed_11.kAudio_TooManyFilesOpenError);
pub const kAudio_BadFilePathError = @enumToInt(enum_unnamed_11.kAudio_BadFilePathError);
pub const kAudio_ParamError = @enumToInt(enum_unnamed_11.kAudio_ParamError);
pub const kAudio_MemFullError = @enumToInt(enum_unnamed_11.kAudio_MemFullError);
const enum_unnamed_11 = extern enum(c_int) {
    kAudio_UnimplementedError = -4,
    kAudio_FileNotFoundError = -43,
    kAudio_FilePermissionError = -54,
    kAudio_TooManyFilesOpenError = -42,
    kAudio_BadFilePathError = 561017960,
    kAudio_ParamError = -50,
    kAudio_MemFullError = -108,
    _,
};
pub const struct_AudioValueRange = extern struct {
    mMinimum: Float64,
    mMaximum: Float64,
};
pub const AudioValueRange = struct_AudioValueRange;
pub const struct_AudioValueTranslation = extern struct {
    mInputData: ?*c_void,
    mInputDataSize: UInt32,
    mOutputData: ?*c_void,
    mOutputDataSize: UInt32,
};
pub const AudioValueTranslation = struct_AudioValueTranslation;
pub const struct_AudioBuffer = extern struct {
    mNumberChannels: UInt32,
    mDataByteSize: UInt32,
    mData: ?*c_void,
};
pub const AudioBuffer = struct_AudioBuffer;
pub const struct_AudioBufferList = extern struct {
    mNumberBuffers: UInt32,
    mBuffers: [1]AudioBuffer,
};
pub const AudioBufferList = struct_AudioBufferList;
pub const AudioSampleType = Float32;
pub const AudioUnitSampleType = Float32;
pub const AudioFormatID = UInt32;
pub const AudioFormatFlags = UInt32;
pub const struct_AudioStreamBasicDescription = extern struct {
    mSampleRate: Float64,
    mFormatID: AudioFormatID,
    mFormatFlags: AudioFormatFlags,
    mBytesPerPacket: UInt32,
    mFramesPerPacket: UInt32,
    mBytesPerFrame: UInt32,
    mChannelsPerFrame: UInt32,
    mBitsPerChannel: UInt32,
    mReserved: UInt32,
};
pub const AudioStreamBasicDescription = struct_AudioStreamBasicDescription;
pub const kAudioStreamAnyRate: Float64 = 00;
pub const kAudioFormatLinearPCM = @enumToInt(enum_unnamed_12.kAudioFormatLinearPCM);
pub const kAudioFormatAC3 = @enumToInt(enum_unnamed_12.kAudioFormatAC3);
pub const kAudioFormat60958AC3 = @enumToInt(enum_unnamed_12.kAudioFormat60958AC3);
pub const kAudioFormatAppleIMA4 = @enumToInt(enum_unnamed_12.kAudioFormatAppleIMA4);
pub const kAudioFormatMPEG4AAC = @enumToInt(enum_unnamed_12.kAudioFormatMPEG4AAC);
pub const kAudioFormatMPEG4CELP = @enumToInt(enum_unnamed_12.kAudioFormatMPEG4CELP);
pub const kAudioFormatMPEG4HVXC = @enumToInt(enum_unnamed_12.kAudioFormatMPEG4HVXC);
pub const kAudioFormatMPEG4TwinVQ = @enumToInt(enum_unnamed_12.kAudioFormatMPEG4TwinVQ);
pub const kAudioFormatMACE3 = @enumToInt(enum_unnamed_12.kAudioFormatMACE3);
pub const kAudioFormatMACE6 = @enumToInt(enum_unnamed_12.kAudioFormatMACE6);
pub const kAudioFormatULaw = @enumToInt(enum_unnamed_12.kAudioFormatULaw);
pub const kAudioFormatALaw = @enumToInt(enum_unnamed_12.kAudioFormatALaw);
pub const kAudioFormatQDesign = @enumToInt(enum_unnamed_12.kAudioFormatQDesign);
pub const kAudioFormatQDesign2 = @enumToInt(enum_unnamed_12.kAudioFormatQDesign2);
pub const kAudioFormatQUALCOMM = @enumToInt(enum_unnamed_12.kAudioFormatQUALCOMM);
pub const kAudioFormatMPEGLayer1 = @enumToInt(enum_unnamed_12.kAudioFormatMPEGLayer1);
pub const kAudioFormatMPEGLayer2 = @enumToInt(enum_unnamed_12.kAudioFormatMPEGLayer2);
pub const kAudioFormatMPEGLayer3 = @enumToInt(enum_unnamed_12.kAudioFormatMPEGLayer3);
pub const kAudioFormatTimeCode = @enumToInt(enum_unnamed_12.kAudioFormatTimeCode);
pub const kAudioFormatMIDIStream = @enumToInt(enum_unnamed_12.kAudioFormatMIDIStream);
pub const kAudioFormatParameterValueStream = @enumToInt(enum_unnamed_12.kAudioFormatParameterValueStream);
pub const kAudioFormatAppleLossless = @enumToInt(enum_unnamed_12.kAudioFormatAppleLossless);
pub const kAudioFormatMPEG4AAC_HE = @enumToInt(enum_unnamed_12.kAudioFormatMPEG4AAC_HE);
pub const kAudioFormatMPEG4AAC_LD = @enumToInt(enum_unnamed_12.kAudioFormatMPEG4AAC_LD);
pub const kAudioFormatMPEG4AAC_ELD = @enumToInt(enum_unnamed_12.kAudioFormatMPEG4AAC_ELD);
pub const kAudioFormatMPEG4AAC_ELD_SBR = @enumToInt(enum_unnamed_12.kAudioFormatMPEG4AAC_ELD_SBR);
pub const kAudioFormatMPEG4AAC_ELD_V2 = @enumToInt(enum_unnamed_12.kAudioFormatMPEG4AAC_ELD_V2);
pub const kAudioFormatMPEG4AAC_HE_V2 = @enumToInt(enum_unnamed_12.kAudioFormatMPEG4AAC_HE_V2);
pub const kAudioFormatMPEG4AAC_Spatial = @enumToInt(enum_unnamed_12.kAudioFormatMPEG4AAC_Spatial);
pub const kAudioFormatMPEGD_USAC = @enumToInt(enum_unnamed_12.kAudioFormatMPEGD_USAC);
pub const kAudioFormatAMR = @enumToInt(enum_unnamed_12.kAudioFormatAMR);
pub const kAudioFormatAMR_WB = @enumToInt(enum_unnamed_12.kAudioFormatAMR_WB);
pub const kAudioFormatAudible = @enumToInt(enum_unnamed_12.kAudioFormatAudible);
pub const kAudioFormatiLBC = @enumToInt(enum_unnamed_12.kAudioFormatiLBC);
pub const kAudioFormatDVIIntelIMA = @enumToInt(enum_unnamed_12.kAudioFormatDVIIntelIMA);
pub const kAudioFormatMicrosoftGSM = @enumToInt(enum_unnamed_12.kAudioFormatMicrosoftGSM);
pub const kAudioFormatAES3 = @enumToInt(enum_unnamed_12.kAudioFormatAES3);
pub const kAudioFormatEnhancedAC3 = @enumToInt(enum_unnamed_12.kAudioFormatEnhancedAC3);
pub const kAudioFormatFLAC = @enumToInt(enum_unnamed_12.kAudioFormatFLAC);
pub const kAudioFormatOpus = @enumToInt(enum_unnamed_12.kAudioFormatOpus);
const enum_unnamed_12 = extern enum(c_int) {
    kAudioFormatLinearPCM = 1819304813,
    kAudioFormatAC3 = 1633889587,
    kAudioFormat60958AC3 = 1667326771,
    kAudioFormatAppleIMA4 = 1768775988,
    kAudioFormatMPEG4AAC = 1633772320,
    kAudioFormatMPEG4CELP = 1667591280,
    kAudioFormatMPEG4HVXC = 1752594531,
    kAudioFormatMPEG4TwinVQ = 1953986161,
    kAudioFormatMACE3 = 1296122675,
    kAudioFormatMACE6 = 1296122678,
    kAudioFormatULaw = 1970037111,
    kAudioFormatALaw = 1634492791,
    kAudioFormatQDesign = 1363430723,
    kAudioFormatQDesign2 = 1363430706,
    kAudioFormatQUALCOMM = 1365470320,
    kAudioFormatMPEGLayer1 = 778924081,
    kAudioFormatMPEGLayer2 = 778924082,
    kAudioFormatMPEGLayer3 = 778924083,
    kAudioFormatTimeCode = 1953066341,
    kAudioFormatMIDIStream = 1835623529,
    kAudioFormatParameterValueStream = 1634760307,
    kAudioFormatAppleLossless = 1634492771,
    kAudioFormatMPEG4AAC_HE = 1633772392,
    kAudioFormatMPEG4AAC_LD = 1633772396,
    kAudioFormatMPEG4AAC_ELD = 1633772389,
    kAudioFormatMPEG4AAC_ELD_SBR = 1633772390,
    kAudioFormatMPEG4AAC_ELD_V2 = 1633772391,
    kAudioFormatMPEG4AAC_HE_V2 = 1633772400,
    kAudioFormatMPEG4AAC_Spatial = 1633772403,
    kAudioFormatMPEGD_USAC = 1970495843,
    kAudioFormatAMR = 1935764850,
    kAudioFormatAMR_WB = 1935767394,
    kAudioFormatAudible = 1096107074,
    kAudioFormatiLBC = 1768710755,
    kAudioFormatDVIIntelIMA = 1836253201,
    kAudioFormatMicrosoftGSM = 1836253233,
    kAudioFormatAES3 = 1634038579,
    kAudioFormatEnhancedAC3 = 1700998451,
    kAudioFormatFLAC = 1718378851,
    kAudioFormatOpus = 1869641075,
    _,
};
pub const kAudioFormatFlagIsFloat = @enumToInt(enum_unnamed_13.kAudioFormatFlagIsFloat);
pub const kAudioFormatFlagIsBigEndian = @enumToInt(enum_unnamed_13.kAudioFormatFlagIsBigEndian);
pub const kAudioFormatFlagIsSignedInteger = @enumToInt(enum_unnamed_13.kAudioFormatFlagIsSignedInteger);
pub const kAudioFormatFlagIsPacked = @enumToInt(enum_unnamed_13.kAudioFormatFlagIsPacked);
pub const kAudioFormatFlagIsAlignedHigh = @enumToInt(enum_unnamed_13.kAudioFormatFlagIsAlignedHigh);
pub const kAudioFormatFlagIsNonInterleaved = @enumToInt(enum_unnamed_13.kAudioFormatFlagIsNonInterleaved);
pub const kAudioFormatFlagIsNonMixable = @enumToInt(enum_unnamed_13.kAudioFormatFlagIsNonMixable);
pub const kAudioFormatFlagsAreAllClear = @enumToInt(enum_unnamed_13.kAudioFormatFlagsAreAllClear);
pub const kLinearPCMFormatFlagIsFloat = @enumToInt(enum_unnamed_13.kLinearPCMFormatFlagIsFloat);
pub const kLinearPCMFormatFlagIsBigEndian = @enumToInt(enum_unnamed_13.kLinearPCMFormatFlagIsBigEndian);
pub const kLinearPCMFormatFlagIsSignedInteger = @enumToInt(enum_unnamed_13.kLinearPCMFormatFlagIsSignedInteger);
pub const kLinearPCMFormatFlagIsPacked = @enumToInt(enum_unnamed_13.kLinearPCMFormatFlagIsPacked);
pub const kLinearPCMFormatFlagIsAlignedHigh = @enumToInt(enum_unnamed_13.kLinearPCMFormatFlagIsAlignedHigh);
pub const kLinearPCMFormatFlagIsNonInterleaved = @enumToInt(enum_unnamed_13.kLinearPCMFormatFlagIsNonInterleaved);
pub const kLinearPCMFormatFlagIsNonMixable = @enumToInt(enum_unnamed_13.kLinearPCMFormatFlagIsNonMixable);
pub const kLinearPCMFormatFlagsSampleFractionShift = @enumToInt(enum_unnamed_13.kLinearPCMFormatFlagsSampleFractionShift);
pub const kLinearPCMFormatFlagsSampleFractionMask = @enumToInt(enum_unnamed_13.kLinearPCMFormatFlagsSampleFractionMask);
pub const kLinearPCMFormatFlagsAreAllClear = @enumToInt(enum_unnamed_13.kLinearPCMFormatFlagsAreAllClear);
pub const kAppleLosslessFormatFlag_16BitSourceData = @enumToInt(enum_unnamed_13.kAppleLosslessFormatFlag_16BitSourceData);
pub const kAppleLosslessFormatFlag_20BitSourceData = @enumToInt(enum_unnamed_13.kAppleLosslessFormatFlag_20BitSourceData);
pub const kAppleLosslessFormatFlag_24BitSourceData = @enumToInt(enum_unnamed_13.kAppleLosslessFormatFlag_24BitSourceData);
pub const kAppleLosslessFormatFlag_32BitSourceData = @enumToInt(enum_unnamed_13.kAppleLosslessFormatFlag_32BitSourceData);
const enum_unnamed_13 = extern enum(c_int) {
    kAudioFormatFlagIsFloat = 1,
    kAudioFormatFlagIsBigEndian = 2,
    kAudioFormatFlagIsSignedInteger = 4,
    kAudioFormatFlagIsPacked = 8,
    kAudioFormatFlagIsAlignedHigh = 16,
    kAudioFormatFlagIsNonInterleaved = 32,
    kAudioFormatFlagIsNonMixable = 64,
    // kAudioFormatFlagsAreAllClear = 2147483648,
    kLinearPCMFormatFlagIsFloat = 1,
    kLinearPCMFormatFlagIsBigEndian = 2,
    kLinearPCMFormatFlagIsSignedInteger = 4,
    kLinearPCMFormatFlagIsPacked = 8,
    kLinearPCMFormatFlagIsAlignedHigh = 16,
    kLinearPCMFormatFlagIsNonInterleaved = 32,
    kLinearPCMFormatFlagIsNonMixable = 64,
    kLinearPCMFormatFlagsSampleFractionShift = 7,
    kLinearPCMFormatFlagsSampleFractionMask = 8064,
    // kLinearPCMFormatFlagsAreAllClear = 2147483648,
    kAppleLosslessFormatFlag_16BitSourceData = 1,
    kAppleLosslessFormatFlag_20BitSourceData = 2,
    kAppleLosslessFormatFlag_24BitSourceData = 3,
    kAppleLosslessFormatFlag_32BitSourceData = 4,
    _,
};
pub const kAudioFormatFlagsNativeEndian = @enumToInt(enum_unnamed_14.kAudioFormatFlagsNativeEndian);
pub const kAudioFormatFlagsCanonical = @enumToInt(enum_unnamed_14.kAudioFormatFlagsCanonical);
pub const kAudioFormatFlagsAudioUnitCanonical = @enumToInt(enum_unnamed_14.kAudioFormatFlagsAudioUnitCanonical);
pub const kAudioFormatFlagsNativeFloatPacked = @enumToInt(enum_unnamed_14.kAudioFormatFlagsNativeFloatPacked);
const enum_unnamed_14 = extern enum(c_int) {
    kAudioFormatFlagsNativeEndian = 0,
    kAudioFormatFlagsCanonical = 9,
    kAudioFormatFlagsAudioUnitCanonical = 41,
    kAudioFormatFlagsNativeFloatPacked = 9,
    _,
};
pub const struct_AudioStreamPacketDescription = extern struct {
    mStartOffset: SInt64,
    mVariableFramesInPacket: UInt32,
    mDataByteSize: UInt32,
};
pub const AudioStreamPacketDescription = struct_AudioStreamPacketDescription;
pub const SMPTETimeType = UInt32;
pub const kSMPTETimeType24 = @enumToInt(enum_unnamed_15.kSMPTETimeType24);
pub const kSMPTETimeType25 = @enumToInt(enum_unnamed_15.kSMPTETimeType25);
pub const kSMPTETimeType30Drop = @enumToInt(enum_unnamed_15.kSMPTETimeType30Drop);
pub const kSMPTETimeType30 = @enumToInt(enum_unnamed_15.kSMPTETimeType30);
pub const kSMPTETimeType2997 = @enumToInt(enum_unnamed_15.kSMPTETimeType2997);
pub const kSMPTETimeType2997Drop = @enumToInt(enum_unnamed_15.kSMPTETimeType2997Drop);
pub const kSMPTETimeType60 = @enumToInt(enum_unnamed_15.kSMPTETimeType60);
pub const kSMPTETimeType5994 = @enumToInt(enum_unnamed_15.kSMPTETimeType5994);
pub const kSMPTETimeType60Drop = @enumToInt(enum_unnamed_15.kSMPTETimeType60Drop);
pub const kSMPTETimeType5994Drop = @enumToInt(enum_unnamed_15.kSMPTETimeType5994Drop);
pub const kSMPTETimeType50 = @enumToInt(enum_unnamed_15.kSMPTETimeType50);
pub const kSMPTETimeType2398 = @enumToInt(enum_unnamed_15.kSMPTETimeType2398);
const enum_unnamed_15 = extern enum(c_int) {
    kSMPTETimeType24 = 0,
    kSMPTETimeType25 = 1,
    kSMPTETimeType30Drop = 2,
    kSMPTETimeType30 = 3,
    kSMPTETimeType2997 = 4,
    kSMPTETimeType2997Drop = 5,
    kSMPTETimeType60 = 6,
    kSMPTETimeType5994 = 7,
    kSMPTETimeType60Drop = 8,
    kSMPTETimeType5994Drop = 9,
    kSMPTETimeType50 = 10,
    kSMPTETimeType2398 = 11,
    _,
};
pub const SMPTETimeFlags = UInt32;
pub const kSMPTETimeUnknown = @enumToInt(enum_unnamed_16.kSMPTETimeUnknown);
pub const kSMPTETimeValid = @enumToInt(enum_unnamed_16.kSMPTETimeValid);
pub const kSMPTETimeRunning = @enumToInt(enum_unnamed_16.kSMPTETimeRunning);
const enum_unnamed_16 = extern enum(c_int) {
    kSMPTETimeUnknown = 0,
    kSMPTETimeValid = 1,
    kSMPTETimeRunning = 2,
    _,
};
pub const struct_SMPTETime = extern struct {
    mSubframes: SInt16,
    mSubframeDivisor: SInt16,
    mCounter: UInt32,
    mType: SMPTETimeType,
    mFlags: SMPTETimeFlags,
    mHours: SInt16,
    mMinutes: SInt16,
    mSeconds: SInt16,
    mFrames: SInt16,
};
pub const SMPTETime = struct_SMPTETime;
pub const AudioTimeStampFlags = UInt32;
pub const kAudioTimeStampNothingValid = @enumToInt(enum_unnamed_17.kAudioTimeStampNothingValid);
pub const kAudioTimeStampSampleTimeValid = @enumToInt(enum_unnamed_17.kAudioTimeStampSampleTimeValid);
pub const kAudioTimeStampHostTimeValid = @enumToInt(enum_unnamed_17.kAudioTimeStampHostTimeValid);
pub const kAudioTimeStampRateScalarValid = @enumToInt(enum_unnamed_17.kAudioTimeStampRateScalarValid);
pub const kAudioTimeStampWordClockTimeValid = @enumToInt(enum_unnamed_17.kAudioTimeStampWordClockTimeValid);
pub const kAudioTimeStampSMPTETimeValid = @enumToInt(enum_unnamed_17.kAudioTimeStampSMPTETimeValid);
pub const kAudioTimeStampSampleHostTimeValid = @enumToInt(enum_unnamed_17.kAudioTimeStampSampleHostTimeValid);
const enum_unnamed_17 = extern enum(c_int) {
    kAudioTimeStampNothingValid = 0,
    kAudioTimeStampSampleTimeValid = 1,
    kAudioTimeStampHostTimeValid = 2,
    kAudioTimeStampRateScalarValid = 4,
    kAudioTimeStampWordClockTimeValid = 8,
    kAudioTimeStampSMPTETimeValid = 16,
    kAudioTimeStampSampleHostTimeValid = 3,
    _,
};
pub const struct_AudioTimeStamp = extern struct {
    mSampleTime: Float64,
    mHostTime: UInt64,
    mRateScalar: Float64,
    mWordClockTime: UInt64,
    mSMPTETime: SMPTETime,
    mFlags: AudioTimeStampFlags,
    mReserved: UInt32,
};
pub const AudioTimeStamp = struct_AudioTimeStamp;
pub const struct_AudioClassDescription = extern struct {
    mType: OSType,
    mSubType: OSType,
    mManufacturer: OSType,
};
pub const AudioClassDescription = struct_AudioClassDescription;
pub const AudioChannelLabel = UInt32;
pub const AudioChannelLayoutTag = UInt32;
pub const kAudioChannelLabel_Unknown = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Unknown);
pub const kAudioChannelLabel_Unused = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Unused);
pub const kAudioChannelLabel_UseCoordinates = @enumToInt(enum_unnamed_18.kAudioChannelLabel_UseCoordinates);
pub const kAudioChannelLabel_Left = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Left);
pub const kAudioChannelLabel_Right = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Right);
pub const kAudioChannelLabel_Center = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Center);
pub const kAudioChannelLabel_LFEScreen = @enumToInt(enum_unnamed_18.kAudioChannelLabel_LFEScreen);
pub const kAudioChannelLabel_LeftSurround = @enumToInt(enum_unnamed_18.kAudioChannelLabel_LeftSurround);
pub const kAudioChannelLabel_RightSurround = @enumToInt(enum_unnamed_18.kAudioChannelLabel_RightSurround);
pub const kAudioChannelLabel_LeftCenter = @enumToInt(enum_unnamed_18.kAudioChannelLabel_LeftCenter);
pub const kAudioChannelLabel_RightCenter = @enumToInt(enum_unnamed_18.kAudioChannelLabel_RightCenter);
pub const kAudioChannelLabel_CenterSurround = @enumToInt(enum_unnamed_18.kAudioChannelLabel_CenterSurround);
pub const kAudioChannelLabel_LeftSurroundDirect = @enumToInt(enum_unnamed_18.kAudioChannelLabel_LeftSurroundDirect);
pub const kAudioChannelLabel_RightSurroundDirect = @enumToInt(enum_unnamed_18.kAudioChannelLabel_RightSurroundDirect);
pub const kAudioChannelLabel_TopCenterSurround = @enumToInt(enum_unnamed_18.kAudioChannelLabel_TopCenterSurround);
pub const kAudioChannelLabel_VerticalHeightLeft = @enumToInt(enum_unnamed_18.kAudioChannelLabel_VerticalHeightLeft);
pub const kAudioChannelLabel_VerticalHeightCenter = @enumToInt(enum_unnamed_18.kAudioChannelLabel_VerticalHeightCenter);
pub const kAudioChannelLabel_VerticalHeightRight = @enumToInt(enum_unnamed_18.kAudioChannelLabel_VerticalHeightRight);
pub const kAudioChannelLabel_TopBackLeft = @enumToInt(enum_unnamed_18.kAudioChannelLabel_TopBackLeft);
pub const kAudioChannelLabel_TopBackCenter = @enumToInt(enum_unnamed_18.kAudioChannelLabel_TopBackCenter);
pub const kAudioChannelLabel_TopBackRight = @enumToInt(enum_unnamed_18.kAudioChannelLabel_TopBackRight);
pub const kAudioChannelLabel_RearSurroundLeft = @enumToInt(enum_unnamed_18.kAudioChannelLabel_RearSurroundLeft);
pub const kAudioChannelLabel_RearSurroundRight = @enumToInt(enum_unnamed_18.kAudioChannelLabel_RearSurroundRight);
pub const kAudioChannelLabel_LeftWide = @enumToInt(enum_unnamed_18.kAudioChannelLabel_LeftWide);
pub const kAudioChannelLabel_RightWide = @enumToInt(enum_unnamed_18.kAudioChannelLabel_RightWide);
pub const kAudioChannelLabel_LFE2 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_LFE2);
pub const kAudioChannelLabel_LeftTotal = @enumToInt(enum_unnamed_18.kAudioChannelLabel_LeftTotal);
pub const kAudioChannelLabel_RightTotal = @enumToInt(enum_unnamed_18.kAudioChannelLabel_RightTotal);
pub const kAudioChannelLabel_HearingImpaired = @enumToInt(enum_unnamed_18.kAudioChannelLabel_HearingImpaired);
pub const kAudioChannelLabel_Narration = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Narration);
pub const kAudioChannelLabel_Mono = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Mono);
pub const kAudioChannelLabel_DialogCentricMix = @enumToInt(enum_unnamed_18.kAudioChannelLabel_DialogCentricMix);
pub const kAudioChannelLabel_CenterSurroundDirect = @enumToInt(enum_unnamed_18.kAudioChannelLabel_CenterSurroundDirect);
pub const kAudioChannelLabel_Haptic = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Haptic);
pub const kAudioChannelLabel_LeftTopFront = @enumToInt(enum_unnamed_18.kAudioChannelLabel_LeftTopFront);
pub const kAudioChannelLabel_CenterTopFront = @enumToInt(enum_unnamed_18.kAudioChannelLabel_CenterTopFront);
pub const kAudioChannelLabel_RightTopFront = @enumToInt(enum_unnamed_18.kAudioChannelLabel_RightTopFront);
pub const kAudioChannelLabel_LeftTopMiddle = @enumToInt(enum_unnamed_18.kAudioChannelLabel_LeftTopMiddle);
pub const kAudioChannelLabel_CenterTopMiddle = @enumToInt(enum_unnamed_18.kAudioChannelLabel_CenterTopMiddle);
pub const kAudioChannelLabel_RightTopMiddle = @enumToInt(enum_unnamed_18.kAudioChannelLabel_RightTopMiddle);
pub const kAudioChannelLabel_LeftTopRear = @enumToInt(enum_unnamed_18.kAudioChannelLabel_LeftTopRear);
pub const kAudioChannelLabel_CenterTopRear = @enumToInt(enum_unnamed_18.kAudioChannelLabel_CenterTopRear);
pub const kAudioChannelLabel_RightTopRear = @enumToInt(enum_unnamed_18.kAudioChannelLabel_RightTopRear);
pub const kAudioChannelLabel_Ambisonic_W = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Ambisonic_W);
pub const kAudioChannelLabel_Ambisonic_X = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Ambisonic_X);
pub const kAudioChannelLabel_Ambisonic_Y = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Ambisonic_Y);
pub const kAudioChannelLabel_Ambisonic_Z = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Ambisonic_Z);
pub const kAudioChannelLabel_MS_Mid = @enumToInt(enum_unnamed_18.kAudioChannelLabel_MS_Mid);
pub const kAudioChannelLabel_MS_Side = @enumToInt(enum_unnamed_18.kAudioChannelLabel_MS_Side);
pub const kAudioChannelLabel_XY_X = @enumToInt(enum_unnamed_18.kAudioChannelLabel_XY_X);
pub const kAudioChannelLabel_XY_Y = @enumToInt(enum_unnamed_18.kAudioChannelLabel_XY_Y);
pub const kAudioChannelLabel_BinauralLeft = @enumToInt(enum_unnamed_18.kAudioChannelLabel_BinauralLeft);
pub const kAudioChannelLabel_BinauralRight = @enumToInt(enum_unnamed_18.kAudioChannelLabel_BinauralRight);
pub const kAudioChannelLabel_HeadphonesLeft = @enumToInt(enum_unnamed_18.kAudioChannelLabel_HeadphonesLeft);
pub const kAudioChannelLabel_HeadphonesRight = @enumToInt(enum_unnamed_18.kAudioChannelLabel_HeadphonesRight);
pub const kAudioChannelLabel_ClickTrack = @enumToInt(enum_unnamed_18.kAudioChannelLabel_ClickTrack);
pub const kAudioChannelLabel_ForeignLanguage = @enumToInt(enum_unnamed_18.kAudioChannelLabel_ForeignLanguage);
pub const kAudioChannelLabel_Discrete = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Discrete);
pub const kAudioChannelLabel_Discrete_0 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Discrete_0);
pub const kAudioChannelLabel_Discrete_1 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Discrete_1);
pub const kAudioChannelLabel_Discrete_2 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Discrete_2);
pub const kAudioChannelLabel_Discrete_3 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Discrete_3);
pub const kAudioChannelLabel_Discrete_4 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Discrete_4);
pub const kAudioChannelLabel_Discrete_5 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Discrete_5);
pub const kAudioChannelLabel_Discrete_6 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Discrete_6);
pub const kAudioChannelLabel_Discrete_7 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Discrete_7);
pub const kAudioChannelLabel_Discrete_8 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Discrete_8);
pub const kAudioChannelLabel_Discrete_9 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Discrete_9);
pub const kAudioChannelLabel_Discrete_10 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Discrete_10);
pub const kAudioChannelLabel_Discrete_11 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Discrete_11);
pub const kAudioChannelLabel_Discrete_12 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Discrete_12);
pub const kAudioChannelLabel_Discrete_13 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Discrete_13);
pub const kAudioChannelLabel_Discrete_14 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Discrete_14);
pub const kAudioChannelLabel_Discrete_15 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Discrete_15);
pub const kAudioChannelLabel_Discrete_65535 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_Discrete_65535);
pub const kAudioChannelLabel_HOA_ACN = @enumToInt(enum_unnamed_18.kAudioChannelLabel_HOA_ACN);
pub const kAudioChannelLabel_HOA_ACN_0 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_HOA_ACN_0);
pub const kAudioChannelLabel_HOA_ACN_1 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_HOA_ACN_1);
pub const kAudioChannelLabel_HOA_ACN_2 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_HOA_ACN_2);
pub const kAudioChannelLabel_HOA_ACN_3 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_HOA_ACN_3);
pub const kAudioChannelLabel_HOA_ACN_4 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_HOA_ACN_4);
pub const kAudioChannelLabel_HOA_ACN_5 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_HOA_ACN_5);
pub const kAudioChannelLabel_HOA_ACN_6 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_HOA_ACN_6);
pub const kAudioChannelLabel_HOA_ACN_7 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_HOA_ACN_7);
pub const kAudioChannelLabel_HOA_ACN_8 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_HOA_ACN_8);
pub const kAudioChannelLabel_HOA_ACN_9 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_HOA_ACN_9);
pub const kAudioChannelLabel_HOA_ACN_10 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_HOA_ACN_10);
pub const kAudioChannelLabel_HOA_ACN_11 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_HOA_ACN_11);
pub const kAudioChannelLabel_HOA_ACN_12 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_HOA_ACN_12);
pub const kAudioChannelLabel_HOA_ACN_13 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_HOA_ACN_13);
pub const kAudioChannelLabel_HOA_ACN_14 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_HOA_ACN_14);
pub const kAudioChannelLabel_HOA_ACN_15 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_HOA_ACN_15);
pub const kAudioChannelLabel_HOA_ACN_65024 = @enumToInt(enum_unnamed_18.kAudioChannelLabel_HOA_ACN_65024);
pub const kAudioChannelLabel_BeginReserved = @enumToInt(enum_unnamed_18.kAudioChannelLabel_BeginReserved);
pub const kAudioChannelLabel_EndReserved = @enumToInt(enum_unnamed_18.kAudioChannelLabel_EndReserved);
const enum_unnamed_18 = extern enum(c_int) {
    kAudioChannelLabel_Unknown = 4294967295,
    kAudioChannelLabel_Unused = 0,
    kAudioChannelLabel_UseCoordinates = 100,
    kAudioChannelLabel_Left = 1,
    kAudioChannelLabel_Right = 2,
    kAudioChannelLabel_Center = 3,
    kAudioChannelLabel_LFEScreen = 4,
    kAudioChannelLabel_LeftSurround = 5,
    kAudioChannelLabel_RightSurround = 6,
    kAudioChannelLabel_LeftCenter = 7,
    kAudioChannelLabel_RightCenter = 8,
    kAudioChannelLabel_CenterSurround = 9,
    kAudioChannelLabel_LeftSurroundDirect = 10,
    kAudioChannelLabel_RightSurroundDirect = 11,
    kAudioChannelLabel_TopCenterSurround = 12,
    kAudioChannelLabel_VerticalHeightLeft = 13,
    kAudioChannelLabel_VerticalHeightCenter = 14,
    kAudioChannelLabel_VerticalHeightRight = 15,
    kAudioChannelLabel_TopBackLeft = 16,
    kAudioChannelLabel_TopBackCenter = 17,
    kAudioChannelLabel_TopBackRight = 18,
    kAudioChannelLabel_RearSurroundLeft = 33,
    kAudioChannelLabel_RearSurroundRight = 34,
    kAudioChannelLabel_LeftWide = 35,
    kAudioChannelLabel_RightWide = 36,
    kAudioChannelLabel_LFE2 = 37,
    kAudioChannelLabel_LeftTotal = 38,
    kAudioChannelLabel_RightTotal = 39,
    kAudioChannelLabel_HearingImpaired = 40,
    kAudioChannelLabel_Narration = 41,
    kAudioChannelLabel_Mono = 42,
    kAudioChannelLabel_DialogCentricMix = 43,
    kAudioChannelLabel_CenterSurroundDirect = 44,
    kAudioChannelLabel_Haptic = 45,
    kAudioChannelLabel_LeftTopFront = 13,
    kAudioChannelLabel_CenterTopFront = 14,
    kAudioChannelLabel_RightTopFront = 15,
    kAudioChannelLabel_LeftTopMiddle = 49,
    kAudioChannelLabel_CenterTopMiddle = 12,
    kAudioChannelLabel_RightTopMiddle = 51,
    kAudioChannelLabel_LeftTopRear = 52,
    kAudioChannelLabel_CenterTopRear = 53,
    kAudioChannelLabel_RightTopRear = 54,
    kAudioChannelLabel_Ambisonic_W = 200,
    kAudioChannelLabel_Ambisonic_X = 201,
    kAudioChannelLabel_Ambisonic_Y = 202,
    kAudioChannelLabel_Ambisonic_Z = 203,
    kAudioChannelLabel_MS_Mid = 204,
    kAudioChannelLabel_MS_Side = 205,
    kAudioChannelLabel_XY_X = 206,
    kAudioChannelLabel_XY_Y = 207,
    kAudioChannelLabel_BinauralLeft = 208,
    kAudioChannelLabel_BinauralRight = 209,
    kAudioChannelLabel_HeadphonesLeft = 301,
    kAudioChannelLabel_HeadphonesRight = 302,
    kAudioChannelLabel_ClickTrack = 304,
    kAudioChannelLabel_ForeignLanguage = 305,
    kAudioChannelLabel_Discrete = 400,
    kAudioChannelLabel_Discrete_0 = 65536,
    kAudioChannelLabel_Discrete_1 = 65537,
    kAudioChannelLabel_Discrete_2 = 65538,
    kAudioChannelLabel_Discrete_3 = 65539,
    kAudioChannelLabel_Discrete_4 = 65540,
    kAudioChannelLabel_Discrete_5 = 65541,
    kAudioChannelLabel_Discrete_6 = 65542,
    kAudioChannelLabel_Discrete_7 = 65543,
    kAudioChannelLabel_Discrete_8 = 65544,
    kAudioChannelLabel_Discrete_9 = 65545,
    kAudioChannelLabel_Discrete_10 = 65546,
    kAudioChannelLabel_Discrete_11 = 65547,
    kAudioChannelLabel_Discrete_12 = 65548,
    kAudioChannelLabel_Discrete_13 = 65549,
    kAudioChannelLabel_Discrete_14 = 65550,
    kAudioChannelLabel_Discrete_15 = 65551,
    kAudioChannelLabel_Discrete_65535 = 131071,
    kAudioChannelLabel_HOA_ACN = 500,
    kAudioChannelLabel_HOA_ACN_0 = 131072,
    kAudioChannelLabel_HOA_ACN_1 = 131073,
    kAudioChannelLabel_HOA_ACN_2 = 131074,
    kAudioChannelLabel_HOA_ACN_3 = 131075,
    kAudioChannelLabel_HOA_ACN_4 = 131076,
    kAudioChannelLabel_HOA_ACN_5 = 131077,
    kAudioChannelLabel_HOA_ACN_6 = 131078,
    kAudioChannelLabel_HOA_ACN_7 = 131079,
    kAudioChannelLabel_HOA_ACN_8 = 131080,
    kAudioChannelLabel_HOA_ACN_9 = 131081,
    kAudioChannelLabel_HOA_ACN_10 = 131082,
    kAudioChannelLabel_HOA_ACN_11 = 131083,
    kAudioChannelLabel_HOA_ACN_12 = 131084,
    kAudioChannelLabel_HOA_ACN_13 = 131085,
    kAudioChannelLabel_HOA_ACN_14 = 131086,
    kAudioChannelLabel_HOA_ACN_15 = 131087,
    kAudioChannelLabel_HOA_ACN_65024 = 196096,
    kAudioChannelLabel_BeginReserved = 4026531840,
    kAudioChannelLabel_EndReserved = 4294967294,
    _,
};
pub const AudioChannelBitmap = UInt32;
pub const kAudioChannelBit_Left = @enumToInt(enum_unnamed_19.kAudioChannelBit_Left);
pub const kAudioChannelBit_Right = @enumToInt(enum_unnamed_19.kAudioChannelBit_Right);
pub const kAudioChannelBit_Center = @enumToInt(enum_unnamed_19.kAudioChannelBit_Center);
pub const kAudioChannelBit_LFEScreen = @enumToInt(enum_unnamed_19.kAudioChannelBit_LFEScreen);
pub const kAudioChannelBit_LeftSurround = @enumToInt(enum_unnamed_19.kAudioChannelBit_LeftSurround);
pub const kAudioChannelBit_RightSurround = @enumToInt(enum_unnamed_19.kAudioChannelBit_RightSurround);
pub const kAudioChannelBit_LeftCenter = @enumToInt(enum_unnamed_19.kAudioChannelBit_LeftCenter);
pub const kAudioChannelBit_RightCenter = @enumToInt(enum_unnamed_19.kAudioChannelBit_RightCenter);
pub const kAudioChannelBit_CenterSurround = @enumToInt(enum_unnamed_19.kAudioChannelBit_CenterSurround);
pub const kAudioChannelBit_LeftSurroundDirect = @enumToInt(enum_unnamed_19.kAudioChannelBit_LeftSurroundDirect);
pub const kAudioChannelBit_RightSurroundDirect = @enumToInt(enum_unnamed_19.kAudioChannelBit_RightSurroundDirect);
pub const kAudioChannelBit_TopCenterSurround = @enumToInt(enum_unnamed_19.kAudioChannelBit_TopCenterSurround);
pub const kAudioChannelBit_VerticalHeightLeft = @enumToInt(enum_unnamed_19.kAudioChannelBit_VerticalHeightLeft);
pub const kAudioChannelBit_VerticalHeightCenter = @enumToInt(enum_unnamed_19.kAudioChannelBit_VerticalHeightCenter);
pub const kAudioChannelBit_VerticalHeightRight = @enumToInt(enum_unnamed_19.kAudioChannelBit_VerticalHeightRight);
pub const kAudioChannelBit_TopBackLeft = @enumToInt(enum_unnamed_19.kAudioChannelBit_TopBackLeft);
pub const kAudioChannelBit_TopBackCenter = @enumToInt(enum_unnamed_19.kAudioChannelBit_TopBackCenter);
pub const kAudioChannelBit_TopBackRight = @enumToInt(enum_unnamed_19.kAudioChannelBit_TopBackRight);
pub const kAudioChannelBit_LeftTopFront = @enumToInt(enum_unnamed_19.kAudioChannelBit_LeftTopFront);
pub const kAudioChannelBit_CenterTopFront = @enumToInt(enum_unnamed_19.kAudioChannelBit_CenterTopFront);
pub const kAudioChannelBit_RightTopFront = @enumToInt(enum_unnamed_19.kAudioChannelBit_RightTopFront);
pub const kAudioChannelBit_LeftTopMiddle = @enumToInt(enum_unnamed_19.kAudioChannelBit_LeftTopMiddle);
pub const kAudioChannelBit_CenterTopMiddle = @enumToInt(enum_unnamed_19.kAudioChannelBit_CenterTopMiddle);
pub const kAudioChannelBit_RightTopMiddle = @enumToInt(enum_unnamed_19.kAudioChannelBit_RightTopMiddle);
pub const kAudioChannelBit_LeftTopRear = @enumToInt(enum_unnamed_19.kAudioChannelBit_LeftTopRear);
pub const kAudioChannelBit_CenterTopRear = @enumToInt(enum_unnamed_19.kAudioChannelBit_CenterTopRear);
pub const kAudioChannelBit_RightTopRear = @enumToInt(enum_unnamed_19.kAudioChannelBit_RightTopRear);
const enum_unnamed_19 = extern enum(c_int) {
    kAudioChannelBit_Left = 1,
    kAudioChannelBit_Right = 2,
    kAudioChannelBit_Center = 4,
    kAudioChannelBit_LFEScreen = 8,
    kAudioChannelBit_LeftSurround = 16,
    kAudioChannelBit_RightSurround = 32,
    kAudioChannelBit_LeftCenter = 64,
    kAudioChannelBit_RightCenter = 128,
    kAudioChannelBit_CenterSurround = 256,
    kAudioChannelBit_LeftSurroundDirect = 512,
    kAudioChannelBit_RightSurroundDirect = 1024,
    kAudioChannelBit_TopCenterSurround = 2048,
    kAudioChannelBit_VerticalHeightLeft = 4096,
    kAudioChannelBit_VerticalHeightCenter = 8192,
    kAudioChannelBit_VerticalHeightRight = 16384,
    kAudioChannelBit_TopBackLeft = 32768,
    kAudioChannelBit_TopBackCenter = 65536,
    kAudioChannelBit_TopBackRight = 131072,
    kAudioChannelBit_LeftTopFront = 4096,
    kAudioChannelBit_CenterTopFront = 8192,
    kAudioChannelBit_RightTopFront = 16384,
    kAudioChannelBit_LeftTopMiddle = 2097152,
    kAudioChannelBit_CenterTopMiddle = 2048,
    kAudioChannelBit_RightTopMiddle = 8388608,
    kAudioChannelBit_LeftTopRear = 16777216,
    kAudioChannelBit_CenterTopRear = 33554432,
    kAudioChannelBit_RightTopRear = 67108864,
    _,
};
pub const AudioChannelFlags = UInt32;
pub const kAudioChannelFlags_AllOff = @enumToInt(enum_unnamed_20.kAudioChannelFlags_AllOff);
pub const kAudioChannelFlags_RectangularCoordinates = @enumToInt(enum_unnamed_20.kAudioChannelFlags_RectangularCoordinates);
pub const kAudioChannelFlags_SphericalCoordinates = @enumToInt(enum_unnamed_20.kAudioChannelFlags_SphericalCoordinates);
pub const kAudioChannelFlags_Meters = @enumToInt(enum_unnamed_20.kAudioChannelFlags_Meters);
const enum_unnamed_20 = extern enum(c_int) {
    kAudioChannelFlags_AllOff = 0,
    kAudioChannelFlags_RectangularCoordinates = 1,
    kAudioChannelFlags_SphericalCoordinates = 2,
    kAudioChannelFlags_Meters = 4,
    _,
};
pub const AudioChannelCoordinateIndex = UInt32;
pub const kAudioChannelCoordinates_LeftRight = @enumToInt(enum_unnamed_21.kAudioChannelCoordinates_LeftRight);
pub const kAudioChannelCoordinates_BackFront = @enumToInt(enum_unnamed_21.kAudioChannelCoordinates_BackFront);
pub const kAudioChannelCoordinates_DownUp = @enumToInt(enum_unnamed_21.kAudioChannelCoordinates_DownUp);
pub const kAudioChannelCoordinates_Azimuth = @enumToInt(enum_unnamed_21.kAudioChannelCoordinates_Azimuth);
pub const kAudioChannelCoordinates_Elevation = @enumToInt(enum_unnamed_21.kAudioChannelCoordinates_Elevation);
pub const kAudioChannelCoordinates_Distance = @enumToInt(enum_unnamed_21.kAudioChannelCoordinates_Distance);
const enum_unnamed_21 = extern enum(c_int) {
    kAudioChannelCoordinates_LeftRight = 0,
    kAudioChannelCoordinates_BackFront = 1,
    kAudioChannelCoordinates_DownUp = 2,
    kAudioChannelCoordinates_Azimuth = 0,
    kAudioChannelCoordinates_Elevation = 1,
    kAudioChannelCoordinates_Distance = 2,
    _,
};
pub const kAudioChannelLayoutTag_UseChannelDescriptions = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_UseChannelDescriptions);
pub const kAudioChannelLayoutTag_UseChannelBitmap = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_UseChannelBitmap);
pub const kAudioChannelLayoutTag_Mono = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_Mono);
pub const kAudioChannelLayoutTag_Stereo = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_Stereo);
pub const kAudioChannelLayoutTag_StereoHeadphones = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_StereoHeadphones);
pub const kAudioChannelLayoutTag_MatrixStereo = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_MatrixStereo);
pub const kAudioChannelLayoutTag_MidSide = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_MidSide);
pub const kAudioChannelLayoutTag_XY = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_XY);
pub const kAudioChannelLayoutTag_Binaural = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_Binaural);
pub const kAudioChannelLayoutTag_Ambisonic_B_Format = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_Ambisonic_B_Format);
pub const kAudioChannelLayoutTag_Quadraphonic = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_Quadraphonic);
pub const kAudioChannelLayoutTag_Pentagonal = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_Pentagonal);
pub const kAudioChannelLayoutTag_Hexagonal = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_Hexagonal);
pub const kAudioChannelLayoutTag_Octagonal = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_Octagonal);
pub const kAudioChannelLayoutTag_Cube = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_Cube);
pub const kAudioChannelLayoutTag_MPEG_1_0 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_MPEG_1_0);
pub const kAudioChannelLayoutTag_MPEG_2_0 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_MPEG_2_0);
pub const kAudioChannelLayoutTag_MPEG_3_0_A = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_MPEG_3_0_A);
pub const kAudioChannelLayoutTag_MPEG_3_0_B = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_MPEG_3_0_B);
pub const kAudioChannelLayoutTag_MPEG_4_0_A = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_MPEG_4_0_A);
pub const kAudioChannelLayoutTag_MPEG_4_0_B = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_MPEG_4_0_B);
pub const kAudioChannelLayoutTag_MPEG_5_0_A = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_MPEG_5_0_A);
pub const kAudioChannelLayoutTag_MPEG_5_0_B = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_MPEG_5_0_B);
pub const kAudioChannelLayoutTag_MPEG_5_0_C = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_MPEG_5_0_C);
pub const kAudioChannelLayoutTag_MPEG_5_0_D = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_MPEG_5_0_D);
pub const kAudioChannelLayoutTag_MPEG_5_1_A = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_MPEG_5_1_A);
pub const kAudioChannelLayoutTag_MPEG_5_1_B = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_MPEG_5_1_B);
pub const kAudioChannelLayoutTag_MPEG_5_1_C = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_MPEG_5_1_C);
pub const kAudioChannelLayoutTag_MPEG_5_1_D = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_MPEG_5_1_D);
pub const kAudioChannelLayoutTag_MPEG_6_1_A = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_MPEG_6_1_A);
pub const kAudioChannelLayoutTag_MPEG_7_1_A = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_MPEG_7_1_A);
pub const kAudioChannelLayoutTag_MPEG_7_1_B = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_MPEG_7_1_B);
pub const kAudioChannelLayoutTag_MPEG_7_1_C = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_MPEG_7_1_C);
pub const kAudioChannelLayoutTag_Emagic_Default_7_1 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_Emagic_Default_7_1);
pub const kAudioChannelLayoutTag_SMPTE_DTV = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_SMPTE_DTV);
pub const kAudioChannelLayoutTag_ITU_1_0 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_ITU_1_0);
pub const kAudioChannelLayoutTag_ITU_2_0 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_ITU_2_0);
pub const kAudioChannelLayoutTag_ITU_2_1 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_ITU_2_1);
pub const kAudioChannelLayoutTag_ITU_2_2 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_ITU_2_2);
pub const kAudioChannelLayoutTag_ITU_3_0 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_ITU_3_0);
pub const kAudioChannelLayoutTag_ITU_3_1 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_ITU_3_1);
pub const kAudioChannelLayoutTag_ITU_3_2 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_ITU_3_2);
pub const kAudioChannelLayoutTag_ITU_3_2_1 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_ITU_3_2_1);
pub const kAudioChannelLayoutTag_ITU_3_4_1 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_ITU_3_4_1);
pub const kAudioChannelLayoutTag_DVD_0 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DVD_0);
pub const kAudioChannelLayoutTag_DVD_1 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DVD_1);
pub const kAudioChannelLayoutTag_DVD_2 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DVD_2);
pub const kAudioChannelLayoutTag_DVD_3 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DVD_3);
pub const kAudioChannelLayoutTag_DVD_4 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DVD_4);
pub const kAudioChannelLayoutTag_DVD_5 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DVD_5);
pub const kAudioChannelLayoutTag_DVD_6 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DVD_6);
pub const kAudioChannelLayoutTag_DVD_7 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DVD_7);
pub const kAudioChannelLayoutTag_DVD_8 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DVD_8);
pub const kAudioChannelLayoutTag_DVD_9 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DVD_9);
pub const kAudioChannelLayoutTag_DVD_10 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DVD_10);
pub const kAudioChannelLayoutTag_DVD_11 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DVD_11);
pub const kAudioChannelLayoutTag_DVD_12 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DVD_12);
pub const kAudioChannelLayoutTag_DVD_13 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DVD_13);
pub const kAudioChannelLayoutTag_DVD_14 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DVD_14);
pub const kAudioChannelLayoutTag_DVD_15 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DVD_15);
pub const kAudioChannelLayoutTag_DVD_16 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DVD_16);
pub const kAudioChannelLayoutTag_DVD_17 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DVD_17);
pub const kAudioChannelLayoutTag_DVD_18 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DVD_18);
pub const kAudioChannelLayoutTag_DVD_19 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DVD_19);
pub const kAudioChannelLayoutTag_DVD_20 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DVD_20);
pub const kAudioChannelLayoutTag_AudioUnit_4 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AudioUnit_4);
pub const kAudioChannelLayoutTag_AudioUnit_5 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AudioUnit_5);
pub const kAudioChannelLayoutTag_AudioUnit_6 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AudioUnit_6);
pub const kAudioChannelLayoutTag_AudioUnit_8 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AudioUnit_8);
pub const kAudioChannelLayoutTag_AudioUnit_5_0 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AudioUnit_5_0);
pub const kAudioChannelLayoutTag_AudioUnit_6_0 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AudioUnit_6_0);
pub const kAudioChannelLayoutTag_AudioUnit_7_0 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AudioUnit_7_0);
pub const kAudioChannelLayoutTag_AudioUnit_7_0_Front = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AudioUnit_7_0_Front);
pub const kAudioChannelLayoutTag_AudioUnit_5_1 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AudioUnit_5_1);
pub const kAudioChannelLayoutTag_AudioUnit_6_1 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AudioUnit_6_1);
pub const kAudioChannelLayoutTag_AudioUnit_7_1 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AudioUnit_7_1);
pub const kAudioChannelLayoutTag_AudioUnit_7_1_Front = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AudioUnit_7_1_Front);
pub const kAudioChannelLayoutTag_AAC_3_0 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AAC_3_0);
pub const kAudioChannelLayoutTag_AAC_Quadraphonic = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AAC_Quadraphonic);
pub const kAudioChannelLayoutTag_AAC_4_0 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AAC_4_0);
pub const kAudioChannelLayoutTag_AAC_5_0 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AAC_5_0);
pub const kAudioChannelLayoutTag_AAC_5_1 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AAC_5_1);
pub const kAudioChannelLayoutTag_AAC_6_0 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AAC_6_0);
pub const kAudioChannelLayoutTag_AAC_6_1 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AAC_6_1);
pub const kAudioChannelLayoutTag_AAC_7_0 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AAC_7_0);
pub const kAudioChannelLayoutTag_AAC_7_1 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AAC_7_1);
pub const kAudioChannelLayoutTag_AAC_7_1_B = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AAC_7_1_B);
pub const kAudioChannelLayoutTag_AAC_7_1_C = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AAC_7_1_C);
pub const kAudioChannelLayoutTag_AAC_Octagonal = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AAC_Octagonal);
pub const kAudioChannelLayoutTag_TMH_10_2_std = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_TMH_10_2_std);
pub const kAudioChannelLayoutTag_TMH_10_2_full = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_TMH_10_2_full);
pub const kAudioChannelLayoutTag_AC3_1_0_1 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AC3_1_0_1);
pub const kAudioChannelLayoutTag_AC3_3_0 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AC3_3_0);
pub const kAudioChannelLayoutTag_AC3_3_1 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AC3_3_1);
pub const kAudioChannelLayoutTag_AC3_3_0_1 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AC3_3_0_1);
pub const kAudioChannelLayoutTag_AC3_2_1_1 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AC3_2_1_1);
pub const kAudioChannelLayoutTag_AC3_3_1_1 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_AC3_3_1_1);
pub const kAudioChannelLayoutTag_EAC_6_0_A = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_EAC_6_0_A);
pub const kAudioChannelLayoutTag_EAC_7_0_A = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_EAC_7_0_A);
pub const kAudioChannelLayoutTag_EAC3_6_1_A = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_EAC3_6_1_A);
pub const kAudioChannelLayoutTag_EAC3_6_1_B = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_EAC3_6_1_B);
pub const kAudioChannelLayoutTag_EAC3_6_1_C = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_EAC3_6_1_C);
pub const kAudioChannelLayoutTag_EAC3_7_1_A = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_EAC3_7_1_A);
pub const kAudioChannelLayoutTag_EAC3_7_1_B = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_EAC3_7_1_B);
pub const kAudioChannelLayoutTag_EAC3_7_1_C = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_EAC3_7_1_C);
pub const kAudioChannelLayoutTag_EAC3_7_1_D = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_EAC3_7_1_D);
pub const kAudioChannelLayoutTag_EAC3_7_1_E = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_EAC3_7_1_E);
pub const kAudioChannelLayoutTag_EAC3_7_1_F = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_EAC3_7_1_F);
pub const kAudioChannelLayoutTag_EAC3_7_1_G = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_EAC3_7_1_G);
pub const kAudioChannelLayoutTag_EAC3_7_1_H = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_EAC3_7_1_H);
pub const kAudioChannelLayoutTag_DTS_3_1 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DTS_3_1);
pub const kAudioChannelLayoutTag_DTS_4_1 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DTS_4_1);
pub const kAudioChannelLayoutTag_DTS_6_0_A = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DTS_6_0_A);
pub const kAudioChannelLayoutTag_DTS_6_0_B = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DTS_6_0_B);
pub const kAudioChannelLayoutTag_DTS_6_0_C = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DTS_6_0_C);
pub const kAudioChannelLayoutTag_DTS_6_1_A = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DTS_6_1_A);
pub const kAudioChannelLayoutTag_DTS_6_1_B = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DTS_6_1_B);
pub const kAudioChannelLayoutTag_DTS_6_1_C = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DTS_6_1_C);
pub const kAudioChannelLayoutTag_DTS_7_0 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DTS_7_0);
pub const kAudioChannelLayoutTag_DTS_7_1 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DTS_7_1);
pub const kAudioChannelLayoutTag_DTS_8_0_A = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DTS_8_0_A);
pub const kAudioChannelLayoutTag_DTS_8_0_B = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DTS_8_0_B);
pub const kAudioChannelLayoutTag_DTS_8_1_A = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DTS_8_1_A);
pub const kAudioChannelLayoutTag_DTS_8_1_B = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DTS_8_1_B);
pub const kAudioChannelLayoutTag_DTS_6_1_D = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DTS_6_1_D);
pub const kAudioChannelLayoutTag_WAVE_2_1 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_WAVE_2_1);
pub const kAudioChannelLayoutTag_WAVE_3_0 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_WAVE_3_0);
pub const kAudioChannelLayoutTag_WAVE_4_0_A = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_WAVE_4_0_A);
pub const kAudioChannelLayoutTag_WAVE_4_0_B = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_WAVE_4_0_B);
pub const kAudioChannelLayoutTag_WAVE_5_0_A = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_WAVE_5_0_A);
pub const kAudioChannelLayoutTag_WAVE_5_0_B = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_WAVE_5_0_B);
pub const kAudioChannelLayoutTag_WAVE_5_1_A = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_WAVE_5_1_A);
pub const kAudioChannelLayoutTag_WAVE_5_1_B = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_WAVE_5_1_B);
pub const kAudioChannelLayoutTag_WAVE_6_1 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_WAVE_6_1);
pub const kAudioChannelLayoutTag_WAVE_7_1 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_WAVE_7_1);
pub const kAudioChannelLayoutTag_HOA_ACN_SN3D = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_HOA_ACN_SN3D);
pub const kAudioChannelLayoutTag_HOA_ACN_N3D = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_HOA_ACN_N3D);
pub const kAudioChannelLayoutTag_Atmos_7_1_4 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_Atmos_7_1_4);
pub const kAudioChannelLayoutTag_Atmos_9_1_6 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_Atmos_9_1_6);
pub const kAudioChannelLayoutTag_Atmos_5_1_2 = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_Atmos_5_1_2);
pub const kAudioChannelLayoutTag_DiscreteInOrder = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_DiscreteInOrder);
pub const kAudioChannelLayoutTag_BeginReserved = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_BeginReserved);
pub const kAudioChannelLayoutTag_EndReserved = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_EndReserved);
pub const kAudioChannelLayoutTag_Unknown = @enumToInt(enum_unnamed_22.kAudioChannelLayoutTag_Unknown);
const enum_unnamed_22 = extern enum(c_int) {
    kAudioChannelLayoutTag_UseChannelDescriptions = 0,
    kAudioChannelLayoutTag_UseChannelBitmap = 65536,
    kAudioChannelLayoutTag_Mono = 6553601,
    kAudioChannelLayoutTag_Stereo = 6619138,
    kAudioChannelLayoutTag_StereoHeadphones = 6684674,
    kAudioChannelLayoutTag_MatrixStereo = 6750210,
    kAudioChannelLayoutTag_MidSide = 6815746,
    kAudioChannelLayoutTag_XY = 6881282,
    kAudioChannelLayoutTag_Binaural = 6946818,
    kAudioChannelLayoutTag_Ambisonic_B_Format = 7012356,
    kAudioChannelLayoutTag_Quadraphonic = 7077892,
    kAudioChannelLayoutTag_Pentagonal = 7143429,
    kAudioChannelLayoutTag_Hexagonal = 7208966,
    kAudioChannelLayoutTag_Octagonal = 7274504,
    kAudioChannelLayoutTag_Cube = 7340040,
    kAudioChannelLayoutTag_MPEG_1_0 = 6553601,
    kAudioChannelLayoutTag_MPEG_2_0 = 6619138,
    kAudioChannelLayoutTag_MPEG_3_0_A = 7405571,
    kAudioChannelLayoutTag_MPEG_3_0_B = 7471107,
    kAudioChannelLayoutTag_MPEG_4_0_A = 7536644,
    kAudioChannelLayoutTag_MPEG_4_0_B = 7602180,
    kAudioChannelLayoutTag_MPEG_5_0_A = 7667717,
    kAudioChannelLayoutTag_MPEG_5_0_B = 7733253,
    kAudioChannelLayoutTag_MPEG_5_0_C = 7798789,
    kAudioChannelLayoutTag_MPEG_5_0_D = 7864325,
    kAudioChannelLayoutTag_MPEG_5_1_A = 7929862,
    kAudioChannelLayoutTag_MPEG_5_1_B = 7995398,
    kAudioChannelLayoutTag_MPEG_5_1_C = 8060934,
    kAudioChannelLayoutTag_MPEG_5_1_D = 8126470,
    kAudioChannelLayoutTag_MPEG_6_1_A = 8192007,
    kAudioChannelLayoutTag_MPEG_7_1_A = 8257544,
    kAudioChannelLayoutTag_MPEG_7_1_B = 8323080,
    kAudioChannelLayoutTag_MPEG_7_1_C = 8388616,
    kAudioChannelLayoutTag_Emagic_Default_7_1 = 8454152,
    kAudioChannelLayoutTag_SMPTE_DTV = 8519688,
    kAudioChannelLayoutTag_ITU_1_0 = 6553601,
    kAudioChannelLayoutTag_ITU_2_0 = 6619138,
    kAudioChannelLayoutTag_ITU_2_1 = 8585219,
    kAudioChannelLayoutTag_ITU_2_2 = 8650756,
    kAudioChannelLayoutTag_ITU_3_0 = 7405571,
    kAudioChannelLayoutTag_ITU_3_1 = 7536644,
    kAudioChannelLayoutTag_ITU_3_2 = 7667717,
    kAudioChannelLayoutTag_ITU_3_2_1 = 7929862,
    kAudioChannelLayoutTag_ITU_3_4_1 = 8388616,
    kAudioChannelLayoutTag_DVD_0 = 6553601,
    kAudioChannelLayoutTag_DVD_1 = 6619138,
    kAudioChannelLayoutTag_DVD_2 = 8585219,
    kAudioChannelLayoutTag_DVD_3 = 8650756,
    kAudioChannelLayoutTag_DVD_4 = 8716291,
    kAudioChannelLayoutTag_DVD_5 = 8781828,
    kAudioChannelLayoutTag_DVD_6 = 8847365,
    kAudioChannelLayoutTag_DVD_7 = 7405571,
    kAudioChannelLayoutTag_DVD_8 = 7536644,
    kAudioChannelLayoutTag_DVD_9 = 7667717,
    kAudioChannelLayoutTag_DVD_10 = 8912900,
    kAudioChannelLayoutTag_DVD_11 = 8978437,
    kAudioChannelLayoutTag_DVD_12 = 7929862,
    kAudioChannelLayoutTag_DVD_13 = 7536644,
    kAudioChannelLayoutTag_DVD_14 = 7667717,
    kAudioChannelLayoutTag_DVD_15 = 8912900,
    kAudioChannelLayoutTag_DVD_16 = 8978437,
    kAudioChannelLayoutTag_DVD_17 = 7929862,
    kAudioChannelLayoutTag_DVD_18 = 9043973,
    kAudioChannelLayoutTag_DVD_19 = 7733253,
    kAudioChannelLayoutTag_DVD_20 = 7995398,
    kAudioChannelLayoutTag_AudioUnit_4 = 7077892,
    kAudioChannelLayoutTag_AudioUnit_5 = 7143429,
    kAudioChannelLayoutTag_AudioUnit_6 = 7208966,
    kAudioChannelLayoutTag_AudioUnit_8 = 7274504,
    kAudioChannelLayoutTag_AudioUnit_5_0 = 7733253,
    kAudioChannelLayoutTag_AudioUnit_6_0 = 9109510,
    kAudioChannelLayoutTag_AudioUnit_7_0 = 9175047,
    kAudioChannelLayoutTag_AudioUnit_7_0_Front = 9699335,
    kAudioChannelLayoutTag_AudioUnit_5_1 = 7929862,
    kAudioChannelLayoutTag_AudioUnit_6_1 = 8192007,
    kAudioChannelLayoutTag_AudioUnit_7_1 = 8388616,
    kAudioChannelLayoutTag_AudioUnit_7_1_Front = 8257544,
    kAudioChannelLayoutTag_AAC_3_0 = 7471107,
    kAudioChannelLayoutTag_AAC_Quadraphonic = 7077892,
    kAudioChannelLayoutTag_AAC_4_0 = 7602180,
    kAudioChannelLayoutTag_AAC_5_0 = 7864325,
    kAudioChannelLayoutTag_AAC_5_1 = 8126470,
    kAudioChannelLayoutTag_AAC_6_0 = 9240582,
    kAudioChannelLayoutTag_AAC_6_1 = 9306119,
    kAudioChannelLayoutTag_AAC_7_0 = 9371655,
    kAudioChannelLayoutTag_AAC_7_1 = 8323080,
    kAudioChannelLayoutTag_AAC_7_1_B = 11993096,
    kAudioChannelLayoutTag_AAC_7_1_C = 12058632,
    kAudioChannelLayoutTag_AAC_Octagonal = 9437192,
    kAudioChannelLayoutTag_TMH_10_2_std = 9502736,
    kAudioChannelLayoutTag_TMH_10_2_full = 9568277,
    kAudioChannelLayoutTag_AC3_1_0_1 = 9764866,
    kAudioChannelLayoutTag_AC3_3_0 = 9830403,
    kAudioChannelLayoutTag_AC3_3_1 = 9895940,
    kAudioChannelLayoutTag_AC3_3_0_1 = 9961476,
    kAudioChannelLayoutTag_AC3_2_1_1 = 10027012,
    kAudioChannelLayoutTag_AC3_3_1_1 = 10092549,
    kAudioChannelLayoutTag_EAC_6_0_A = 10158086,
    kAudioChannelLayoutTag_EAC_7_0_A = 10223623,
    kAudioChannelLayoutTag_EAC3_6_1_A = 10289159,
    kAudioChannelLayoutTag_EAC3_6_1_B = 10354695,
    kAudioChannelLayoutTag_EAC3_6_1_C = 10420231,
    kAudioChannelLayoutTag_EAC3_7_1_A = 10485768,
    kAudioChannelLayoutTag_EAC3_7_1_B = 10551304,
    kAudioChannelLayoutTag_EAC3_7_1_C = 10616840,
    kAudioChannelLayoutTag_EAC3_7_1_D = 10682376,
    kAudioChannelLayoutTag_EAC3_7_1_E = 10747912,
    kAudioChannelLayoutTag_EAC3_7_1_F = 10813448,
    kAudioChannelLayoutTag_EAC3_7_1_G = 10878984,
    kAudioChannelLayoutTag_EAC3_7_1_H = 10944520,
    kAudioChannelLayoutTag_DTS_3_1 = 11010052,
    kAudioChannelLayoutTag_DTS_4_1 = 11075589,
    kAudioChannelLayoutTag_DTS_6_0_A = 11141126,
    kAudioChannelLayoutTag_DTS_6_0_B = 11206662,
    kAudioChannelLayoutTag_DTS_6_0_C = 11272198,
    kAudioChannelLayoutTag_DTS_6_1_A = 11337735,
    kAudioChannelLayoutTag_DTS_6_1_B = 11403271,
    kAudioChannelLayoutTag_DTS_6_1_C = 11468807,
    kAudioChannelLayoutTag_DTS_7_0 = 11534343,
    kAudioChannelLayoutTag_DTS_7_1 = 11599880,
    kAudioChannelLayoutTag_DTS_8_0_A = 11665416,
    kAudioChannelLayoutTag_DTS_8_0_B = 11730952,
    kAudioChannelLayoutTag_DTS_8_1_A = 11796489,
    kAudioChannelLayoutTag_DTS_8_1_B = 11862025,
    kAudioChannelLayoutTag_DTS_6_1_D = 11927559,
    kAudioChannelLayoutTag_WAVE_2_1 = 8716291,
    kAudioChannelLayoutTag_WAVE_3_0 = 7405571,
    kAudioChannelLayoutTag_WAVE_4_0_A = 8650756,
    kAudioChannelLayoutTag_WAVE_4_0_B = 12124164,
    kAudioChannelLayoutTag_WAVE_5_0_A = 7667717,
    kAudioChannelLayoutTag_WAVE_5_0_B = 12189701,
    kAudioChannelLayoutTag_WAVE_5_1_A = 7929862,
    kAudioChannelLayoutTag_WAVE_5_1_B = 12255238,
    kAudioChannelLayoutTag_WAVE_6_1 = 12320775,
    kAudioChannelLayoutTag_WAVE_7_1 = 12386312,
    kAudioChannelLayoutTag_HOA_ACN_SN3D = 12451840,
    kAudioChannelLayoutTag_HOA_ACN_N3D = 12517376,
    kAudioChannelLayoutTag_Atmos_7_1_4 = 12582924,
    kAudioChannelLayoutTag_Atmos_9_1_6 = 12648464,
    kAudioChannelLayoutTag_Atmos_5_1_2 = 12713992,
    kAudioChannelLayoutTag_DiscreteInOrder = 9633792,
    kAudioChannelLayoutTag_BeginReserved = 4026531840,
    kAudioChannelLayoutTag_EndReserved = 4294901759,
    kAudioChannelLayoutTag_Unknown = 4294901760,
    _,
};
pub const struct_AudioChannelDescription = extern struct {
    mChannelLabel: AudioChannelLabel,
    mChannelFlags: AudioChannelFlags,
    mCoordinates: [3]Float32,
};
pub const AudioChannelDescription = struct_AudioChannelDescription;
pub const struct_AudioChannelLayout = extern struct {
    mChannelLayoutTag: AudioChannelLayoutTag,
    mChannelBitmap: AudioChannelBitmap,
    mNumberChannelDescriptions: UInt32,
    mChannelDescriptions: [1]AudioChannelDescription,
};
pub const AudioChannelLayout = struct_AudioChannelLayout;
pub fn AudioChannelLayoutTag_GetNumberOfChannels(arg_inLayoutTag: AudioChannelLayoutTag) callconv(.C) UInt32 {
    var inLayoutTag = arg_inLayoutTag;
    return @bitCast(UInt32, (inLayoutTag & @bitCast(c_uint, @as(c_int, 65535))));
}
pub const struct_AudioFormatListItem = extern struct {
    mASBD: AudioStreamBasicDescription,
    mChannelLayoutTag: AudioChannelLayoutTag,
};
pub const AudioFormatListItem = struct_AudioFormatListItem;
pub const MPEG4ObjectID = c_long;
pub const kMPEG4Object_AAC_Main = @enumToInt(enum_unnamed_23.kMPEG4Object_AAC_Main);
pub const kMPEG4Object_AAC_LC = @enumToInt(enum_unnamed_23.kMPEG4Object_AAC_LC);
pub const kMPEG4Object_AAC_SSR = @enumToInt(enum_unnamed_23.kMPEG4Object_AAC_SSR);
pub const kMPEG4Object_AAC_LTP = @enumToInt(enum_unnamed_23.kMPEG4Object_AAC_LTP);
pub const kMPEG4Object_AAC_SBR = @enumToInt(enum_unnamed_23.kMPEG4Object_AAC_SBR);
pub const kMPEG4Object_AAC_Scalable = @enumToInt(enum_unnamed_23.kMPEG4Object_AAC_Scalable);
pub const kMPEG4Object_TwinVQ = @enumToInt(enum_unnamed_23.kMPEG4Object_TwinVQ);
pub const kMPEG4Object_CELP = @enumToInt(enum_unnamed_23.kMPEG4Object_CELP);
pub const kMPEG4Object_HVXC = @enumToInt(enum_unnamed_23.kMPEG4Object_HVXC);
const enum_unnamed_23 = extern enum(c_int) {
    kMPEG4Object_AAC_Main = 1,
    kMPEG4Object_AAC_LC = 2,
    kMPEG4Object_AAC_SSR = 3,
    kMPEG4Object_AAC_LTP = 4,
    kMPEG4Object_AAC_SBR = 5,
    kMPEG4Object_AAC_Scalable = 6,
    kMPEG4Object_TwinVQ = 7,
    kMPEG4Object_CELP = 8,
    kMPEG4Object_HVXC = 9,
    _,
};
pub const AVAudioInteger = c_long;
pub const AVAudioUInteger = c_ulong;
pub const AVAudioSessionErrorCode = AVAudioInteger;
pub const AVAudioSessionErrorCodeNone = @enumToInt(enum_unnamed_24.AVAudioSessionErrorCodeNone);
pub const AVAudioSessionErrorCodeMediaServicesFailed = @enumToInt(enum_unnamed_24.AVAudioSessionErrorCodeMediaServicesFailed);
pub const AVAudioSessionErrorCodeIsBusy = @enumToInt(enum_unnamed_24.AVAudioSessionErrorCodeIsBusy);
pub const AVAudioSessionErrorCodeIncompatibleCategory = @enumToInt(enum_unnamed_24.AVAudioSessionErrorCodeIncompatibleCategory);
pub const AVAudioSessionErrorCodeCannotInterruptOthers = @enumToInt(enum_unnamed_24.AVAudioSessionErrorCodeCannotInterruptOthers);
pub const AVAudioSessionErrorCodeMissingEntitlement = @enumToInt(enum_unnamed_24.AVAudioSessionErrorCodeMissingEntitlement);
pub const AVAudioSessionErrorCodeSiriIsRecording = @enumToInt(enum_unnamed_24.AVAudioSessionErrorCodeSiriIsRecording);
pub const AVAudioSessionErrorCodeCannotStartPlaying = @enumToInt(enum_unnamed_24.AVAudioSessionErrorCodeCannotStartPlaying);
pub const AVAudioSessionErrorCodeCannotStartRecording = @enumToInt(enum_unnamed_24.AVAudioSessionErrorCodeCannotStartRecording);
pub const AVAudioSessionErrorCodeBadParam = @enumToInt(enum_unnamed_24.AVAudioSessionErrorCodeBadParam);
pub const AVAudioSessionErrorCodeInsufficientPriority = @enumToInt(enum_unnamed_24.AVAudioSessionErrorCodeInsufficientPriority);
pub const AVAudioSessionErrorCodeResourceNotAvailable = @enumToInt(enum_unnamed_24.AVAudioSessionErrorCodeResourceNotAvailable);
pub const AVAudioSessionErrorCodeUnspecified = @enumToInt(enum_unnamed_24.AVAudioSessionErrorCodeUnspecified);
pub const AVAudioSessionErrorCodeExpiredSession = @enumToInt(enum_unnamed_24.AVAudioSessionErrorCodeExpiredSession);
pub const AVAudioSessionErrorCodeSessionNotActive = @enumToInt(enum_unnamed_24.AVAudioSessionErrorCodeSessionNotActive);
const enum_unnamed_24 = extern enum(c_int) {
    AVAudioSessionErrorCodeNone = 0,
    AVAudioSessionErrorCodeMediaServicesFailed = 1836282486,
    AVAudioSessionErrorCodeIsBusy = 560030580,
    AVAudioSessionErrorCodeIncompatibleCategory = 560161140,
    AVAudioSessionErrorCodeCannotInterruptOthers = 560557684,
    AVAudioSessionErrorCodeMissingEntitlement = 1701737535,
    AVAudioSessionErrorCodeSiriIsRecording = 1936290409,
    AVAudioSessionErrorCodeCannotStartPlaying = 561015905,
    AVAudioSessionErrorCodeCannotStartRecording = 561145187,
    AVAudioSessionErrorCodeBadParam = -50,
    AVAudioSessionErrorCodeInsufficientPriority = 561017449,
    AVAudioSessionErrorCodeResourceNotAvailable = 561145203,
    AVAudioSessionErrorCodeUnspecified = 2003329396,
    AVAudioSessionErrorCodeExpiredSession = 561210739,
    AVAudioSessionErrorCodeSessionNotActive = 1768841571,
    _,
};
pub const AVAudioSessionErrorInsufficientPriority = @enumToInt(enum_unnamed_25.AVAudioSessionErrorInsufficientPriority);
const enum_unnamed_25 = extern enum(c_int) {
    AVAudioSessionErrorInsufficientPriority = 561017449,
    _,
};
pub const AudioObjectID = UInt32;
pub const AudioClassID = UInt32;
pub const AudioObjectPropertySelector = UInt32;
pub const AudioObjectPropertyScope = UInt32;
pub const AudioObjectPropertyElement = UInt32;
pub const struct_AudioObjectPropertyAddress = extern struct {
    mSelector: AudioObjectPropertySelector,
    mScope: AudioObjectPropertyScope,
    mElement: AudioObjectPropertyElement,
};
pub const AudioObjectPropertyAddress = struct_AudioObjectPropertyAddress;
pub const kAudioHardwareNoError = @enumToInt(enum_unnamed_26.kAudioHardwareNoError);
pub const kAudioHardwareNotRunningError = @enumToInt(enum_unnamed_26.kAudioHardwareNotRunningError);
pub const kAudioHardwareUnspecifiedError = @enumToInt(enum_unnamed_26.kAudioHardwareUnspecifiedError);
pub const kAudioHardwareUnknownPropertyError = @enumToInt(enum_unnamed_26.kAudioHardwareUnknownPropertyError);
pub const kAudioHardwareBadPropertySizeError = @enumToInt(enum_unnamed_26.kAudioHardwareBadPropertySizeError);
pub const kAudioHardwareIllegalOperationError = @enumToInt(enum_unnamed_26.kAudioHardwareIllegalOperationError);
pub const kAudioHardwareBadObjectError = @enumToInt(enum_unnamed_26.kAudioHardwareBadObjectError);
pub const kAudioHardwareBadDeviceError = @enumToInt(enum_unnamed_26.kAudioHardwareBadDeviceError);
pub const kAudioHardwareBadStreamError = @enumToInt(enum_unnamed_26.kAudioHardwareBadStreamError);
pub const kAudioHardwareUnsupportedOperationError = @enumToInt(enum_unnamed_26.kAudioHardwareUnsupportedOperationError);
pub const kAudioDeviceUnsupportedFormatError = @enumToInt(enum_unnamed_26.kAudioDeviceUnsupportedFormatError);
pub const kAudioDevicePermissionsError = @enumToInt(enum_unnamed_26.kAudioDevicePermissionsError);
const enum_unnamed_26 = extern enum(c_int) {
    kAudioHardwareNoError = 0,
    kAudioHardwareNotRunningError = 1937010544,
    kAudioHardwareUnspecifiedError = 2003329396,
    kAudioHardwareUnknownPropertyError = 2003332927,
    kAudioHardwareBadPropertySizeError = 561211770,
    kAudioHardwareIllegalOperationError = 1852797029,
    kAudioHardwareBadObjectError = 560947818,
    kAudioHardwareBadDeviceError = 560227702,
    kAudioHardwareBadStreamError = 561214578,
    kAudioHardwareUnsupportedOperationError = 1970171760,
    kAudioDeviceUnsupportedFormatError = 560226676,
    kAudioDevicePermissionsError = 560492391,
    _,
};
pub const kAudioObjectUnknown = @enumToInt(enum_unnamed_27.kAudioObjectUnknown);
const enum_unnamed_27 = extern enum(c_int) {
    kAudioObjectUnknown = 0,
    _,
};
pub const kAudioObjectPropertyScopeGlobal = @enumToInt(enum_unnamed_28.kAudioObjectPropertyScopeGlobal);
pub const kAudioObjectPropertyScopeInput = @enumToInt(enum_unnamed_28.kAudioObjectPropertyScopeInput);
pub const kAudioObjectPropertyScopeOutput = @enumToInt(enum_unnamed_28.kAudioObjectPropertyScopeOutput);
pub const kAudioObjectPropertyScopePlayThrough = @enumToInt(enum_unnamed_28.kAudioObjectPropertyScopePlayThrough);
pub const kAudioObjectPropertyElementMaster = @enumToInt(enum_unnamed_28.kAudioObjectPropertyElementMaster);
const enum_unnamed_28 = extern enum(c_int) {
    kAudioObjectPropertyScopeGlobal = 1735159650,
    kAudioObjectPropertyScopeInput = 1768845428,
    kAudioObjectPropertyScopeOutput = 1869968496,
    kAudioObjectPropertyScopePlayThrough = 1886679669,
    kAudioObjectPropertyElementMaster = 0,
    _,
};
pub const kAudioObjectPropertySelectorWildcard = @enumToInt(enum_unnamed_29.kAudioObjectPropertySelectorWildcard);
const enum_unnamed_29 = extern enum(c_int) {
    kAudioObjectPropertySelectorWildcard = 707406378,
    _,
};
pub const kAudioObjectPropertyScopeWildcard = @enumToInt(enum_unnamed_30.kAudioObjectPropertyScopeWildcard);
const enum_unnamed_30 = extern enum(c_int) {
    kAudioObjectPropertyScopeWildcard = 707406378,
    _,
};
pub const kAudioObjectPropertyElementWildcard = @enumToInt(enum_unnamed_31.kAudioObjectPropertyElementWildcard);
const enum_unnamed_31 = extern enum(c_int) {
    kAudioObjectPropertyElementWildcard = 4294967295,
    _,
};
pub const kAudioObjectClassIDWildcard = @enumToInt(enum_unnamed_32.kAudioObjectClassIDWildcard);
const enum_unnamed_32 = extern enum(c_int) {
    kAudioObjectClassIDWildcard = 707406378,
    _,
};
pub const kAudioObjectClassID = @enumToInt(enum_unnamed_33.kAudioObjectClassID);
const enum_unnamed_33 = extern enum(c_int) {
    kAudioObjectClassID = 1634689642,
    _,
};
pub const kAudioObjectPropertyBaseClass = @enumToInt(enum_unnamed_34.kAudioObjectPropertyBaseClass);
pub const kAudioObjectPropertyClass = @enumToInt(enum_unnamed_34.kAudioObjectPropertyClass);
pub const kAudioObjectPropertyOwner = @enumToInt(enum_unnamed_34.kAudioObjectPropertyOwner);
pub const kAudioObjectPropertyName = @enumToInt(enum_unnamed_34.kAudioObjectPropertyName);
pub const kAudioObjectPropertyModelName = @enumToInt(enum_unnamed_34.kAudioObjectPropertyModelName);
pub const kAudioObjectPropertyManufacturer = @enumToInt(enum_unnamed_34.kAudioObjectPropertyManufacturer);
pub const kAudioObjectPropertyElementName = @enumToInt(enum_unnamed_34.kAudioObjectPropertyElementName);
pub const kAudioObjectPropertyElementCategoryName = @enumToInt(enum_unnamed_34.kAudioObjectPropertyElementCategoryName);
pub const kAudioObjectPropertyElementNumberName = @enumToInt(enum_unnamed_34.kAudioObjectPropertyElementNumberName);
pub const kAudioObjectPropertyOwnedObjects = @enumToInt(enum_unnamed_34.kAudioObjectPropertyOwnedObjects);
pub const kAudioObjectPropertyIdentify = @enumToInt(enum_unnamed_34.kAudioObjectPropertyIdentify);
pub const kAudioObjectPropertySerialNumber = @enumToInt(enum_unnamed_34.kAudioObjectPropertySerialNumber);
pub const kAudioObjectPropertyFirmwareVersion = @enumToInt(enum_unnamed_34.kAudioObjectPropertyFirmwareVersion);
const enum_unnamed_34 = extern enum(c_int) {
    kAudioObjectPropertyBaseClass = 1650682995,
    kAudioObjectPropertyClass = 1668047219,
    kAudioObjectPropertyOwner = 1937007734,
    kAudioObjectPropertyName = 1819173229,
    kAudioObjectPropertyModelName = 1819111268,
    kAudioObjectPropertyManufacturer = 1819107691,
    kAudioObjectPropertyElementName = 1818454126,
    kAudioObjectPropertyElementCategoryName = 1818452846,
    kAudioObjectPropertyElementNumberName = 1818455662,
    kAudioObjectPropertyOwnedObjects = 1870098020,
    kAudioObjectPropertyIdentify = 1768187246,
    kAudioObjectPropertySerialNumber = 1936618861,
    kAudioObjectPropertyFirmwareVersion = 1719105134,
    _,
};
pub const kAudioPlugInClassID = @enumToInt(enum_unnamed_35.kAudioPlugInClassID);
const enum_unnamed_35 = extern enum(c_int) {
    kAudioPlugInClassID = 1634757735,
    _,
};
pub const kAudioPlugInPropertyBundleID = @enumToInt(enum_unnamed_36.kAudioPlugInPropertyBundleID);
pub const kAudioPlugInPropertyDeviceList = @enumToInt(enum_unnamed_36.kAudioPlugInPropertyDeviceList);
pub const kAudioPlugInPropertyTranslateUIDToDevice = @enumToInt(enum_unnamed_36.kAudioPlugInPropertyTranslateUIDToDevice);
pub const kAudioPlugInPropertyBoxList = @enumToInt(enum_unnamed_36.kAudioPlugInPropertyBoxList);
pub const kAudioPlugInPropertyTranslateUIDToBox = @enumToInt(enum_unnamed_36.kAudioPlugInPropertyTranslateUIDToBox);
pub const kAudioPlugInPropertyClockDeviceList = @enumToInt(enum_unnamed_36.kAudioPlugInPropertyClockDeviceList);
pub const kAudioPlugInPropertyTranslateUIDToClockDevice = @enumToInt(enum_unnamed_36.kAudioPlugInPropertyTranslateUIDToClockDevice);
const enum_unnamed_36 = extern enum(c_int) {
    kAudioPlugInPropertyBundleID = 1885956452,
    kAudioPlugInPropertyDeviceList = 1684370979,
    kAudioPlugInPropertyTranslateUIDToDevice = 1969841252,
    kAudioPlugInPropertyBoxList = 1651472419,
    kAudioPlugInPropertyTranslateUIDToBox = 1969841250,
    kAudioPlugInPropertyClockDeviceList = 1668049699,
    kAudioPlugInPropertyTranslateUIDToClockDevice = 1969841251,
    _,
};
pub const kAudioTransportManagerClassID = @enumToInt(enum_unnamed_37.kAudioTransportManagerClassID);
const enum_unnamed_37 = extern enum(c_int) {
    kAudioTransportManagerClassID = 1953656941,
    _,
};
pub const kAudioTransportManagerPropertyEndPointList = @enumToInt(enum_unnamed_38.kAudioTransportManagerPropertyEndPointList);
pub const kAudioTransportManagerPropertyTranslateUIDToEndPoint = @enumToInt(enum_unnamed_38.kAudioTransportManagerPropertyTranslateUIDToEndPoint);
pub const kAudioTransportManagerPropertyTransportType = @enumToInt(enum_unnamed_38.kAudioTransportManagerPropertyTransportType);
const enum_unnamed_38 = extern enum(c_int) {
    kAudioTransportManagerPropertyEndPointList = 1701733411,
    kAudioTransportManagerPropertyTranslateUIDToEndPoint = 1969841253,
    kAudioTransportManagerPropertyTransportType = 1953653102,
    _,
};
pub const kAudioBoxClassID = @enumToInt(enum_unnamed_39.kAudioBoxClassID);
const enum_unnamed_39 = extern enum(c_int) {
    kAudioBoxClassID = 1633841016,
    _,
};
pub const kAudioBoxPropertyBoxUID = @enumToInt(enum_unnamed_40.kAudioBoxPropertyBoxUID);
pub const kAudioBoxPropertyTransportType = @enumToInt(enum_unnamed_40.kAudioBoxPropertyTransportType);
pub const kAudioBoxPropertyHasAudio = @enumToInt(enum_unnamed_40.kAudioBoxPropertyHasAudio);
pub const kAudioBoxPropertyHasVideo = @enumToInt(enum_unnamed_40.kAudioBoxPropertyHasVideo);
pub const kAudioBoxPropertyHasMIDI = @enumToInt(enum_unnamed_40.kAudioBoxPropertyHasMIDI);
pub const kAudioBoxPropertyIsProtected = @enumToInt(enum_unnamed_40.kAudioBoxPropertyIsProtected);
pub const kAudioBoxPropertyAcquired = @enumToInt(enum_unnamed_40.kAudioBoxPropertyAcquired);
pub const kAudioBoxPropertyAcquisitionFailed = @enumToInt(enum_unnamed_40.kAudioBoxPropertyAcquisitionFailed);
pub const kAudioBoxPropertyDeviceList = @enumToInt(enum_unnamed_40.kAudioBoxPropertyDeviceList);
pub const kAudioBoxPropertyClockDeviceList = @enumToInt(enum_unnamed_40.kAudioBoxPropertyClockDeviceList);
const enum_unnamed_40 = extern enum(c_int) {
    kAudioBoxPropertyBoxUID = 1651861860,
    kAudioBoxPropertyTransportType = 1953653102,
    kAudioBoxPropertyHasAudio = 1651007861,
    kAudioBoxPropertyHasVideo = 1651013225,
    kAudioBoxPropertyHasMIDI = 1651010921,
    kAudioBoxPropertyIsProtected = 1651536495,
    kAudioBoxPropertyAcquired = 1652060014,
    kAudioBoxPropertyAcquisitionFailed = 1652060006,
    kAudioBoxPropertyDeviceList = 1650751011,
    kAudioBoxPropertyClockDeviceList = 1650682915,
    _,
};
pub const kAudioDeviceClassID = @enumToInt(enum_unnamed_41.kAudioDeviceClassID);
const enum_unnamed_41 = extern enum(c_int) {
    kAudioDeviceClassID = 1633969526,
    _,
};
pub const kAudioDeviceTransportTypeUnknown = @enumToInt(enum_unnamed_42.kAudioDeviceTransportTypeUnknown);
pub const kAudioDeviceTransportTypeBuiltIn = @enumToInt(enum_unnamed_42.kAudioDeviceTransportTypeBuiltIn);
pub const kAudioDeviceTransportTypeAggregate = @enumToInt(enum_unnamed_42.kAudioDeviceTransportTypeAggregate);
pub const kAudioDeviceTransportTypeVirtual = @enumToInt(enum_unnamed_42.kAudioDeviceTransportTypeVirtual);
pub const kAudioDeviceTransportTypePCI = @enumToInt(enum_unnamed_42.kAudioDeviceTransportTypePCI);
pub const kAudioDeviceTransportTypeUSB = @enumToInt(enum_unnamed_42.kAudioDeviceTransportTypeUSB);
pub const kAudioDeviceTransportTypeFireWire = @enumToInt(enum_unnamed_42.kAudioDeviceTransportTypeFireWire);
pub const kAudioDeviceTransportTypeBluetooth = @enumToInt(enum_unnamed_42.kAudioDeviceTransportTypeBluetooth);
pub const kAudioDeviceTransportTypeBluetoothLE = @enumToInt(enum_unnamed_42.kAudioDeviceTransportTypeBluetoothLE);
pub const kAudioDeviceTransportTypeHDMI = @enumToInt(enum_unnamed_42.kAudioDeviceTransportTypeHDMI);
pub const kAudioDeviceTransportTypeDisplayPort = @enumToInt(enum_unnamed_42.kAudioDeviceTransportTypeDisplayPort);
pub const kAudioDeviceTransportTypeAirPlay = @enumToInt(enum_unnamed_42.kAudioDeviceTransportTypeAirPlay);
pub const kAudioDeviceTransportTypeAVB = @enumToInt(enum_unnamed_42.kAudioDeviceTransportTypeAVB);
pub const kAudioDeviceTransportTypeThunderbolt = @enumToInt(enum_unnamed_42.kAudioDeviceTransportTypeThunderbolt);
const enum_unnamed_42 = extern enum(c_int) {
    kAudioDeviceTransportTypeUnknown = 0,
    kAudioDeviceTransportTypeBuiltIn = 1651274862,
    kAudioDeviceTransportTypeAggregate = 1735554416,
    kAudioDeviceTransportTypeVirtual = 1986622068,
    kAudioDeviceTransportTypePCI = 1885563168,
    kAudioDeviceTransportTypeUSB = 1970496032,
    kAudioDeviceTransportTypeFireWire = 825440564,
    kAudioDeviceTransportTypeBluetooth = 1651275109,
    kAudioDeviceTransportTypeBluetoothLE = 1651271009,
    kAudioDeviceTransportTypeHDMI = 1751412073,
    kAudioDeviceTransportTypeDisplayPort = 1685090932,
    kAudioDeviceTransportTypeAirPlay = 1634300528,
    kAudioDeviceTransportTypeAVB = 1700886114,
    kAudioDeviceTransportTypeThunderbolt = 1953002862,
    _,
};
pub const kAudioDevicePropertyConfigurationApplication = @enumToInt(enum_unnamed_43.kAudioDevicePropertyConfigurationApplication);
pub const kAudioDevicePropertyDeviceUID = @enumToInt(enum_unnamed_43.kAudioDevicePropertyDeviceUID);
pub const kAudioDevicePropertyModelUID = @enumToInt(enum_unnamed_43.kAudioDevicePropertyModelUID);
pub const kAudioDevicePropertyTransportType = @enumToInt(enum_unnamed_43.kAudioDevicePropertyTransportType);
pub const kAudioDevicePropertyRelatedDevices = @enumToInt(enum_unnamed_43.kAudioDevicePropertyRelatedDevices);
pub const kAudioDevicePropertyClockDomain = @enumToInt(enum_unnamed_43.kAudioDevicePropertyClockDomain);
pub const kAudioDevicePropertyDeviceIsAlive = @enumToInt(enum_unnamed_43.kAudioDevicePropertyDeviceIsAlive);
pub const kAudioDevicePropertyDeviceIsRunning = @enumToInt(enum_unnamed_43.kAudioDevicePropertyDeviceIsRunning);
pub const kAudioDevicePropertyDeviceCanBeDefaultDevice = @enumToInt(enum_unnamed_43.kAudioDevicePropertyDeviceCanBeDefaultDevice);
pub const kAudioDevicePropertyDeviceCanBeDefaultSystemDevice = @enumToInt(enum_unnamed_43.kAudioDevicePropertyDeviceCanBeDefaultSystemDevice);
pub const kAudioDevicePropertyLatency = @enumToInt(enum_unnamed_43.kAudioDevicePropertyLatency);
pub const kAudioDevicePropertyStreams = @enumToInt(enum_unnamed_43.kAudioDevicePropertyStreams);
pub const kAudioObjectPropertyControlList = @enumToInt(enum_unnamed_43.kAudioObjectPropertyControlList);
pub const kAudioDevicePropertySafetyOffset = @enumToInt(enum_unnamed_43.kAudioDevicePropertySafetyOffset);
pub const kAudioDevicePropertyNominalSampleRate = @enumToInt(enum_unnamed_43.kAudioDevicePropertyNominalSampleRate);
pub const kAudioDevicePropertyAvailableNominalSampleRates = @enumToInt(enum_unnamed_43.kAudioDevicePropertyAvailableNominalSampleRates);
pub const kAudioDevicePropertyIcon = @enumToInt(enum_unnamed_43.kAudioDevicePropertyIcon);
pub const kAudioDevicePropertyIsHidden = @enumToInt(enum_unnamed_43.kAudioDevicePropertyIsHidden);
pub const kAudioDevicePropertyPreferredChannelsForStereo = @enumToInt(enum_unnamed_43.kAudioDevicePropertyPreferredChannelsForStereo);
pub const kAudioDevicePropertyPreferredChannelLayout = @enumToInt(enum_unnamed_43.kAudioDevicePropertyPreferredChannelLayout);
const enum_unnamed_43 = extern enum(c_int) {
    kAudioDevicePropertyConfigurationApplication = 1667330160,
    kAudioDevicePropertyDeviceUID = 1969841184,
    kAudioDevicePropertyModelUID = 1836411236,
    kAudioDevicePropertyTransportType = 1953653102,
    kAudioDevicePropertyRelatedDevices = 1634429294,
    kAudioDevicePropertyClockDomain = 1668049764,
    kAudioDevicePropertyDeviceIsAlive = 1818850926,
    kAudioDevicePropertyDeviceIsRunning = 1735354734,
    kAudioDevicePropertyDeviceCanBeDefaultDevice = 1684434036,
    kAudioDevicePropertyDeviceCanBeDefaultSystemDevice = 1936092276,
    kAudioDevicePropertyLatency = 1819569763,
    kAudioDevicePropertyStreams = 1937009955,
    kAudioObjectPropertyControlList = 1668575852,
    kAudioDevicePropertySafetyOffset = 1935763060,
    kAudioDevicePropertyNominalSampleRate = 1853059700,
    kAudioDevicePropertyAvailableNominalSampleRates = 1853059619,
    kAudioDevicePropertyIcon = 1768124270,
    kAudioDevicePropertyIsHidden = 1751737454,
    kAudioDevicePropertyPreferredChannelsForStereo = 1684236338,
    kAudioDevicePropertyPreferredChannelLayout = 1936879204,
    _,
};
pub const kAudioClockDeviceClassID = @enumToInt(enum_unnamed_44.kAudioClockDeviceClassID);
const enum_unnamed_44 = extern enum(c_int) {
    kAudioClockDeviceClassID = 1633905771,
    _,
};
pub const kAudioClockDevicePropertyDeviceUID = @enumToInt(enum_unnamed_45.kAudioClockDevicePropertyDeviceUID);
pub const kAudioClockDevicePropertyTransportType = @enumToInt(enum_unnamed_45.kAudioClockDevicePropertyTransportType);
pub const kAudioClockDevicePropertyClockDomain = @enumToInt(enum_unnamed_45.kAudioClockDevicePropertyClockDomain);
pub const kAudioClockDevicePropertyDeviceIsAlive = @enumToInt(enum_unnamed_45.kAudioClockDevicePropertyDeviceIsAlive);
pub const kAudioClockDevicePropertyDeviceIsRunning = @enumToInt(enum_unnamed_45.kAudioClockDevicePropertyDeviceIsRunning);
pub const kAudioClockDevicePropertyLatency = @enumToInt(enum_unnamed_45.kAudioClockDevicePropertyLatency);
pub const kAudioClockDevicePropertyControlList = @enumToInt(enum_unnamed_45.kAudioClockDevicePropertyControlList);
pub const kAudioClockDevicePropertyNominalSampleRate = @enumToInt(enum_unnamed_45.kAudioClockDevicePropertyNominalSampleRate);
pub const kAudioClockDevicePropertyAvailableNominalSampleRates = @enumToInt(enum_unnamed_45.kAudioClockDevicePropertyAvailableNominalSampleRates);
const enum_unnamed_45 = extern enum(c_int) {
    kAudioClockDevicePropertyDeviceUID = 1668639076,
    kAudioClockDevicePropertyTransportType = 1953653102,
    kAudioClockDevicePropertyClockDomain = 1668049764,
    kAudioClockDevicePropertyDeviceIsAlive = 1818850926,
    kAudioClockDevicePropertyDeviceIsRunning = 1735354734,
    kAudioClockDevicePropertyLatency = 1819569763,
    kAudioClockDevicePropertyControlList = 1668575852,
    kAudioClockDevicePropertyNominalSampleRate = 1853059700,
    kAudioClockDevicePropertyAvailableNominalSampleRates = 1853059619,
    _,
};
pub const kAudioEndPointDeviceClassID = @enumToInt(enum_unnamed_46.kAudioEndPointDeviceClassID);
const enum_unnamed_46 = extern enum(c_int) {
    kAudioEndPointDeviceClassID = 1701078390,
    _,
};
pub const kAudioEndPointDevicePropertyComposition = @enumToInt(enum_unnamed_47.kAudioEndPointDevicePropertyComposition);
pub const kAudioEndPointDevicePropertyEndPointList = @enumToInt(enum_unnamed_47.kAudioEndPointDevicePropertyEndPointList);
pub const kAudioEndPointDevicePropertyIsPrivate = @enumToInt(enum_unnamed_47.kAudioEndPointDevicePropertyIsPrivate);
const enum_unnamed_47 = extern enum(c_int) {
    kAudioEndPointDevicePropertyComposition = 1633906541,
    kAudioEndPointDevicePropertyEndPointList = 1634169456,
    kAudioEndPointDevicePropertyIsPrivate = 1886546294,
    _,
};
pub const kAudioEndPointClassID = @enumToInt(enum_unnamed_48.kAudioEndPointClassID);
const enum_unnamed_48 = extern enum(c_int) {
    kAudioEndPointClassID = 1701733488,
    _,
};
pub const struct_AudioStreamRangedDescription = extern struct {
    mFormat: AudioStreamBasicDescription,
    mSampleRateRange: AudioValueRange,
};
pub const AudioStreamRangedDescription = struct_AudioStreamRangedDescription;
pub const kAudioStreamClassID = @enumToInt(enum_unnamed_49.kAudioStreamClassID);
const enum_unnamed_49 = extern enum(c_int) {
    kAudioStreamClassID = 1634956402,
    _,
};
pub const kAudioStreamTerminalTypeUnknown = @enumToInt(enum_unnamed_50.kAudioStreamTerminalTypeUnknown);
pub const kAudioStreamTerminalTypeLine = @enumToInt(enum_unnamed_50.kAudioStreamTerminalTypeLine);
pub const kAudioStreamTerminalTypeDigitalAudioInterface = @enumToInt(enum_unnamed_50.kAudioStreamTerminalTypeDigitalAudioInterface);
pub const kAudioStreamTerminalTypeSpeaker = @enumToInt(enum_unnamed_50.kAudioStreamTerminalTypeSpeaker);
pub const kAudioStreamTerminalTypeHeadphones = @enumToInt(enum_unnamed_50.kAudioStreamTerminalTypeHeadphones);
pub const kAudioStreamTerminalTypeLFESpeaker = @enumToInt(enum_unnamed_50.kAudioStreamTerminalTypeLFESpeaker);
pub const kAudioStreamTerminalTypeReceiverSpeaker = @enumToInt(enum_unnamed_50.kAudioStreamTerminalTypeReceiverSpeaker);
pub const kAudioStreamTerminalTypeMicrophone = @enumToInt(enum_unnamed_50.kAudioStreamTerminalTypeMicrophone);
pub const kAudioStreamTerminalTypeHeadsetMicrophone = @enumToInt(enum_unnamed_50.kAudioStreamTerminalTypeHeadsetMicrophone);
pub const kAudioStreamTerminalTypeReceiverMicrophone = @enumToInt(enum_unnamed_50.kAudioStreamTerminalTypeReceiverMicrophone);
pub const kAudioStreamTerminalTypeTTY = @enumToInt(enum_unnamed_50.kAudioStreamTerminalTypeTTY);
pub const kAudioStreamTerminalTypeHDMI = @enumToInt(enum_unnamed_50.kAudioStreamTerminalTypeHDMI);
pub const kAudioStreamTerminalTypeDisplayPort = @enumToInt(enum_unnamed_50.kAudioStreamTerminalTypeDisplayPort);
const enum_unnamed_50 = extern enum(c_int) {
    kAudioStreamTerminalTypeUnknown = 0,
    kAudioStreamTerminalTypeLine = 1818848869,
    kAudioStreamTerminalTypeDigitalAudioInterface = 1936745574,
    kAudioStreamTerminalTypeSpeaker = 1936747378,
    kAudioStreamTerminalTypeHeadphones = 1751412840,
    kAudioStreamTerminalTypeLFESpeaker = 1818649971,
    kAudioStreamTerminalTypeReceiverSpeaker = 1920168043,
    kAudioStreamTerminalTypeMicrophone = 1835623282,
    kAudioStreamTerminalTypeHeadsetMicrophone = 1752000867,
    kAudioStreamTerminalTypeReceiverMicrophone = 1919773027,
    kAudioStreamTerminalTypeTTY = 1953790303,
    kAudioStreamTerminalTypeHDMI = 1751412073,
    kAudioStreamTerminalTypeDisplayPort = 1685090932,
    _,
};
pub const kAudioStreamPropertyIsActive = @enumToInt(enum_unnamed_51.kAudioStreamPropertyIsActive);
pub const kAudioStreamPropertyDirection = @enumToInt(enum_unnamed_51.kAudioStreamPropertyDirection);
pub const kAudioStreamPropertyTerminalType = @enumToInt(enum_unnamed_51.kAudioStreamPropertyTerminalType);
pub const kAudioStreamPropertyStartingChannel = @enumToInt(enum_unnamed_51.kAudioStreamPropertyStartingChannel);
pub const kAudioStreamPropertyLatency = @enumToInt(enum_unnamed_51.kAudioStreamPropertyLatency);
pub const kAudioStreamPropertyVirtualFormat = @enumToInt(enum_unnamed_51.kAudioStreamPropertyVirtualFormat);
pub const kAudioStreamPropertyAvailableVirtualFormats = @enumToInt(enum_unnamed_51.kAudioStreamPropertyAvailableVirtualFormats);
pub const kAudioStreamPropertyPhysicalFormat = @enumToInt(enum_unnamed_51.kAudioStreamPropertyPhysicalFormat);
pub const kAudioStreamPropertyAvailablePhysicalFormats = @enumToInt(enum_unnamed_51.kAudioStreamPropertyAvailablePhysicalFormats);
const enum_unnamed_51 = extern enum(c_int) {
    kAudioStreamPropertyIsActive = 1935762292,
    kAudioStreamPropertyDirection = 1935960434,
    kAudioStreamPropertyTerminalType = 1952805485,
    kAudioStreamPropertyStartingChannel = 1935894638,
    kAudioStreamPropertyLatency = 1819569763,
    kAudioStreamPropertyVirtualFormat = 1936092532,
    kAudioStreamPropertyAvailableVirtualFormats = 1936092513,
    kAudioStreamPropertyPhysicalFormat = 1885762592,
    kAudioStreamPropertyAvailablePhysicalFormats = 1885762657,
    _,
};
pub const kAudioControlClassID = @enumToInt(enum_unnamed_52.kAudioControlClassID);
const enum_unnamed_52 = extern enum(c_int) {
    kAudioControlClassID = 1633907820,
    _,
};
pub const kAudioControlPropertyScope = @enumToInt(enum_unnamed_53.kAudioControlPropertyScope);
pub const kAudioControlPropertyElement = @enumToInt(enum_unnamed_53.kAudioControlPropertyElement);
const enum_unnamed_53 = extern enum(c_int) {
    kAudioControlPropertyScope = 1668506480,
    kAudioControlPropertyElement = 1667591277,
    _,
};
pub const kAudioSliderControlClassID = @enumToInt(enum_unnamed_54.kAudioSliderControlClassID);
const enum_unnamed_54 = extern enum(c_int) {
    kAudioSliderControlClassID = 1936483442,
    _,
};
pub const kAudioSliderControlPropertyValue = @enumToInt(enum_unnamed_55.kAudioSliderControlPropertyValue);
pub const kAudioSliderControlPropertyRange = @enumToInt(enum_unnamed_55.kAudioSliderControlPropertyRange);
const enum_unnamed_55 = extern enum(c_int) {
    kAudioSliderControlPropertyValue = 1935962742,
    kAudioSliderControlPropertyRange = 1935962738,
    _,
};
pub const kAudioLevelControlClassID = @enumToInt(enum_unnamed_56.kAudioLevelControlClassID);
pub const kAudioVolumeControlClassID = @enumToInt(enum_unnamed_56.kAudioVolumeControlClassID);
pub const kAudioLFEVolumeControlClassID = @enumToInt(enum_unnamed_56.kAudioLFEVolumeControlClassID);
const enum_unnamed_56 = extern enum(c_int) {
    kAudioLevelControlClassID = 1818588780,
    kAudioVolumeControlClassID = 1986817381,
    kAudioLFEVolumeControlClassID = 1937072758,
    _,
};
pub const kAudioLevelControlPropertyScalarValue = @enumToInt(enum_unnamed_57.kAudioLevelControlPropertyScalarValue);
pub const kAudioLevelControlPropertyDecibelValue = @enumToInt(enum_unnamed_57.kAudioLevelControlPropertyDecibelValue);
pub const kAudioLevelControlPropertyDecibelRange = @enumToInt(enum_unnamed_57.kAudioLevelControlPropertyDecibelRange);
pub const kAudioLevelControlPropertyConvertScalarToDecibels = @enumToInt(enum_unnamed_57.kAudioLevelControlPropertyConvertScalarToDecibels);
pub const kAudioLevelControlPropertyConvertDecibelsToScalar = @enumToInt(enum_unnamed_57.kAudioLevelControlPropertyConvertDecibelsToScalar);
const enum_unnamed_57 = extern enum(c_int) {
    kAudioLevelControlPropertyScalarValue = 1818456950,
    kAudioLevelControlPropertyDecibelValue = 1818453110,
    kAudioLevelControlPropertyDecibelRange = 1818453106,
    kAudioLevelControlPropertyConvertScalarToDecibels = 1818456932,
    kAudioLevelControlPropertyConvertDecibelsToScalar = 1818453107,
    _,
};
pub const kAudioBooleanControlClassID = @enumToInt(enum_unnamed_58.kAudioBooleanControlClassID);
pub const kAudioMuteControlClassID = @enumToInt(enum_unnamed_58.kAudioMuteControlClassID);
pub const kAudioSoloControlClassID = @enumToInt(enum_unnamed_58.kAudioSoloControlClassID);
pub const kAudioJackControlClassID = @enumToInt(enum_unnamed_58.kAudioJackControlClassID);
pub const kAudioLFEMuteControlClassID = @enumToInt(enum_unnamed_58.kAudioLFEMuteControlClassID);
pub const kAudioPhantomPowerControlClassID = @enumToInt(enum_unnamed_58.kAudioPhantomPowerControlClassID);
pub const kAudioPhaseInvertControlClassID = @enumToInt(enum_unnamed_58.kAudioPhaseInvertControlClassID);
pub const kAudioClipLightControlClassID = @enumToInt(enum_unnamed_58.kAudioClipLightControlClassID);
pub const kAudioTalkbackControlClassID = @enumToInt(enum_unnamed_58.kAudioTalkbackControlClassID);
pub const kAudioListenbackControlClassID = @enumToInt(enum_unnamed_58.kAudioListenbackControlClassID);
const enum_unnamed_58 = extern enum(c_int) {
    kAudioBooleanControlClassID = 1953458028,
    kAudioMuteControlClassID = 1836414053,
    kAudioSoloControlClassID = 1936682095,
    kAudioJackControlClassID = 1784767339,
    kAudioLFEMuteControlClassID = 1937072749,
    kAudioPhantomPowerControlClassID = 1885888878,
    kAudioPhaseInvertControlClassID = 1885893481,
    kAudioClipLightControlClassID = 1668049264,
    kAudioTalkbackControlClassID = 1952541794,
    kAudioListenbackControlClassID = 1819504226,
    _,
};
pub const kAudioBooleanControlPropertyValue = @enumToInt(enum_unnamed_59.kAudioBooleanControlPropertyValue);
const enum_unnamed_59 = extern enum(c_int) {
    kAudioBooleanControlPropertyValue = 1650685548,
    _,
};
pub const kAudioSelectorControlClassID = @enumToInt(enum_unnamed_60.kAudioSelectorControlClassID);
pub const kAudioDataSourceControlClassID = @enumToInt(enum_unnamed_60.kAudioDataSourceControlClassID);
pub const kAudioDataDestinationControlClassID = @enumToInt(enum_unnamed_60.kAudioDataDestinationControlClassID);
pub const kAudioClockSourceControlClassID = @enumToInt(enum_unnamed_60.kAudioClockSourceControlClassID);
pub const kAudioLineLevelControlClassID = @enumToInt(enum_unnamed_60.kAudioLineLevelControlClassID);
pub const kAudioHighPassFilterControlClassID = @enumToInt(enum_unnamed_60.kAudioHighPassFilterControlClassID);
const enum_unnamed_60 = extern enum(c_int) {
    kAudioSelectorControlClassID = 1936483188,
    kAudioDataSourceControlClassID = 1685287523,
    kAudioDataDestinationControlClassID = 1684370292,
    kAudioClockSourceControlClassID = 1668047723,
    kAudioLineLevelControlClassID = 1852601964,
    kAudioHighPassFilterControlClassID = 1751740518,
    _,
};
pub const kAudioSelectorControlPropertyCurrentItem = @enumToInt(enum_unnamed_61.kAudioSelectorControlPropertyCurrentItem);
pub const kAudioSelectorControlPropertyAvailableItems = @enumToInt(enum_unnamed_61.kAudioSelectorControlPropertyAvailableItems);
pub const kAudioSelectorControlPropertyItemName = @enumToInt(enum_unnamed_61.kAudioSelectorControlPropertyItemName);
pub const kAudioSelectorControlPropertyItemKind = @enumToInt(enum_unnamed_61.kAudioSelectorControlPropertyItemKind);
const enum_unnamed_61 = extern enum(c_int) {
    kAudioSelectorControlPropertyCurrentItem = 1935893353,
    kAudioSelectorControlPropertyAvailableItems = 1935892841,
    kAudioSelectorControlPropertyItemName = 1935894894,
    kAudioSelectorControlPropertyItemKind = 1668049771,
    _,
};
pub const kAudioSelectorControlItemKindSpacer = @enumToInt(enum_unnamed_62.kAudioSelectorControlItemKindSpacer);
const enum_unnamed_62 = extern enum(c_int) {
    kAudioSelectorControlItemKindSpacer = 1936745330,
    _,
};
pub const kAudioClockSourceItemKindInternal = @enumToInt(enum_unnamed_63.kAudioClockSourceItemKindInternal);
const enum_unnamed_63 = extern enum(c_int) {
    kAudioClockSourceItemKindInternal = 1768846368,
    _,
};
pub const kAudioStereoPanControlClassID = @enumToInt(enum_unnamed_64.kAudioStereoPanControlClassID);
const enum_unnamed_64 = extern enum(c_int) {
    kAudioStereoPanControlClassID = 1936744814,
    _,
};
pub const kAudioStereoPanControlPropertyValue = @enumToInt(enum_unnamed_65.kAudioStereoPanControlPropertyValue);
pub const kAudioStereoPanControlPropertyPanningChannels = @enumToInt(enum_unnamed_65.kAudioStereoPanControlPropertyPanningChannels);
const enum_unnamed_65 = extern enum(c_int) {
    kAudioStereoPanControlPropertyValue = 1936745334,
    kAudioStereoPanControlPropertyPanningChannels = 1936745315,
    _,
};
pub const va_list = __builtin_va_list;
pub const __gnuc_va_list = __builtin_va_list;
pub extern fn __assert_rtn([*c]const u8, [*c]const u8, c_int, [*c]const u8) noreturn;
pub const __darwin_nl_item = c_int;
pub const __darwin_wctrans_t = c_int;
pub const __darwin_wctype_t = __uint32_t;
pub const ct_rune_t = __darwin_ct_rune_t;
pub const rune_t = __darwin_rune_t;
pub const wchar_t = __darwin_wchar_t;
pub const wint_t = __darwin_wint_t;
const struct_unnamed_66 = extern struct {
    __min: __darwin_rune_t,
    __max: __darwin_rune_t,
    __map: __darwin_rune_t,
    __types: [*c]__uint32_t,
};
pub const _RuneEntry = struct_unnamed_66;
const struct_unnamed_67 = extern struct {
    __nranges: c_int,
    __ranges: [*c]_RuneEntry,
};
pub const _RuneRange = struct_unnamed_67;
const struct_unnamed_68 = extern struct {
    __name: [14]u8,
    __mask: __uint32_t,
};
pub const _RuneCharClass = struct_unnamed_68;
const struct_unnamed_69 = extern struct {
    __magic: [8]u8,
    __encoding: [32]u8,
    __sgetrune: ?fn ([*c]const u8, __darwin_size_t, [*c][*c]const u8) callconv(.C) __darwin_rune_t,
    __sputrune: ?fn (__darwin_rune_t, [*c]u8, __darwin_size_t, [*c][*c]u8) callconv(.C) c_int,
    __invalid_rune: __darwin_rune_t,
    __runetype: [256]__uint32_t,
    __maplower: [256]__darwin_rune_t,
    __mapupper: [256]__darwin_rune_t,
    __runetype_ext: _RuneRange,
    __maplower_ext: _RuneRange,
    __mapupper_ext: _RuneRange,
    __variable: ?*c_void,
    __variable_len: c_int,
    __ncharclasses: c_int,
    __charclasses: [*c]_RuneCharClass,
};
pub const _RuneLocale = struct_unnamed_69;
pub extern var _DefaultRuneLocale: _RuneLocale;
pub extern var _CurrentRuneLocale: [*c]_RuneLocale;
pub extern fn ___runetype(__darwin_ct_rune_t) c_ulong;
pub extern fn ___tolower(__darwin_ct_rune_t) __darwin_ct_rune_t;
pub extern fn ___toupper(__darwin_ct_rune_t) __darwin_ct_rune_t;
pub fn isascii(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return ((_c & ~@as(c_int, 127)) == @as(c_int, 0));
}
pub extern fn __maskrune(__darwin_ct_rune_t, c_ulong) c_int;
pub fn __istype(arg__c: __darwin_ct_rune_t, arg__f: c_ulong) callconv(.C) c_int {
    var _c = arg__c;
    var _f = arg__f;
    return (if (isascii(_c) != 0) !!((@bitCast(c_ulong, @as(c_ulong, _DefaultRuneLocale.__runetype[@intCast(c_uint, _c)])) & _f) != 0) else !!(__maskrune(_c, _f) != 0));
}
pub fn __isctype(arg__c: __darwin_ct_rune_t, arg__f: c_ulong) callconv(.C) __darwin_ct_rune_t {
    var _c = arg__c;
    var _f = arg__f;
    return if ((_c < @as(c_int, 0)) or (_c >= (@as(c_int, 1) << @intCast(@import("std").math.Log2Int(c_int), 8)))) @as(c_int, 0) else !!((@bitCast(c_ulong, @as(c_ulong, _DefaultRuneLocale.__runetype[@intCast(c_uint, _c)])) & _f) != 0);
}
pub extern fn __toupper(__darwin_ct_rune_t) __darwin_ct_rune_t;
pub extern fn __tolower(__darwin_ct_rune_t) __darwin_ct_rune_t;
pub fn __wcwidth(arg__c: __darwin_ct_rune_t) callconv(.C) c_int {
    var _c = arg__c;
    var _x: c_uint = undefined;
    if (_c == @as(c_int, 0)) return (@as(c_int, 0));
    _x = @bitCast(c_uint, __maskrune(_c, @bitCast(c_ulong, (@as(c_long, 3758096384) | @as(c_long, 262144)))));
    if ((@bitCast(c_long, @as(c_ulong, _x)) & @as(c_long, 3758096384)) != @bitCast(c_long, @as(c_long, @as(c_int, 0)))) return @bitCast(c_int, @truncate(c_int, ((@bitCast(c_long, @as(c_ulong, _x)) & @as(c_long, 3758096384)) >> @intCast(@import("std").math.Log2Int(c_long), 30))));
    return (if ((@bitCast(c_long, @as(c_ulong, _x)) & @as(c_long, 262144)) != @bitCast(c_long, @as(c_long, @as(c_int, 0)))) @as(c_int, 1) else -@as(c_int, 1));
}
pub fn isalnum(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return (__istype(_c, @bitCast(c_ulong, (@as(c_long, 256) | @as(c_long, 1024)))));
}
pub fn isalpha(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return (__istype(_c, @bitCast(c_ulong, @as(c_long, 256))));
}
pub fn isblank(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return (__istype(_c, @bitCast(c_ulong, @as(c_long, 131072))));
}
pub fn iscntrl(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return (__istype(_c, @bitCast(c_ulong, @as(c_long, 512))));
}
pub fn isdigit(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return (__isctype(_c, @bitCast(c_ulong, @as(c_long, 1024))));
}
pub fn isgraph(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return (__istype(_c, @bitCast(c_ulong, @as(c_long, 2048))));
}
pub fn islower(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return (__istype(_c, @bitCast(c_ulong, @as(c_long, 4096))));
}
pub fn isprint(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return (__istype(_c, @bitCast(c_ulong, @as(c_long, 262144))));
}
pub fn ispunct(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return (__istype(_c, @bitCast(c_ulong, @as(c_long, 8192))));
}
pub fn isspace(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return (__istype(_c, @bitCast(c_ulong, @as(c_long, 16384))));
}
pub fn isupper(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return (__istype(_c, @bitCast(c_ulong, @as(c_long, 32768))));
}
pub fn isxdigit(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return (__isctype(_c, @bitCast(c_ulong, @as(c_long, 65536))));
}
pub fn toascii(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return (_c & @as(c_int, 127));
}
pub fn tolower(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return (__tolower(_c));
}
pub fn toupper(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return (__toupper(_c));
}
pub fn digittoint(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return (__maskrune(_c, @bitCast(c_ulong, @as(c_long, @as(c_int, 15)))));
}
pub fn ishexnumber(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return (__istype(_c, @bitCast(c_ulong, @as(c_long, 65536))));
}
pub fn isideogram(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return (__istype(_c, @bitCast(c_ulong, @as(c_long, 524288))));
}
pub fn isnumber(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return (__istype(_c, @bitCast(c_ulong, @as(c_long, 1024))));
}
pub fn isphonogram(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return (__istype(_c, @bitCast(c_ulong, @as(c_long, 2097152))));
}
pub fn isrune(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return (__istype(_c, @bitCast(c_ulong, @as(c_long, 4294967280))));
}
pub fn isspecial(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return (__istype(_c, @bitCast(c_ulong, @as(c_long, 1048576))));
}
pub extern fn __error() [*c]c_int;
pub const struct_lconv = extern struct {
    decimal_point: [*c]u8,
    thousands_sep: [*c]u8,
    grouping: [*c]u8,
    int_curr_symbol: [*c]u8,
    currency_symbol: [*c]u8,
    mon_decimal_point: [*c]u8,
    mon_thousands_sep: [*c]u8,
    mon_grouping: [*c]u8,
    positive_sign: [*c]u8,
    negative_sign: [*c]u8,
    int_frac_digits: u8,
    frac_digits: u8,
    p_cs_precedes: u8,
    p_sep_by_space: u8,
    n_cs_precedes: u8,
    n_sep_by_space: u8,
    p_sign_posn: u8,
    n_sign_posn: u8,
    int_p_cs_precedes: u8,
    int_n_cs_precedes: u8,
    int_p_sep_by_space: u8,
    int_n_sep_by_space: u8,
    int_p_sign_posn: u8,
    int_n_sign_posn: u8,
};
pub extern fn localeconv() [*c]struct_lconv;
pub extern fn setlocale(c_int, [*c]const u8) [*c]u8;
pub const float_t = f32;
pub const double_t = f64;
pub extern fn __math_errhandling() c_int;
pub extern fn __fpclassifyf(f32) c_int;
pub extern fn __fpclassifyd(f64) c_int;
pub extern fn __fpclassifyl(c_longdouble) c_int; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/math.h:191:26: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const __inline_isfinitef = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/math.h:194:26: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const __inline_isfinited = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/math.h:197:26: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const __inline_isfinitel = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/math.h:200:12: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const __inline_isinff = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/math.h:203:12: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const __inline_isinfd = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/math.h:206:12: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const __inline_isinfl = @compileError("unable to translate function");
pub fn __inline_isnanf(arg___x: f32) callconv(.C) c_int {
    var __x = arg___x;
    return (__x != __x);
}
pub fn __inline_isnand(arg___x: f64) callconv(.C) c_int {
    var __x = arg___x;
    return (__x != __x);
}
pub fn __inline_isnanl(arg___x: c_longdouble) callconv(.C) c_int {
    var __x = arg___x;
    return (__x != __x);
} // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/math.h:244:39: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const __inline_isnormalf = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/math.h:247:39: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const __inline_isnormald = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/math.h:250:39: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const __inline_isnormall = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/math.h:218:5: warning: TODO implement translation of DeclStmt kind Record
pub const __inline_signbitf = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/math.h:223:5: warning: TODO implement translation of DeclStmt kind Record
pub const __inline_signbitd = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/math.h:229:5: warning: TODO implement translation of DeclStmt kind Record
pub const __inline_signbitl = @compileError("unable to translate function");
pub extern fn acosf(f32) f32;
pub extern fn acos(f64) f64;
pub extern fn acosl(c_longdouble) c_longdouble;
pub extern fn asinf(f32) f32;
pub extern fn asin(f64) f64;
pub extern fn asinl(c_longdouble) c_longdouble;
pub extern fn atanf(f32) f32;
pub extern fn atan(f64) f64;
pub extern fn atanl(c_longdouble) c_longdouble;
pub extern fn atan2f(f32, f32) f32;
pub extern fn atan2(f64, f64) f64;
pub extern fn atan2l(c_longdouble, c_longdouble) c_longdouble;
pub extern fn cosf(f32) f32;
pub extern fn cos(f64) f64;
pub extern fn cosl(c_longdouble) c_longdouble;
pub extern fn sinf(f32) f32;
pub extern fn sin(f64) f64;
pub extern fn sinl(c_longdouble) c_longdouble;
pub extern fn tanf(f32) f32;
pub extern fn tan(f64) f64;
pub extern fn tanl(c_longdouble) c_longdouble;
pub extern fn acoshf(f32) f32;
pub extern fn acosh(f64) f64;
pub extern fn acoshl(c_longdouble) c_longdouble;
pub extern fn asinhf(f32) f32;
pub extern fn asinh(f64) f64;
pub extern fn asinhl(c_longdouble) c_longdouble;
pub extern fn atanhf(f32) f32;
pub extern fn atanh(f64) f64;
pub extern fn atanhl(c_longdouble) c_longdouble;
pub extern fn coshf(f32) f32;
pub extern fn cosh(f64) f64;
pub extern fn coshl(c_longdouble) c_longdouble;
pub extern fn sinhf(f32) f32;
pub extern fn sinh(f64) f64;
pub extern fn sinhl(c_longdouble) c_longdouble;
pub extern fn tanhf(f32) f32;
pub extern fn tanh(f64) f64;
pub extern fn tanhl(c_longdouble) c_longdouble;
pub extern fn expf(f32) f32;
pub extern fn exp(f64) f64;
pub extern fn expl(c_longdouble) c_longdouble;
pub extern fn exp2f(f32) f32;
pub extern fn exp2(f64) f64;
pub extern fn exp2l(c_longdouble) c_longdouble;
pub extern fn expm1f(f32) f32;
pub extern fn expm1(f64) f64;
pub extern fn expm1l(c_longdouble) c_longdouble;
pub extern fn logf(f32) f32;
pub extern fn log(f64) f64;
pub extern fn logl(c_longdouble) c_longdouble;
pub extern fn log10f(f32) f32;
pub extern fn log10(f64) f64;
pub extern fn log10l(c_longdouble) c_longdouble;
pub extern fn log2f(f32) f32;
pub extern fn log2(f64) f64;
pub extern fn log2l(c_longdouble) c_longdouble;
pub extern fn log1pf(f32) f32;
pub extern fn log1p(f64) f64;
pub extern fn log1pl(c_longdouble) c_longdouble;
pub extern fn logbf(f32) f32;
pub extern fn logb(f64) f64;
pub extern fn logbl(c_longdouble) c_longdouble;
pub extern fn modff(f32, [*c]f32) f32;
pub extern fn modf(f64, [*c]f64) f64;
pub extern fn modfl(c_longdouble, [*c]c_longdouble) c_longdouble;
pub extern fn ldexpf(f32, c_int) f32;
pub extern fn ldexp(f64, c_int) f64;
pub extern fn ldexpl(c_longdouble, c_int) c_longdouble;
pub extern fn frexpf(f32, [*c]c_int) f32;
pub extern fn frexp(f64, [*c]c_int) f64;
pub extern fn frexpl(c_longdouble, [*c]c_int) c_longdouble;
pub extern fn ilogbf(f32) c_int;
pub extern fn ilogb(f64) c_int;
pub extern fn ilogbl(c_longdouble) c_int;
pub extern fn scalbnf(f32, c_int) f32;
pub extern fn scalbn(f64, c_int) f64;
pub extern fn scalbnl(c_longdouble, c_int) c_longdouble;
pub extern fn scalblnf(f32, c_long) f32;
pub extern fn scalbln(f64, c_long) f64;
pub extern fn scalblnl(c_longdouble, c_long) c_longdouble;
pub extern fn fabsf(f32) f32;
pub extern fn fabs(f64) f64;
pub extern fn fabsl(c_longdouble) c_longdouble;
pub extern fn cbrtf(f32) f32;
pub extern fn cbrt(f64) f64;
pub extern fn cbrtl(c_longdouble) c_longdouble;
pub extern fn hypotf(f32, f32) f32;
pub extern fn hypot(f64, f64) f64;
pub extern fn hypotl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn powf(f32, f32) f32;
pub extern fn pow(f64, f64) f64;
pub extern fn powl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn sqrtf(f32) f32;
pub extern fn sqrt(f64) f64;
pub extern fn sqrtl(c_longdouble) c_longdouble;
pub extern fn erff(f32) f32;
pub extern fn erf(f64) f64;
pub extern fn erfl(c_longdouble) c_longdouble;
pub extern fn erfcf(f32) f32;
pub extern fn erfc(f64) f64;
pub extern fn erfcl(c_longdouble) c_longdouble;
pub extern fn lgammaf(f32) f32;
pub extern fn lgamma(f64) f64;
pub extern fn lgammal(c_longdouble) c_longdouble;
pub extern fn tgammaf(f32) f32;
pub extern fn tgamma(f64) f64;
pub extern fn tgammal(c_longdouble) c_longdouble;
pub extern fn ceilf(f32) f32;
pub extern fn ceil(f64) f64;
pub extern fn ceill(c_longdouble) c_longdouble;
pub extern fn floorf(f32) f32;
pub extern fn floor(f64) f64;
pub extern fn floorl(c_longdouble) c_longdouble;
pub extern fn nearbyintf(f32) f32;
pub extern fn nearbyint(f64) f64;
pub extern fn nearbyintl(c_longdouble) c_longdouble;
pub extern fn rintf(f32) f32;
pub extern fn rint(f64) f64;
pub extern fn rintl(c_longdouble) c_longdouble;
pub extern fn lrintf(f32) c_long;
pub extern fn lrint(f64) c_long;
pub extern fn lrintl(c_longdouble) c_long;
pub extern fn roundf(f32) f32;
pub extern fn round(f64) f64;
pub extern fn roundl(c_longdouble) c_longdouble;
pub extern fn lroundf(f32) c_long;
pub extern fn lround(f64) c_long;
pub extern fn lroundl(c_longdouble) c_long;
pub extern fn llrintf(f32) c_longlong;
pub extern fn llrint(f64) c_longlong;
pub extern fn llrintl(c_longdouble) c_longlong;
pub extern fn llroundf(f32) c_longlong;
pub extern fn llround(f64) c_longlong;
pub extern fn llroundl(c_longdouble) c_longlong;
pub extern fn truncf(f32) f32;
pub extern fn trunc(f64) f64;
pub extern fn truncl(c_longdouble) c_longdouble;
pub extern fn fmodf(f32, f32) f32;
pub extern fn fmod(f64, f64) f64;
pub extern fn fmodl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn remainderf(f32, f32) f32;
pub extern fn remainder(f64, f64) f64;
pub extern fn remainderl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn remquof(f32, f32, [*c]c_int) f32;
pub extern fn remquo(f64, f64, [*c]c_int) f64;
pub extern fn remquol(c_longdouble, c_longdouble, [*c]c_int) c_longdouble;
pub extern fn copysignf(f32, f32) f32;
pub extern fn copysign(f64, f64) f64;
pub extern fn copysignl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn nanf([*c]const u8) f32;
pub extern fn nan([*c]const u8) f64;
pub extern fn nanl([*c]const u8) c_longdouble;
pub extern fn nextafterf(f32, f32) f32;
pub extern fn nextafter(f64, f64) f64;
pub extern fn nextafterl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn nexttoward(f64, c_longdouble) f64;
pub extern fn nexttowardf(f32, c_longdouble) f32;
pub extern fn nexttowardl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn fdimf(f32, f32) f32;
pub extern fn fdim(f64, f64) f64;
pub extern fn fdiml(c_longdouble, c_longdouble) c_longdouble;
pub extern fn fmaxf(f32, f32) f32;
pub extern fn fmax(f64, f64) f64;
pub extern fn fmaxl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn fminf(f32, f32) f32;
pub extern fn fmin(f64, f64) f64;
pub extern fn fminl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn fmaf(f32, f32, f32) f32;
pub extern fn fma(f64, f64, f64) f64;
pub extern fn fmal(c_longdouble, c_longdouble, c_longdouble) c_longdouble;
pub extern fn __inff() f32;
pub extern fn __inf() f64;
pub extern fn __infl() c_longdouble;
pub extern fn __nan() f32;
pub extern fn __exp10f(f32) f32;
pub extern fn __exp10(f64) f64;
pub const struct___float2 = extern struct {
    __sinval: f32,
    __cosval: f32,
};
pub fn __sincosf(arg___x: f32, arg___sinp: [*c]f32, arg___cosp: [*c]f32) callconv(.C) void {
    var __x = arg___x;
    var __sinp = arg___sinp;
    var __cosp = arg___cosp;
    const __stret: struct___float2 = __sincosf_stret(__x);
    __sinp.?.* = __stret.__sinval;
    __cosp.?.* = __stret.__cosval;
}
pub const struct___double2 = extern struct {
    __sinval: f64,
    __cosval: f64,
};
pub fn __sincos(arg___x: f64, arg___sinp: [*c]f64, arg___cosp: [*c]f64) callconv(.C) void {
    var __x = arg___x;
    var __sinp = arg___sinp;
    var __cosp = arg___cosp;
    const __stret: struct___double2 = __sincos_stret(__x);
    __sinp.?.* = __stret.__sinval;
    __cosp.?.* = __stret.__cosval;
}
pub extern fn __cospif(f32) f32;
pub extern fn __cospi(f64) f64;
pub extern fn __sinpif(f32) f32;
pub extern fn __sinpi(f64) f64;
pub extern fn __tanpif(f32) f32;
pub extern fn __tanpi(f64) f64;
pub fn __sincospif(arg___x: f32, arg___sinp: [*c]f32, arg___cosp: [*c]f32) callconv(.C) void {
    var __x = arg___x;
    var __sinp = arg___sinp;
    var __cosp = arg___cosp;
    const __stret: struct___float2 = __sincospif_stret(__x);
    __sinp.?.* = __stret.__sinval;
    __cosp.?.* = __stret.__cosval;
}
pub fn __sincospi(arg___x: f64, arg___sinp: [*c]f64, arg___cosp: [*c]f64) callconv(.C) void {
    var __x = arg___x;
    var __sinp = arg___sinp;
    var __cosp = arg___cosp;
    const __stret: struct___double2 = __sincospi_stret(__x);
    __sinp.?.* = __stret.__sinval;
    __cosp.?.* = __stret.__cosval;
}
pub extern fn __sincosf_stret(f32) struct___float2;
pub extern fn __sincos_stret(f64) struct___double2;
pub extern fn __sincospif_stret(f32) struct___float2;
pub extern fn __sincospi_stret(f64) struct___double2;
pub extern fn j0(f64) f64;
pub extern fn j1(f64) f64;
pub extern fn jn(c_int, f64) f64;
pub extern fn y0(f64) f64;
pub extern fn y1(f64) f64;
pub extern fn yn(c_int, f64) f64;
pub extern fn scalb(f64, f64) f64;
pub extern var signgam: c_int;
pub extern fn rinttol(f64) c_long;
pub extern fn roundtol(f64) c_long;
pub extern fn drem(f64, f64) f64;
pub extern fn finite(f64) c_int;
pub extern fn gamma(f64) f64;
pub extern fn significand(f64) f64;
pub const struct_exception = extern struct {
    type: c_int,
    name: [*c]u8,
    arg1: f64,
    arg2: f64,
    retval: f64,
};
pub const jmp_buf = [37]c_int;
pub const sigjmp_buf = [38]c_int;
pub extern fn setjmp([*c]c_int) c_int;
pub extern fn longjmp([*c]c_int, c_int) noreturn;
pub extern fn _setjmp([*c]c_int) c_int;
pub extern fn _longjmp([*c]c_int, c_int) noreturn;
pub extern fn sigsetjmp([*c]c_int, c_int) c_int;
pub extern fn siglongjmp([*c]c_int, c_int) noreturn;
pub extern fn longjmperror() void;
pub const sig_atomic_t = c_int;
pub const struct___darwin_i386_thread_state = extern struct {
    __eax: c_uint,
    __ebx: c_uint,
    __ecx: c_uint,
    __edx: c_uint,
    __edi: c_uint,
    __esi: c_uint,
    __ebp: c_uint,
    __esp: c_uint,
    __ss: c_uint,
    __eflags: c_uint,
    __eip: c_uint,
    __cs: c_uint,
    __ds: c_uint,
    __es: c_uint,
    __fs: c_uint,
    __gs: c_uint,
};
pub const struct___darwin_fp_control = @OpaqueType(); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:94:21: warning: struct demoted to opaque type - has bitfield
pub const __darwin_fp_control_t = struct___darwin_fp_control;
pub const struct___darwin_fp_status = @OpaqueType(); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:152:21: warning: struct demoted to opaque type - has bitfield
pub const __darwin_fp_status_t = struct___darwin_fp_status;
pub const struct___darwin_mmst_reg = extern struct {
    __mmst_reg: [10]u8,
    __mmst_rsrv: [6]u8,
};
pub const struct___darwin_xmm_reg = extern struct {
    __xmm_reg: [16]u8,
};
pub const struct___darwin_ymm_reg = extern struct {
    __ymm_reg: [32]u8,
};
pub const struct___darwin_zmm_reg = extern struct {
    __zmm_reg: [64]u8,
};
pub const struct___darwin_opmask_reg = extern struct {
    __opmask_reg: [8]u8,
};
pub const struct___darwin_i386_float_state = extern struct {
    __fpu_reserved: [2]c_int,
    __fpu_fcw: struct___darwin_fp_control,
    __fpu_fsw: struct___darwin_fp_status,
    __fpu_ftw: __uint8_t,
    __fpu_rsrv1: __uint8_t,
    __fpu_fop: __uint16_t,
    __fpu_ip: __uint32_t,
    __fpu_cs: __uint16_t,
    __fpu_rsrv2: __uint16_t,
    __fpu_dp: __uint32_t,
    __fpu_ds: __uint16_t,
    __fpu_rsrv3: __uint16_t,
    __fpu_mxcsr: __uint32_t,
    __fpu_mxcsrmask: __uint32_t,
    __fpu_stmm0: struct___darwin_mmst_reg,
    __fpu_stmm1: struct___darwin_mmst_reg,
    __fpu_stmm2: struct___darwin_mmst_reg,
    __fpu_stmm3: struct___darwin_mmst_reg,
    __fpu_stmm4: struct___darwin_mmst_reg,
    __fpu_stmm5: struct___darwin_mmst_reg,
    __fpu_stmm6: struct___darwin_mmst_reg,
    __fpu_stmm7: struct___darwin_mmst_reg,
    __fpu_xmm0: struct___darwin_xmm_reg,
    __fpu_xmm1: struct___darwin_xmm_reg,
    __fpu_xmm2: struct___darwin_xmm_reg,
    __fpu_xmm3: struct___darwin_xmm_reg,
    __fpu_xmm4: struct___darwin_xmm_reg,
    __fpu_xmm5: struct___darwin_xmm_reg,
    __fpu_xmm6: struct___darwin_xmm_reg,
    __fpu_xmm7: struct___darwin_xmm_reg,
    __fpu_rsrv4: [224]u8,
    __fpu_reserved1: c_int,
};
pub const struct___darwin_i386_avx_state = extern struct {
    __fpu_reserved: [2]c_int,
    __fpu_fcw: struct___darwin_fp_control,
    __fpu_fsw: struct___darwin_fp_status,
    __fpu_ftw: __uint8_t,
    __fpu_rsrv1: __uint8_t,
    __fpu_fop: __uint16_t,
    __fpu_ip: __uint32_t,
    __fpu_cs: __uint16_t,
    __fpu_rsrv2: __uint16_t,
    __fpu_dp: __uint32_t,
    __fpu_ds: __uint16_t,
    __fpu_rsrv3: __uint16_t,
    __fpu_mxcsr: __uint32_t,
    __fpu_mxcsrmask: __uint32_t,
    __fpu_stmm0: struct___darwin_mmst_reg,
    __fpu_stmm1: struct___darwin_mmst_reg,
    __fpu_stmm2: struct___darwin_mmst_reg,
    __fpu_stmm3: struct___darwin_mmst_reg,
    __fpu_stmm4: struct___darwin_mmst_reg,
    __fpu_stmm5: struct___darwin_mmst_reg,
    __fpu_stmm6: struct___darwin_mmst_reg,
    __fpu_stmm7: struct___darwin_mmst_reg,
    __fpu_xmm0: struct___darwin_xmm_reg,
    __fpu_xmm1: struct___darwin_xmm_reg,
    __fpu_xmm2: struct___darwin_xmm_reg,
    __fpu_xmm3: struct___darwin_xmm_reg,
    __fpu_xmm4: struct___darwin_xmm_reg,
    __fpu_xmm5: struct___darwin_xmm_reg,
    __fpu_xmm6: struct___darwin_xmm_reg,
    __fpu_xmm7: struct___darwin_xmm_reg,
    __fpu_rsrv4: [224]u8,
    __fpu_reserved1: c_int,
    __avx_reserved1: [64]u8,
    __fpu_ymmh0: struct___darwin_xmm_reg,
    __fpu_ymmh1: struct___darwin_xmm_reg,
    __fpu_ymmh2: struct___darwin_xmm_reg,
    __fpu_ymmh3: struct___darwin_xmm_reg,
    __fpu_ymmh4: struct___darwin_xmm_reg,
    __fpu_ymmh5: struct___darwin_xmm_reg,
    __fpu_ymmh6: struct___darwin_xmm_reg,
    __fpu_ymmh7: struct___darwin_xmm_reg,
};
pub const struct___darwin_i386_avx512_state = extern struct {
    __fpu_reserved: [2]c_int,
    __fpu_fcw: struct___darwin_fp_control,
    __fpu_fsw: struct___darwin_fp_status,
    __fpu_ftw: __uint8_t,
    __fpu_rsrv1: __uint8_t,
    __fpu_fop: __uint16_t,
    __fpu_ip: __uint32_t,
    __fpu_cs: __uint16_t,
    __fpu_rsrv2: __uint16_t,
    __fpu_dp: __uint32_t,
    __fpu_ds: __uint16_t,
    __fpu_rsrv3: __uint16_t,
    __fpu_mxcsr: __uint32_t,
    __fpu_mxcsrmask: __uint32_t,
    __fpu_stmm0: struct___darwin_mmst_reg,
    __fpu_stmm1: struct___darwin_mmst_reg,
    __fpu_stmm2: struct___darwin_mmst_reg,
    __fpu_stmm3: struct___darwin_mmst_reg,
    __fpu_stmm4: struct___darwin_mmst_reg,
    __fpu_stmm5: struct___darwin_mmst_reg,
    __fpu_stmm6: struct___darwin_mmst_reg,
    __fpu_stmm7: struct___darwin_mmst_reg,
    __fpu_xmm0: struct___darwin_xmm_reg,
    __fpu_xmm1: struct___darwin_xmm_reg,
    __fpu_xmm2: struct___darwin_xmm_reg,
    __fpu_xmm3: struct___darwin_xmm_reg,
    __fpu_xmm4: struct___darwin_xmm_reg,
    __fpu_xmm5: struct___darwin_xmm_reg,
    __fpu_xmm6: struct___darwin_xmm_reg,
    __fpu_xmm7: struct___darwin_xmm_reg,
    __fpu_rsrv4: [224]u8,
    __fpu_reserved1: c_int,
    __avx_reserved1: [64]u8,
    __fpu_ymmh0: struct___darwin_xmm_reg,
    __fpu_ymmh1: struct___darwin_xmm_reg,
    __fpu_ymmh2: struct___darwin_xmm_reg,
    __fpu_ymmh3: struct___darwin_xmm_reg,
    __fpu_ymmh4: struct___darwin_xmm_reg,
    __fpu_ymmh5: struct___darwin_xmm_reg,
    __fpu_ymmh6: struct___darwin_xmm_reg,
    __fpu_ymmh7: struct___darwin_xmm_reg,
    __fpu_k0: struct___darwin_opmask_reg,
    __fpu_k1: struct___darwin_opmask_reg,
    __fpu_k2: struct___darwin_opmask_reg,
    __fpu_k3: struct___darwin_opmask_reg,
    __fpu_k4: struct___darwin_opmask_reg,
    __fpu_k5: struct___darwin_opmask_reg,
    __fpu_k6: struct___darwin_opmask_reg,
    __fpu_k7: struct___darwin_opmask_reg,
    __fpu_zmmh0: struct___darwin_ymm_reg,
    __fpu_zmmh1: struct___darwin_ymm_reg,
    __fpu_zmmh2: struct___darwin_ymm_reg,
    __fpu_zmmh3: struct___darwin_ymm_reg,
    __fpu_zmmh4: struct___darwin_ymm_reg,
    __fpu_zmmh5: struct___darwin_ymm_reg,
    __fpu_zmmh6: struct___darwin_ymm_reg,
    __fpu_zmmh7: struct___darwin_ymm_reg,
};
pub const struct___darwin_i386_exception_state = extern struct {
    __trapno: __uint16_t,
    __cpu: __uint16_t,
    __err: __uint32_t,
    __faultvaddr: __uint32_t,
};
pub const struct___darwin_x86_debug_state32 = extern struct {
    __dr0: c_uint,
    __dr1: c_uint,
    __dr2: c_uint,
    __dr3: c_uint,
    __dr4: c_uint,
    __dr5: c_uint,
    __dr6: c_uint,
    __dr7: c_uint,
};
pub const struct___x86_pagein_state = extern struct {
    __pagein_error: c_int,
};
pub const struct___darwin_x86_thread_state64 = extern struct {
    __rax: __uint64_t,
    __rbx: __uint64_t,
    __rcx: __uint64_t,
    __rdx: __uint64_t,
    __rdi: __uint64_t,
    __rsi: __uint64_t,
    __rbp: __uint64_t,
    __rsp: __uint64_t,
    __r8: __uint64_t,
    __r9: __uint64_t,
    __r10: __uint64_t,
    __r11: __uint64_t,
    __r12: __uint64_t,
    __r13: __uint64_t,
    __r14: __uint64_t,
    __r15: __uint64_t,
    __rip: __uint64_t,
    __rflags: __uint64_t,
    __cs: __uint64_t,
    __fs: __uint64_t,
    __gs: __uint64_t,
};
pub const struct___darwin_x86_thread_full_state64 = extern struct {
    __ss64: struct___darwin_x86_thread_state64,
    __ds: __uint64_t,
    __es: __uint64_t,
    __ss: __uint64_t,
    __gsbase: __uint64_t,
};
pub const struct___darwin_x86_float_state64 = extern struct {
    __fpu_reserved: [2]c_int,
    __fpu_fcw: struct___darwin_fp_control,
    __fpu_fsw: struct___darwin_fp_status,
    __fpu_ftw: __uint8_t,
    __fpu_rsrv1: __uint8_t,
    __fpu_fop: __uint16_t,
    __fpu_ip: __uint32_t,
    __fpu_cs: __uint16_t,
    __fpu_rsrv2: __uint16_t,
    __fpu_dp: __uint32_t,
    __fpu_ds: __uint16_t,
    __fpu_rsrv3: __uint16_t,
    __fpu_mxcsr: __uint32_t,
    __fpu_mxcsrmask: __uint32_t,
    __fpu_stmm0: struct___darwin_mmst_reg,
    __fpu_stmm1: struct___darwin_mmst_reg,
    __fpu_stmm2: struct___darwin_mmst_reg,
    __fpu_stmm3: struct___darwin_mmst_reg,
    __fpu_stmm4: struct___darwin_mmst_reg,
    __fpu_stmm5: struct___darwin_mmst_reg,
    __fpu_stmm6: struct___darwin_mmst_reg,
    __fpu_stmm7: struct___darwin_mmst_reg,
    __fpu_xmm0: struct___darwin_xmm_reg,
    __fpu_xmm1: struct___darwin_xmm_reg,
    __fpu_xmm2: struct___darwin_xmm_reg,
    __fpu_xmm3: struct___darwin_xmm_reg,
    __fpu_xmm4: struct___darwin_xmm_reg,
    __fpu_xmm5: struct___darwin_xmm_reg,
    __fpu_xmm6: struct___darwin_xmm_reg,
    __fpu_xmm7: struct___darwin_xmm_reg,
    __fpu_xmm8: struct___darwin_xmm_reg,
    __fpu_xmm9: struct___darwin_xmm_reg,
    __fpu_xmm10: struct___darwin_xmm_reg,
    __fpu_xmm11: struct___darwin_xmm_reg,
    __fpu_xmm12: struct___darwin_xmm_reg,
    __fpu_xmm13: struct___darwin_xmm_reg,
    __fpu_xmm14: struct___darwin_xmm_reg,
    __fpu_xmm15: struct___darwin_xmm_reg,
    __fpu_rsrv4: [96]u8,
    __fpu_reserved1: c_int,
};
pub const struct___darwin_x86_avx_state64 = extern struct {
    __fpu_reserved: [2]c_int,
    __fpu_fcw: struct___darwin_fp_control,
    __fpu_fsw: struct___darwin_fp_status,
    __fpu_ftw: __uint8_t,
    __fpu_rsrv1: __uint8_t,
    __fpu_fop: __uint16_t,
    __fpu_ip: __uint32_t,
    __fpu_cs: __uint16_t,
    __fpu_rsrv2: __uint16_t,
    __fpu_dp: __uint32_t,
    __fpu_ds: __uint16_t,
    __fpu_rsrv3: __uint16_t,
    __fpu_mxcsr: __uint32_t,
    __fpu_mxcsrmask: __uint32_t,
    __fpu_stmm0: struct___darwin_mmst_reg,
    __fpu_stmm1: struct___darwin_mmst_reg,
    __fpu_stmm2: struct___darwin_mmst_reg,
    __fpu_stmm3: struct___darwin_mmst_reg,
    __fpu_stmm4: struct___darwin_mmst_reg,
    __fpu_stmm5: struct___darwin_mmst_reg,
    __fpu_stmm6: struct___darwin_mmst_reg,
    __fpu_stmm7: struct___darwin_mmst_reg,
    __fpu_xmm0: struct___darwin_xmm_reg,
    __fpu_xmm1: struct___darwin_xmm_reg,
    __fpu_xmm2: struct___darwin_xmm_reg,
    __fpu_xmm3: struct___darwin_xmm_reg,
    __fpu_xmm4: struct___darwin_xmm_reg,
    __fpu_xmm5: struct___darwin_xmm_reg,
    __fpu_xmm6: struct___darwin_xmm_reg,
    __fpu_xmm7: struct___darwin_xmm_reg,
    __fpu_xmm8: struct___darwin_xmm_reg,
    __fpu_xmm9: struct___darwin_xmm_reg,
    __fpu_xmm10: struct___darwin_xmm_reg,
    __fpu_xmm11: struct___darwin_xmm_reg,
    __fpu_xmm12: struct___darwin_xmm_reg,
    __fpu_xmm13: struct___darwin_xmm_reg,
    __fpu_xmm14: struct___darwin_xmm_reg,
    __fpu_xmm15: struct___darwin_xmm_reg,
    __fpu_rsrv4: [96]u8,
    __fpu_reserved1: c_int,
    __avx_reserved1: [64]u8,
    __fpu_ymmh0: struct___darwin_xmm_reg,
    __fpu_ymmh1: struct___darwin_xmm_reg,
    __fpu_ymmh2: struct___darwin_xmm_reg,
    __fpu_ymmh3: struct___darwin_xmm_reg,
    __fpu_ymmh4: struct___darwin_xmm_reg,
    __fpu_ymmh5: struct___darwin_xmm_reg,
    __fpu_ymmh6: struct___darwin_xmm_reg,
    __fpu_ymmh7: struct___darwin_xmm_reg,
    __fpu_ymmh8: struct___darwin_xmm_reg,
    __fpu_ymmh9: struct___darwin_xmm_reg,
    __fpu_ymmh10: struct___darwin_xmm_reg,
    __fpu_ymmh11: struct___darwin_xmm_reg,
    __fpu_ymmh12: struct___darwin_xmm_reg,
    __fpu_ymmh13: struct___darwin_xmm_reg,
    __fpu_ymmh14: struct___darwin_xmm_reg,
    __fpu_ymmh15: struct___darwin_xmm_reg,
};
pub const struct___darwin_x86_avx512_state64 = extern struct {
    __fpu_reserved: [2]c_int,
    __fpu_fcw: struct___darwin_fp_control,
    __fpu_fsw: struct___darwin_fp_status,
    __fpu_ftw: __uint8_t,
    __fpu_rsrv1: __uint8_t,
    __fpu_fop: __uint16_t,
    __fpu_ip: __uint32_t,
    __fpu_cs: __uint16_t,
    __fpu_rsrv2: __uint16_t,
    __fpu_dp: __uint32_t,
    __fpu_ds: __uint16_t,
    __fpu_rsrv3: __uint16_t,
    __fpu_mxcsr: __uint32_t,
    __fpu_mxcsrmask: __uint32_t,
    __fpu_stmm0: struct___darwin_mmst_reg,
    __fpu_stmm1: struct___darwin_mmst_reg,
    __fpu_stmm2: struct___darwin_mmst_reg,
    __fpu_stmm3: struct___darwin_mmst_reg,
    __fpu_stmm4: struct___darwin_mmst_reg,
    __fpu_stmm5: struct___darwin_mmst_reg,
    __fpu_stmm6: struct___darwin_mmst_reg,
    __fpu_stmm7: struct___darwin_mmst_reg,
    __fpu_xmm0: struct___darwin_xmm_reg,
    __fpu_xmm1: struct___darwin_xmm_reg,
    __fpu_xmm2: struct___darwin_xmm_reg,
    __fpu_xmm3: struct___darwin_xmm_reg,
    __fpu_xmm4: struct___darwin_xmm_reg,
    __fpu_xmm5: struct___darwin_xmm_reg,
    __fpu_xmm6: struct___darwin_xmm_reg,
    __fpu_xmm7: struct___darwin_xmm_reg,
    __fpu_xmm8: struct___darwin_xmm_reg,
    __fpu_xmm9: struct___darwin_xmm_reg,
    __fpu_xmm10: struct___darwin_xmm_reg,
    __fpu_xmm11: struct___darwin_xmm_reg,
    __fpu_xmm12: struct___darwin_xmm_reg,
    __fpu_xmm13: struct___darwin_xmm_reg,
    __fpu_xmm14: struct___darwin_xmm_reg,
    __fpu_xmm15: struct___darwin_xmm_reg,
    __fpu_rsrv4: [96]u8,
    __fpu_reserved1: c_int,
    __avx_reserved1: [64]u8,
    __fpu_ymmh0: struct___darwin_xmm_reg,
    __fpu_ymmh1: struct___darwin_xmm_reg,
    __fpu_ymmh2: struct___darwin_xmm_reg,
    __fpu_ymmh3: struct___darwin_xmm_reg,
    __fpu_ymmh4: struct___darwin_xmm_reg,
    __fpu_ymmh5: struct___darwin_xmm_reg,
    __fpu_ymmh6: struct___darwin_xmm_reg,
    __fpu_ymmh7: struct___darwin_xmm_reg,
    __fpu_ymmh8: struct___darwin_xmm_reg,
    __fpu_ymmh9: struct___darwin_xmm_reg,
    __fpu_ymmh10: struct___darwin_xmm_reg,
    __fpu_ymmh11: struct___darwin_xmm_reg,
    __fpu_ymmh12: struct___darwin_xmm_reg,
    __fpu_ymmh13: struct___darwin_xmm_reg,
    __fpu_ymmh14: struct___darwin_xmm_reg,
    __fpu_ymmh15: struct___darwin_xmm_reg,
    __fpu_k0: struct___darwin_opmask_reg,
    __fpu_k1: struct___darwin_opmask_reg,
    __fpu_k2: struct___darwin_opmask_reg,
    __fpu_k3: struct___darwin_opmask_reg,
    __fpu_k4: struct___darwin_opmask_reg,
    __fpu_k5: struct___darwin_opmask_reg,
    __fpu_k6: struct___darwin_opmask_reg,
    __fpu_k7: struct___darwin_opmask_reg,
    __fpu_zmmh0: struct___darwin_ymm_reg,
    __fpu_zmmh1: struct___darwin_ymm_reg,
    __fpu_zmmh2: struct___darwin_ymm_reg,
    __fpu_zmmh3: struct___darwin_ymm_reg,
    __fpu_zmmh4: struct___darwin_ymm_reg,
    __fpu_zmmh5: struct___darwin_ymm_reg,
    __fpu_zmmh6: struct___darwin_ymm_reg,
    __fpu_zmmh7: struct___darwin_ymm_reg,
    __fpu_zmmh8: struct___darwin_ymm_reg,
    __fpu_zmmh9: struct___darwin_ymm_reg,
    __fpu_zmmh10: struct___darwin_ymm_reg,
    __fpu_zmmh11: struct___darwin_ymm_reg,
    __fpu_zmmh12: struct___darwin_ymm_reg,
    __fpu_zmmh13: struct___darwin_ymm_reg,
    __fpu_zmmh14: struct___darwin_ymm_reg,
    __fpu_zmmh15: struct___darwin_ymm_reg,
    __fpu_zmm16: struct___darwin_zmm_reg,
    __fpu_zmm17: struct___darwin_zmm_reg,
    __fpu_zmm18: struct___darwin_zmm_reg,
    __fpu_zmm19: struct___darwin_zmm_reg,
    __fpu_zmm20: struct___darwin_zmm_reg,
    __fpu_zmm21: struct___darwin_zmm_reg,
    __fpu_zmm22: struct___darwin_zmm_reg,
    __fpu_zmm23: struct___darwin_zmm_reg,
    __fpu_zmm24: struct___darwin_zmm_reg,
    __fpu_zmm25: struct___darwin_zmm_reg,
    __fpu_zmm26: struct___darwin_zmm_reg,
    __fpu_zmm27: struct___darwin_zmm_reg,
    __fpu_zmm28: struct___darwin_zmm_reg,
    __fpu_zmm29: struct___darwin_zmm_reg,
    __fpu_zmm30: struct___darwin_zmm_reg,
    __fpu_zmm31: struct___darwin_zmm_reg,
};
pub const struct___darwin_x86_exception_state64 = extern struct {
    __trapno: __uint16_t,
    __cpu: __uint16_t,
    __err: __uint32_t,
    __faultvaddr: __uint64_t,
};
pub const struct___darwin_x86_debug_state64 = extern struct {
    __dr0: __uint64_t,
    __dr1: __uint64_t,
    __dr2: __uint64_t,
    __dr3: __uint64_t,
    __dr4: __uint64_t,
    __dr5: __uint64_t,
    __dr6: __uint64_t,
    __dr7: __uint64_t,
};
pub const struct___darwin_x86_cpmu_state64 = extern struct {
    __ctrs: [16]__uint64_t,
};
pub const struct___darwin_mcontext32 = extern struct {
    __es: struct___darwin_i386_exception_state,
    __ss: struct___darwin_i386_thread_state,
    __fs: struct___darwin_i386_float_state,
};
pub const struct___darwin_mcontext_avx32 = extern struct {
    __es: struct___darwin_i386_exception_state,
    __ss: struct___darwin_i386_thread_state,
    __fs: struct___darwin_i386_avx_state,
};
pub const struct___darwin_mcontext_avx512_32 = extern struct {
    __es: struct___darwin_i386_exception_state,
    __ss: struct___darwin_i386_thread_state,
    __fs: struct___darwin_i386_avx512_state,
};
pub const struct___darwin_mcontext64 = extern struct {
    __es: struct___darwin_x86_exception_state64,
    __ss: struct___darwin_x86_thread_state64,
    __fs: struct___darwin_x86_float_state64,
};
pub const struct___darwin_mcontext64_full = extern struct {
    __es: struct___darwin_x86_exception_state64,
    __ss: struct___darwin_x86_thread_full_state64,
    __fs: struct___darwin_x86_float_state64,
};
pub const struct___darwin_mcontext_avx64 = extern struct {
    __es: struct___darwin_x86_exception_state64,
    __ss: struct___darwin_x86_thread_state64,
    __fs: struct___darwin_x86_avx_state64,
};
pub const struct___darwin_mcontext_avx64_full = extern struct {
    __es: struct___darwin_x86_exception_state64,
    __ss: struct___darwin_x86_thread_full_state64,
    __fs: struct___darwin_x86_avx_state64,
};
pub const struct___darwin_mcontext_avx512_64 = extern struct {
    __es: struct___darwin_x86_exception_state64,
    __ss: struct___darwin_x86_thread_state64,
    __fs: struct___darwin_x86_avx512_state64,
};
pub const struct___darwin_mcontext_avx512_64_full = extern struct {
    __es: struct___darwin_x86_exception_state64,
    __ss: struct___darwin_x86_thread_full_state64,
    __fs: struct___darwin_x86_avx512_state64,
};
pub const mcontext_t = [*c]struct___darwin_mcontext64;
pub const struct___darwin_sigaltstack = extern struct {
    ss_sp: ?*c_void,
    ss_size: __darwin_size_t,
    ss_flags: c_int,
};
pub const stack_t = struct___darwin_sigaltstack;
pub const struct___darwin_ucontext = extern struct {
    uc_onstack: c_int,
    uc_sigmask: __darwin_sigset_t,
    uc_stack: struct___darwin_sigaltstack,
    uc_link: [*c]struct___darwin_ucontext,
    uc_mcsize: __darwin_size_t,
    uc_mcontext: [*c]struct___darwin_mcontext64,
};
pub const ucontext_t = struct___darwin_ucontext;
pub const sigset_t = __darwin_sigset_t;
pub const union_sigval = extern union {
    sival_int: c_int,
    sival_ptr: ?*c_void,
};
pub const struct_sigevent = extern struct {
    sigev_notify: c_int,
    sigev_signo: c_int,
    sigev_value: union_sigval,
    sigev_notify_function: ?fn (union_sigval) callconv(.C) void,
    sigev_notify_attributes: [*c]pthread_attr_t,
};
pub const struct___siginfo = extern struct {
    si_signo: c_int,
    si_errno: c_int,
    si_code: c_int,
    si_pid: pid_t,
    si_uid: uid_t,
    si_status: c_int,
    si_addr: ?*c_void,
    si_value: union_sigval,
    si_band: c_long,
    __pad: [7]c_ulong,
};
pub const siginfo_t = struct___siginfo;
pub const union___sigaction_u = extern union {
    __sa_handler: ?fn (c_int) callconv(.C) void,
    __sa_sigaction: ?fn (c_int, [*c]struct___siginfo, ?*c_void) callconv(.C) void,
};
pub const struct___sigaction = extern struct {
    __sigaction_u: union___sigaction_u,
    sa_tramp: ?fn (?*c_void, c_int, c_int, [*c]siginfo_t, ?*c_void) callconv(.C) void,
    sa_mask: sigset_t,
    sa_flags: c_int,
};
pub const struct_sigaction = extern struct {
    __sigaction_u: union___sigaction_u,
    sa_mask: sigset_t,
    sa_flags: c_int,
};
pub const sig_t = ?fn (c_int) callconv(.C) void;
pub const struct_sigvec = extern struct {
    sv_handler: ?fn (c_int) callconv(.C) void,
    sv_mask: c_int,
    sv_flags: c_int,
};
pub const struct_sigstack = extern struct {
    ss_sp: [*c]u8,
    ss_onstack: c_int,
};
pub extern fn signal(c_int, ?fn (c_int) callconv(.C) void) ?fn (c_int) callconv(.C) void;
pub extern const sys_signame: [32][*c]const u8;
pub extern const sys_siglist: [32][*c]const u8;
pub extern fn raise(c_int) c_int;
pub extern fn bsd_signal(c_int, ?fn (c_int) callconv(.C) void) ?fn (c_int) callconv(.C) void;
pub extern fn kill(pid_t, c_int) c_int;
pub extern fn killpg(pid_t, c_int) c_int;
pub extern fn pthread_kill(pthread_t, c_int) c_int;
pub extern fn pthread_sigmask(c_int, [*c]const sigset_t, [*c]sigset_t) c_int;
pub extern fn sigaction(c_int, noalias [*c]const struct_sigaction, noalias [*c]struct_sigaction) c_int;
pub extern fn sigaddset([*c]sigset_t, c_int) c_int;
pub extern fn sigaltstack(noalias [*c]const stack_t, noalias [*c]stack_t) c_int;
pub extern fn sigdelset([*c]sigset_t, c_int) c_int;
pub extern fn sigemptyset([*c]sigset_t) c_int;
pub extern fn sigfillset([*c]sigset_t) c_int;
pub extern fn sighold(c_int) c_int;
pub extern fn sigignore(c_int) c_int;
pub extern fn siginterrupt(c_int, c_int) c_int;
pub extern fn sigismember([*c]const sigset_t, c_int) c_int;
pub extern fn sigpause(c_int) c_int;
pub extern fn sigpending([*c]sigset_t) c_int;
pub extern fn sigprocmask(c_int, noalias [*c]const sigset_t, noalias [*c]sigset_t) c_int;
pub extern fn sigrelse(c_int) c_int;
pub extern fn sigset(c_int, ?fn (c_int) callconv(.C) void) ?fn (c_int) callconv(.C) void;
pub extern fn sigsuspend([*c]const sigset_t) c_int;
pub extern fn sigwait(noalias [*c]const sigset_t, noalias [*c]c_int) c_int;
pub extern fn psignal(c_uint, [*c]const u8) void;
pub extern fn sigblock(c_int) c_int;
pub extern fn sigsetmask(c_int) c_int;
pub extern fn sigvec(c_int, [*c]struct_sigvec, [*c]struct_sigvec) c_int;
pub fn __sigbits(arg___signo: c_int) callconv(.C) c_int {
    var __signo = arg___signo;
    return if (__signo > @as(c_int, 32)) @as(c_int, 0) else (@as(c_int, 1) << @intCast(@import("std").math.Log2Int(c_int), (__signo - @as(c_int, 1))));
}
pub const ptrdiff_t = c_long;
pub const max_align_t = c_longdouble;
pub extern fn renameat(c_int, [*c]const u8, c_int, [*c]const u8) c_int;
pub extern fn renamex_np([*c]const u8, [*c]const u8, c_uint) c_int;
pub extern fn renameatx_np(c_int, [*c]const u8, c_int, [*c]const u8, c_uint) c_int;
pub const fpos_t = __darwin_off_t;
pub const struct___sbuf = extern struct {
    _base: [*c]u8,
    _size: c_int,
};
pub const struct___sFILEX = @OpaqueType();
pub const struct___sFILE = extern struct {
    _p: [*c]u8,
    _r: c_int,
    _w: c_int,
    _flags: c_short,
    _file: c_short,
    _bf: struct___sbuf,
    _lbfsize: c_int,
    _cookie: ?*c_void,
    _close: ?fn (?*c_void) callconv(.C) c_int,
    _read: ?fn (?*c_void, [*c]u8, c_int) callconv(.C) c_int,
    _seek: ?fn (?*c_void, fpos_t, c_int) callconv(.C) fpos_t,
    _write: ?fn (?*c_void, [*c]const u8, c_int) callconv(.C) c_int,
    _ub: struct___sbuf,
    _extra: ?*struct___sFILEX,
    _ur: c_int,
    _ubuf: [3]u8,
    _nbuf: [1]u8,
    _lb: struct___sbuf,
    _blksize: c_int,
    _offset: fpos_t,
};
pub const FILE = struct___sFILE;
pub extern var __stdinp: [*c]FILE;
pub extern var __stdoutp: [*c]FILE;
pub extern var __stderrp: [*c]FILE;
pub extern fn clearerr([*c]FILE) void;
pub extern fn fclose([*c]FILE) c_int;
pub extern fn feof([*c]FILE) c_int;
pub extern fn ferror([*c]FILE) c_int;
pub extern fn fflush([*c]FILE) c_int;
pub extern fn fgetc([*c]FILE) c_int;
pub extern fn fgetpos(noalias [*c]FILE, [*c]fpos_t) c_int;
pub extern fn fgets(noalias [*c]u8, c_int, [*c]FILE) [*c]u8;
pub extern fn fopen(__filename: [*c]const u8, __mode: [*c]const u8) [*c]FILE;
pub extern fn fprintf([*c]FILE, [*c]const u8, ...) c_int;
pub extern fn fputc(c_int, [*c]FILE) c_int;
pub extern fn fputs(noalias [*c]const u8, noalias [*c]FILE) c_int;
pub extern fn fread(__ptr: ?*c_void, __size: c_ulong, __nitems: c_ulong, __stream: [*c]FILE) c_ulong;
pub extern fn freopen(noalias [*c]const u8, noalias [*c]const u8, noalias [*c]FILE) [*c]FILE;
pub extern fn fscanf(noalias [*c]FILE, noalias [*c]const u8, ...) c_int;
pub extern fn fseek([*c]FILE, c_long, c_int) c_int;
pub extern fn fsetpos([*c]FILE, [*c]const fpos_t) c_int;
pub extern fn ftell([*c]FILE) c_long;
pub extern fn fwrite(__ptr: ?*const c_void, __size: c_ulong, __nitems: c_ulong, __stream: [*c]FILE) c_ulong;
pub extern fn getc([*c]FILE) c_int;
pub extern fn getchar() c_int;
pub extern fn gets([*c]u8) [*c]u8;
pub extern fn perror([*c]const u8) void;
pub extern fn printf([*c]const u8, ...) c_int;
pub extern fn putc(c_int, [*c]FILE) c_int;
pub extern fn putchar(c_int) c_int;
pub extern fn puts([*c]const u8) c_int;
pub extern fn remove([*c]const u8) c_int;
pub extern fn rename(__old: [*c]const u8, __new: [*c]const u8) c_int;
pub extern fn rewind([*c]FILE) void;
pub extern fn scanf(noalias [*c]const u8, ...) c_int;
pub extern fn setbuf(noalias [*c]FILE, noalias [*c]u8) void;
pub extern fn setvbuf(noalias [*c]FILE, noalias [*c]u8, c_int, usize) c_int;
pub extern fn sprintf([*c]u8, [*c]const u8, ...) c_int;
pub extern fn sscanf(noalias [*c]const u8, noalias [*c]const u8, ...) c_int;
pub extern fn tmpfile() [*c]FILE;
pub extern fn tmpnam([*c]u8) [*c]u8;
pub extern fn ungetc(c_int, [*c]FILE) c_int;
pub const struct___va_list_tag = extern struct {
    gp_offset: c_uint,
    fp_offset: c_uint,
    overflow_arg_area: ?*c_void,
    reg_save_area: ?*c_void,
};
pub extern fn vfprintf([*c]FILE, [*c]const u8, [*c]struct___va_list_tag) c_int;
pub extern fn vprintf([*c]const u8, [*c]struct___va_list_tag) c_int;
pub extern fn vsprintf([*c]u8, [*c]const u8, [*c]struct___va_list_tag) c_int;
pub extern fn ctermid([*c]u8) [*c]u8;
pub extern fn fdopen(c_int, [*c]const u8) [*c]FILE;
pub extern fn fileno([*c]FILE) c_int;
pub extern fn pclose([*c]FILE) c_int;
pub extern fn popen([*c]const u8, [*c]const u8) [*c]FILE;
pub extern fn __srget([*c]FILE) c_int;
pub extern fn __svfscanf([*c]FILE, [*c]const u8, [*c]struct___va_list_tag) c_int;
pub extern fn __swbuf(c_int, [*c]FILE) c_int;
pub fn __sputc(arg__c: c_int, arg__p: [*c]FILE) callconv(.C) c_int {
    var _c = arg__c;
    var _p = arg__p;
    if (((blk: {
        const ref = &_p.*._w;
        ref.* -= 1;
        break :blk ref.*;
    }) >= @as(c_int, 0)) or ((_p.*._w >= _p.*._lbfsize) and (@bitCast(c_int, @as(c_uint, @bitCast(u8, @truncate(i8, _c)))) != @as(c_int, '\n'))))
        return @bitCast(c_int, @as(c_uint, (blk: {
            const tmp = @bitCast(u8, @truncate(i8, _c));
            (blk: {
                const ref = &_p.*._p;
                const tmp_1 = ref.*;
                ref.* += 1;
                break :blk tmp_1;
            }).?.* = tmp;
            break :blk tmp;
        })))
    else
        return (__swbuf(_c, _p));
}
pub extern fn flockfile([*c]FILE) void;
pub extern fn ftrylockfile([*c]FILE) c_int;
pub extern fn funlockfile([*c]FILE) void;
pub extern fn getc_unlocked([*c]FILE) c_int;
pub extern fn getchar_unlocked() c_int;
pub extern fn putc_unlocked(c_int, [*c]FILE) c_int;
pub extern fn putchar_unlocked(c_int) c_int;
pub extern fn getw([*c]FILE) c_int;
pub extern fn putw(c_int, [*c]FILE) c_int;
pub extern fn tempnam(__dir: [*c]const u8, __prefix: [*c]const u8) [*c]u8;
pub extern fn fseeko(__stream: [*c]FILE, __offset: off_t, __whence: c_int) c_int;
pub extern fn ftello(__stream: [*c]FILE) off_t;
pub extern fn snprintf(__str: [*c]u8, __size: c_ulong, __format: [*c]const u8, ...) c_int;
pub extern fn vfscanf(noalias __stream: [*c]FILE, noalias __format: [*c]const u8, [*c]struct___va_list_tag) c_int;
pub extern fn vscanf(noalias __format: [*c]const u8, [*c]struct___va_list_tag) c_int;
pub extern fn vsnprintf(__str: [*c]u8, __size: c_ulong, __format: [*c]const u8, [*c]struct___va_list_tag) c_int;
pub extern fn vsscanf(noalias __str: [*c]const u8, noalias __format: [*c]const u8, [*c]struct___va_list_tag) c_int;
pub extern fn dprintf(c_int, noalias [*c]const u8, ...) c_int;
pub extern fn vdprintf(c_int, noalias [*c]const u8, [*c]struct___va_list_tag) c_int;
pub extern fn getdelim(noalias __linep: [*c][*c]u8, noalias __linecapp: [*c]usize, __delimiter: c_int, noalias __stream: [*c]FILE) isize;
pub extern fn getline(noalias __linep: [*c][*c]u8, noalias __linecapp: [*c]usize, noalias __stream: [*c]FILE) isize;
pub extern fn fmemopen(noalias __buf: ?*c_void, __size: usize, noalias __mode: [*c]const u8) [*c]FILE;
pub extern fn open_memstream(__bufp: [*c][*c]u8, __sizep: [*c]usize) [*c]FILE;
pub extern const sys_nerr: c_int;
pub extern const sys_errlist: [*c]const [*c]const u8;
pub extern fn asprintf(noalias [*c][*c]u8, noalias [*c]const u8, ...) c_int;
pub extern fn ctermid_r([*c]u8) [*c]u8;
pub extern fn fgetln([*c]FILE, [*c]usize) [*c]u8;
pub extern fn fmtcheck([*c]const u8, [*c]const u8) [*c]const u8;
pub extern fn fpurge([*c]FILE) c_int;
pub extern fn setbuffer([*c]FILE, [*c]u8, c_int) void;
pub extern fn setlinebuf([*c]FILE) c_int;
pub extern fn vasprintf(noalias [*c][*c]u8, noalias [*c]const u8, [*c]struct___va_list_tag) c_int;
pub extern fn zopen([*c]const u8, [*c]const u8, c_int) [*c]FILE;
pub extern fn funopen(?*const c_void, ?fn (?*c_void, [*c]u8, c_int) callconv(.C) c_int, ?fn (?*c_void, [*c]const u8, c_int) callconv(.C) c_int, ?fn (?*c_void, fpos_t, c_int) callconv(.C) fpos_t, ?fn (?*c_void) callconv(.C) c_int) [*c]FILE;
pub extern fn __sprintf_chk(noalias [*c]u8, c_int, usize, noalias [*c]const u8, ...) c_int;
pub extern fn __snprintf_chk(noalias [*c]u8, usize, c_int, usize, noalias [*c]const u8, ...) c_int;
pub extern fn __vsprintf_chk(noalias [*c]u8, c_int, usize, noalias [*c]const u8, [*c]struct___va_list_tag) c_int;
pub extern fn __vsnprintf_chk(noalias [*c]u8, usize, c_int, usize, noalias [*c]const u8, [*c]struct___va_list_tag) c_int;
pub const P_ALL = @enumToInt(enum_unnamed_70.P_ALL);
pub const P_PID = @enumToInt(enum_unnamed_70.P_PID);
pub const P_PGID = @enumToInt(enum_unnamed_70.P_PGID);
const enum_unnamed_70 = extern enum(c_int) {
    P_ALL,
    P_PID,
    P_PGID,
    _,
};
pub const idtype_t = enum_unnamed_70;
pub const struct_timeval = extern struct {
    tv_sec: __darwin_time_t,
    tv_usec: __darwin_suseconds_t,
};
pub const rlim_t = __uint64_t;
pub const struct_rusage = extern struct {
    ru_utime: struct_timeval,
    ru_stime: struct_timeval,
    ru_maxrss: c_long,
    ru_ixrss: c_long,
    ru_idrss: c_long,
    ru_isrss: c_long,
    ru_minflt: c_long,
    ru_majflt: c_long,
    ru_nswap: c_long,
    ru_inblock: c_long,
    ru_oublock: c_long,
    ru_msgsnd: c_long,
    ru_msgrcv: c_long,
    ru_nsignals: c_long,
    ru_nvcsw: c_long,
    ru_nivcsw: c_long,
};
pub const rusage_info_t = ?*c_void;
pub const struct_rusage_info_v0 = extern struct {
    ri_uuid: [16]u8,
    ri_user_time: u64,
    ri_system_time: u64,
    ri_pkg_idle_wkups: u64,
    ri_interrupt_wkups: u64,
    ri_pageins: u64,
    ri_wired_size: u64,
    ri_resident_size: u64,
    ri_phys_footprint: u64,
    ri_proc_start_abstime: u64,
    ri_proc_exit_abstime: u64,
};
pub const struct_rusage_info_v1 = extern struct {
    ri_uuid: [16]u8,
    ri_user_time: u64,
    ri_system_time: u64,
    ri_pkg_idle_wkups: u64,
    ri_interrupt_wkups: u64,
    ri_pageins: u64,
    ri_wired_size: u64,
    ri_resident_size: u64,
    ri_phys_footprint: u64,
    ri_proc_start_abstime: u64,
    ri_proc_exit_abstime: u64,
    ri_child_user_time: u64,
    ri_child_system_time: u64,
    ri_child_pkg_idle_wkups: u64,
    ri_child_interrupt_wkups: u64,
    ri_child_pageins: u64,
    ri_child_elapsed_abstime: u64,
};
pub const struct_rusage_info_v2 = extern struct {
    ri_uuid: [16]u8,
    ri_user_time: u64,
    ri_system_time: u64,
    ri_pkg_idle_wkups: u64,
    ri_interrupt_wkups: u64,
    ri_pageins: u64,
    ri_wired_size: u64,
    ri_resident_size: u64,
    ri_phys_footprint: u64,
    ri_proc_start_abstime: u64,
    ri_proc_exit_abstime: u64,
    ri_child_user_time: u64,
    ri_child_system_time: u64,
    ri_child_pkg_idle_wkups: u64,
    ri_child_interrupt_wkups: u64,
    ri_child_pageins: u64,
    ri_child_elapsed_abstime: u64,
    ri_diskio_bytesread: u64,
    ri_diskio_byteswritten: u64,
};
pub const struct_rusage_info_v3 = extern struct {
    ri_uuid: [16]u8,
    ri_user_time: u64,
    ri_system_time: u64,
    ri_pkg_idle_wkups: u64,
    ri_interrupt_wkups: u64,
    ri_pageins: u64,
    ri_wired_size: u64,
    ri_resident_size: u64,
    ri_phys_footprint: u64,
    ri_proc_start_abstime: u64,
    ri_proc_exit_abstime: u64,
    ri_child_user_time: u64,
    ri_child_system_time: u64,
    ri_child_pkg_idle_wkups: u64,
    ri_child_interrupt_wkups: u64,
    ri_child_pageins: u64,
    ri_child_elapsed_abstime: u64,
    ri_diskio_bytesread: u64,
    ri_diskio_byteswritten: u64,
    ri_cpu_time_qos_default: u64,
    ri_cpu_time_qos_maintenance: u64,
    ri_cpu_time_qos_background: u64,
    ri_cpu_time_qos_utility: u64,
    ri_cpu_time_qos_legacy: u64,
    ri_cpu_time_qos_user_initiated: u64,
    ri_cpu_time_qos_user_interactive: u64,
    ri_billed_system_time: u64,
    ri_serviced_system_time: u64,
};
pub const struct_rusage_info_v4 = extern struct {
    ri_uuid: [16]u8,
    ri_user_time: u64,
    ri_system_time: u64,
    ri_pkg_idle_wkups: u64,
    ri_interrupt_wkups: u64,
    ri_pageins: u64,
    ri_wired_size: u64,
    ri_resident_size: u64,
    ri_phys_footprint: u64,
    ri_proc_start_abstime: u64,
    ri_proc_exit_abstime: u64,
    ri_child_user_time: u64,
    ri_child_system_time: u64,
    ri_child_pkg_idle_wkups: u64,
    ri_child_interrupt_wkups: u64,
    ri_child_pageins: u64,
    ri_child_elapsed_abstime: u64,
    ri_diskio_bytesread: u64,
    ri_diskio_byteswritten: u64,
    ri_cpu_time_qos_default: u64,
    ri_cpu_time_qos_maintenance: u64,
    ri_cpu_time_qos_background: u64,
    ri_cpu_time_qos_utility: u64,
    ri_cpu_time_qos_legacy: u64,
    ri_cpu_time_qos_user_initiated: u64,
    ri_cpu_time_qos_user_interactive: u64,
    ri_billed_system_time: u64,
    ri_serviced_system_time: u64,
    ri_logical_writes: u64,
    ri_lifetime_max_phys_footprint: u64,
    ri_instructions: u64,
    ri_cycles: u64,
    ri_billed_energy: u64,
    ri_serviced_energy: u64,
    ri_interval_max_phys_footprint: u64,
    ri_runnable_time: u64,
};
pub const rusage_info_current = struct_rusage_info_v4;
pub const struct_rlimit = extern struct {
    rlim_cur: rlim_t,
    rlim_max: rlim_t,
};
pub const struct_proc_rlimit_control_wakeupmon = extern struct {
    wm_flags: u32,
    wm_rate: i32,
};
pub extern fn getpriority(c_int, id_t) c_int;
pub extern fn getiopolicy_np(c_int, c_int) c_int;
pub extern fn getrlimit(c_int, [*c]struct_rlimit) c_int;
pub extern fn getrusage(c_int, [*c]struct_rusage) c_int;
pub extern fn setpriority(c_int, id_t, c_int) c_int;
pub extern fn setiopolicy_np(c_int, c_int, c_int) c_int;
pub extern fn setrlimit(c_int, [*c]const struct_rlimit) c_int;
const struct_unnamed_71 = @OpaqueType(); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/wait.h:201:19: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_72 = @OpaqueType(); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/wait.h:220:19: warning: struct demoted to opaque type - has bitfield
pub const union_wait = extern union {
    w_status: c_int,
    w_T: struct_unnamed_71,
    w_S: struct_unnamed_72,
};
pub extern fn wait([*c]c_int) pid_t;
pub extern fn waitpid(pid_t, [*c]c_int, c_int) pid_t;
pub extern fn waitid(idtype_t, id_t, [*c]siginfo_t, c_int) c_int;
pub extern fn wait3([*c]c_int, c_int, [*c]struct_rusage) pid_t;
pub extern fn wait4(pid_t, [*c]c_int, c_int, [*c]struct_rusage) pid_t;
pub extern fn alloca(c_ulong) ?*c_void;
const struct_unnamed_73 = extern struct {
    quot: c_int,
    rem: c_int,
};
pub const div_t = struct_unnamed_73;
const struct_unnamed_74 = extern struct {
    quot: c_long,
    rem: c_long,
};
pub const ldiv_t = struct_unnamed_74;
const struct_unnamed_75 = extern struct {
    quot: c_longlong,
    rem: c_longlong,
};
pub const lldiv_t = struct_unnamed_75;
pub extern var __mb_cur_max: c_int;
pub extern fn malloc(__size: c_ulong) ?*c_void;
pub extern fn calloc(__count: c_ulong, __size: c_ulong) ?*c_void;
pub extern fn free(?*c_void) void;
pub extern fn realloc(__ptr: ?*c_void, __size: c_ulong) ?*c_void;
pub extern fn valloc(usize) ?*c_void;
pub extern fn aligned_alloc(__alignment: usize, __size: usize) ?*c_void;
pub extern fn posix_memalign(__memptr: [*c]?*c_void, __alignment: usize, __size: usize) c_int;
pub extern fn abort() noreturn;
pub extern fn abs(c_int) c_int;
pub extern fn atexit(?fn () callconv(.C) void) c_int;
pub extern fn atof([*c]const u8) f64;
pub extern fn atoi([*c]const u8) c_int;
pub extern fn atol([*c]const u8) c_long;
pub extern fn atoll([*c]const u8) c_longlong;
pub extern fn bsearch(__key: ?*const c_void, __base: ?*const c_void, __nel: usize, __width: usize, __compar: ?fn (?*const c_void, ?*const c_void) callconv(.C) c_int) ?*c_void;
pub extern fn div(c_int, c_int) div_t;
pub extern fn exit(c_int) noreturn;
pub extern fn getenv([*c]const u8) [*c]u8;
pub extern fn labs(c_long) c_long;
pub extern fn ldiv(c_long, c_long) ldiv_t;
pub extern fn llabs(c_longlong) c_longlong;
pub extern fn lldiv(c_longlong, c_longlong) lldiv_t;
pub extern fn mblen(__s: [*c]const u8, __n: usize) c_int;
pub extern fn mbstowcs(noalias [*c]wchar_t, noalias [*c]const u8, usize) usize;
pub extern fn mbtowc(noalias [*c]wchar_t, noalias [*c]const u8, usize) c_int;
pub extern fn qsort(__base: ?*c_void, __nel: usize, __width: usize, __compar: ?fn (?*const c_void, ?*const c_void) callconv(.C) c_int) void;
pub extern fn rand() c_int;
pub extern fn srand(c_uint) void;
pub extern fn strtod([*c]const u8, [*c][*c]u8) f64;
pub extern fn strtof([*c]const u8, [*c][*c]u8) f32;
pub extern fn strtol(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_long;
pub extern fn strtold([*c]const u8, [*c][*c]u8) c_longdouble;
pub extern fn strtoll(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_longlong;
pub extern fn strtoul(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_ulong;
pub extern fn strtoull(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_ulonglong;
pub extern fn system([*c]const u8) c_int;
pub extern fn wcstombs(noalias [*c]u8, noalias [*c]const wchar_t, usize) usize;
pub extern fn wctomb([*c]u8, wchar_t) c_int;
pub extern fn _Exit(c_int) noreturn;
pub extern fn a64l([*c]const u8) c_long;
pub extern fn drand48() f64;
pub extern fn ecvt(f64, c_int, noalias [*c]c_int, noalias [*c]c_int) [*c]u8;
pub extern fn erand48([*c]c_ushort) f64;
pub extern fn fcvt(f64, c_int, noalias [*c]c_int, noalias [*c]c_int) [*c]u8;
pub extern fn gcvt(f64, c_int, [*c]u8) [*c]u8;
pub extern fn getsubopt([*c][*c]u8, [*c]const [*c]u8, [*c][*c]u8) c_int;
pub extern fn grantpt(c_int) c_int;
pub extern fn initstate(c_uint, [*c]u8, usize) [*c]u8;
pub extern fn jrand48([*c]c_ushort) c_long;
pub extern fn l64a(c_long) [*c]u8;
pub extern fn lcong48([*c]c_ushort) void;
pub extern fn lrand48() c_long;
pub extern fn mktemp([*c]u8) [*c]u8;
pub extern fn mkstemp([*c]u8) c_int;
pub extern fn mrand48() c_long;
pub extern fn nrand48([*c]c_ushort) c_long;
pub extern fn posix_openpt(c_int) c_int;
pub extern fn ptsname(c_int) [*c]u8;
pub extern fn ptsname_r(fildes: c_int, buffer: [*c]u8, buflen: usize) c_int;
pub extern fn putenv([*c]u8) c_int;
pub extern fn random() c_long;
pub extern fn rand_r([*c]c_uint) c_int;
pub extern fn realpath(noalias [*c]const u8, noalias [*c]u8) [*c]u8;
pub extern fn seed48([*c]c_ushort) [*c]c_ushort;
pub extern fn setenv(__name: [*c]const u8, __value: [*c]const u8, __overwrite: c_int) c_int;
pub extern fn setkey([*c]const u8) void;
pub extern fn setstate([*c]const u8) [*c]u8;
pub extern fn srand48(c_long) void;
pub extern fn srandom(c_uint) void;
pub extern fn unlockpt(c_int) c_int;
pub extern fn unsetenv([*c]const u8) c_int;
pub extern fn arc4random() u32;
pub extern fn arc4random_addrandom([*c]u8, c_int) void;
pub extern fn arc4random_buf(__buf: ?*c_void, __nbytes: usize) void;
pub extern fn arc4random_stir() void;
pub extern fn arc4random_uniform(__upper_bound: u32) u32; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdlib.h:275:6: warning: unsupported type: 'BlockPointer'
pub const atexit_b = @compileError("unable to resolve prototype of function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdlib.h:276:7: warning: unsupported type: 'BlockPointer'
pub const bsearch_b = @compileError("unable to resolve prototype of function");
pub extern fn cgetcap([*c]u8, [*c]const u8, c_int) [*c]u8;
pub extern fn cgetclose() c_int;
pub extern fn cgetent([*c][*c]u8, [*c][*c]u8, [*c]const u8) c_int;
pub extern fn cgetfirst([*c][*c]u8, [*c][*c]u8) c_int;
pub extern fn cgetmatch([*c]const u8, [*c]const u8) c_int;
pub extern fn cgetnext([*c][*c]u8, [*c][*c]u8) c_int;
pub extern fn cgetnum([*c]u8, [*c]const u8, [*c]c_long) c_int;
pub extern fn cgetset([*c]const u8) c_int;
pub extern fn cgetstr([*c]u8, [*c]const u8, [*c][*c]u8) c_int;
pub extern fn cgetustr([*c]u8, [*c]const u8, [*c][*c]u8) c_int;
pub extern fn daemon(c_int, c_int) c_int;
pub extern fn devname(dev_t, mode_t) [*c]u8;
pub extern fn devname_r(dev_t, mode_t, buf: [*c]u8, len: c_int) [*c]u8;
pub extern fn getbsize([*c]c_int, [*c]c_long) [*c]u8;
pub extern fn getloadavg([*c]f64, c_int) c_int;
pub extern fn getprogname() [*c]const u8;
pub extern fn setprogname([*c]const u8) void;
pub extern fn heapsort(__base: ?*c_void, __nel: usize, __width: usize, __compar: ?fn (?*const c_void, ?*const c_void) callconv(.C) c_int) c_int; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdlib.h:312:6: warning: unsupported type: 'BlockPointer'
pub const heapsort_b = @compileError("unable to resolve prototype of function");
pub extern fn mergesort(__base: ?*c_void, __nel: usize, __width: usize, __compar: ?fn (?*const c_void, ?*const c_void) callconv(.C) c_int) c_int; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdlib.h:319:6: warning: unsupported type: 'BlockPointer'
pub const mergesort_b = @compileError("unable to resolve prototype of function");
pub extern fn psort(__base: ?*c_void, __nel: usize, __width: usize, __compar: ?fn (?*const c_void, ?*const c_void) callconv(.C) c_int) void; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdlib.h:327:7: warning: unsupported type: 'BlockPointer'
pub const psort_b = @compileError("unable to resolve prototype of function");
pub extern fn psort_r(__base: ?*c_void, __nel: usize, __width: usize, ?*c_void, __compar: ?fn (?*c_void, ?*const c_void, ?*const c_void) callconv(.C) c_int) void; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdlib.h:335:7: warning: unsupported type: 'BlockPointer'
pub const qsort_b = @compileError("unable to resolve prototype of function");
pub extern fn qsort_r(__base: ?*c_void, __nel: usize, __width: usize, ?*c_void, __compar: ?fn (?*c_void, ?*const c_void, ?*const c_void) callconv(.C) c_int) void;
pub extern fn radixsort(__base: [*c][*c]const u8, __nel: c_int, __table: [*c]const u8, __endbyte: c_uint) c_int;
pub extern fn rpmatch([*c]const u8) c_int;
pub extern fn sradixsort(__base: [*c][*c]const u8, __nel: c_int, __table: [*c]const u8, __endbyte: c_uint) c_int;
pub extern fn sranddev() void;
pub extern fn srandomdev() void;
pub extern fn reallocf(__ptr: ?*c_void, __size: usize) ?*c_void;
pub extern fn strtoq(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_longlong;
pub extern fn strtouq(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_ulonglong;
pub extern var suboptarg: [*c]u8;
pub extern fn memchr(__s: ?*const c_void, __c: c_int, __n: c_ulong) ?*c_void;
pub extern fn memcmp(__s1: ?*const c_void, __s2: ?*const c_void, __n: c_ulong) c_int;
pub extern fn memcpy(__dst: ?*c_void, __src: ?*const c_void, __n: c_ulong) ?*c_void;
pub extern fn memmove(__dst: ?*c_void, __src: ?*const c_void, __len: c_ulong) ?*c_void;
pub extern fn memset(__b: ?*c_void, __c: c_int, __len: c_ulong) ?*c_void;
pub extern fn strcat(__s1: [*c]u8, __s2: [*c]const u8) [*c]u8;
pub extern fn strchr(__s: [*c]const u8, __c: c_int) [*c]u8;
pub extern fn strcmp(__s1: [*c]const u8, __s2: [*c]const u8) c_int;
pub extern fn strcoll(__s1: [*c]const u8, __s2: [*c]const u8) c_int;
pub extern fn strcpy(__dst: [*c]u8, __src: [*c]const u8) [*c]u8;
pub extern fn strcspn(__s: [*c]const u8, __charset: [*c]const u8) c_ulong;
pub extern fn strerror(__errnum: c_int) [*c]u8;
pub extern fn strlen(__s: [*c]const u8) c_ulong;
pub extern fn strncat(__s1: [*c]u8, __s2: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strncmp(__s1: [*c]const u8, __s2: [*c]const u8, __n: c_ulong) c_int;
pub extern fn strncpy(__dst: [*c]u8, __src: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strpbrk(__s: [*c]const u8, __charset: [*c]const u8) [*c]u8;
pub extern fn strrchr(__s: [*c]const u8, __c: c_int) [*c]u8;
pub extern fn strspn(__s: [*c]const u8, __charset: [*c]const u8) c_ulong;
pub extern fn strstr(__big: [*c]const u8, __little: [*c]const u8) [*c]u8;
pub extern fn strtok(__str: [*c]u8, __sep: [*c]const u8) [*c]u8;
pub extern fn strxfrm(__s1: [*c]u8, __s2: [*c]const u8, __n: c_ulong) c_ulong;
pub extern fn strtok_r(__str: [*c]u8, __sep: [*c]const u8, __lasts: [*c][*c]u8) [*c]u8;
pub extern fn strerror_r(__errnum: c_int, __strerrbuf: [*c]u8, __buflen: usize) c_int;
pub extern fn strdup(__s1: [*c]const u8) [*c]u8;
pub extern fn memccpy(__dst: ?*c_void, __src: ?*const c_void, __c: c_int, __n: usize) ?*c_void;
pub extern fn stpcpy(__dst: [*c]u8, __src: [*c]const u8) [*c]u8;
pub extern fn stpncpy(__dst: [*c]u8, __src: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strndup(__s1: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strnlen(__s1: [*c]const u8, __n: usize) usize;
pub extern fn strsignal(__sig: c_int) [*c]u8;
pub extern fn memset_s(__s: ?*c_void, __smax: rsize_t, __c: c_int, __n: rsize_t) errno_t;
pub extern fn memmem(__big: ?*const c_void, __big_len: usize, __little: ?*const c_void, __little_len: usize) ?*c_void;
pub extern fn memset_pattern4(__b: ?*c_void, __pattern4: ?*const c_void, __len: usize) void;
pub extern fn memset_pattern8(__b: ?*c_void, __pattern8: ?*const c_void, __len: usize) void;
pub extern fn memset_pattern16(__b: ?*c_void, __pattern16: ?*const c_void, __len: usize) void;
pub extern fn strcasestr(__big: [*c]const u8, __little: [*c]const u8) [*c]u8;
pub extern fn strnstr(__big: [*c]const u8, __little: [*c]const u8, __len: usize) [*c]u8;
pub extern fn strlcat(__dst: [*c]u8, __source: [*c]const u8, __size: c_ulong) c_ulong;
pub extern fn strlcpy(__dst: [*c]u8, __source: [*c]const u8, __size: c_ulong) c_ulong;
pub extern fn strmode(__mode: c_int, __bp: [*c]u8) void;
pub extern fn strsep(__stringp: [*c][*c]u8, __delim: [*c]const u8) [*c]u8;
pub extern fn swab(noalias ?*const c_void, noalias ?*c_void, isize) void;
pub extern fn timingsafe_bcmp(__b1: ?*const c_void, __b2: ?*const c_void, __len: usize) c_int;
pub extern fn bcmp(?*const c_void, ?*const c_void, c_ulong) c_int;
pub extern fn bcopy(?*const c_void, ?*c_void, usize) void;
pub extern fn bzero(?*c_void, c_ulong) void;
pub extern fn index([*c]const u8, c_int) [*c]u8;
pub extern fn rindex([*c]const u8, c_int) [*c]u8;
pub extern fn ffs(c_int) c_int;
pub extern fn strcasecmp([*c]const u8, [*c]const u8) c_int;
pub extern fn strncasecmp([*c]const u8, [*c]const u8, c_ulong) c_int;
pub extern fn ffsl(c_long) c_int;
pub extern fn ffsll(c_longlong) c_int;
pub extern fn fls(c_int) c_int;
pub extern fn flsl(c_long) c_int;
pub extern fn flsll(c_longlong) c_int;
pub const struct_timespec = extern struct {
    tv_sec: __darwin_time_t,
    tv_nsec: c_long,
};
pub const struct_tm = extern struct {
    tm_sec: c_int,
    tm_min: c_int,
    tm_hour: c_int,
    tm_mday: c_int,
    tm_mon: c_int,
    tm_year: c_int,
    tm_wday: c_int,
    tm_yday: c_int,
    tm_isdst: c_int,
    tm_gmtoff: c_long,
    tm_zone: [*c]u8,
};
pub extern var tzname: [*c][*c]u8;
pub extern var getdate_err: c_int;
pub extern var timezone: c_long;
pub extern var daylight: c_int;
pub extern fn asctime([*c]const struct_tm) [*c]u8;
pub extern fn clock() clock_t;
pub extern fn ctime([*c]const time_t) [*c]u8;
pub extern fn difftime(time_t, time_t) f64;
pub extern fn getdate([*c]const u8) [*c]struct_tm;
pub extern fn gmtime([*c]const time_t) [*c]struct_tm;
pub extern fn localtime([*c]const time_t) [*c]struct_tm;
pub extern fn mktime([*c]struct_tm) time_t;
pub extern fn strftime(noalias [*c]u8, usize, noalias [*c]const u8, noalias [*c]const struct_tm) usize;
pub extern fn strptime(noalias [*c]const u8, noalias [*c]const u8, noalias [*c]struct_tm) [*c]u8;
pub extern fn time([*c]time_t) time_t;
pub extern fn tzset() void;
pub extern fn asctime_r(noalias [*c]const struct_tm, noalias [*c]u8) [*c]u8;
pub extern fn ctime_r([*c]const time_t, [*c]u8) [*c]u8;
pub extern fn gmtime_r(noalias [*c]const time_t, noalias [*c]struct_tm) [*c]struct_tm;
pub extern fn localtime_r(noalias [*c]const time_t, noalias [*c]struct_tm) [*c]struct_tm;
pub extern fn posix2time(time_t) time_t;
pub extern fn tzsetwall() void;
pub extern fn time2posix(time_t) time_t;
pub extern fn timelocal([*c]struct_tm) time_t;
pub extern fn timegm([*c]struct_tm) time_t;
pub extern fn nanosleep(__rqtp: [*c]const struct_timespec, __rmtp: [*c]struct_timespec) c_int;
pub const _CLOCK_REALTIME = @enumToInt(enum_unnamed_76._CLOCK_REALTIME);
pub const _CLOCK_MONOTONIC = @enumToInt(enum_unnamed_76._CLOCK_MONOTONIC);
pub const _CLOCK_MONOTONIC_RAW = @enumToInt(enum_unnamed_76._CLOCK_MONOTONIC_RAW);
pub const _CLOCK_MONOTONIC_RAW_APPROX = @enumToInt(enum_unnamed_76._CLOCK_MONOTONIC_RAW_APPROX);
pub const _CLOCK_UPTIME_RAW = @enumToInt(enum_unnamed_76._CLOCK_UPTIME_RAW);
pub const _CLOCK_UPTIME_RAW_APPROX = @enumToInt(enum_unnamed_76._CLOCK_UPTIME_RAW_APPROX);
pub const _CLOCK_PROCESS_CPUTIME_ID = @enumToInt(enum_unnamed_76._CLOCK_PROCESS_CPUTIME_ID);
pub const _CLOCK_THREAD_CPUTIME_ID = @enumToInt(enum_unnamed_76._CLOCK_THREAD_CPUTIME_ID);
const enum_unnamed_76 = extern enum(c_int) {
    _CLOCK_REALTIME = 0,
    _CLOCK_MONOTONIC = 6,
    _CLOCK_MONOTONIC_RAW = 4,
    _CLOCK_MONOTONIC_RAW_APPROX = 5,
    _CLOCK_UPTIME_RAW = 8,
    _CLOCK_UPTIME_RAW_APPROX = 9,
    _CLOCK_PROCESS_CPUTIME_ID = 12,
    _CLOCK_THREAD_CPUTIME_ID = 16,
    _,
};
pub const clockid_t = enum_unnamed_76;
pub extern fn clock_getres(__clock_id: clockid_t, __res: [*c]struct_timespec) c_int;
pub extern fn clock_gettime(__clock_id: clockid_t, __tp: [*c]struct_timespec) c_int;
pub extern fn clock_gettime_nsec_np(__clock_id: clockid_t) __uint64_t;
pub extern fn clock_settime(__clock_id: clockid_t, __tp: [*c]const struct_timespec) c_int;
pub extern fn timespec_get(ts: [*c]struct_timespec, base: c_int) c_int;
pub extern fn imaxabs(j: intmax_t) intmax_t;
const struct_unnamed_77 = extern struct {
    quot: intmax_t,
    rem: intmax_t,
};
pub const imaxdiv_t = struct_unnamed_77;
pub extern fn imaxdiv(__numer: intmax_t, __denom: intmax_t) imaxdiv_t;
pub extern fn strtoimax(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) intmax_t;
pub extern fn strtoumax(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) uintmax_t;
pub extern fn wcstoimax(noalias __nptr: [*c]const wchar_t, noalias __endptr: [*c][*c]wchar_t, __base: c_int) intmax_t;
pub extern fn wcstoumax(noalias __nptr: [*c]const wchar_t, noalias __endptr: [*c][*c]wchar_t, __base: c_int) uintmax_t;
pub const CFArrayRetainCallBack = ?fn (CFAllocatorRef, ?*const c_void) callconv(.C) ?*const c_void;
pub const CFArrayReleaseCallBack = ?fn (CFAllocatorRef, ?*const c_void) callconv(.C) void;
pub const CFArrayCopyDescriptionCallBack = ?fn (?*const c_void) callconv(.C) CFStringRef;
pub const CFArrayEqualCallBack = ?fn (?*const c_void, ?*const c_void) callconv(.C) Boolean;
const struct_unnamed_78 = extern struct {
    version: CFIndex,
    retain: CFArrayRetainCallBack,
    release: CFArrayReleaseCallBack,
    copyDescription: CFArrayCopyDescriptionCallBack,
    equal: CFArrayEqualCallBack,
};
pub const CFArrayCallBacks = struct_unnamed_78;
pub extern const kCFTypeArrayCallBacks: CFArrayCallBacks;
pub const CFArrayApplierFunction = ?fn (?*const c_void, ?*c_void) callconv(.C) void;
pub const struct___CFArray = @OpaqueType();
pub const CFArrayRef = ?*const struct___CFArray;
pub const CFMutableArrayRef = ?*struct___CFArray;
pub extern fn CFArrayGetTypeID() CFTypeID;
pub extern fn CFArrayCreate(allocator: CFAllocatorRef, values: [*c]?*const c_void, numValues: CFIndex, callBacks: [*c]const CFArrayCallBacks) CFArrayRef;
pub extern fn CFArrayCreateCopy(allocator: CFAllocatorRef, theArray: CFArrayRef) CFArrayRef;
pub extern fn CFArrayCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex, callBacks: [*c]const CFArrayCallBacks) CFMutableArrayRef;
pub extern fn CFArrayCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, theArray: CFArrayRef) CFMutableArrayRef;
pub extern fn CFArrayGetCount(theArray: CFArrayRef) CFIndex;
pub extern fn CFArrayGetCountOfValue(theArray: CFArrayRef, range: CFRange, value: ?*const c_void) CFIndex;
pub extern fn CFArrayContainsValue(theArray: CFArrayRef, range: CFRange, value: ?*const c_void) Boolean;
pub extern fn CFArrayGetValueAtIndex(theArray: CFArrayRef, idx: CFIndex) ?*const c_void;
pub extern fn CFArrayGetValues(theArray: CFArrayRef, range: CFRange, values: [*c]?*const c_void) void;
pub extern fn CFArrayApplyFunction(theArray: CFArrayRef, range: CFRange, applier: CFArrayApplierFunction, context: ?*c_void) void;
pub extern fn CFArrayGetFirstIndexOfValue(theArray: CFArrayRef, range: CFRange, value: ?*const c_void) CFIndex;
pub extern fn CFArrayGetLastIndexOfValue(theArray: CFArrayRef, range: CFRange, value: ?*const c_void) CFIndex;
pub extern fn CFArrayBSearchValues(theArray: CFArrayRef, range: CFRange, value: ?*const c_void, comparator: CFComparatorFunction, context: ?*c_void) CFIndex;
pub extern fn CFArrayAppendValue(theArray: CFMutableArrayRef, value: ?*const c_void) void;
pub extern fn CFArrayInsertValueAtIndex(theArray: CFMutableArrayRef, idx: CFIndex, value: ?*const c_void) void;
pub extern fn CFArraySetValueAtIndex(theArray: CFMutableArrayRef, idx: CFIndex, value: ?*const c_void) void;
pub extern fn CFArrayRemoveValueAtIndex(theArray: CFMutableArrayRef, idx: CFIndex) void;
pub extern fn CFArrayRemoveAllValues(theArray: CFMutableArrayRef) void;
pub extern fn CFArrayReplaceValues(theArray: CFMutableArrayRef, range: CFRange, newValues: [*c]?*const c_void, newCount: CFIndex) void;
pub extern fn CFArrayExchangeValuesAtIndices(theArray: CFMutableArrayRef, idx1: CFIndex, idx2: CFIndex) void;
pub extern fn CFArraySortValues(theArray: CFMutableArrayRef, range: CFRange, comparator: CFComparatorFunction, context: ?*c_void) void;
pub extern fn CFArrayAppendArray(theArray: CFMutableArrayRef, otherArray: CFArrayRef, otherRange: CFRange) void;
pub const CFBagRetainCallBack = ?fn (CFAllocatorRef, ?*const c_void) callconv(.C) ?*const c_void;
pub const CFBagReleaseCallBack = ?fn (CFAllocatorRef, ?*const c_void) callconv(.C) void;
pub const CFBagCopyDescriptionCallBack = ?fn (?*const c_void) callconv(.C) CFStringRef;
pub const CFBagEqualCallBack = ?fn (?*const c_void, ?*const c_void) callconv(.C) Boolean;
pub const CFBagHashCallBack = ?fn (?*const c_void) callconv(.C) CFHashCode;
const struct_unnamed_79 = extern struct {
    version: CFIndex,
    retain: CFBagRetainCallBack,
    release: CFBagReleaseCallBack,
    copyDescription: CFBagCopyDescriptionCallBack,
    equal: CFBagEqualCallBack,
    hash: CFBagHashCallBack,
};
pub const CFBagCallBacks = struct_unnamed_79;
pub extern const kCFTypeBagCallBacks: CFBagCallBacks;
pub extern const kCFCopyStringBagCallBacks: CFBagCallBacks;
pub const CFBagApplierFunction = ?fn (?*const c_void, ?*c_void) callconv(.C) void;
pub const struct___CFBag = @OpaqueType();
pub const CFBagRef = ?*const struct___CFBag;
pub const CFMutableBagRef = ?*struct___CFBag;
pub extern fn CFBagGetTypeID() CFTypeID;
pub extern fn CFBagCreate(allocator: CFAllocatorRef, values: [*c]?*const c_void, numValues: CFIndex, callBacks: [*c]const CFBagCallBacks) CFBagRef;
pub extern fn CFBagCreateCopy(allocator: CFAllocatorRef, theBag: CFBagRef) CFBagRef;
pub extern fn CFBagCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex, callBacks: [*c]const CFBagCallBacks) CFMutableBagRef;
pub extern fn CFBagCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, theBag: CFBagRef) CFMutableBagRef;
pub extern fn CFBagGetCount(theBag: CFBagRef) CFIndex;
pub extern fn CFBagGetCountOfValue(theBag: CFBagRef, value: ?*const c_void) CFIndex;
pub extern fn CFBagContainsValue(theBag: CFBagRef, value: ?*const c_void) Boolean;
pub extern fn CFBagGetValue(theBag: CFBagRef, value: ?*const c_void) ?*const c_void;
pub extern fn CFBagGetValueIfPresent(theBag: CFBagRef, candidate: ?*const c_void, value: [*c]?*const c_void) Boolean;
pub extern fn CFBagGetValues(theBag: CFBagRef, values: [*c]?*const c_void) void;
pub extern fn CFBagApplyFunction(theBag: CFBagRef, applier: CFBagApplierFunction, context: ?*c_void) void;
pub extern fn CFBagAddValue(theBag: CFMutableBagRef, value: ?*const c_void) void;
pub extern fn CFBagReplaceValue(theBag: CFMutableBagRef, value: ?*const c_void) void;
pub extern fn CFBagSetValue(theBag: CFMutableBagRef, value: ?*const c_void) void;
pub extern fn CFBagRemoveValue(theBag: CFMutableBagRef, value: ?*const c_void) void;
pub extern fn CFBagRemoveAllValues(theBag: CFMutableBagRef) void;
const struct_unnamed_80 = extern struct {
    version: CFIndex,
    info: ?*c_void,
    retain: ?fn (?*const c_void) callconv(.C) ?*const c_void,
    release: ?fn (?*const c_void) callconv(.C) void,
    copyDescription: ?fn (?*const c_void) callconv(.C) CFStringRef,
};
pub const CFBinaryHeapCompareContext = struct_unnamed_80;
const struct_unnamed_81 = extern struct {
    version: CFIndex,
    retain: ?fn (CFAllocatorRef, ?*const c_void) callconv(.C) ?*const c_void,
    release: ?fn (CFAllocatorRef, ?*const c_void) callconv(.C) void,
    copyDescription: ?fn (?*const c_void) callconv(.C) CFStringRef,
    compare: ?fn (?*const c_void, ?*const c_void, ?*c_void) callconv(.C) CFComparisonResult,
};
pub const CFBinaryHeapCallBacks = struct_unnamed_81;
pub extern const kCFStringBinaryHeapCallBacks: CFBinaryHeapCallBacks;
pub const CFBinaryHeapApplierFunction = ?fn (?*const c_void, ?*c_void) callconv(.C) void;
pub const struct___CFBinaryHeap = @OpaqueType();
pub const CFBinaryHeapRef = ?*struct___CFBinaryHeap;
pub extern fn CFBinaryHeapGetTypeID() CFTypeID;
pub extern fn CFBinaryHeapCreate(allocator: CFAllocatorRef, capacity: CFIndex, callBacks: [*c]const CFBinaryHeapCallBacks, compareContext: [*c]const CFBinaryHeapCompareContext) CFBinaryHeapRef;
pub extern fn CFBinaryHeapCreateCopy(allocator: CFAllocatorRef, capacity: CFIndex, heap: CFBinaryHeapRef) CFBinaryHeapRef;
pub extern fn CFBinaryHeapGetCount(heap: CFBinaryHeapRef) CFIndex;
pub extern fn CFBinaryHeapGetCountOfValue(heap: CFBinaryHeapRef, value: ?*const c_void) CFIndex;
pub extern fn CFBinaryHeapContainsValue(heap: CFBinaryHeapRef, value: ?*const c_void) Boolean;
pub extern fn CFBinaryHeapGetMinimum(heap: CFBinaryHeapRef) ?*const c_void;
pub extern fn CFBinaryHeapGetMinimumIfPresent(heap: CFBinaryHeapRef, value: [*c]?*const c_void) Boolean;
pub extern fn CFBinaryHeapGetValues(heap: CFBinaryHeapRef, values: [*c]?*const c_void) void;
pub extern fn CFBinaryHeapApplyFunction(heap: CFBinaryHeapRef, applier: CFBinaryHeapApplierFunction, context: ?*c_void) void;
pub extern fn CFBinaryHeapAddValue(heap: CFBinaryHeapRef, value: ?*const c_void) void;
pub extern fn CFBinaryHeapRemoveMinimumValue(heap: CFBinaryHeapRef) void;
pub extern fn CFBinaryHeapRemoveAllValues(heap: CFBinaryHeapRef) void;
pub const CFBit = UInt32;
pub const struct___CFBitVector = @OpaqueType();
pub const CFBitVectorRef = ?*const struct___CFBitVector;
pub const CFMutableBitVectorRef = ?*struct___CFBitVector;
pub extern fn CFBitVectorGetTypeID() CFTypeID;
pub extern fn CFBitVectorCreate(allocator: CFAllocatorRef, bytes: [*c]const UInt8, numBits: CFIndex) CFBitVectorRef;
pub extern fn CFBitVectorCreateCopy(allocator: CFAllocatorRef, bv: CFBitVectorRef) CFBitVectorRef;
pub extern fn CFBitVectorCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex) CFMutableBitVectorRef;
pub extern fn CFBitVectorCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, bv: CFBitVectorRef) CFMutableBitVectorRef;
pub extern fn CFBitVectorGetCount(bv: CFBitVectorRef) CFIndex;
pub extern fn CFBitVectorGetCountOfBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) CFIndex;
pub extern fn CFBitVectorContainsBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) Boolean;
pub extern fn CFBitVectorGetBitAtIndex(bv: CFBitVectorRef, idx: CFIndex) CFBit;
pub extern fn CFBitVectorGetBits(bv: CFBitVectorRef, range: CFRange, bytes: [*c]UInt8) void;
pub extern fn CFBitVectorGetFirstIndexOfBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) CFIndex;
pub extern fn CFBitVectorGetLastIndexOfBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) CFIndex;
pub extern fn CFBitVectorSetCount(bv: CFMutableBitVectorRef, count: CFIndex) void;
pub extern fn CFBitVectorFlipBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex) void;
pub extern fn CFBitVectorFlipBits(bv: CFMutableBitVectorRef, range: CFRange) void;
pub extern fn CFBitVectorSetBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex, value: CFBit) void;
pub extern fn CFBitVectorSetBits(bv: CFMutableBitVectorRef, range: CFRange, value: CFBit) void;
pub extern fn CFBitVectorSetAllBits(bv: CFMutableBitVectorRef, value: CFBit) void;
pub fn OSReadSwapInt16(arg_base: ?*const volatile c_void, arg_byteOffset: usize) callconv(.C) u16 {
    var base = arg_base;
    var byteOffset = arg_byteOffset;
    var result: u16 = undefined;
    result = @intToPtr([*c]volatile u16, (@intCast(usize, @ptrToInt(base)) +% byteOffset)).?.*;
    return _OSSwapInt16(result);
}
pub fn OSReadSwapInt32(arg_base: ?*const volatile c_void, arg_byteOffset: usize) callconv(.C) u32 {
    var base = arg_base;
    var byteOffset = arg_byteOffset;
    var result: u32 = undefined;
    result = @intToPtr([*c]volatile u32, (@intCast(usize, @ptrToInt(base)) +% byteOffset)).?.*;
    return _OSSwapInt32(result);
}
pub fn OSReadSwapInt64(arg_base: ?*const volatile c_void, arg_byteOffset: usize) callconv(.C) u64 {
    var base = arg_base;
    var byteOffset = arg_byteOffset;
    var result: u64 = undefined;
    result = @intToPtr([*c]volatile u64, (@intCast(usize, @ptrToInt(base)) +% byteOffset)).?.*;
    return _OSSwapInt64(result);
}
pub fn OSWriteSwapInt16(arg_base: ?*volatile c_void, arg_byteOffset: usize, arg_data: u16) callconv(.C) void {
    var base = arg_base;
    var byteOffset = arg_byteOffset;
    var data = arg_data;
    @intToPtr([*c]volatile u16, (@intCast(usize, @ptrToInt(base)) +% byteOffset)).?.* = _OSSwapInt16(data);
}
pub fn OSWriteSwapInt32(arg_base: ?*volatile c_void, arg_byteOffset: usize, arg_data: u32) callconv(.C) void {
    var base = arg_base;
    var byteOffset = arg_byteOffset;
    var data = arg_data;
    @intToPtr([*c]volatile u32, (@intCast(usize, @ptrToInt(base)) +% byteOffset)).?.* = _OSSwapInt32(data);
}
pub fn OSWriteSwapInt64(arg_base: ?*volatile c_void, arg_byteOffset: usize, arg_data: u64) callconv(.C) void {
    var base = arg_base;
    var byteOffset = arg_byteOffset;
    var data = arg_data;
    @intToPtr([*c]volatile u64, (@intCast(usize, @ptrToInt(base)) +% byteOffset)).?.* = _OSSwapInt64(data);
}
pub const OSUnknownByteOrder = @enumToInt(enum_unnamed_82.OSUnknownByteOrder);
pub const OSLittleEndian = @enumToInt(enum_unnamed_82.OSLittleEndian);
pub const OSBigEndian = @enumToInt(enum_unnamed_82.OSBigEndian);
const enum_unnamed_82 = extern enum(c_int) {
    OSUnknownByteOrder,
    OSLittleEndian,
    OSBigEndian,
    _,
};
pub fn OSHostByteOrder() callconv(.C) i32 {
    return OSLittleEndian;
}
pub fn _OSReadInt16(arg_base: ?*const volatile c_void, arg_byteOffset: usize) callconv(.C) u16 {
    var base = arg_base;
    var byteOffset = arg_byteOffset;
    return @intToPtr([*c]volatile u16, (@intCast(usize, @ptrToInt(base)) +% byteOffset)).?.*;
}
pub fn _OSReadInt32(arg_base: ?*const volatile c_void, arg_byteOffset: usize) callconv(.C) u32 {
    var base = arg_base;
    var byteOffset = arg_byteOffset;
    return @intToPtr([*c]volatile u32, (@intCast(usize, @ptrToInt(base)) +% byteOffset)).?.*;
}
pub fn _OSReadInt64(arg_base: ?*const volatile c_void, arg_byteOffset: usize) callconv(.C) u64 {
    var base = arg_base;
    var byteOffset = arg_byteOffset;
    return @intToPtr([*c]volatile u64, (@intCast(usize, @ptrToInt(base)) +% byteOffset)).?.*;
}
pub fn _OSWriteInt16(arg_base: ?*volatile c_void, arg_byteOffset: usize, arg_data: u16) callconv(.C) void {
    var base = arg_base;
    var byteOffset = arg_byteOffset;
    var data = arg_data;
    @intToPtr([*c]volatile u16, (@intCast(usize, @ptrToInt(base)) +% byteOffset)).?.* = data;
}
pub fn _OSWriteInt32(arg_base: ?*volatile c_void, arg_byteOffset: usize, arg_data: u32) callconv(.C) void {
    var base = arg_base;
    var byteOffset = arg_byteOffset;
    var data = arg_data;
    @intToPtr([*c]volatile u32, (@intCast(usize, @ptrToInt(base)) +% byteOffset)).?.* = data;
}
pub fn _OSWriteInt64(arg_base: ?*volatile c_void, arg_byteOffset: usize, arg_data: u64) callconv(.C) void {
    var base = arg_base;
    var byteOffset = arg_byteOffset;
    var data = arg_data;
    @intToPtr([*c]volatile u64, (@intCast(usize, @ptrToInt(base)) +% byteOffset)).?.* = data;
}
pub const CFByteOrderUnknown = @enumToInt(enum___CFByteOrder.CFByteOrderUnknown);
pub const CFByteOrderLittleEndian = @enumToInt(enum___CFByteOrder.CFByteOrderLittleEndian);
pub const CFByteOrderBigEndian = @enumToInt(enum___CFByteOrder.CFByteOrderBigEndian);
pub const enum___CFByteOrder = extern enum(c_int) {
    CFByteOrderUnknown,
    CFByteOrderLittleEndian,
    CFByteOrderBigEndian,
    _,
};
pub const CFByteOrder = CFIndex;
pub fn CFByteOrderGetCurrent() callconv(.C) CFByteOrder {
    var byteOrder: i32 = OSHostByteOrder();
    __switch: {
        __default: {
            __case_1: {
                __case_0: {
                    switch (byteOrder) {
                        @as(c_int, 1) => break :__case_0,
                        @as(c_int, 2) => break :__case_1,
                        else => break :__default,
                    }
                }
                return @bitCast(CFByteOrder, @as(c_long, CFByteOrderLittleEndian));
            }
            return @bitCast(CFByteOrder, @as(c_long, CFByteOrderBigEndian));
        }
        break :__switch;
    }
    return @bitCast(CFByteOrder, @as(c_long, CFByteOrderUnknown));
} // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/libkern/_OSByteOrder.h:72:19: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const CFSwapInt16 = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/libkern/_OSByteOrder.h:75:6: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const CFSwapInt32 = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/libkern/_OSByteOrder.h:78:6: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const CFSwapInt64 = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/libkern/_OSByteOrder.h:72:19: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const CFSwapInt16BigToHost = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/libkern/_OSByteOrder.h:75:6: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const CFSwapInt32BigToHost = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/libkern/_OSByteOrder.h:78:6: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const CFSwapInt64BigToHost = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/libkern/_OSByteOrder.h:72:19: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const CFSwapInt16HostToBig = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/libkern/_OSByteOrder.h:75:6: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const CFSwapInt32HostToBig = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/libkern/_OSByteOrder.h:78:6: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const CFSwapInt64HostToBig = @compileError("unable to translate function");
pub fn CFSwapInt16LittleToHost(arg_arg: u16) callconv(.C) u16 {
    var arg = arg_arg;
    return (arg);
}
pub fn CFSwapInt32LittleToHost(arg_arg: u32) callconv(.C) u32 {
    var arg = arg_arg;
    return (arg);
}
pub fn CFSwapInt64LittleToHost(arg_arg: u64) callconv(.C) u64 {
    var arg = arg_arg;
    return (arg);
}
pub fn CFSwapInt16HostToLittle(arg_arg: u16) callconv(.C) u16 {
    var arg = arg_arg;
    return (arg);
}
pub fn CFSwapInt32HostToLittle(arg_arg: u32) callconv(.C) u32 {
    var arg = arg_arg;
    return (arg);
}
pub fn CFSwapInt64HostToLittle(arg_arg: u64) callconv(.C) u64 {
    var arg = arg_arg;
    return (arg);
}
const struct_unnamed_83 = extern struct {
    v: u32,
};
pub const CFSwappedFloat32 = struct_unnamed_83;
const struct_unnamed_84 = extern struct {
    v: u64,
};
pub const CFSwappedFloat64 = struct_unnamed_84;
pub const CFConvertFloat32HostToSwapped = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFByteOrder.h:219:5: warning: TODO implement translation of DeclStmt kind Record
pub const CFConvertFloat32SwappedToHost = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFByteOrder.h:231:5: warning: TODO implement translation of DeclStmt kind Record
pub const CFConvertFloat64HostToSwapped = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFByteOrder.h:243:5: warning: TODO implement translation of DeclStmt kind Record
pub const CFConvertFloat64SwappedToHost = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFByteOrder.h:255:5: warning: TODO implement translation of DeclStmt kind Record
pub const CFConvertFloatHostToSwapped = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFByteOrder.h:267:5: warning: TODO implement translation of DeclStmt kind Record
pub const CFConvertFloatSwappedToHost = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFByteOrder.h:279:5: warning: TODO implement translation of DeclStmt kind Record
pub const CFConvertDoubleHostToSwapped = @compileError("unable to translate function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFByteOrder.h:291:5: warning: TODO implement translation of DeclStmt kind Record
pub const CFConvertDoubleSwappedToHost = @compileError("unable to translate function");
pub const CFDictionaryRetainCallBack = ?fn (CFAllocatorRef, ?*const c_void) callconv(.C) ?*const c_void;
pub const CFDictionaryReleaseCallBack = ?fn (CFAllocatorRef, ?*const c_void) callconv(.C) void;
pub const CFDictionaryCopyDescriptionCallBack = ?fn (?*const c_void) callconv(.C) CFStringRef;
pub const CFDictionaryEqualCallBack = ?fn (?*const c_void, ?*const c_void) callconv(.C) Boolean;
pub const CFDictionaryHashCallBack = ?fn (?*const c_void) callconv(.C) CFHashCode;
const struct_unnamed_85 = extern struct {
    version: CFIndex,
    retain: CFDictionaryRetainCallBack,
    release: CFDictionaryReleaseCallBack,
    copyDescription: CFDictionaryCopyDescriptionCallBack,
    equal: CFDictionaryEqualCallBack,
    hash: CFDictionaryHashCallBack,
};
pub const CFDictionaryKeyCallBacks = struct_unnamed_85;
pub extern const kCFTypeDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
pub extern const kCFCopyStringDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
const struct_unnamed_86 = extern struct {
    version: CFIndex,
    retain: CFDictionaryRetainCallBack,
    release: CFDictionaryReleaseCallBack,
    copyDescription: CFDictionaryCopyDescriptionCallBack,
    equal: CFDictionaryEqualCallBack,
};
pub const CFDictionaryValueCallBacks = struct_unnamed_86;
pub extern const kCFTypeDictionaryValueCallBacks: CFDictionaryValueCallBacks;
pub const CFDictionaryApplierFunction = ?fn (?*const c_void, ?*const c_void, ?*c_void) callconv(.C) void;
pub const struct___CFDictionary = @OpaqueType();
pub const CFDictionaryRef = ?*const struct___CFDictionary;
pub const CFMutableDictionaryRef = ?*struct___CFDictionary;
pub extern fn CFDictionaryGetTypeID() CFTypeID;
pub extern fn CFDictionaryCreate(allocator: CFAllocatorRef, keys: [*c]?*const c_void, values: [*c]?*const c_void, numValues: CFIndex, keyCallBacks: [*c]const CFDictionaryKeyCallBacks, valueCallBacks: [*c]const CFDictionaryValueCallBacks) CFDictionaryRef;
pub extern fn CFDictionaryCreateCopy(allocator: CFAllocatorRef, theDict: CFDictionaryRef) CFDictionaryRef;
pub extern fn CFDictionaryCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex, keyCallBacks: [*c]const CFDictionaryKeyCallBacks, valueCallBacks: [*c]const CFDictionaryValueCallBacks) CFMutableDictionaryRef;
pub extern fn CFDictionaryCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, theDict: CFDictionaryRef) CFMutableDictionaryRef;
pub extern fn CFDictionaryGetCount(theDict: CFDictionaryRef) CFIndex;
pub extern fn CFDictionaryGetCountOfKey(theDict: CFDictionaryRef, key: ?*const c_void) CFIndex;
pub extern fn CFDictionaryGetCountOfValue(theDict: CFDictionaryRef, value: ?*const c_void) CFIndex;
pub extern fn CFDictionaryContainsKey(theDict: CFDictionaryRef, key: ?*const c_void) Boolean;
pub extern fn CFDictionaryContainsValue(theDict: CFDictionaryRef, value: ?*const c_void) Boolean;
pub extern fn CFDictionaryGetValue(theDict: CFDictionaryRef, key: ?*const c_void) ?*const c_void;
pub extern fn CFDictionaryGetValueIfPresent(theDict: CFDictionaryRef, key: ?*const c_void, value: [*c]?*const c_void) Boolean;
pub extern fn CFDictionaryGetKeysAndValues(theDict: CFDictionaryRef, keys: [*c]?*const c_void, values: [*c]?*const c_void) void;
pub extern fn CFDictionaryApplyFunction(theDict: CFDictionaryRef, applier: CFDictionaryApplierFunction, context: ?*c_void) void;
pub extern fn CFDictionaryAddValue(theDict: CFMutableDictionaryRef, key: ?*const c_void, value: ?*const c_void) void;
pub extern fn CFDictionarySetValue(theDict: CFMutableDictionaryRef, key: ?*const c_void, value: ?*const c_void) void;
pub extern fn CFDictionaryReplaceValue(theDict: CFMutableDictionaryRef, key: ?*const c_void, value: ?*const c_void) void;
pub extern fn CFDictionaryRemoveValue(theDict: CFMutableDictionaryRef, key: ?*const c_void) void;
pub extern fn CFDictionaryRemoveAllValues(theDict: CFMutableDictionaryRef) void;
pub const CFNotificationName = CFStringRef;
pub const struct___CFNotificationCenter = @OpaqueType();
pub const CFNotificationCenterRef = ?*struct___CFNotificationCenter;
pub const CFNotificationCallback = ?fn (CFNotificationCenterRef, ?*c_void, CFNotificationName, ?*const c_void, CFDictionaryRef) callconv(.C) void;
pub const CFNotificationSuspensionBehavior = CFIndex;
pub const CFNotificationSuspensionBehaviorDrop = @enumToInt(enum_unnamed_87.CFNotificationSuspensionBehaviorDrop);
pub const CFNotificationSuspensionBehaviorCoalesce = @enumToInt(enum_unnamed_87.CFNotificationSuspensionBehaviorCoalesce);
pub const CFNotificationSuspensionBehaviorHold = @enumToInt(enum_unnamed_87.CFNotificationSuspensionBehaviorHold);
pub const CFNotificationSuspensionBehaviorDeliverImmediately = @enumToInt(enum_unnamed_87.CFNotificationSuspensionBehaviorDeliverImmediately);
const enum_unnamed_87 = extern enum(c_int) {
    CFNotificationSuspensionBehaviorDrop = 1,
    CFNotificationSuspensionBehaviorCoalesce = 2,
    CFNotificationSuspensionBehaviorHold = 3,
    CFNotificationSuspensionBehaviorDeliverImmediately = 4,
    _,
};
pub extern fn CFNotificationCenterGetTypeID() CFTypeID;
pub extern fn CFNotificationCenterGetLocalCenter() CFNotificationCenterRef;
pub extern fn CFNotificationCenterGetDistributedCenter() CFNotificationCenterRef;
pub extern fn CFNotificationCenterGetDarwinNotifyCenter() CFNotificationCenterRef;
pub extern fn CFNotificationCenterAddObserver(center: CFNotificationCenterRef, observer: ?*const c_void, callBack: CFNotificationCallback, name: CFStringRef, object: ?*const c_void, suspensionBehavior: CFNotificationSuspensionBehavior) void;
pub extern fn CFNotificationCenterRemoveObserver(center: CFNotificationCenterRef, observer: ?*const c_void, name: CFNotificationName, object: ?*const c_void) void;
pub extern fn CFNotificationCenterRemoveEveryObserver(center: CFNotificationCenterRef, observer: ?*const c_void) void;
pub extern fn CFNotificationCenterPostNotification(center: CFNotificationCenterRef, name: CFNotificationName, object: ?*const c_void, userInfo: CFDictionaryRef, deliverImmediately: Boolean) void;
pub const kCFNotificationDeliverImmediately = @enumToInt(enum_unnamed_88.kCFNotificationDeliverImmediately);
pub const kCFNotificationPostToAllSessions = @enumToInt(enum_unnamed_88.kCFNotificationPostToAllSessions);
const enum_unnamed_88 = extern enum(c_int) {
    kCFNotificationDeliverImmediately = 1,
    kCFNotificationPostToAllSessions = 2,
    _,
};
pub extern fn CFNotificationCenterPostNotificationWithOptions(center: CFNotificationCenterRef, name: CFNotificationName, object: ?*const c_void, userInfo: CFDictionaryRef, options: CFOptionFlags) void;
pub const CFLocaleIdentifier = CFStringRef;
pub const CFLocaleKey = CFStringRef;
pub const struct___CFLocale = @OpaqueType();
pub const CFLocaleRef = ?*const struct___CFLocale;
pub extern fn CFLocaleGetTypeID() CFTypeID;
pub extern fn CFLocaleGetSystem() CFLocaleRef;
pub extern fn CFLocaleCopyCurrent() CFLocaleRef;
pub extern fn CFLocaleCopyAvailableLocaleIdentifiers() CFArrayRef;
pub extern fn CFLocaleCopyISOLanguageCodes() CFArrayRef;
pub extern fn CFLocaleCopyISOCountryCodes() CFArrayRef;
pub extern fn CFLocaleCopyISOCurrencyCodes() CFArrayRef;
pub extern fn CFLocaleCopyCommonISOCurrencyCodes() CFArrayRef;
pub extern fn CFLocaleCopyPreferredLanguages() CFArrayRef;
pub extern fn CFLocaleCreateCanonicalLanguageIdentifierFromString(allocator: CFAllocatorRef, localeIdentifier: CFStringRef) CFLocaleIdentifier;
pub extern fn CFLocaleCreateCanonicalLocaleIdentifierFromString(allocator: CFAllocatorRef, localeIdentifier: CFStringRef) CFLocaleIdentifier;
pub extern fn CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(allocator: CFAllocatorRef, lcode: LangCode, rcode: RegionCode) CFLocaleIdentifier;
pub extern fn CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(allocator: CFAllocatorRef, lcid: u32) CFLocaleIdentifier;
pub extern fn CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(localeIdentifier: CFLocaleIdentifier) u32;
pub const CFLocaleLanguageDirection = CFIndex;
pub const kCFLocaleLanguageDirectionUnknown = @enumToInt(enum_unnamed_89.kCFLocaleLanguageDirectionUnknown);
pub const kCFLocaleLanguageDirectionLeftToRight = @enumToInt(enum_unnamed_89.kCFLocaleLanguageDirectionLeftToRight);
pub const kCFLocaleLanguageDirectionRightToLeft = @enumToInt(enum_unnamed_89.kCFLocaleLanguageDirectionRightToLeft);
pub const kCFLocaleLanguageDirectionTopToBottom = @enumToInt(enum_unnamed_89.kCFLocaleLanguageDirectionTopToBottom);
pub const kCFLocaleLanguageDirectionBottomToTop = @enumToInt(enum_unnamed_89.kCFLocaleLanguageDirectionBottomToTop);
const enum_unnamed_89 = extern enum(c_int) {
    kCFLocaleLanguageDirectionUnknown = 0,
    kCFLocaleLanguageDirectionLeftToRight = 1,
    kCFLocaleLanguageDirectionRightToLeft = 2,
    kCFLocaleLanguageDirectionTopToBottom = 3,
    kCFLocaleLanguageDirectionBottomToTop = 4,
    _,
};
pub extern fn CFLocaleGetLanguageCharacterDirection(isoLangCode: CFStringRef) CFLocaleLanguageDirection;
pub extern fn CFLocaleGetLanguageLineDirection(isoLangCode: CFStringRef) CFLocaleLanguageDirection;
pub extern fn CFLocaleCreateComponentsFromLocaleIdentifier(allocator: CFAllocatorRef, localeID: CFLocaleIdentifier) CFDictionaryRef;
pub extern fn CFLocaleCreateLocaleIdentifierFromComponents(allocator: CFAllocatorRef, dictionary: CFDictionaryRef) CFLocaleIdentifier;
pub extern fn CFLocaleCreate(allocator: CFAllocatorRef, localeIdentifier: CFLocaleIdentifier) CFLocaleRef;
pub extern fn CFLocaleCreateCopy(allocator: CFAllocatorRef, locale: CFLocaleRef) CFLocaleRef;
pub extern fn CFLocaleGetIdentifier(locale: CFLocaleRef) CFLocaleIdentifier;
pub extern fn CFLocaleGetValue(locale: CFLocaleRef, key: CFLocaleKey) CFTypeRef;
pub extern fn CFLocaleCopyDisplayNameForPropertyValue(displayLocale: CFLocaleRef, key: CFLocaleKey, value: CFStringRef) CFStringRef;
pub extern const kCFLocaleCurrentLocaleDidChangeNotification: CFNotificationName;
pub extern const kCFLocaleIdentifier: CFLocaleKey;
pub extern const kCFLocaleLanguageCode: CFLocaleKey;
pub extern const kCFLocaleCountryCode: CFLocaleKey;
pub extern const kCFLocaleScriptCode: CFLocaleKey;
pub extern const kCFLocaleVariantCode: CFLocaleKey;
pub extern const kCFLocaleExemplarCharacterSet: CFLocaleKey;
pub extern const kCFLocaleCalendarIdentifier: CFLocaleKey;
pub extern const kCFLocaleCalendar: CFLocaleKey;
pub extern const kCFLocaleCollationIdentifier: CFLocaleKey;
pub extern const kCFLocaleUsesMetricSystem: CFLocaleKey;
pub extern const kCFLocaleMeasurementSystem: CFLocaleKey;
pub extern const kCFLocaleDecimalSeparator: CFLocaleKey;
pub extern const kCFLocaleGroupingSeparator: CFLocaleKey;
pub extern const kCFLocaleCurrencySymbol: CFLocaleKey;
pub extern const kCFLocaleCurrencyCode: CFLocaleKey;
pub extern const kCFLocaleCollatorIdentifier: CFLocaleKey;
pub extern const kCFLocaleQuotationBeginDelimiterKey: CFLocaleKey;
pub extern const kCFLocaleQuotationEndDelimiterKey: CFLocaleKey;
pub extern const kCFLocaleAlternateQuotationBeginDelimiterKey: CFLocaleKey;
pub extern const kCFLocaleAlternateQuotationEndDelimiterKey: CFLocaleKey;
pub const CFCalendarIdentifier = CFStringRef;
pub extern const kCFGregorianCalendar: CFCalendarIdentifier;
pub extern const kCFBuddhistCalendar: CFCalendarIdentifier;
pub extern const kCFChineseCalendar: CFCalendarIdentifier;
pub extern const kCFHebrewCalendar: CFCalendarIdentifier;
pub extern const kCFIslamicCalendar: CFCalendarIdentifier;
pub extern const kCFIslamicCivilCalendar: CFCalendarIdentifier;
pub extern const kCFJapaneseCalendar: CFCalendarIdentifier;
pub extern const kCFRepublicOfChinaCalendar: CFCalendarIdentifier;
pub extern const kCFPersianCalendar: CFCalendarIdentifier;
pub extern const kCFIndianCalendar: CFCalendarIdentifier;
pub extern const kCFISO8601Calendar: CFCalendarIdentifier;
pub extern const kCFIslamicTabularCalendar: CFCalendarIdentifier;
pub extern const kCFIslamicUmmAlQuraCalendar: CFCalendarIdentifier;
pub const CFTimeInterval = f64;
pub const CFAbsoluteTime = CFTimeInterval;
pub extern fn CFAbsoluteTimeGetCurrent() CFAbsoluteTime;
pub extern const kCFAbsoluteTimeIntervalSince1970: CFTimeInterval;
pub extern const kCFAbsoluteTimeIntervalSince1904: CFTimeInterval;
pub const struct___CFDate = @OpaqueType();
pub const CFDateRef = ?*const struct___CFDate;
pub extern fn CFDateGetTypeID() CFTypeID;
pub extern fn CFDateCreate(allocator: CFAllocatorRef, at: CFAbsoluteTime) CFDateRef;
pub extern fn CFDateGetAbsoluteTime(theDate: CFDateRef) CFAbsoluteTime;
pub extern fn CFDateGetTimeIntervalSinceDate(theDate: CFDateRef, otherDate: CFDateRef) CFTimeInterval;
pub extern fn CFDateCompare(theDate: CFDateRef, otherDate: CFDateRef, context: ?*c_void) CFComparisonResult;
pub const struct___CFTimeZone = @OpaqueType();
pub const CFTimeZoneRef = ?*const struct___CFTimeZone;
const struct_unnamed_90 = extern struct {
    year: SInt32,
    month: SInt8,
    day: SInt8,
    hour: SInt8,
    minute: SInt8,
    second: f64,
};
pub const CFGregorianDate = struct_unnamed_90;
const struct_unnamed_91 = extern struct {
    years: SInt32,
    months: SInt32,
    days: SInt32,
    hours: SInt32,
    minutes: SInt32,
    seconds: f64,
};
pub const CFGregorianUnits = struct_unnamed_91;
pub const CFGregorianUnitFlags = CFOptionFlags;
pub const kCFGregorianUnitsYears = @enumToInt(enum_unnamed_92.kCFGregorianUnitsYears);
pub const kCFGregorianUnitsMonths = @enumToInt(enum_unnamed_92.kCFGregorianUnitsMonths);
pub const kCFGregorianUnitsDays = @enumToInt(enum_unnamed_92.kCFGregorianUnitsDays);
pub const kCFGregorianUnitsHours = @enumToInt(enum_unnamed_92.kCFGregorianUnitsHours);
pub const kCFGregorianUnitsMinutes = @enumToInt(enum_unnamed_92.kCFGregorianUnitsMinutes);
pub const kCFGregorianUnitsSeconds = @enumToInt(enum_unnamed_92.kCFGregorianUnitsSeconds);
pub const kCFGregorianAllUnits = @enumToInt(enum_unnamed_92.kCFGregorianAllUnits);
const enum_unnamed_92 = extern enum(c_int) {
    kCFGregorianUnitsYears = 1,
    kCFGregorianUnitsMonths = 2,
    kCFGregorianUnitsDays = 4,
    kCFGregorianUnitsHours = 8,
    kCFGregorianUnitsMinutes = 16,
    kCFGregorianUnitsSeconds = 32,
    kCFGregorianAllUnits = 16777215,
    _,
};
pub extern fn CFGregorianDateIsValid(gdate: CFGregorianDate, unitFlags: CFOptionFlags) Boolean;
pub extern fn CFGregorianDateGetAbsoluteTime(gdate: CFGregorianDate, tz: CFTimeZoneRef) CFAbsoluteTime;
pub extern fn CFAbsoluteTimeGetGregorianDate(at: CFAbsoluteTime, tz: CFTimeZoneRef) CFGregorianDate;
pub extern fn CFAbsoluteTimeAddGregorianUnits(at: CFAbsoluteTime, tz: CFTimeZoneRef, units: CFGregorianUnits) CFAbsoluteTime;
pub extern fn CFAbsoluteTimeGetDifferenceAsGregorianUnits(at1: CFAbsoluteTime, at2: CFAbsoluteTime, tz: CFTimeZoneRef, unitFlags: CFOptionFlags) CFGregorianUnits;
pub extern fn CFAbsoluteTimeGetDayOfWeek(at: CFAbsoluteTime, tz: CFTimeZoneRef) SInt32;
pub extern fn CFAbsoluteTimeGetDayOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef) SInt32;
pub extern fn CFAbsoluteTimeGetWeekOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef) SInt32;
pub const struct___CFData = @OpaqueType();
pub const CFDataRef = ?*const struct___CFData;
pub const CFMutableDataRef = ?*struct___CFData;
pub extern fn CFDataGetTypeID() CFTypeID;
pub extern fn CFDataCreate(allocator: CFAllocatorRef, bytes: [*c]const UInt8, length: CFIndex) CFDataRef;
pub extern fn CFDataCreateWithBytesNoCopy(allocator: CFAllocatorRef, bytes: [*c]const UInt8, length: CFIndex, bytesDeallocator: CFAllocatorRef) CFDataRef;
pub extern fn CFDataCreateCopy(allocator: CFAllocatorRef, theData: CFDataRef) CFDataRef;
pub extern fn CFDataCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex) CFMutableDataRef;
pub extern fn CFDataCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, theData: CFDataRef) CFMutableDataRef;
pub extern fn CFDataGetLength(theData: CFDataRef) CFIndex;
pub extern fn CFDataGetBytePtr(theData: CFDataRef) [*c]const UInt8;
pub extern fn CFDataGetMutableBytePtr(theData: CFMutableDataRef) [*c]UInt8;
pub extern fn CFDataGetBytes(theData: CFDataRef, range: CFRange, buffer: [*c]UInt8) void;
pub extern fn CFDataSetLength(theData: CFMutableDataRef, length: CFIndex) void;
pub extern fn CFDataIncreaseLength(theData: CFMutableDataRef, extraLength: CFIndex) void;
pub extern fn CFDataAppendBytes(theData: CFMutableDataRef, bytes: [*c]const UInt8, length: CFIndex) void;
pub extern fn CFDataReplaceBytes(theData: CFMutableDataRef, range: CFRange, newBytes: [*c]const UInt8, newLength: CFIndex) void;
pub extern fn CFDataDeleteBytes(theData: CFMutableDataRef, range: CFRange) void;
pub const CFDataSearchFlags = CFOptionFlags;
pub const kCFDataSearchBackwards = @enumToInt(enum_unnamed_93.kCFDataSearchBackwards);
pub const kCFDataSearchAnchored = @enumToInt(enum_unnamed_93.kCFDataSearchAnchored);
const enum_unnamed_93 = extern enum(c_int) {
    kCFDataSearchBackwards = 1,
    kCFDataSearchAnchored = 2,
    _,
};
pub extern fn CFDataFind(theData: CFDataRef, dataToFind: CFDataRef, searchRange: CFRange, compareOptions: CFDataSearchFlags) CFRange;
pub const struct___CFCharacterSet = @OpaqueType();
pub const CFCharacterSetRef = ?*const struct___CFCharacterSet;
pub const CFMutableCharacterSetRef = ?*struct___CFCharacterSet;
pub const CFCharacterSetPredefinedSet = CFIndex;
pub const kCFCharacterSetControl = @enumToInt(enum_unnamed_94.kCFCharacterSetControl);
pub const kCFCharacterSetWhitespace = @enumToInt(enum_unnamed_94.kCFCharacterSetWhitespace);
pub const kCFCharacterSetWhitespaceAndNewline = @enumToInt(enum_unnamed_94.kCFCharacterSetWhitespaceAndNewline);
pub const kCFCharacterSetDecimalDigit = @enumToInt(enum_unnamed_94.kCFCharacterSetDecimalDigit);
pub const kCFCharacterSetLetter = @enumToInt(enum_unnamed_94.kCFCharacterSetLetter);
pub const kCFCharacterSetLowercaseLetter = @enumToInt(enum_unnamed_94.kCFCharacterSetLowercaseLetter);
pub const kCFCharacterSetUppercaseLetter = @enumToInt(enum_unnamed_94.kCFCharacterSetUppercaseLetter);
pub const kCFCharacterSetNonBase = @enumToInt(enum_unnamed_94.kCFCharacterSetNonBase);
pub const kCFCharacterSetDecomposable = @enumToInt(enum_unnamed_94.kCFCharacterSetDecomposable);
pub const kCFCharacterSetAlphaNumeric = @enumToInt(enum_unnamed_94.kCFCharacterSetAlphaNumeric);
pub const kCFCharacterSetPunctuation = @enumToInt(enum_unnamed_94.kCFCharacterSetPunctuation);
pub const kCFCharacterSetCapitalizedLetter = @enumToInt(enum_unnamed_94.kCFCharacterSetCapitalizedLetter);
pub const kCFCharacterSetSymbol = @enumToInt(enum_unnamed_94.kCFCharacterSetSymbol);
pub const kCFCharacterSetNewline = @enumToInt(enum_unnamed_94.kCFCharacterSetNewline);
pub const kCFCharacterSetIllegal = @enumToInt(enum_unnamed_94.kCFCharacterSetIllegal);
const enum_unnamed_94 = extern enum(c_int) {
    kCFCharacterSetControl = 1,
    kCFCharacterSetWhitespace = 2,
    kCFCharacterSetWhitespaceAndNewline = 3,
    kCFCharacterSetDecimalDigit = 4,
    kCFCharacterSetLetter = 5,
    kCFCharacterSetLowercaseLetter = 6,
    kCFCharacterSetUppercaseLetter = 7,
    kCFCharacterSetNonBase = 8,
    kCFCharacterSetDecomposable = 9,
    kCFCharacterSetAlphaNumeric = 10,
    kCFCharacterSetPunctuation = 11,
    kCFCharacterSetCapitalizedLetter = 13,
    kCFCharacterSetSymbol = 14,
    kCFCharacterSetNewline = 15,
    kCFCharacterSetIllegal = 12,
    _,
};
pub extern fn CFCharacterSetGetTypeID() CFTypeID;
pub extern fn CFCharacterSetGetPredefined(theSetIdentifier: CFCharacterSetPredefinedSet) CFCharacterSetRef;
pub extern fn CFCharacterSetCreateWithCharactersInRange(alloc: CFAllocatorRef, theRange: CFRange) CFCharacterSetRef;
pub extern fn CFCharacterSetCreateWithCharactersInString(alloc: CFAllocatorRef, theString: CFStringRef) CFCharacterSetRef;
pub extern fn CFCharacterSetCreateWithBitmapRepresentation(alloc: CFAllocatorRef, theData: CFDataRef) CFCharacterSetRef;
pub extern fn CFCharacterSetCreateInvertedSet(alloc: CFAllocatorRef, theSet: CFCharacterSetRef) CFCharacterSetRef;
pub extern fn CFCharacterSetIsSupersetOfSet(theSet: CFCharacterSetRef, theOtherset: CFCharacterSetRef) Boolean;
pub extern fn CFCharacterSetHasMemberInPlane(theSet: CFCharacterSetRef, thePlane: CFIndex) Boolean;
pub extern fn CFCharacterSetCreateMutable(alloc: CFAllocatorRef) CFMutableCharacterSetRef;
pub extern fn CFCharacterSetCreateCopy(alloc: CFAllocatorRef, theSet: CFCharacterSetRef) CFCharacterSetRef;
pub extern fn CFCharacterSetCreateMutableCopy(alloc: CFAllocatorRef, theSet: CFCharacterSetRef) CFMutableCharacterSetRef;
pub extern fn CFCharacterSetIsCharacterMember(theSet: CFCharacterSetRef, theChar: UniChar) Boolean;
pub extern fn CFCharacterSetIsLongCharacterMember(theSet: CFCharacterSetRef, theChar: UTF32Char) Boolean;
pub extern fn CFCharacterSetCreateBitmapRepresentation(alloc: CFAllocatorRef, theSet: CFCharacterSetRef) CFDataRef;
pub extern fn CFCharacterSetAddCharactersInRange(theSet: CFMutableCharacterSetRef, theRange: CFRange) void;
pub extern fn CFCharacterSetRemoveCharactersInRange(theSet: CFMutableCharacterSetRef, theRange: CFRange) void;
pub extern fn CFCharacterSetAddCharactersInString(theSet: CFMutableCharacterSetRef, theString: CFStringRef) void;
pub extern fn CFCharacterSetRemoveCharactersInString(theSet: CFMutableCharacterSetRef, theString: CFStringRef) void;
pub extern fn CFCharacterSetUnion(theSet: CFMutableCharacterSetRef, theOtherSet: CFCharacterSetRef) void;
pub extern fn CFCharacterSetIntersect(theSet: CFMutableCharacterSetRef, theOtherSet: CFCharacterSetRef) void;
pub extern fn CFCharacterSetInvert(theSet: CFMutableCharacterSetRef) void;
pub const CFStringEncoding = UInt32;
pub const CFStringBuiltInEncodings = CFStringEncoding;
pub const kCFStringEncodingMacRoman = @enumToInt(enum_unnamed_95.kCFStringEncodingMacRoman);
pub const kCFStringEncodingWindowsLatin1 = @enumToInt(enum_unnamed_95.kCFStringEncodingWindowsLatin1);
pub const kCFStringEncodingISOLatin1 = @enumToInt(enum_unnamed_95.kCFStringEncodingISOLatin1);
pub const kCFStringEncodingNextStepLatin = @enumToInt(enum_unnamed_95.kCFStringEncodingNextStepLatin);
pub const kCFStringEncodingASCII = @enumToInt(enum_unnamed_95.kCFStringEncodingASCII);
pub const kCFStringEncodingUnicode = @enumToInt(enum_unnamed_95.kCFStringEncodingUnicode);
pub const kCFStringEncodingUTF8 = @enumToInt(enum_unnamed_95.kCFStringEncodingUTF8);
pub const kCFStringEncodingNonLossyASCII = @enumToInt(enum_unnamed_95.kCFStringEncodingNonLossyASCII);
pub const kCFStringEncodingUTF16 = @enumToInt(enum_unnamed_95.kCFStringEncodingUTF16);
pub const kCFStringEncodingUTF16BE = @enumToInt(enum_unnamed_95.kCFStringEncodingUTF16BE);
pub const kCFStringEncodingUTF16LE = @enumToInt(enum_unnamed_95.kCFStringEncodingUTF16LE);
pub const kCFStringEncodingUTF32 = @enumToInt(enum_unnamed_95.kCFStringEncodingUTF32);
pub const kCFStringEncodingUTF32BE = @enumToInt(enum_unnamed_95.kCFStringEncodingUTF32BE);
pub const kCFStringEncodingUTF32LE = @enumToInt(enum_unnamed_95.kCFStringEncodingUTF32LE);
const enum_unnamed_95 = extern enum(c_int) {
    kCFStringEncodingMacRoman = 0,
    kCFStringEncodingWindowsLatin1 = 1280,
    kCFStringEncodingISOLatin1 = 513,
    kCFStringEncodingNextStepLatin = 2817,
    kCFStringEncodingASCII = 1536,
    kCFStringEncodingUnicode = 256,
    kCFStringEncodingUTF8 = 134217984,
    kCFStringEncodingNonLossyASCII = 3071,
    kCFStringEncodingUTF16 = 256,
    kCFStringEncodingUTF16BE = 268435712,
    kCFStringEncodingUTF16LE = 335544576,
    kCFStringEncodingUTF32 = 201326848,
    kCFStringEncodingUTF32BE = 402653440,
    kCFStringEncodingUTF32LE = 469762304,
    _,
};
pub extern fn CFStringGetTypeID() CFTypeID;
pub extern fn CFStringCreateWithPascalString(alloc: CFAllocatorRef, pStr: ConstStr255Param, encoding: CFStringEncoding) CFStringRef;
pub extern fn CFStringCreateWithCString(alloc: CFAllocatorRef, cStr: [*c]const u8, encoding: CFStringEncoding) CFStringRef;
pub extern fn CFStringCreateWithBytes(alloc: CFAllocatorRef, bytes: [*c]const UInt8, numBytes: CFIndex, encoding: CFStringEncoding, isExternalRepresentation: Boolean) CFStringRef;
pub extern fn CFStringCreateWithCharacters(alloc: CFAllocatorRef, chars: [*c]const UniChar, numChars: CFIndex) CFStringRef;
pub extern fn CFStringCreateWithPascalStringNoCopy(alloc: CFAllocatorRef, pStr: ConstStr255Param, encoding: CFStringEncoding, contentsDeallocator: CFAllocatorRef) CFStringRef;
pub extern fn CFStringCreateWithCStringNoCopy(alloc: CFAllocatorRef, cStr: [*c]const u8, encoding: CFStringEncoding, contentsDeallocator: CFAllocatorRef) CFStringRef;
pub extern fn CFStringCreateWithBytesNoCopy(alloc: CFAllocatorRef, bytes: [*c]const UInt8, numBytes: CFIndex, encoding: CFStringEncoding, isExternalRepresentation: Boolean, contentsDeallocator: CFAllocatorRef) CFStringRef;
pub extern fn CFStringCreateWithCharactersNoCopy(alloc: CFAllocatorRef, chars: [*c]const UniChar, numChars: CFIndex, contentsDeallocator: CFAllocatorRef) CFStringRef;
pub extern fn CFStringCreateWithSubstring(alloc: CFAllocatorRef, str: CFStringRef, range: CFRange) CFStringRef;
pub extern fn CFStringCreateCopy(alloc: CFAllocatorRef, theString: CFStringRef) CFStringRef;
pub extern fn CFStringCreateWithFormat(alloc: CFAllocatorRef, formatOptions: CFDictionaryRef, format: CFStringRef, ...) CFStringRef;
pub extern fn CFStringCreateWithFormatAndArguments(alloc: CFAllocatorRef, formatOptions: CFDictionaryRef, format: CFStringRef, arguments: [*c]struct___va_list_tag) CFStringRef;
pub extern fn CFStringCreateMutable(alloc: CFAllocatorRef, maxLength: CFIndex) CFMutableStringRef;
pub extern fn CFStringCreateMutableCopy(alloc: CFAllocatorRef, maxLength: CFIndex, theString: CFStringRef) CFMutableStringRef;
pub extern fn CFStringCreateMutableWithExternalCharactersNoCopy(alloc: CFAllocatorRef, chars: [*c]UniChar, numChars: CFIndex, capacity: CFIndex, externalCharactersAllocator: CFAllocatorRef) CFMutableStringRef;
pub extern fn CFStringGetLength(theString: CFStringRef) CFIndex;
pub extern fn CFStringGetCharacterAtIndex(theString: CFStringRef, idx: CFIndex) UniChar;
pub extern fn CFStringGetCharacters(theString: CFStringRef, range: CFRange, buffer: [*c]UniChar) void;
pub extern fn CFStringGetPascalString(theString: CFStringRef, buffer: StringPtr, bufferSize: CFIndex, encoding: CFStringEncoding) Boolean;
pub extern fn CFStringGetCString(theString: CFStringRef, buffer: [*c]u8, bufferSize: CFIndex, encoding: CFStringEncoding) Boolean;
pub extern fn CFStringGetPascalStringPtr(theString: CFStringRef, encoding: CFStringEncoding) ConstStringPtr;
pub extern fn CFStringGetCStringPtr(theString: CFStringRef, encoding: CFStringEncoding) [*c]const u8;
pub extern fn CFStringGetCharactersPtr(theString: CFStringRef) [*c]const UniChar;
pub extern fn CFStringGetBytes(theString: CFStringRef, range: CFRange, encoding: CFStringEncoding, lossByte: UInt8, isExternalRepresentation: Boolean, buffer: [*c]UInt8, maxBufLen: CFIndex, usedBufLen: [*c]CFIndex) CFIndex;
pub extern fn CFStringCreateFromExternalRepresentation(alloc: CFAllocatorRef, data: CFDataRef, encoding: CFStringEncoding) CFStringRef;
pub extern fn CFStringCreateExternalRepresentation(alloc: CFAllocatorRef, theString: CFStringRef, encoding: CFStringEncoding, lossByte: UInt8) CFDataRef;
pub extern fn CFStringGetSmallestEncoding(theString: CFStringRef) CFStringEncoding;
pub extern fn CFStringGetFastestEncoding(theString: CFStringRef) CFStringEncoding;
pub extern fn CFStringGetSystemEncoding() CFStringEncoding;
pub extern fn CFStringGetMaximumSizeForEncoding(length: CFIndex, encoding: CFStringEncoding) CFIndex;
pub extern fn CFStringGetFileSystemRepresentation(string: CFStringRef, buffer: [*c]u8, maxBufLen: CFIndex) Boolean;
pub extern fn CFStringGetMaximumSizeOfFileSystemRepresentation(string: CFStringRef) CFIndex;
pub extern fn CFStringCreateWithFileSystemRepresentation(alloc: CFAllocatorRef, buffer: [*c]const u8) CFStringRef;
pub const CFStringCompareFlags = CFOptionFlags;
pub const kCFCompareCaseInsensitive = @enumToInt(enum_unnamed_96.kCFCompareCaseInsensitive);
pub const kCFCompareBackwards = @enumToInt(enum_unnamed_96.kCFCompareBackwards);
pub const kCFCompareAnchored = @enumToInt(enum_unnamed_96.kCFCompareAnchored);
pub const kCFCompareNonliteral = @enumToInt(enum_unnamed_96.kCFCompareNonliteral);
pub const kCFCompareLocalized = @enumToInt(enum_unnamed_96.kCFCompareLocalized);
pub const kCFCompareNumerically = @enumToInt(enum_unnamed_96.kCFCompareNumerically);
pub const kCFCompareDiacriticInsensitive = @enumToInt(enum_unnamed_96.kCFCompareDiacriticInsensitive);
pub const kCFCompareWidthInsensitive = @enumToInt(enum_unnamed_96.kCFCompareWidthInsensitive);
pub const kCFCompareForcedOrdering = @enumToInt(enum_unnamed_96.kCFCompareForcedOrdering);
const enum_unnamed_96 = extern enum(c_int) {
    kCFCompareCaseInsensitive = 1,
    kCFCompareBackwards = 4,
    kCFCompareAnchored = 8,
    kCFCompareNonliteral = 16,
    kCFCompareLocalized = 32,
    kCFCompareNumerically = 64,
    kCFCompareDiacriticInsensitive = 128,
    kCFCompareWidthInsensitive = 256,
    kCFCompareForcedOrdering = 512,
    _,
};
pub extern fn CFStringCompareWithOptionsAndLocale(theString1: CFStringRef, theString2: CFStringRef, rangeToCompare: CFRange, compareOptions: CFStringCompareFlags, locale: CFLocaleRef) CFComparisonResult;
pub extern fn CFStringCompareWithOptions(theString1: CFStringRef, theString2: CFStringRef, rangeToCompare: CFRange, compareOptions: CFStringCompareFlags) CFComparisonResult;
pub extern fn CFStringCompare(theString1: CFStringRef, theString2: CFStringRef, compareOptions: CFStringCompareFlags) CFComparisonResult;
pub extern fn CFStringFindWithOptionsAndLocale(theString: CFStringRef, stringToFind: CFStringRef, rangeToSearch: CFRange, searchOptions: CFStringCompareFlags, locale: CFLocaleRef, result: [*c]CFRange) Boolean;
pub extern fn CFStringFindWithOptions(theString: CFStringRef, stringToFind: CFStringRef, rangeToSearch: CFRange, searchOptions: CFStringCompareFlags, result: [*c]CFRange) Boolean;
pub extern fn CFStringCreateArrayWithFindResults(alloc: CFAllocatorRef, theString: CFStringRef, stringToFind: CFStringRef, rangeToSearch: CFRange, compareOptions: CFStringCompareFlags) CFArrayRef;
pub extern fn CFStringFind(theString: CFStringRef, stringToFind: CFStringRef, compareOptions: CFStringCompareFlags) CFRange;
pub extern fn CFStringHasPrefix(theString: CFStringRef, prefix: CFStringRef) Boolean;
pub extern fn CFStringHasSuffix(theString: CFStringRef, suffix: CFStringRef) Boolean;
pub extern fn CFStringGetRangeOfComposedCharactersAtIndex(theString: CFStringRef, theIndex: CFIndex) CFRange;
pub extern fn CFStringFindCharacterFromSet(theString: CFStringRef, theSet: CFCharacterSetRef, rangeToSearch: CFRange, searchOptions: CFStringCompareFlags, result: [*c]CFRange) Boolean;
pub extern fn CFStringGetLineBounds(theString: CFStringRef, range: CFRange, lineBeginIndex: [*c]CFIndex, lineEndIndex: [*c]CFIndex, contentsEndIndex: [*c]CFIndex) void;
pub extern fn CFStringGetParagraphBounds(string: CFStringRef, range: CFRange, parBeginIndex: [*c]CFIndex, parEndIndex: [*c]CFIndex, contentsEndIndex: [*c]CFIndex) void;
pub extern fn CFStringGetHyphenationLocationBeforeIndex(string: CFStringRef, location: CFIndex, limitRange: CFRange, options: CFOptionFlags, locale: CFLocaleRef, character: [*c]UTF32Char) CFIndex;
pub extern fn CFStringIsHyphenationAvailableForLocale(locale: CFLocaleRef) Boolean;
pub extern fn CFStringCreateByCombiningStrings(alloc: CFAllocatorRef, theArray: CFArrayRef, separatorString: CFStringRef) CFStringRef;
pub extern fn CFStringCreateArrayBySeparatingStrings(alloc: CFAllocatorRef, theString: CFStringRef, separatorString: CFStringRef) CFArrayRef;
pub extern fn CFStringGetIntValue(str: CFStringRef) SInt32;
pub extern fn CFStringGetDoubleValue(str: CFStringRef) f64;
pub extern fn CFStringAppend(theString: CFMutableStringRef, appendedString: CFStringRef) void;
pub extern fn CFStringAppendCharacters(theString: CFMutableStringRef, chars: [*c]const UniChar, numChars: CFIndex) void;
pub extern fn CFStringAppendPascalString(theString: CFMutableStringRef, pStr: ConstStr255Param, encoding: CFStringEncoding) void;
pub extern fn CFStringAppendCString(theString: CFMutableStringRef, cStr: [*c]const u8, encoding: CFStringEncoding) void;
pub extern fn CFStringAppendFormat(theString: CFMutableStringRef, formatOptions: CFDictionaryRef, format: CFStringRef, ...) void;
pub extern fn CFStringAppendFormatAndArguments(theString: CFMutableStringRef, formatOptions: CFDictionaryRef, format: CFStringRef, arguments: [*c]struct___va_list_tag) void;
pub extern fn CFStringInsert(str: CFMutableStringRef, idx: CFIndex, insertedStr: CFStringRef) void;
pub extern fn CFStringDelete(theString: CFMutableStringRef, range: CFRange) void;
pub extern fn CFStringReplace(theString: CFMutableStringRef, range: CFRange, replacement: CFStringRef) void;
pub extern fn CFStringReplaceAll(theString: CFMutableStringRef, replacement: CFStringRef) void;
pub extern fn CFStringFindAndReplace(theString: CFMutableStringRef, stringToFind: CFStringRef, replacementString: CFStringRef, rangeToSearch: CFRange, compareOptions: CFStringCompareFlags) CFIndex;
pub extern fn CFStringSetExternalCharactersNoCopy(theString: CFMutableStringRef, chars: [*c]UniChar, length: CFIndex, capacity: CFIndex) void;
pub extern fn CFStringPad(theString: CFMutableStringRef, padString: CFStringRef, length: CFIndex, indexIntoPad: CFIndex) void;
pub extern fn CFStringTrim(theString: CFMutableStringRef, trimString: CFStringRef) void;
pub extern fn CFStringTrimWhitespace(theString: CFMutableStringRef) void;
pub extern fn CFStringLowercase(theString: CFMutableStringRef, locale: CFLocaleRef) void;
pub extern fn CFStringUppercase(theString: CFMutableStringRef, locale: CFLocaleRef) void;
pub extern fn CFStringCapitalize(theString: CFMutableStringRef, locale: CFLocaleRef) void;
pub const CFStringNormalizationForm = CFIndex;
pub const kCFStringNormalizationFormD = @enumToInt(enum_unnamed_97.kCFStringNormalizationFormD);
pub const kCFStringNormalizationFormKD = @enumToInt(enum_unnamed_97.kCFStringNormalizationFormKD);
pub const kCFStringNormalizationFormC = @enumToInt(enum_unnamed_97.kCFStringNormalizationFormC);
pub const kCFStringNormalizationFormKC = @enumToInt(enum_unnamed_97.kCFStringNormalizationFormKC);
const enum_unnamed_97 = extern enum(c_int) {
    kCFStringNormalizationFormD = 0,
    kCFStringNormalizationFormKD = 1,
    kCFStringNormalizationFormC = 2,
    kCFStringNormalizationFormKC = 3,
    _,
};
pub extern fn CFStringNormalize(theString: CFMutableStringRef, theForm: CFStringNormalizationForm) void;
pub extern fn CFStringFold(theString: CFMutableStringRef, theFlags: CFStringCompareFlags, theLocale: CFLocaleRef) void;
pub extern fn CFStringTransform(string: CFMutableStringRef, range: [*c]CFRange, transform: CFStringRef, reverse: Boolean) Boolean;
pub extern const kCFStringTransformStripCombiningMarks: CFStringRef;
pub extern const kCFStringTransformToLatin: CFStringRef;
pub extern const kCFStringTransformFullwidthHalfwidth: CFStringRef;
pub extern const kCFStringTransformLatinKatakana: CFStringRef;
pub extern const kCFStringTransformLatinHiragana: CFStringRef;
pub extern const kCFStringTransformHiraganaKatakana: CFStringRef;
pub extern const kCFStringTransformMandarinLatin: CFStringRef;
pub extern const kCFStringTransformLatinHangul: CFStringRef;
pub extern const kCFStringTransformLatinArabic: CFStringRef;
pub extern const kCFStringTransformLatinHebrew: CFStringRef;
pub extern const kCFStringTransformLatinThai: CFStringRef;
pub extern const kCFStringTransformLatinCyrillic: CFStringRef;
pub extern const kCFStringTransformLatinGreek: CFStringRef;
pub extern const kCFStringTransformToXMLHex: CFStringRef;
pub extern const kCFStringTransformToUnicodeName: CFStringRef;
pub extern const kCFStringTransformStripDiacritics: CFStringRef;
pub extern fn CFStringIsEncodingAvailable(encoding: CFStringEncoding) Boolean;
pub extern fn CFStringGetListOfAvailableEncodings() [*c]const CFStringEncoding;
pub extern fn CFStringGetNameOfEncoding(encoding: CFStringEncoding) CFStringRef;
pub extern fn CFStringConvertEncodingToNSStringEncoding(encoding: CFStringEncoding) c_ulong;
pub extern fn CFStringConvertNSStringEncodingToEncoding(encoding: c_ulong) CFStringEncoding;
pub extern fn CFStringConvertEncodingToWindowsCodepage(encoding: CFStringEncoding) UInt32;
pub extern fn CFStringConvertWindowsCodepageToEncoding(codepage: UInt32) CFStringEncoding;
pub extern fn CFStringConvertIANACharSetNameToEncoding(theString: CFStringRef) CFStringEncoding;
pub extern fn CFStringConvertEncodingToIANACharSetName(encoding: CFStringEncoding) CFStringRef;
pub extern fn CFStringGetMostCompatibleMacStringEncoding(encoding: CFStringEncoding) CFStringEncoding;
const struct_unnamed_98 = extern struct {
    buffer: [64]UniChar,
    theString: CFStringRef,
    directUniCharBuffer: [*c]const UniChar,
    directCStringBuffer: [*c]const u8,
    rangeToBuffer: CFRange,
    bufferedRangeStart: CFIndex,
    bufferedRangeEnd: CFIndex,
};
pub const CFStringInlineBuffer = struct_unnamed_98;
pub fn CFStringInitInlineBuffer(arg_str: CFStringRef, arg_buf: [*c]CFStringInlineBuffer, arg_range: CFRange) callconv(.C) void {
    var str = arg_str;
    var buf = arg_buf;
    var range = arg_range;
    buf.*.theString = str;
    buf.*.rangeToBuffer = range;
    buf.*.directCStringBuffer = if ((blk: {
        const tmp = CFStringGetCharactersPtr(str);
        buf.*.directUniCharBuffer = tmp;
        break :blk tmp;
    }) != null) null else CFStringGetCStringPtr(str, @bitCast(CFStringEncoding, kCFStringEncodingASCII));
    buf.*.bufferedRangeStart = blk: {
        const tmp = @bitCast(CFIndex, @as(c_long, @as(c_int, 0)));
        buf.*.bufferedRangeEnd = tmp;
        break :blk tmp;
    };
}
pub fn CFStringGetCharacterFromInlineBuffer(arg_buf: [*c]CFStringInlineBuffer, arg_idx: CFIndex) callconv(.C) UniChar {
    var buf = arg_buf;
    var idx = arg_idx;
    if ((idx < @bitCast(c_long, @as(c_long, @as(c_int, 0)))) or (idx >= buf.*.rangeToBuffer.length)) return @bitCast(UniChar, @truncate(c_short, @as(c_int, 0)));
    if (buf.*.directUniCharBuffer != null) return buf.*.directUniCharBuffer[@intCast(c_ulong, (idx + buf.*.rangeToBuffer.location))];
    if (buf.*.directCStringBuffer != null) return @bitCast(UniChar, @as(c_ushort, (buf.*.directCStringBuffer[@intCast(c_ulong, (idx + buf.*.rangeToBuffer.location))])));
    if ((idx >= buf.*.bufferedRangeEnd) or (idx < buf.*.bufferedRangeStart)) {
        if ((blk: {
            const tmp = (idx - @bitCast(c_long, @as(c_long, @as(c_int, 4))));
            buf.*.bufferedRangeStart = tmp;
            break :blk tmp;
        }) < @bitCast(c_long, @as(c_long, @as(c_int, 0)))) buf.*.bufferedRangeStart = @bitCast(CFIndex, @as(c_long, @as(c_int, 0)));
        buf.*.bufferedRangeEnd = (buf.*.bufferedRangeStart + @bitCast(c_long, @as(c_long, @as(c_int, 64))));
        if (buf.*.bufferedRangeEnd > buf.*.rangeToBuffer.length) buf.*.bufferedRangeEnd = buf.*.rangeToBuffer.length;
        CFStringGetCharacters(buf.*.theString, CFRangeMake((buf.*.rangeToBuffer.location + buf.*.bufferedRangeStart), (buf.*.bufferedRangeEnd - buf.*.bufferedRangeStart)), &buf.*.buffer);
    }
    return buf.*.buffer[@intCast(c_ulong, (idx - buf.*.bufferedRangeStart))];
}
pub fn CFStringIsSurrogateHighCharacter(arg_character: UniChar) callconv(.C) Boolean {
    var character = arg_character;
    return @bitCast(Boolean, @truncate(i8, (if ((@bitCast(c_ulong, @as(c_ulong, character)) >= @as(c_ulong, 55296)) and (@bitCast(c_ulong, @as(c_ulong, character)) <= @as(c_ulong, 56319))) @as(c_int, 1) else @as(c_int, 0))));
}
pub fn CFStringIsSurrogateLowCharacter(arg_character: UniChar) callconv(.C) Boolean {
    var character = arg_character;
    return @bitCast(Boolean, @truncate(i8, (if ((@bitCast(c_ulong, @as(c_ulong, character)) >= @as(c_ulong, 56320)) and (@bitCast(c_ulong, @as(c_ulong, character)) <= @as(c_ulong, 57343))) @as(c_int, 1) else @as(c_int, 0))));
}
pub fn CFStringGetLongCharacterForSurrogatePair(arg_surrogateHigh: UniChar, arg_surrogateLow: UniChar) callconv(.C) UTF32Char {
    var surrogateHigh = arg_surrogateHigh;
    var surrogateLow = arg_surrogateLow;
    return @bitCast(UTF32Char, @truncate(c_uint, ((((@bitCast(c_ulong, @as(c_ulong, surrogateHigh)) -% @as(c_ulong, 55296)) << @intCast(@import("std").math.Log2Int(c_ulong), 10)) +% (@bitCast(c_ulong, @as(c_ulong, surrogateLow)) -% @as(c_ulong, 56320))) +% @as(c_ulong, 65536))));
}
pub fn CFStringGetSurrogatePairForLongCharacter(arg_character: UTF32Char, arg_surrogates: [*c]UniChar) callconv(.C) Boolean {
    var character = arg_character;
    var surrogates = arg_surrogates;
    if ((@bitCast(c_ulong, @as(c_ulong, character)) > @as(c_ulong, 65535)) and (@bitCast(c_ulong, @as(c_ulong, character)) < @as(c_ulong, 1114112))) {
        character -%= @bitCast(c_uint, @as(c_int, 65536));
        if (@ptrCast([*c]UniChar, @alignCast(@alignOf(UniChar), (@intToPtr(?*c_void, @as(c_int, 0))))) != surrogates) {
            surrogates[@intCast(c_uint, @as(c_int, 0))] = @bitCast(UniChar, @truncate(c_ushort, (@bitCast(c_ulong, @as(c_ulong, (character >> @intCast(@import("std").math.Log2Int(UTF32Char), 10)))) +% @as(c_ulong, 55296))));
            surrogates[@intCast(c_uint, @as(c_int, 1))] = @bitCast(UniChar, @truncate(c_ushort, (@bitCast(c_ulong, @as(c_ulong, (character & @bitCast(c_uint, @as(c_int, 1023))))) +% @as(c_ulong, 56320))));
        }
        return @bitCast(Boolean, @truncate(i8, @as(c_int, 1)));
    } else {
        if (@ptrCast([*c]UniChar, @alignCast(@alignOf(UniChar), (@intToPtr(?*c_void, @as(c_int, 0))))) != surrogates) surrogates.?.* = @bitCast(UniChar, @truncate(c_ushort, character));
        return @bitCast(Boolean, @truncate(i8, @as(c_int, 0)));
    }
}
pub extern fn CFShow(obj: CFTypeRef) void;
pub extern fn CFShowStr(str: CFStringRef) void;
pub extern fn __CFStringMakeConstantString(cStr: [*c]const u8) CFStringRef;
pub extern fn CFTimeZoneGetTypeID() CFTypeID;
pub extern fn CFTimeZoneCopySystem() CFTimeZoneRef;
pub extern fn CFTimeZoneResetSystem() void;
pub extern fn CFTimeZoneCopyDefault() CFTimeZoneRef;
pub extern fn CFTimeZoneSetDefault(tz: CFTimeZoneRef) void;
pub extern fn CFTimeZoneCopyKnownNames() CFArrayRef;
pub extern fn CFTimeZoneCopyAbbreviationDictionary() CFDictionaryRef;
pub extern fn CFTimeZoneSetAbbreviationDictionary(dict: CFDictionaryRef) void;
pub extern fn CFTimeZoneCreate(allocator: CFAllocatorRef, name: CFStringRef, data: CFDataRef) CFTimeZoneRef;
pub extern fn CFTimeZoneCreateWithTimeIntervalFromGMT(allocator: CFAllocatorRef, ti: CFTimeInterval) CFTimeZoneRef;
pub extern fn CFTimeZoneCreateWithName(allocator: CFAllocatorRef, name: CFStringRef, tryAbbrev: Boolean) CFTimeZoneRef;
pub extern fn CFTimeZoneGetName(tz: CFTimeZoneRef) CFStringRef;
pub extern fn CFTimeZoneGetData(tz: CFTimeZoneRef) CFDataRef;
pub extern fn CFTimeZoneGetSecondsFromGMT(tz: CFTimeZoneRef, at: CFAbsoluteTime) CFTimeInterval;
pub extern fn CFTimeZoneCopyAbbreviation(tz: CFTimeZoneRef, at: CFAbsoluteTime) CFStringRef;
pub extern fn CFTimeZoneIsDaylightSavingTime(tz: CFTimeZoneRef, at: CFAbsoluteTime) Boolean;
pub extern fn CFTimeZoneGetDaylightSavingTimeOffset(tz: CFTimeZoneRef, at: CFAbsoluteTime) CFTimeInterval;
pub extern fn CFTimeZoneGetNextDaylightSavingTimeTransition(tz: CFTimeZoneRef, at: CFAbsoluteTime) CFAbsoluteTime;
pub const CFTimeZoneNameStyle = CFIndex;
pub const kCFTimeZoneNameStyleStandard = @enumToInt(enum_unnamed_99.kCFTimeZoneNameStyleStandard);
pub const kCFTimeZoneNameStyleShortStandard = @enumToInt(enum_unnamed_99.kCFTimeZoneNameStyleShortStandard);
pub const kCFTimeZoneNameStyleDaylightSaving = @enumToInt(enum_unnamed_99.kCFTimeZoneNameStyleDaylightSaving);
pub const kCFTimeZoneNameStyleShortDaylightSaving = @enumToInt(enum_unnamed_99.kCFTimeZoneNameStyleShortDaylightSaving);
pub const kCFTimeZoneNameStyleGeneric = @enumToInt(enum_unnamed_99.kCFTimeZoneNameStyleGeneric);
pub const kCFTimeZoneNameStyleShortGeneric = @enumToInt(enum_unnamed_99.kCFTimeZoneNameStyleShortGeneric);
const enum_unnamed_99 = extern enum(c_int) {
    kCFTimeZoneNameStyleStandard,
    kCFTimeZoneNameStyleShortStandard,
    kCFTimeZoneNameStyleDaylightSaving,
    kCFTimeZoneNameStyleShortDaylightSaving,
    kCFTimeZoneNameStyleGeneric,
    kCFTimeZoneNameStyleShortGeneric,
    _,
};
pub extern fn CFTimeZoneCopyLocalizedName(tz: CFTimeZoneRef, style: CFTimeZoneNameStyle, locale: CFLocaleRef) CFStringRef;
pub extern const kCFTimeZoneSystemTimeZoneDidChangeNotification: CFNotificationName;
pub const struct___CFCalendar = @OpaqueType();
pub const CFCalendarRef = ?*struct___CFCalendar;
pub extern fn CFCalendarGetTypeID() CFTypeID;
pub extern fn CFCalendarCopyCurrent() CFCalendarRef;
pub extern fn CFCalendarCreateWithIdentifier(allocator: CFAllocatorRef, identifier: CFCalendarIdentifier) CFCalendarRef;
pub extern fn CFCalendarGetIdentifier(calendar: CFCalendarRef) CFCalendarIdentifier;
pub extern fn CFCalendarCopyLocale(calendar: CFCalendarRef) CFLocaleRef;
pub extern fn CFCalendarSetLocale(calendar: CFCalendarRef, locale: CFLocaleRef) void;
pub extern fn CFCalendarCopyTimeZone(calendar: CFCalendarRef) CFTimeZoneRef;
pub extern fn CFCalendarSetTimeZone(calendar: CFCalendarRef, tz: CFTimeZoneRef) void;
pub extern fn CFCalendarGetFirstWeekday(calendar: CFCalendarRef) CFIndex;
pub extern fn CFCalendarSetFirstWeekday(calendar: CFCalendarRef, wkdy: CFIndex) void;
pub extern fn CFCalendarGetMinimumDaysInFirstWeek(calendar: CFCalendarRef) CFIndex;
pub extern fn CFCalendarSetMinimumDaysInFirstWeek(calendar: CFCalendarRef, mwd: CFIndex) void;
pub const CFCalendarUnit = CFOptionFlags;
pub const kCFCalendarUnitEra = @enumToInt(enum_unnamed_100.kCFCalendarUnitEra);
pub const kCFCalendarUnitYear = @enumToInt(enum_unnamed_100.kCFCalendarUnitYear);
pub const kCFCalendarUnitMonth = @enumToInt(enum_unnamed_100.kCFCalendarUnitMonth);
pub const kCFCalendarUnitDay = @enumToInt(enum_unnamed_100.kCFCalendarUnitDay);
pub const kCFCalendarUnitHour = @enumToInt(enum_unnamed_100.kCFCalendarUnitHour);
pub const kCFCalendarUnitMinute = @enumToInt(enum_unnamed_100.kCFCalendarUnitMinute);
pub const kCFCalendarUnitSecond = @enumToInt(enum_unnamed_100.kCFCalendarUnitSecond);
pub const kCFCalendarUnitWeek = @enumToInt(enum_unnamed_100.kCFCalendarUnitWeek);
pub const kCFCalendarUnitWeekday = @enumToInt(enum_unnamed_100.kCFCalendarUnitWeekday);
pub const kCFCalendarUnitWeekdayOrdinal = @enumToInt(enum_unnamed_100.kCFCalendarUnitWeekdayOrdinal);
pub const kCFCalendarUnitQuarter = @enumToInt(enum_unnamed_100.kCFCalendarUnitQuarter);
pub const kCFCalendarUnitWeekOfMonth = @enumToInt(enum_unnamed_100.kCFCalendarUnitWeekOfMonth);
pub const kCFCalendarUnitWeekOfYear = @enumToInt(enum_unnamed_100.kCFCalendarUnitWeekOfYear);
pub const kCFCalendarUnitYearForWeekOfYear = @enumToInt(enum_unnamed_100.kCFCalendarUnitYearForWeekOfYear);
const enum_unnamed_100 = extern enum(c_int) {
    kCFCalendarUnitEra = 2,
    kCFCalendarUnitYear = 4,
    kCFCalendarUnitMonth = 8,
    kCFCalendarUnitDay = 16,
    kCFCalendarUnitHour = 32,
    kCFCalendarUnitMinute = 64,
    kCFCalendarUnitSecond = 128,
    kCFCalendarUnitWeek = 256,
    kCFCalendarUnitWeekday = 512,
    kCFCalendarUnitWeekdayOrdinal = 1024,
    kCFCalendarUnitQuarter = 2048,
    kCFCalendarUnitWeekOfMonth = 4096,
    kCFCalendarUnitWeekOfYear = 8192,
    kCFCalendarUnitYearForWeekOfYear = 16384,
    _,
};
pub extern fn CFCalendarGetMinimumRangeOfUnit(calendar: CFCalendarRef, unit: CFCalendarUnit) CFRange;
pub extern fn CFCalendarGetMaximumRangeOfUnit(calendar: CFCalendarRef, unit: CFCalendarUnit) CFRange;
pub extern fn CFCalendarGetRangeOfUnit(calendar: CFCalendarRef, smallerUnit: CFCalendarUnit, biggerUnit: CFCalendarUnit, at: CFAbsoluteTime) CFRange;
pub extern fn CFCalendarGetOrdinalityOfUnit(calendar: CFCalendarRef, smallerUnit: CFCalendarUnit, biggerUnit: CFCalendarUnit, at: CFAbsoluteTime) CFIndex;
pub extern fn CFCalendarGetTimeRangeOfUnit(calendar: CFCalendarRef, unit: CFCalendarUnit, at: CFAbsoluteTime, startp: [*c]CFAbsoluteTime, tip: [*c]CFTimeInterval) Boolean;
pub extern fn CFCalendarComposeAbsoluteTime(calendar: CFCalendarRef, at: [*c]CFAbsoluteTime, componentDesc: [*c]const u8, ...) Boolean;
pub extern fn CFCalendarDecomposeAbsoluteTime(calendar: CFCalendarRef, at: CFAbsoluteTime, componentDesc: [*c]const u8, ...) Boolean;
pub const kCFCalendarComponentsWrap = @enumToInt(enum_unnamed_101.kCFCalendarComponentsWrap);
const enum_unnamed_101 = extern enum(c_int) {
    kCFCalendarComponentsWrap = 1,
    _,
};
pub extern fn CFCalendarAddComponents(calendar: CFCalendarRef, at: [*c]CFAbsoluteTime, options: CFOptionFlags, componentDesc: [*c]const u8, ...) Boolean;
pub extern fn CFCalendarGetComponentDifference(calendar: CFCalendarRef, startingAT: CFAbsoluteTime, resultAT: CFAbsoluteTime, options: CFOptionFlags, componentDesc: [*c]const u8, ...) Boolean;
pub const CFDateFormatterKey = CFStringRef;
pub const struct___CFDateFormatter = @OpaqueType();
pub const CFDateFormatterRef = ?*struct___CFDateFormatter;
pub extern fn CFDateFormatterCreateDateFormatFromTemplate(allocator: CFAllocatorRef, tmplate: CFStringRef, options: CFOptionFlags, locale: CFLocaleRef) CFStringRef;
pub extern fn CFDateFormatterGetTypeID() CFTypeID;
pub const CFDateFormatterStyle = CFIndex;
pub const kCFDateFormatterNoStyle = @enumToInt(enum_unnamed_102.kCFDateFormatterNoStyle);
pub const kCFDateFormatterShortStyle = @enumToInt(enum_unnamed_102.kCFDateFormatterShortStyle);
pub const kCFDateFormatterMediumStyle = @enumToInt(enum_unnamed_102.kCFDateFormatterMediumStyle);
pub const kCFDateFormatterLongStyle = @enumToInt(enum_unnamed_102.kCFDateFormatterLongStyle);
pub const kCFDateFormatterFullStyle = @enumToInt(enum_unnamed_102.kCFDateFormatterFullStyle);
const enum_unnamed_102 = extern enum(c_int) {
    kCFDateFormatterNoStyle = 0,
    kCFDateFormatterShortStyle = 1,
    kCFDateFormatterMediumStyle = 2,
    kCFDateFormatterLongStyle = 3,
    kCFDateFormatterFullStyle = 4,
    _,
};
pub const CFISO8601DateFormatOptions = CFOptionFlags;
pub const kCFISO8601DateFormatWithYear = @enumToInt(enum_unnamed_103.kCFISO8601DateFormatWithYear);
pub const kCFISO8601DateFormatWithMonth = @enumToInt(enum_unnamed_103.kCFISO8601DateFormatWithMonth);
pub const kCFISO8601DateFormatWithWeekOfYear = @enumToInt(enum_unnamed_103.kCFISO8601DateFormatWithWeekOfYear);
pub const kCFISO8601DateFormatWithDay = @enumToInt(enum_unnamed_103.kCFISO8601DateFormatWithDay);
pub const kCFISO8601DateFormatWithTime = @enumToInt(enum_unnamed_103.kCFISO8601DateFormatWithTime);
pub const kCFISO8601DateFormatWithTimeZone = @enumToInt(enum_unnamed_103.kCFISO8601DateFormatWithTimeZone);
pub const kCFISO8601DateFormatWithSpaceBetweenDateAndTime = @enumToInt(enum_unnamed_103.kCFISO8601DateFormatWithSpaceBetweenDateAndTime);
pub const kCFISO8601DateFormatWithDashSeparatorInDate = @enumToInt(enum_unnamed_103.kCFISO8601DateFormatWithDashSeparatorInDate);
pub const kCFISO8601DateFormatWithColonSeparatorInTime = @enumToInt(enum_unnamed_103.kCFISO8601DateFormatWithColonSeparatorInTime);
pub const kCFISO8601DateFormatWithColonSeparatorInTimeZone = @enumToInt(enum_unnamed_103.kCFISO8601DateFormatWithColonSeparatorInTimeZone);
pub const kCFISO8601DateFormatWithFractionalSeconds = @enumToInt(enum_unnamed_103.kCFISO8601DateFormatWithFractionalSeconds);
pub const kCFISO8601DateFormatWithFullDate = @enumToInt(enum_unnamed_103.kCFISO8601DateFormatWithFullDate);
pub const kCFISO8601DateFormatWithFullTime = @enumToInt(enum_unnamed_103.kCFISO8601DateFormatWithFullTime);
pub const kCFISO8601DateFormatWithInternetDateTime = @enumToInt(enum_unnamed_103.kCFISO8601DateFormatWithInternetDateTime);
const enum_unnamed_103 = extern enum(c_int) {
    kCFISO8601DateFormatWithYear = 1,
    kCFISO8601DateFormatWithMonth = 2,
    kCFISO8601DateFormatWithWeekOfYear = 4,
    kCFISO8601DateFormatWithDay = 16,
    kCFISO8601DateFormatWithTime = 32,
    kCFISO8601DateFormatWithTimeZone = 64,
    kCFISO8601DateFormatWithSpaceBetweenDateAndTime = 128,
    kCFISO8601DateFormatWithDashSeparatorInDate = 256,
    kCFISO8601DateFormatWithColonSeparatorInTime = 512,
    kCFISO8601DateFormatWithColonSeparatorInTimeZone = 1024,
    kCFISO8601DateFormatWithFractionalSeconds = 2048,
    kCFISO8601DateFormatWithFullDate = 275,
    kCFISO8601DateFormatWithFullTime = 1632,
    kCFISO8601DateFormatWithInternetDateTime = 1907,
    _,
};
pub extern fn CFDateFormatterCreateISO8601Formatter(allocator: CFAllocatorRef, formatOptions: CFISO8601DateFormatOptions) CFDateFormatterRef;
pub extern fn CFDateFormatterCreate(allocator: CFAllocatorRef, locale: CFLocaleRef, dateStyle: CFDateFormatterStyle, timeStyle: CFDateFormatterStyle) CFDateFormatterRef;
pub extern fn CFDateFormatterGetLocale(formatter: CFDateFormatterRef) CFLocaleRef;
pub extern fn CFDateFormatterGetDateStyle(formatter: CFDateFormatterRef) CFDateFormatterStyle;
pub extern fn CFDateFormatterGetTimeStyle(formatter: CFDateFormatterRef) CFDateFormatterStyle;
pub extern fn CFDateFormatterGetFormat(formatter: CFDateFormatterRef) CFStringRef;
pub extern fn CFDateFormatterSetFormat(formatter: CFDateFormatterRef, formatString: CFStringRef) void;
pub extern fn CFDateFormatterCreateStringWithDate(allocator: CFAllocatorRef, formatter: CFDateFormatterRef, date: CFDateRef) CFStringRef;
pub extern fn CFDateFormatterCreateStringWithAbsoluteTime(allocator: CFAllocatorRef, formatter: CFDateFormatterRef, at: CFAbsoluteTime) CFStringRef;
pub extern fn CFDateFormatterCreateDateFromString(allocator: CFAllocatorRef, formatter: CFDateFormatterRef, string: CFStringRef, rangep: [*c]CFRange) CFDateRef;
pub extern fn CFDateFormatterGetAbsoluteTimeFromString(formatter: CFDateFormatterRef, string: CFStringRef, rangep: [*c]CFRange, atp: [*c]CFAbsoluteTime) Boolean;
pub extern fn CFDateFormatterSetProperty(formatter: CFDateFormatterRef, key: CFStringRef, value: CFTypeRef) void;
pub extern fn CFDateFormatterCopyProperty(formatter: CFDateFormatterRef, key: CFDateFormatterKey) CFTypeRef;
pub extern const kCFDateFormatterIsLenient: CFDateFormatterKey;
pub extern const kCFDateFormatterTimeZone: CFDateFormatterKey;
pub extern const kCFDateFormatterCalendarName: CFDateFormatterKey;
pub extern const kCFDateFormatterDefaultFormat: CFDateFormatterKey;
pub extern const kCFDateFormatterTwoDigitStartDate: CFDateFormatterKey;
pub extern const kCFDateFormatterDefaultDate: CFDateFormatterKey;
pub extern const kCFDateFormatterCalendar: CFDateFormatterKey;
pub extern const kCFDateFormatterEraSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterAMSymbol: CFDateFormatterKey;
pub extern const kCFDateFormatterPMSymbol: CFDateFormatterKey;
pub extern const kCFDateFormatterLongEraSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterVeryShortMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterStandaloneMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortStandaloneMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterVeryShortStandaloneMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterVeryShortWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterStandaloneWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortStandaloneWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterVeryShortStandaloneWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterQuarterSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortQuarterSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterStandaloneQuarterSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortStandaloneQuarterSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterGregorianStartDate: CFDateFormatterKey;
pub extern const kCFDateFormatterDoesRelativeDateFormattingKey: CFDateFormatterKey;
pub const CFErrorDomain = CFStringRef;
pub const struct___CFError = @OpaqueType();
pub const CFErrorRef = ?*struct___CFError;
pub extern fn CFErrorGetTypeID() CFTypeID;
pub extern const kCFErrorDomainPOSIX: CFErrorDomain;
pub extern const kCFErrorDomainOSStatus: CFErrorDomain;
pub extern const kCFErrorDomainMach: CFErrorDomain;
pub extern const kCFErrorDomainCocoa: CFErrorDomain;
pub extern const kCFErrorLocalizedDescriptionKey: CFStringRef;
pub extern const kCFErrorLocalizedFailureKey: CFStringRef;
pub extern const kCFErrorLocalizedFailureReasonKey: CFStringRef;
pub extern const kCFErrorLocalizedRecoverySuggestionKey: CFStringRef;
pub extern const kCFErrorDescriptionKey: CFStringRef;
pub extern const kCFErrorUnderlyingErrorKey: CFStringRef;
pub extern const kCFErrorURLKey: CFStringRef;
pub extern const kCFErrorFilePathKey: CFStringRef;
pub extern fn CFErrorCreate(allocator: CFAllocatorRef, domain: CFErrorDomain, code: CFIndex, userInfo: CFDictionaryRef) CFErrorRef;
pub extern fn CFErrorCreateWithUserInfoKeysAndValues(allocator: CFAllocatorRef, domain: CFErrorDomain, code: CFIndex, userInfoKeys: [*c]const ?*const c_void, userInfoValues: [*c]const ?*const c_void, numUserInfoValues: CFIndex) CFErrorRef;
pub extern fn CFErrorGetDomain(err: CFErrorRef) CFErrorDomain;
pub extern fn CFErrorGetCode(err: CFErrorRef) CFIndex;
pub extern fn CFErrorCopyUserInfo(err: CFErrorRef) CFDictionaryRef;
pub extern fn CFErrorCopyDescription(err: CFErrorRef) CFStringRef;
pub extern fn CFErrorCopyFailureReason(err: CFErrorRef) CFStringRef;
pub extern fn CFErrorCopyRecoverySuggestion(err: CFErrorRef) CFStringRef;
pub const struct___CFBoolean = @OpaqueType();
pub const CFBooleanRef = ?*const struct___CFBoolean;
pub extern const kCFBooleanTrue: CFBooleanRef;
pub extern const kCFBooleanFalse: CFBooleanRef;
pub extern fn CFBooleanGetTypeID() CFTypeID;
pub extern fn CFBooleanGetValue(boolean: CFBooleanRef) Boolean;
pub const CFNumberType = CFIndex;
pub const kCFNumberSInt8Type = @enumToInt(enum_unnamed_104.kCFNumberSInt8Type);
pub const kCFNumberSInt16Type = @enumToInt(enum_unnamed_104.kCFNumberSInt16Type);
pub const kCFNumberSInt32Type = @enumToInt(enum_unnamed_104.kCFNumberSInt32Type);
pub const kCFNumberSInt64Type = @enumToInt(enum_unnamed_104.kCFNumberSInt64Type);
pub const kCFNumberFloat32Type = @enumToInt(enum_unnamed_104.kCFNumberFloat32Type);
pub const kCFNumberFloat64Type = @enumToInt(enum_unnamed_104.kCFNumberFloat64Type);
pub const kCFNumberCharType = @enumToInt(enum_unnamed_104.kCFNumberCharType);
pub const kCFNumberShortType = @enumToInt(enum_unnamed_104.kCFNumberShortType);
pub const kCFNumberIntType = @enumToInt(enum_unnamed_104.kCFNumberIntType);
pub const kCFNumberLongType = @enumToInt(enum_unnamed_104.kCFNumberLongType);
pub const kCFNumberLongLongType = @enumToInt(enum_unnamed_104.kCFNumberLongLongType);
pub const kCFNumberFloatType = @enumToInt(enum_unnamed_104.kCFNumberFloatType);
pub const kCFNumberDoubleType = @enumToInt(enum_unnamed_104.kCFNumberDoubleType);
pub const kCFNumberCFIndexType = @enumToInt(enum_unnamed_104.kCFNumberCFIndexType);
pub const kCFNumberNSIntegerType = @enumToInt(enum_unnamed_104.kCFNumberNSIntegerType);
pub const kCFNumberCGFloatType = @enumToInt(enum_unnamed_104.kCFNumberCGFloatType);
pub const kCFNumberMaxType = @enumToInt(enum_unnamed_104.kCFNumberMaxType);
const enum_unnamed_104 = extern enum(c_int) {
    kCFNumberSInt8Type = 1,
    kCFNumberSInt16Type = 2,
    kCFNumberSInt32Type = 3,
    kCFNumberSInt64Type = 4,
    kCFNumberFloat32Type = 5,
    kCFNumberFloat64Type = 6,
    kCFNumberCharType = 7,
    kCFNumberShortType = 8,
    kCFNumberIntType = 9,
    kCFNumberLongType = 10,
    kCFNumberLongLongType = 11,
    kCFNumberFloatType = 12,
    kCFNumberDoubleType = 13,
    kCFNumberCFIndexType = 14,
    kCFNumberNSIntegerType = 15,
    kCFNumberCGFloatType = 16,
    kCFNumberMaxType = 16,
    _,
};
pub const struct___CFNumber = @OpaqueType();
pub const CFNumberRef = ?*const struct___CFNumber;
pub extern const kCFNumberPositiveInfinity: CFNumberRef;
pub extern const kCFNumberNegativeInfinity: CFNumberRef;
pub extern const kCFNumberNaN: CFNumberRef;
pub extern fn CFNumberGetTypeID() CFTypeID;
pub extern fn CFNumberCreate(allocator: CFAllocatorRef, theType: CFNumberType, valuePtr: ?*const c_void) CFNumberRef;
pub extern fn CFNumberGetType(number: CFNumberRef) CFNumberType;
pub extern fn CFNumberGetByteSize(number: CFNumberRef) CFIndex;
pub extern fn CFNumberIsFloatType(number: CFNumberRef) Boolean;
pub extern fn CFNumberGetValue(number: CFNumberRef, theType: CFNumberType, valuePtr: ?*c_void) Boolean;
pub extern fn CFNumberCompare(number: CFNumberRef, otherNumber: CFNumberRef, context: ?*c_void) CFComparisonResult;
pub const CFNumberFormatterKey = CFStringRef;
pub const struct___CFNumberFormatter = @OpaqueType();
pub const CFNumberFormatterRef = ?*struct___CFNumberFormatter;
pub extern fn CFNumberFormatterGetTypeID() CFTypeID;
pub const CFNumberFormatterStyle = CFIndex;
pub const kCFNumberFormatterNoStyle = @enumToInt(enum_unnamed_105.kCFNumberFormatterNoStyle);
pub const kCFNumberFormatterDecimalStyle = @enumToInt(enum_unnamed_105.kCFNumberFormatterDecimalStyle);
pub const kCFNumberFormatterCurrencyStyle = @enumToInt(enum_unnamed_105.kCFNumberFormatterCurrencyStyle);
pub const kCFNumberFormatterPercentStyle = @enumToInt(enum_unnamed_105.kCFNumberFormatterPercentStyle);
pub const kCFNumberFormatterScientificStyle = @enumToInt(enum_unnamed_105.kCFNumberFormatterScientificStyle);
pub const kCFNumberFormatterSpellOutStyle = @enumToInt(enum_unnamed_105.kCFNumberFormatterSpellOutStyle);
pub const kCFNumberFormatterOrdinalStyle = @enumToInt(enum_unnamed_105.kCFNumberFormatterOrdinalStyle);
pub const kCFNumberFormatterCurrencyISOCodeStyle = @enumToInt(enum_unnamed_105.kCFNumberFormatterCurrencyISOCodeStyle);
pub const kCFNumberFormatterCurrencyPluralStyle = @enumToInt(enum_unnamed_105.kCFNumberFormatterCurrencyPluralStyle);
pub const kCFNumberFormatterCurrencyAccountingStyle = @enumToInt(enum_unnamed_105.kCFNumberFormatterCurrencyAccountingStyle);
const enum_unnamed_105 = extern enum(c_int) {
    kCFNumberFormatterNoStyle = 0,
    kCFNumberFormatterDecimalStyle = 1,
    kCFNumberFormatterCurrencyStyle = 2,
    kCFNumberFormatterPercentStyle = 3,
    kCFNumberFormatterScientificStyle = 4,
    kCFNumberFormatterSpellOutStyle = 5,
    kCFNumberFormatterOrdinalStyle = 6,
    kCFNumberFormatterCurrencyISOCodeStyle = 8,
    kCFNumberFormatterCurrencyPluralStyle = 9,
    kCFNumberFormatterCurrencyAccountingStyle = 10,
    _,
};
pub extern fn CFNumberFormatterCreate(allocator: CFAllocatorRef, locale: CFLocaleRef, style: CFNumberFormatterStyle) CFNumberFormatterRef;
pub extern fn CFNumberFormatterGetLocale(formatter: CFNumberFormatterRef) CFLocaleRef;
pub extern fn CFNumberFormatterGetStyle(formatter: CFNumberFormatterRef) CFNumberFormatterStyle;
pub extern fn CFNumberFormatterGetFormat(formatter: CFNumberFormatterRef) CFStringRef;
pub extern fn CFNumberFormatterSetFormat(formatter: CFNumberFormatterRef, formatString: CFStringRef) void;
pub extern fn CFNumberFormatterCreateStringWithNumber(allocator: CFAllocatorRef, formatter: CFNumberFormatterRef, number: CFNumberRef) CFStringRef;
pub extern fn CFNumberFormatterCreateStringWithValue(allocator: CFAllocatorRef, formatter: CFNumberFormatterRef, numberType: CFNumberType, valuePtr: ?*const c_void) CFStringRef;
pub const CFNumberFormatterOptionFlags = CFOptionFlags;
pub const kCFNumberFormatterParseIntegersOnly = @enumToInt(enum_unnamed_106.kCFNumberFormatterParseIntegersOnly);
const enum_unnamed_106 = extern enum(c_int) {
    kCFNumberFormatterParseIntegersOnly = 1,
    _,
};
pub extern fn CFNumberFormatterCreateNumberFromString(allocator: CFAllocatorRef, formatter: CFNumberFormatterRef, string: CFStringRef, rangep: [*c]CFRange, options: CFOptionFlags) CFNumberRef;
pub extern fn CFNumberFormatterGetValueFromString(formatter: CFNumberFormatterRef, string: CFStringRef, rangep: [*c]CFRange, numberType: CFNumberType, valuePtr: ?*c_void) Boolean;
pub extern fn CFNumberFormatterSetProperty(formatter: CFNumberFormatterRef, key: CFNumberFormatterKey, value: CFTypeRef) void;
pub extern fn CFNumberFormatterCopyProperty(formatter: CFNumberFormatterRef, key: CFNumberFormatterKey) CFTypeRef;
pub extern const kCFNumberFormatterCurrencyCode: CFNumberFormatterKey;
pub extern const kCFNumberFormatterDecimalSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterCurrencyDecimalSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterAlwaysShowDecimalSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterGroupingSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterUseGroupingSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPercentSymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterZeroSymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterNaNSymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterInfinitySymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMinusSign: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPlusSign: CFNumberFormatterKey;
pub extern const kCFNumberFormatterCurrencySymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterExponentSymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMinIntegerDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMaxIntegerDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMinFractionDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMaxFractionDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterGroupingSize: CFNumberFormatterKey;
pub extern const kCFNumberFormatterSecondaryGroupingSize: CFNumberFormatterKey;
pub extern const kCFNumberFormatterRoundingMode: CFNumberFormatterKey;
pub extern const kCFNumberFormatterRoundingIncrement: CFNumberFormatterKey;
pub extern const kCFNumberFormatterFormatWidth: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPaddingPosition: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPaddingCharacter: CFNumberFormatterKey;
pub extern const kCFNumberFormatterDefaultFormat: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMultiplier: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPositivePrefix: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPositiveSuffix: CFNumberFormatterKey;
pub extern const kCFNumberFormatterNegativePrefix: CFNumberFormatterKey;
pub extern const kCFNumberFormatterNegativeSuffix: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPerMillSymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterInternationalCurrencySymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterCurrencyGroupingSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterIsLenient: CFNumberFormatterKey;
pub extern const kCFNumberFormatterUseSignificantDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMinSignificantDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMaxSignificantDigits: CFNumberFormatterKey;
pub const CFNumberFormatterRoundingMode = CFIndex;
pub const kCFNumberFormatterRoundCeiling = @enumToInt(enum_unnamed_107.kCFNumberFormatterRoundCeiling);
pub const kCFNumberFormatterRoundFloor = @enumToInt(enum_unnamed_107.kCFNumberFormatterRoundFloor);
pub const kCFNumberFormatterRoundDown = @enumToInt(enum_unnamed_107.kCFNumberFormatterRoundDown);
pub const kCFNumberFormatterRoundUp = @enumToInt(enum_unnamed_107.kCFNumberFormatterRoundUp);
pub const kCFNumberFormatterRoundHalfEven = @enumToInt(enum_unnamed_107.kCFNumberFormatterRoundHalfEven);
pub const kCFNumberFormatterRoundHalfDown = @enumToInt(enum_unnamed_107.kCFNumberFormatterRoundHalfDown);
pub const kCFNumberFormatterRoundHalfUp = @enumToInt(enum_unnamed_107.kCFNumberFormatterRoundHalfUp);
const enum_unnamed_107 = extern enum(c_int) {
    kCFNumberFormatterRoundCeiling = 0,
    kCFNumberFormatterRoundFloor = 1,
    kCFNumberFormatterRoundDown = 2,
    kCFNumberFormatterRoundUp = 3,
    kCFNumberFormatterRoundHalfEven = 4,
    kCFNumberFormatterRoundHalfDown = 5,
    kCFNumberFormatterRoundHalfUp = 6,
    _,
};
pub const CFNumberFormatterPadPosition = CFIndex;
pub const kCFNumberFormatterPadBeforePrefix = @enumToInt(enum_unnamed_108.kCFNumberFormatterPadBeforePrefix);
pub const kCFNumberFormatterPadAfterPrefix = @enumToInt(enum_unnamed_108.kCFNumberFormatterPadAfterPrefix);
pub const kCFNumberFormatterPadBeforeSuffix = @enumToInt(enum_unnamed_108.kCFNumberFormatterPadBeforeSuffix);
pub const kCFNumberFormatterPadAfterSuffix = @enumToInt(enum_unnamed_108.kCFNumberFormatterPadAfterSuffix);
const enum_unnamed_108 = extern enum(c_int) {
    kCFNumberFormatterPadBeforePrefix = 0,
    kCFNumberFormatterPadAfterPrefix = 1,
    kCFNumberFormatterPadBeforeSuffix = 2,
    kCFNumberFormatterPadAfterSuffix = 3,
    _,
};
pub extern fn CFNumberFormatterGetDecimalInfoForCurrencyCode(currencyCode: CFStringRef, defaultFractionDigits: [*c]i32, roundingIncrement: [*c]f64) Boolean;
pub extern const kCFPreferencesAnyApplication: CFStringRef;
pub extern const kCFPreferencesCurrentApplication: CFStringRef;
pub extern const kCFPreferencesAnyHost: CFStringRef;
pub extern const kCFPreferencesCurrentHost: CFStringRef;
pub extern const kCFPreferencesAnyUser: CFStringRef;
pub extern const kCFPreferencesCurrentUser: CFStringRef;
pub extern fn CFPreferencesCopyAppValue(key: CFStringRef, applicationID: CFStringRef) CFPropertyListRef;
pub extern fn CFPreferencesGetAppBooleanValue(key: CFStringRef, applicationID: CFStringRef, keyExistsAndHasValidFormat: [*c]Boolean) Boolean;
pub extern fn CFPreferencesGetAppIntegerValue(key: CFStringRef, applicationID: CFStringRef, keyExistsAndHasValidFormat: [*c]Boolean) CFIndex;
pub extern fn CFPreferencesSetAppValue(key: CFStringRef, value: CFPropertyListRef, applicationID: CFStringRef) void;
pub extern fn CFPreferencesAddSuitePreferencesToApp(applicationID: CFStringRef, suiteID: CFStringRef) void;
pub extern fn CFPreferencesRemoveSuitePreferencesFromApp(applicationID: CFStringRef, suiteID: CFStringRef) void;
pub extern fn CFPreferencesAppSynchronize(applicationID: CFStringRef) Boolean;
pub extern fn CFPreferencesCopyValue(key: CFStringRef, applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) CFPropertyListRef;
pub extern fn CFPreferencesCopyMultiple(keysToFetch: CFArrayRef, applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) CFDictionaryRef;
pub extern fn CFPreferencesSetValue(key: CFStringRef, value: CFPropertyListRef, applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) void;
pub extern fn CFPreferencesSetMultiple(keysToSet: CFDictionaryRef, keysToRemove: CFArrayRef, applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) void;
pub extern fn CFPreferencesSynchronize(applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) Boolean;
pub extern fn CFPreferencesCopyApplicationList(userName: CFStringRef, hostName: CFStringRef) CFArrayRef;
pub extern fn CFPreferencesCopyKeyList(applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) CFArrayRef;
pub extern fn CFPreferencesAppValueIsForced(key: CFStringRef, applicationID: CFStringRef) Boolean;
pub const CFURLPathStyle = CFIndex;
pub const kCFURLPOSIXPathStyle = @enumToInt(enum_unnamed_109.kCFURLPOSIXPathStyle);
pub const kCFURLHFSPathStyle = @enumToInt(enum_unnamed_109.kCFURLHFSPathStyle);
pub const kCFURLWindowsPathStyle = @enumToInt(enum_unnamed_109.kCFURLWindowsPathStyle);
const enum_unnamed_109 = extern enum(c_int) {
    kCFURLPOSIXPathStyle = 0,
    kCFURLHFSPathStyle = 1,
    kCFURLWindowsPathStyle = 2,
    _,
};
pub const struct___CFURL = @OpaqueType();
pub const CFURLRef = ?*const struct___CFURL;
pub extern fn CFURLGetTypeID() CFTypeID;
pub extern fn CFURLCreateWithBytes(allocator: CFAllocatorRef, URLBytes: [*c]const UInt8, length: CFIndex, encoding: CFStringEncoding, baseURL: CFURLRef) CFURLRef;
pub extern fn CFURLCreateData(allocator: CFAllocatorRef, url: CFURLRef, encoding: CFStringEncoding, escapeWhitespace: Boolean) CFDataRef;
pub extern fn CFURLCreateWithString(allocator: CFAllocatorRef, URLString: CFStringRef, baseURL: CFURLRef) CFURLRef;
pub extern fn CFURLCreateAbsoluteURLWithBytes(alloc: CFAllocatorRef, relativeURLBytes: [*c]const UInt8, length: CFIndex, encoding: CFStringEncoding, baseURL: CFURLRef, useCompatibilityMode: Boolean) CFURLRef;
pub extern fn CFURLCreateWithFileSystemPath(allocator: CFAllocatorRef, filePath: CFStringRef, pathStyle: CFURLPathStyle, isDirectory: Boolean) CFURLRef;
pub extern fn CFURLCreateFromFileSystemRepresentation(allocator: CFAllocatorRef, buffer: [*c]const UInt8, bufLen: CFIndex, isDirectory: Boolean) CFURLRef;
pub extern fn CFURLCreateWithFileSystemPathRelativeToBase(allocator: CFAllocatorRef, filePath: CFStringRef, pathStyle: CFURLPathStyle, isDirectory: Boolean, baseURL: CFURLRef) CFURLRef;
pub extern fn CFURLCreateFromFileSystemRepresentationRelativeToBase(allocator: CFAllocatorRef, buffer: [*c]const UInt8, bufLen: CFIndex, isDirectory: Boolean, baseURL: CFURLRef) CFURLRef;
pub extern fn CFURLGetFileSystemRepresentation(url: CFURLRef, resolveAgainstBase: Boolean, buffer: [*c]UInt8, maxBufLen: CFIndex) Boolean;
pub extern fn CFURLCopyAbsoluteURL(relativeURL: CFURLRef) CFURLRef;
pub extern fn CFURLGetString(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLGetBaseURL(anURL: CFURLRef) CFURLRef;
pub extern fn CFURLCanBeDecomposed(anURL: CFURLRef) Boolean;
pub extern fn CFURLCopyScheme(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyNetLocation(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyPath(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyStrictPath(anURL: CFURLRef, isAbsolute: [*c]Boolean) CFStringRef;
pub extern fn CFURLCopyFileSystemPath(anURL: CFURLRef, pathStyle: CFURLPathStyle) CFStringRef;
pub extern fn CFURLHasDirectoryPath(anURL: CFURLRef) Boolean;
pub extern fn CFURLCopyResourceSpecifier(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyHostName(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLGetPortNumber(anURL: CFURLRef) SInt32;
pub extern fn CFURLCopyUserName(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyPassword(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyParameterString(anURL: CFURLRef, charactersToLeaveEscaped: CFStringRef) CFStringRef;
pub extern fn CFURLCopyQueryString(anURL: CFURLRef, charactersToLeaveEscaped: CFStringRef) CFStringRef;
pub extern fn CFURLCopyFragment(anURL: CFURLRef, charactersToLeaveEscaped: CFStringRef) CFStringRef;
pub extern fn CFURLCopyLastPathComponent(url: CFURLRef) CFStringRef;
pub extern fn CFURLCopyPathExtension(url: CFURLRef) CFStringRef;
pub extern fn CFURLCreateCopyAppendingPathComponent(allocator: CFAllocatorRef, url: CFURLRef, pathComponent: CFStringRef, isDirectory: Boolean) CFURLRef;
pub extern fn CFURLCreateCopyDeletingLastPathComponent(allocator: CFAllocatorRef, url: CFURLRef) CFURLRef;
pub extern fn CFURLCreateCopyAppendingPathExtension(allocator: CFAllocatorRef, url: CFURLRef, extension: CFStringRef) CFURLRef;
pub extern fn CFURLCreateCopyDeletingPathExtension(allocator: CFAllocatorRef, url: CFURLRef) CFURLRef;
pub extern fn CFURLGetBytes(url: CFURLRef, buffer: [*c]UInt8, bufferLength: CFIndex) CFIndex;
pub const CFURLComponentType = CFIndex;
pub const kCFURLComponentScheme = @enumToInt(enum_unnamed_110.kCFURLComponentScheme);
pub const kCFURLComponentNetLocation = @enumToInt(enum_unnamed_110.kCFURLComponentNetLocation);
pub const kCFURLComponentPath = @enumToInt(enum_unnamed_110.kCFURLComponentPath);
pub const kCFURLComponentResourceSpecifier = @enumToInt(enum_unnamed_110.kCFURLComponentResourceSpecifier);
pub const kCFURLComponentUser = @enumToInt(enum_unnamed_110.kCFURLComponentUser);
pub const kCFURLComponentPassword = @enumToInt(enum_unnamed_110.kCFURLComponentPassword);
pub const kCFURLComponentUserInfo = @enumToInt(enum_unnamed_110.kCFURLComponentUserInfo);
pub const kCFURLComponentHost = @enumToInt(enum_unnamed_110.kCFURLComponentHost);
pub const kCFURLComponentPort = @enumToInt(enum_unnamed_110.kCFURLComponentPort);
pub const kCFURLComponentParameterString = @enumToInt(enum_unnamed_110.kCFURLComponentParameterString);
pub const kCFURLComponentQuery = @enumToInt(enum_unnamed_110.kCFURLComponentQuery);
pub const kCFURLComponentFragment = @enumToInt(enum_unnamed_110.kCFURLComponentFragment);
const enum_unnamed_110 = extern enum(c_int) {
    kCFURLComponentScheme = 1,
    kCFURLComponentNetLocation = 2,
    kCFURLComponentPath = 3,
    kCFURLComponentResourceSpecifier = 4,
    kCFURLComponentUser = 5,
    kCFURLComponentPassword = 6,
    kCFURLComponentUserInfo = 7,
    kCFURLComponentHost = 8,
    kCFURLComponentPort = 9,
    kCFURLComponentParameterString = 10,
    kCFURLComponentQuery = 11,
    kCFURLComponentFragment = 12,
    _,
};
pub extern fn CFURLGetByteRangeForComponent(url: CFURLRef, component: CFURLComponentType, rangeIncludingSeparators: [*c]CFRange) CFRange;
pub extern fn CFURLCreateStringByReplacingPercentEscapes(allocator: CFAllocatorRef, originalString: CFStringRef, charactersToLeaveEscaped: CFStringRef) CFStringRef;
pub extern fn CFURLCreateStringByReplacingPercentEscapesUsingEncoding(allocator: CFAllocatorRef, origString: CFStringRef, charsToLeaveEscaped: CFStringRef, encoding: CFStringEncoding) CFStringRef;
pub extern fn CFURLCreateStringByAddingPercentEscapes(allocator: CFAllocatorRef, originalString: CFStringRef, charactersToLeaveUnescaped: CFStringRef, legalURLCharactersToBeEscaped: CFStringRef, encoding: CFStringEncoding) CFStringRef;
pub extern fn CFURLIsFileReferenceURL(url: CFURLRef) Boolean;
pub extern fn CFURLCreateFileReferenceURL(allocator: CFAllocatorRef, url: CFURLRef, @"error": [*c]CFErrorRef) CFURLRef;
pub extern fn CFURLCreateFilePathURL(allocator: CFAllocatorRef, url: CFURLRef, @"error": [*c]CFErrorRef) CFURLRef;
pub const struct_FSRef = @OpaqueType();
pub extern fn CFURLCreateFromFSRef(allocator: CFAllocatorRef, fsRef: ?*const struct_FSRef) CFURLRef;
pub extern fn CFURLGetFSRef(url: CFURLRef, fsRef: ?*struct_FSRef) Boolean;
pub extern fn CFURLCopyResourcePropertyForKey(url: CFURLRef, key: CFStringRef, propertyValueTypeRefPtr: ?*c_void, @"error": [*c]CFErrorRef) Boolean;
pub extern fn CFURLCopyResourcePropertiesForKeys(url: CFURLRef, keys: CFArrayRef, @"error": [*c]CFErrorRef) CFDictionaryRef;
pub extern fn CFURLSetResourcePropertyForKey(url: CFURLRef, key: CFStringRef, propertyValue: CFTypeRef, @"error": [*c]CFErrorRef) Boolean;
pub extern fn CFURLSetResourcePropertiesForKeys(url: CFURLRef, keyedPropertyValues: CFDictionaryRef, @"error": [*c]CFErrorRef) Boolean;
pub extern const kCFURLKeysOfUnsetValuesKey: CFStringRef;
pub extern fn CFURLClearResourcePropertyCacheForKey(url: CFURLRef, key: CFStringRef) void;
pub extern fn CFURLClearResourcePropertyCache(url: CFURLRef) void;
pub extern fn CFURLSetTemporaryResourcePropertyForKey(url: CFURLRef, key: CFStringRef, propertyValue: CFTypeRef) void;
pub extern fn CFURLResourceIsReachable(url: CFURLRef, @"error": [*c]CFErrorRef) Boolean;
pub extern const kCFURLNameKey: CFStringRef;
pub extern const kCFURLLocalizedNameKey: CFStringRef;
pub extern const kCFURLIsRegularFileKey: CFStringRef;
pub extern const kCFURLIsDirectoryKey: CFStringRef;
pub extern const kCFURLIsSymbolicLinkKey: CFStringRef;
pub extern const kCFURLIsVolumeKey: CFStringRef;
pub extern const kCFURLIsPackageKey: CFStringRef;
pub extern const kCFURLIsApplicationKey: CFStringRef;
pub extern const kCFURLApplicationIsScriptableKey: CFStringRef;
pub extern const kCFURLIsSystemImmutableKey: CFStringRef;
pub extern const kCFURLIsUserImmutableKey: CFStringRef;
pub extern const kCFURLIsHiddenKey: CFStringRef;
pub extern const kCFURLHasHiddenExtensionKey: CFStringRef;
pub extern const kCFURLCreationDateKey: CFStringRef;
pub extern const kCFURLContentAccessDateKey: CFStringRef;
pub extern const kCFURLContentModificationDateKey: CFStringRef;
pub extern const kCFURLAttributeModificationDateKey: CFStringRef;
pub extern const kCFURLLinkCountKey: CFStringRef;
pub extern const kCFURLParentDirectoryURLKey: CFStringRef;
pub extern const kCFURLVolumeURLKey: CFStringRef;
pub extern const kCFURLTypeIdentifierKey: CFStringRef;
pub extern const kCFURLLocalizedTypeDescriptionKey: CFStringRef;
pub extern const kCFURLLabelNumberKey: CFStringRef;
pub extern const kCFURLLabelColorKey: CFStringRef;
pub extern const kCFURLLocalizedLabelKey: CFStringRef;
pub extern const kCFURLEffectiveIconKey: CFStringRef;
pub extern const kCFURLCustomIconKey: CFStringRef;
pub extern const kCFURLFileResourceIdentifierKey: CFStringRef;
pub extern const kCFURLVolumeIdentifierKey: CFStringRef;
pub extern const kCFURLPreferredIOBlockSizeKey: CFStringRef;
pub extern const kCFURLIsReadableKey: CFStringRef;
pub extern const kCFURLIsWritableKey: CFStringRef;
pub extern const kCFURLIsExecutableKey: CFStringRef;
pub extern const kCFURLFileSecurityKey: CFStringRef;
pub extern const kCFURLIsExcludedFromBackupKey: CFStringRef;
pub extern const kCFURLTagNamesKey: CFStringRef;
pub extern const kCFURLPathKey: CFStringRef;
pub extern const kCFURLCanonicalPathKey: CFStringRef;
pub extern const kCFURLIsMountTriggerKey: CFStringRef;
pub extern const kCFURLGenerationIdentifierKey: CFStringRef;
pub extern const kCFURLDocumentIdentifierKey: CFStringRef;
pub extern const kCFURLAddedToDirectoryDateKey: CFStringRef;
pub extern const kCFURLQuarantinePropertiesKey: CFStringRef;
pub extern const kCFURLFileResourceTypeKey: CFStringRef;
pub extern const kCFURLFileResourceTypeNamedPipe: CFStringRef;
pub extern const kCFURLFileResourceTypeCharacterSpecial: CFStringRef;
pub extern const kCFURLFileResourceTypeDirectory: CFStringRef;
pub extern const kCFURLFileResourceTypeBlockSpecial: CFStringRef;
pub extern const kCFURLFileResourceTypeRegular: CFStringRef;
pub extern const kCFURLFileResourceTypeSymbolicLink: CFStringRef;
pub extern const kCFURLFileResourceTypeSocket: CFStringRef;
pub extern const kCFURLFileResourceTypeUnknown: CFStringRef;
pub extern const kCFURLFileSizeKey: CFStringRef;
pub extern const kCFURLFileAllocatedSizeKey: CFStringRef;
pub extern const kCFURLTotalFileSizeKey: CFStringRef;
pub extern const kCFURLTotalFileAllocatedSizeKey: CFStringRef;
pub extern const kCFURLIsAliasFileKey: CFStringRef;
pub extern const kCFURLFileProtectionKey: CFStringRef;
pub extern const kCFURLFileProtectionNone: CFStringRef;
pub extern const kCFURLFileProtectionComplete: CFStringRef;
pub extern const kCFURLFileProtectionCompleteUnlessOpen: CFStringRef;
pub extern const kCFURLFileProtectionCompleteUntilFirstUserAuthentication: CFStringRef;
pub extern const kCFURLVolumeLocalizedFormatDescriptionKey: CFStringRef;
pub extern const kCFURLVolumeTotalCapacityKey: CFStringRef;
pub extern const kCFURLVolumeAvailableCapacityKey: CFStringRef;
pub extern const kCFURLVolumeAvailableCapacityForImportantUsageKey: CFStringRef;
pub extern const kCFURLVolumeAvailableCapacityForOpportunisticUsageKey: CFStringRef;
pub extern const kCFURLVolumeResourceCountKey: CFStringRef;
pub extern const kCFURLVolumeSupportsPersistentIDsKey: CFStringRef;
pub extern const kCFURLVolumeSupportsSymbolicLinksKey: CFStringRef;
pub extern const kCFURLVolumeSupportsHardLinksKey: CFStringRef;
pub extern const kCFURLVolumeSupportsJournalingKey: CFStringRef;
pub extern const kCFURLVolumeIsJournalingKey: CFStringRef;
pub extern const kCFURLVolumeSupportsSparseFilesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsZeroRunsKey: CFStringRef;
pub extern const kCFURLVolumeSupportsCaseSensitiveNamesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsCasePreservedNamesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsRootDirectoryDatesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsVolumeSizesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsRenamingKey: CFStringRef;
pub extern const kCFURLVolumeSupportsAdvisoryFileLockingKey: CFStringRef;
pub extern const kCFURLVolumeSupportsExtendedSecurityKey: CFStringRef;
pub extern const kCFURLVolumeIsBrowsableKey: CFStringRef;
pub extern const kCFURLVolumeMaximumFileSizeKey: CFStringRef;
pub extern const kCFURLVolumeIsEjectableKey: CFStringRef;
pub extern const kCFURLVolumeIsRemovableKey: CFStringRef;
pub extern const kCFURLVolumeIsInternalKey: CFStringRef;
pub extern const kCFURLVolumeIsAutomountedKey: CFStringRef;
pub extern const kCFURLVolumeIsLocalKey: CFStringRef;
pub extern const kCFURLVolumeIsReadOnlyKey: CFStringRef;
pub extern const kCFURLVolumeCreationDateKey: CFStringRef;
pub extern const kCFURLVolumeURLForRemountingKey: CFStringRef;
pub extern const kCFURLVolumeUUIDStringKey: CFStringRef;
pub extern const kCFURLVolumeNameKey: CFStringRef;
pub extern const kCFURLVolumeLocalizedNameKey: CFStringRef;
pub extern const kCFURLVolumeIsEncryptedKey: CFStringRef;
pub extern const kCFURLVolumeIsRootFileSystemKey: CFStringRef;
pub extern const kCFURLVolumeSupportsCompressionKey: CFStringRef;
pub extern const kCFURLVolumeSupportsFileCloningKey: CFStringRef;
pub extern const kCFURLVolumeSupportsSwapRenamingKey: CFStringRef;
pub extern const kCFURLVolumeSupportsExclusiveRenamingKey: CFStringRef;
pub extern const kCFURLVolumeSupportsImmutableFilesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsAccessPermissionsKey: CFStringRef;
pub extern const kCFURLIsUbiquitousItemKey: CFStringRef;
pub extern const kCFURLUbiquitousItemHasUnresolvedConflictsKey: CFStringRef;
pub extern const kCFURLUbiquitousItemIsDownloadedKey: CFStringRef;
pub extern const kCFURLUbiquitousItemIsDownloadingKey: CFStringRef;
pub extern const kCFURLUbiquitousItemIsUploadedKey: CFStringRef;
pub extern const kCFURLUbiquitousItemIsUploadingKey: CFStringRef;
pub extern const kCFURLUbiquitousItemPercentDownloadedKey: CFStringRef;
pub extern const kCFURLUbiquitousItemPercentUploadedKey: CFStringRef;
pub extern const kCFURLUbiquitousItemDownloadingStatusKey: CFStringRef;
pub extern const kCFURLUbiquitousItemDownloadingErrorKey: CFStringRef;
pub extern const kCFURLUbiquitousItemUploadingErrorKey: CFStringRef;
pub extern const kCFURLUbiquitousItemDownloadingStatusNotDownloaded: CFStringRef;
pub extern const kCFURLUbiquitousItemDownloadingStatusDownloaded: CFStringRef;
pub extern const kCFURLUbiquitousItemDownloadingStatusCurrent: CFStringRef;
pub const CFURLBookmarkCreationOptions = CFOptionFlags;
pub const kCFURLBookmarkCreationMinimalBookmarkMask = @enumToInt(enum_unnamed_111.kCFURLBookmarkCreationMinimalBookmarkMask);
pub const kCFURLBookmarkCreationSuitableForBookmarkFile = @enumToInt(enum_unnamed_111.kCFURLBookmarkCreationSuitableForBookmarkFile);
pub const kCFURLBookmarkCreationWithSecurityScope = @enumToInt(enum_unnamed_111.kCFURLBookmarkCreationWithSecurityScope);
pub const kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess = @enumToInt(enum_unnamed_111.kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess);
pub const kCFURLBookmarkCreationPreferFileIDResolutionMask = @enumToInt(enum_unnamed_111.kCFURLBookmarkCreationPreferFileIDResolutionMask);
const enum_unnamed_111 = extern enum(c_int) {
    kCFURLBookmarkCreationMinimalBookmarkMask = 512,
    kCFURLBookmarkCreationSuitableForBookmarkFile = 1024,
    kCFURLBookmarkCreationWithSecurityScope = 2048,
    kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess = 4096,
    kCFURLBookmarkCreationPreferFileIDResolutionMask = 256,
    _,
};
pub const CFURLBookmarkResolutionOptions = CFOptionFlags;
pub const kCFURLBookmarkResolutionWithoutUIMask = @enumToInt(enum_unnamed_112.kCFURLBookmarkResolutionWithoutUIMask);
pub const kCFURLBookmarkResolutionWithoutMountingMask = @enumToInt(enum_unnamed_112.kCFURLBookmarkResolutionWithoutMountingMask);
pub const kCFURLBookmarkResolutionWithSecurityScope = @enumToInt(enum_unnamed_112.kCFURLBookmarkResolutionWithSecurityScope);
pub const kCFBookmarkResolutionWithoutUIMask = @enumToInt(enum_unnamed_112.kCFBookmarkResolutionWithoutUIMask);
pub const kCFBookmarkResolutionWithoutMountingMask = @enumToInt(enum_unnamed_112.kCFBookmarkResolutionWithoutMountingMask);
const enum_unnamed_112 = extern enum(c_int) {
    kCFURLBookmarkResolutionWithoutUIMask = 256,
    kCFURLBookmarkResolutionWithoutMountingMask = 512,
    kCFURLBookmarkResolutionWithSecurityScope = 1024,
    kCFBookmarkResolutionWithoutUIMask = 256,
    kCFBookmarkResolutionWithoutMountingMask = 512,
    _,
};
pub const CFURLBookmarkFileCreationOptions = CFOptionFlags;
pub extern fn CFURLCreateBookmarkData(allocator: CFAllocatorRef, url: CFURLRef, options: CFURLBookmarkCreationOptions, resourcePropertiesToInclude: CFArrayRef, relativeToURL: CFURLRef, @"error": [*c]CFErrorRef) CFDataRef;
pub extern fn CFURLCreateByResolvingBookmarkData(allocator: CFAllocatorRef, bookmark: CFDataRef, options: CFURLBookmarkResolutionOptions, relativeToURL: CFURLRef, resourcePropertiesToInclude: CFArrayRef, isStale: [*c]Boolean, @"error": [*c]CFErrorRef) CFURLRef;
pub extern fn CFURLCreateResourcePropertiesForKeysFromBookmarkData(allocator: CFAllocatorRef, resourcePropertiesToReturn: CFArrayRef, bookmark: CFDataRef) CFDictionaryRef;
pub extern fn CFURLCreateResourcePropertyForKeyFromBookmarkData(allocator: CFAllocatorRef, resourcePropertyKey: CFStringRef, bookmark: CFDataRef) CFTypeRef;
pub extern fn CFURLCreateBookmarkDataFromFile(allocator: CFAllocatorRef, fileURL: CFURLRef, errorRef: [*c]CFErrorRef) CFDataRef;
pub extern fn CFURLWriteBookmarkDataToFile(bookmarkRef: CFDataRef, fileURL: CFURLRef, options: CFURLBookmarkFileCreationOptions, errorRef: [*c]CFErrorRef) Boolean;
pub extern fn CFURLCreateBookmarkDataFromAliasRecord(allocatorRef: CFAllocatorRef, aliasRecordDataRef: CFDataRef) CFDataRef;
pub extern fn CFURLStartAccessingSecurityScopedResource(url: CFURLRef) Boolean;
pub extern fn CFURLStopAccessingSecurityScopedResource(url: CFURLRef) void;
pub const boolean_t = c_uint;
pub const natural_t = __darwin_natural_t;
pub const integer_t = c_int;
pub const vm_offset_t = usize;
pub const vm_size_t = usize;
pub const mach_vm_address_t = u64;
pub const mach_vm_offset_t = u64;
pub const mach_vm_size_t = u64;
pub const vm_map_offset_t = u64;
pub const vm_map_address_t = u64;
pub const vm_map_size_t = u64;
pub const mach_port_context_t = mach_vm_address_t;
pub const mach_port_name_t = natural_t;
pub const mach_port_name_array_t = [*c]mach_port_name_t;
pub const mach_port_t = __darwin_mach_port_t;
pub const mach_port_array_t = [*c]mach_port_t;
pub const mach_port_right_t = natural_t;
pub const mach_port_type_t = natural_t;
pub const mach_port_type_array_t = [*c]mach_port_type_t;
pub const mach_port_urefs_t = natural_t;
pub const mach_port_delta_t = integer_t;
pub const mach_port_seqno_t = natural_t;
pub const mach_port_mscount_t = natural_t;
pub const mach_port_msgcount_t = natural_t;
pub const mach_port_rights_t = natural_t;
pub const mach_port_srights_t = c_uint;
pub const struct_mach_port_status = extern struct {
    mps_pset: mach_port_rights_t,
    mps_seqno: mach_port_seqno_t,
    mps_mscount: mach_port_mscount_t,
    mps_qlimit: mach_port_msgcount_t,
    mps_msgcount: mach_port_msgcount_t,
    mps_sorights: mach_port_rights_t,
    mps_srights: boolean_t,
    mps_pdrequest: boolean_t,
    mps_nsrequest: boolean_t,
    mps_flags: natural_t,
};
pub const mach_port_status_t = struct_mach_port_status;
pub const struct_mach_port_limits = extern struct {
    mpl_qlimit: mach_port_msgcount_t,
};
pub const mach_port_limits_t = struct_mach_port_limits;
pub const struct_mach_port_info_ext = extern struct {
    mpie_status: mach_port_status_t,
    mpie_boost_cnt: mach_port_msgcount_t,
    reserved: [6]u32,
};
pub const mach_port_info_ext_t = struct_mach_port_info_ext;
pub const mach_port_info_t = [*c]integer_t;
pub const mach_port_flavor_t = c_int;
pub const struct_mach_port_qos = @OpaqueType(); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/port.h:320:26: warning: struct demoted to opaque type - has bitfield
pub const mach_port_qos_t = struct_mach_port_qos;
pub const struct_mach_port_options = extern struct {
    flags: u32,
    mpl: mach_port_limits_t,
    reserved: [2]u64,
};
pub const mach_port_options_t = struct_mach_port_options;
pub const mach_port_options_ptr_t = [*c]mach_port_options_t;
pub const kGUARD_EXC_DESTROY = @enumToInt(enum_mach_port_guard_exception_codes.kGUARD_EXC_DESTROY);
pub const kGUARD_EXC_MOD_REFS = @enumToInt(enum_mach_port_guard_exception_codes.kGUARD_EXC_MOD_REFS);
pub const kGUARD_EXC_SET_CONTEXT = @enumToInt(enum_mach_port_guard_exception_codes.kGUARD_EXC_SET_CONTEXT);
pub const kGUARD_EXC_UNGUARDED = @enumToInt(enum_mach_port_guard_exception_codes.kGUARD_EXC_UNGUARDED);
pub const kGUARD_EXC_INCORRECT_GUARD = @enumToInt(enum_mach_port_guard_exception_codes.kGUARD_EXC_INCORRECT_GUARD);
pub const kGUARD_EXC_IMMOVABLE = @enumToInt(enum_mach_port_guard_exception_codes.kGUARD_EXC_IMMOVABLE);
pub const kGUARD_EXC_STRICT_REPLY = @enumToInt(enum_mach_port_guard_exception_codes.kGUARD_EXC_STRICT_REPLY);
pub const kGUARD_EXC_INVALID_RIGHT = @enumToInt(enum_mach_port_guard_exception_codes.kGUARD_EXC_INVALID_RIGHT);
pub const kGUARD_EXC_INVALID_NAME = @enumToInt(enum_mach_port_guard_exception_codes.kGUARD_EXC_INVALID_NAME);
pub const kGUARD_EXC_INVALID_VALUE = @enumToInt(enum_mach_port_guard_exception_codes.kGUARD_EXC_INVALID_VALUE);
pub const kGUARD_EXC_INVALID_ARGUMENT = @enumToInt(enum_mach_port_guard_exception_codes.kGUARD_EXC_INVALID_ARGUMENT);
pub const kGUARD_EXC_RIGHT_EXISTS = @enumToInt(enum_mach_port_guard_exception_codes.kGUARD_EXC_RIGHT_EXISTS);
pub const kGUARD_EXC_KERN_NO_SPACE = @enumToInt(enum_mach_port_guard_exception_codes.kGUARD_EXC_KERN_NO_SPACE);
pub const kGUARD_EXC_KERN_FAILURE = @enumToInt(enum_mach_port_guard_exception_codes.kGUARD_EXC_KERN_FAILURE);
pub const kGUARD_EXC_KERN_RESOURCE = @enumToInt(enum_mach_port_guard_exception_codes.kGUARD_EXC_KERN_RESOURCE);
pub const kGUARD_EXC_SEND_INVALID_REPLY = @enumToInt(enum_mach_port_guard_exception_codes.kGUARD_EXC_SEND_INVALID_REPLY);
pub const kGUARD_EXC_SEND_INVALID_VOUCHER = @enumToInt(enum_mach_port_guard_exception_codes.kGUARD_EXC_SEND_INVALID_VOUCHER);
pub const kGUARD_EXC_SEND_INVALID_RIGHT = @enumToInt(enum_mach_port_guard_exception_codes.kGUARD_EXC_SEND_INVALID_RIGHT);
pub const kGUARD_EXC_RCV_INVALID_NAME = @enumToInt(enum_mach_port_guard_exception_codes.kGUARD_EXC_RCV_INVALID_NAME);
pub const kGUARD_EXC_RCV_GUARDED_DESC = @enumToInt(enum_mach_port_guard_exception_codes.kGUARD_EXC_RCV_GUARDED_DESC);
pub const enum_mach_port_guard_exception_codes = extern enum(c_int) {
    kGUARD_EXC_DESTROY = 1,
    kGUARD_EXC_MOD_REFS = 2,
    kGUARD_EXC_SET_CONTEXT = 4,
    kGUARD_EXC_UNGUARDED = 8,
    kGUARD_EXC_INCORRECT_GUARD = 16,
    kGUARD_EXC_IMMOVABLE = 32,
    kGUARD_EXC_STRICT_REPLY = 64,
    kGUARD_EXC_INVALID_RIGHT = 256,
    kGUARD_EXC_INVALID_NAME = 512,
    kGUARD_EXC_INVALID_VALUE = 1024,
    kGUARD_EXC_INVALID_ARGUMENT = 2048,
    kGUARD_EXC_RIGHT_EXISTS = 4096,
    kGUARD_EXC_KERN_NO_SPACE = 8192,
    kGUARD_EXC_KERN_FAILURE = 16384,
    kGUARD_EXC_KERN_RESOURCE = 32768,
    kGUARD_EXC_SEND_INVALID_REPLY = 65536,
    kGUARD_EXC_SEND_INVALID_VOUCHER = 131072,
    kGUARD_EXC_SEND_INVALID_RIGHT = 262144,
    kGUARD_EXC_RCV_INVALID_NAME = 524288,
    kGUARD_EXC_RCV_GUARDED_DESC = 1048576,
    _,
};
pub const CFRunLoopMode = CFStringRef;
pub const struct___CFRunLoop = @OpaqueType();
pub const CFRunLoopRef = ?*struct___CFRunLoop;
pub const struct___CFRunLoopSource = @OpaqueType();
pub const CFRunLoopSourceRef = ?*struct___CFRunLoopSource;
pub const struct___CFRunLoopObserver = @OpaqueType();
pub const CFRunLoopObserverRef = ?*struct___CFRunLoopObserver;
pub const struct___CFRunLoopTimer = @OpaqueType();
pub const CFRunLoopTimerRef = ?*struct___CFRunLoopTimer;
pub const CFRunLoopRunResult = SInt32;
pub const kCFRunLoopRunFinished = @enumToInt(enum_unnamed_113.kCFRunLoopRunFinished);
pub const kCFRunLoopRunStopped = @enumToInt(enum_unnamed_113.kCFRunLoopRunStopped);
pub const kCFRunLoopRunTimedOut = @enumToInt(enum_unnamed_113.kCFRunLoopRunTimedOut);
pub const kCFRunLoopRunHandledSource = @enumToInt(enum_unnamed_113.kCFRunLoopRunHandledSource);
const enum_unnamed_113 = extern enum(c_int) {
    kCFRunLoopRunFinished = 1,
    kCFRunLoopRunStopped = 2,
    kCFRunLoopRunTimedOut = 3,
    kCFRunLoopRunHandledSource = 4,
    _,
};
pub const CFRunLoopActivity = CFOptionFlags;
pub const kCFRunLoopEntry = @enumToInt(enum_unnamed_114.kCFRunLoopEntry);
pub const kCFRunLoopBeforeTimers = @enumToInt(enum_unnamed_114.kCFRunLoopBeforeTimers);
pub const kCFRunLoopBeforeSources = @enumToInt(enum_unnamed_114.kCFRunLoopBeforeSources);
pub const kCFRunLoopBeforeWaiting = @enumToInt(enum_unnamed_114.kCFRunLoopBeforeWaiting);
pub const kCFRunLoopAfterWaiting = @enumToInt(enum_unnamed_114.kCFRunLoopAfterWaiting);
pub const kCFRunLoopExit = @enumToInt(enum_unnamed_114.kCFRunLoopExit);
pub const kCFRunLoopAllActivities = @enumToInt(enum_unnamed_114.kCFRunLoopAllActivities);
const enum_unnamed_114 = extern enum(c_int) {
    kCFRunLoopEntry = 1,
    kCFRunLoopBeforeTimers = 2,
    kCFRunLoopBeforeSources = 4,
    kCFRunLoopBeforeWaiting = 32,
    kCFRunLoopAfterWaiting = 64,
    kCFRunLoopExit = 128,
    kCFRunLoopAllActivities = 268435455,
    _,
};
pub extern const kCFRunLoopDefaultMode: CFRunLoopMode;
pub extern const kCFRunLoopCommonModes: CFRunLoopMode;
pub extern fn CFRunLoopGetTypeID() CFTypeID;
pub extern fn CFRunLoopGetCurrent() CFRunLoopRef;
pub extern fn CFRunLoopGetMain() CFRunLoopRef;
pub extern fn CFRunLoopCopyCurrentMode(rl: CFRunLoopRef) CFRunLoopMode;
pub extern fn CFRunLoopCopyAllModes(rl: CFRunLoopRef) CFArrayRef;
pub extern fn CFRunLoopAddCommonMode(rl: CFRunLoopRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopGetNextTimerFireDate(rl: CFRunLoopRef, mode: CFRunLoopMode) CFAbsoluteTime;
pub extern fn CFRunLoopRun() void;
pub extern fn CFRunLoopRunInMode(mode: CFRunLoopMode, seconds: CFTimeInterval, returnAfterSourceHandled: Boolean) CFRunLoopRunResult;
pub extern fn CFRunLoopIsWaiting(rl: CFRunLoopRef) Boolean;
pub extern fn CFRunLoopWakeUp(rl: CFRunLoopRef) void;
pub extern fn CFRunLoopStop(rl: CFRunLoopRef) void; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFRunLoop.h:76:16: warning: unsupported type: 'BlockPointer'
pub const CFRunLoopPerformBlock = @compileError("unable to resolve prototype of function");
pub extern fn CFRunLoopContainsSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode) Boolean;
pub extern fn CFRunLoopAddSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopRemoveSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopContainsObserver(rl: CFRunLoopRef, observer: CFRunLoopObserverRef, mode: CFRunLoopMode) Boolean;
pub extern fn CFRunLoopAddObserver(rl: CFRunLoopRef, observer: CFRunLoopObserverRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopRemoveObserver(rl: CFRunLoopRef, observer: CFRunLoopObserverRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopContainsTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode) Boolean;
pub extern fn CFRunLoopAddTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopRemoveTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode) void;
const struct_unnamed_115 = extern struct {
    version: CFIndex,
    info: ?*c_void,
    retain: ?fn (?*const c_void) callconv(.C) ?*const c_void,
    release: ?fn (?*const c_void) callconv(.C) void,
    copyDescription: ?fn (?*const c_void) callconv(.C) CFStringRef,
    equal: ?fn (?*const c_void, ?*const c_void) callconv(.C) Boolean,
    hash: ?fn (?*const c_void) callconv(.C) CFHashCode,
    schedule: ?fn (?*c_void, CFRunLoopRef, CFRunLoopMode) callconv(.C) void,
    cancel: ?fn (?*c_void, CFRunLoopRef, CFRunLoopMode) callconv(.C) void,
    perform: ?fn (?*c_void) callconv(.C) void,
};
pub const CFRunLoopSourceContext = struct_unnamed_115;
const struct_unnamed_116 = extern struct {
    version: CFIndex,
    info: ?*c_void,
    retain: ?fn (?*const c_void) callconv(.C) ?*const c_void,
    release: ?fn (?*const c_void) callconv(.C) void,
    copyDescription: ?fn (?*const c_void) callconv(.C) CFStringRef,
    equal: ?fn (?*const c_void, ?*const c_void) callconv(.C) Boolean,
    hash: ?fn (?*const c_void) callconv(.C) CFHashCode,
    getPort: ?fn (?*c_void) callconv(.C) mach_port_t,
    perform: ?fn (?*c_void, CFIndex, CFAllocatorRef, ?*c_void) callconv(.C) ?*c_void,
};
pub const CFRunLoopSourceContext1 = struct_unnamed_116;
pub extern fn CFRunLoopSourceGetTypeID() CFTypeID;
pub extern fn CFRunLoopSourceCreate(allocator: CFAllocatorRef, order: CFIndex, context: [*c]CFRunLoopSourceContext) CFRunLoopSourceRef;
pub extern fn CFRunLoopSourceGetOrder(source: CFRunLoopSourceRef) CFIndex;
pub extern fn CFRunLoopSourceInvalidate(source: CFRunLoopSourceRef) void;
pub extern fn CFRunLoopSourceIsValid(source: CFRunLoopSourceRef) Boolean;
pub extern fn CFRunLoopSourceGetContext(source: CFRunLoopSourceRef, context: [*c]CFRunLoopSourceContext) void;
pub extern fn CFRunLoopSourceSignal(source: CFRunLoopSourceRef) void;
const struct_unnamed_117 = extern struct {
    version: CFIndex,
    info: ?*c_void,
    retain: ?fn (?*const c_void) callconv(.C) ?*const c_void,
    release: ?fn (?*const c_void) callconv(.C) void,
    copyDescription: ?fn (?*const c_void) callconv(.C) CFStringRef,
};
pub const CFRunLoopObserverContext = struct_unnamed_117;
pub const CFRunLoopObserverCallBack = ?fn (CFRunLoopObserverRef, CFRunLoopActivity, ?*c_void) callconv(.C) void;
pub extern fn CFRunLoopObserverGetTypeID() CFTypeID;
pub extern fn CFRunLoopObserverCreate(allocator: CFAllocatorRef, activities: CFOptionFlags, repeats: Boolean, order: CFIndex, callout: CFRunLoopObserverCallBack, context: [*c]CFRunLoopObserverContext) CFRunLoopObserverRef; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFRunLoop.h:145:32: warning: unsupported type: 'BlockPointer'
pub const CFRunLoopObserverCreateWithHandler = @compileError("unable to resolve prototype of function");
pub extern fn CFRunLoopObserverGetActivities(observer: CFRunLoopObserverRef) CFOptionFlags;
pub extern fn CFRunLoopObserverDoesRepeat(observer: CFRunLoopObserverRef) Boolean;
pub extern fn CFRunLoopObserverGetOrder(observer: CFRunLoopObserverRef) CFIndex;
pub extern fn CFRunLoopObserverInvalidate(observer: CFRunLoopObserverRef) void;
pub extern fn CFRunLoopObserverIsValid(observer: CFRunLoopObserverRef) Boolean;
pub extern fn CFRunLoopObserverGetContext(observer: CFRunLoopObserverRef, context: [*c]CFRunLoopObserverContext) void;
const struct_unnamed_118 = extern struct {
    version: CFIndex,
    info: ?*c_void,
    retain: ?fn (?*const c_void) callconv(.C) ?*const c_void,
    release: ?fn (?*const c_void) callconv(.C) void,
    copyDescription: ?fn (?*const c_void) callconv(.C) CFStringRef,
};
pub const CFRunLoopTimerContext = struct_unnamed_118;
pub const CFRunLoopTimerCallBack = ?fn (CFRunLoopTimerRef, ?*c_void) callconv(.C) void;
pub extern fn CFRunLoopTimerGetTypeID() CFTypeID;
pub extern fn CFRunLoopTimerCreate(allocator: CFAllocatorRef, fireDate: CFAbsoluteTime, interval: CFTimeInterval, flags: CFOptionFlags, order: CFIndex, callout: CFRunLoopTimerCallBack, context: [*c]CFRunLoopTimerContext) CFRunLoopTimerRef; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/CoreFoundation.framework/Headers/CFRunLoop.h:169:29: warning: unsupported type: 'BlockPointer'
pub const CFRunLoopTimerCreateWithHandler = @compileError("unable to resolve prototype of function");
pub extern fn CFRunLoopTimerGetNextFireDate(timer: CFRunLoopTimerRef) CFAbsoluteTime;
pub extern fn CFRunLoopTimerSetNextFireDate(timer: CFRunLoopTimerRef, fireDate: CFAbsoluteTime) void;
pub extern fn CFRunLoopTimerGetInterval(timer: CFRunLoopTimerRef) CFTimeInterval;
pub extern fn CFRunLoopTimerDoesRepeat(timer: CFRunLoopTimerRef) Boolean;
pub extern fn CFRunLoopTimerGetOrder(timer: CFRunLoopTimerRef) CFIndex;
pub extern fn CFRunLoopTimerInvalidate(timer: CFRunLoopTimerRef) void;
pub extern fn CFRunLoopTimerIsValid(timer: CFRunLoopTimerRef) Boolean;
pub extern fn CFRunLoopTimerGetContext(timer: CFRunLoopTimerRef, context: [*c]CFRunLoopTimerContext) void;
pub extern fn CFRunLoopTimerGetTolerance(timer: CFRunLoopTimerRef) CFTimeInterval;
pub extern fn CFRunLoopTimerSetTolerance(timer: CFRunLoopTimerRef, tolerance: CFTimeInterval) void;
pub const struct___CFSocket = @OpaqueType();
pub const CFSocketRef = ?*struct___CFSocket;
pub const CFSocketError = CFIndex;
pub const kCFSocketSuccess = @enumToInt(enum_unnamed_119.kCFSocketSuccess);
pub const kCFSocketError = @enumToInt(enum_unnamed_119.kCFSocketError);
pub const kCFSocketTimeout = @enumToInt(enum_unnamed_119.kCFSocketTimeout);
const enum_unnamed_119 = extern enum(c_int) {
    kCFSocketSuccess = 0,
    kCFSocketError = -1,
    kCFSocketTimeout = -2,
    _,
};
const struct_unnamed_120 = extern struct {
    protocolFamily: SInt32,
    socketType: SInt32,
    protocol: SInt32,
    address: CFDataRef,
};
pub const CFSocketSignature = struct_unnamed_120;
pub const CFSocketCallBackType = CFOptionFlags;
pub const kCFSocketNoCallBack = @enumToInt(enum_unnamed_121.kCFSocketNoCallBack);
pub const kCFSocketReadCallBack = @enumToInt(enum_unnamed_121.kCFSocketReadCallBack);
pub const kCFSocketAcceptCallBack = @enumToInt(enum_unnamed_121.kCFSocketAcceptCallBack);
pub const kCFSocketDataCallBack = @enumToInt(enum_unnamed_121.kCFSocketDataCallBack);
pub const kCFSocketConnectCallBack = @enumToInt(enum_unnamed_121.kCFSocketConnectCallBack);
pub const kCFSocketWriteCallBack = @enumToInt(enum_unnamed_121.kCFSocketWriteCallBack);
const enum_unnamed_121 = extern enum(c_int) {
    kCFSocketNoCallBack = 0,
    kCFSocketReadCallBack = 1,
    kCFSocketAcceptCallBack = 2,
    kCFSocketDataCallBack = 3,
    kCFSocketConnectCallBack = 4,
    kCFSocketWriteCallBack = 8,
    _,
};
pub const kCFSocketAutomaticallyReenableReadCallBack = @enumToInt(enum_unnamed_122.kCFSocketAutomaticallyReenableReadCallBack);
pub const kCFSocketAutomaticallyReenableAcceptCallBack = @enumToInt(enum_unnamed_122.kCFSocketAutomaticallyReenableAcceptCallBack);
pub const kCFSocketAutomaticallyReenableDataCallBack = @enumToInt(enum_unnamed_122.kCFSocketAutomaticallyReenableDataCallBack);
pub const kCFSocketAutomaticallyReenableWriteCallBack = @enumToInt(enum_unnamed_122.kCFSocketAutomaticallyReenableWriteCallBack);
pub const kCFSocketLeaveErrors = @enumToInt(enum_unnamed_122.kCFSocketLeaveErrors);
pub const kCFSocketCloseOnInvalidate = @enumToInt(enum_unnamed_122.kCFSocketCloseOnInvalidate);
const enum_unnamed_122 = extern enum(c_int) {
    kCFSocketAutomaticallyReenableReadCallBack = 1,
    kCFSocketAutomaticallyReenableAcceptCallBack = 2,
    kCFSocketAutomaticallyReenableDataCallBack = 3,
    kCFSocketAutomaticallyReenableWriteCallBack = 8,
    kCFSocketLeaveErrors = 64,
    kCFSocketCloseOnInvalidate = 128,
    _,
};
pub const CFSocketCallBack = ?fn (CFSocketRef, CFSocketCallBackType, CFDataRef, ?*const c_void, ?*c_void) callconv(.C) void;
const struct_unnamed_123 = extern struct {
    version: CFIndex,
    info: ?*c_void,
    retain: ?fn (?*const c_void) callconv(.C) ?*const c_void,
    release: ?fn (?*const c_void) callconv(.C) void,
    copyDescription: ?fn (?*const c_void) callconv(.C) CFStringRef,
};
pub const CFSocketContext = struct_unnamed_123;
pub const CFSocketNativeHandle = c_int;
pub extern fn CFSocketGetTypeID() CFTypeID;
pub extern fn CFSocketCreate(allocator: CFAllocatorRef, protocolFamily: SInt32, socketType: SInt32, protocol: SInt32, callBackTypes: CFOptionFlags, callout: CFSocketCallBack, context: [*c]const CFSocketContext) CFSocketRef;
pub extern fn CFSocketCreateWithNative(allocator: CFAllocatorRef, sock: CFSocketNativeHandle, callBackTypes: CFOptionFlags, callout: CFSocketCallBack, context: [*c]const CFSocketContext) CFSocketRef;
pub extern fn CFSocketCreateWithSocketSignature(allocator: CFAllocatorRef, signature: [*c]const CFSocketSignature, callBackTypes: CFOptionFlags, callout: CFSocketCallBack, context: [*c]const CFSocketContext) CFSocketRef;
pub extern fn CFSocketCreateConnectedToSocketSignature(allocator: CFAllocatorRef, signature: [*c]const CFSocketSignature, callBackTypes: CFOptionFlags, callout: CFSocketCallBack, context: [*c]const CFSocketContext, timeout: CFTimeInterval) CFSocketRef;
pub extern fn CFSocketSetAddress(s: CFSocketRef, address: CFDataRef) CFSocketError;
pub extern fn CFSocketConnectToAddress(s: CFSocketRef, address: CFDataRef, timeout: CFTimeInterval) CFSocketError;
pub extern fn CFSocketInvalidate(s: CFSocketRef) void;
pub extern fn CFSocketIsValid(s: CFSocketRef) Boolean;
pub extern fn CFSocketCopyAddress(s: CFSocketRef) CFDataRef;
pub extern fn CFSocketCopyPeerAddress(s: CFSocketRef) CFDataRef;
pub extern fn CFSocketGetContext(s: CFSocketRef, context: [*c]CFSocketContext) void;
pub extern fn CFSocketGetNative(s: CFSocketRef) CFSocketNativeHandle;
pub extern fn CFSocketCreateRunLoopSource(allocator: CFAllocatorRef, s: CFSocketRef, order: CFIndex) CFRunLoopSourceRef;
pub extern fn CFSocketGetSocketFlags(s: CFSocketRef) CFOptionFlags;
pub extern fn CFSocketSetSocketFlags(s: CFSocketRef, flags: CFOptionFlags) void;
pub extern fn CFSocketDisableCallBacks(s: CFSocketRef, callBackTypes: CFOptionFlags) void;
pub extern fn CFSocketEnableCallBacks(s: CFSocketRef, callBackTypes: CFOptionFlags) void;
pub extern fn CFSocketSendData(s: CFSocketRef, address: CFDataRef, data: CFDataRef, timeout: CFTimeInterval) CFSocketError;
pub extern fn CFSocketRegisterValue(nameServerSignature: [*c]const CFSocketSignature, timeout: CFTimeInterval, name: CFStringRef, value: CFPropertyListRef) CFSocketError;
pub extern fn CFSocketCopyRegisteredValue(nameServerSignature: [*c]const CFSocketSignature, timeout: CFTimeInterval, name: CFStringRef, value: [*c]CFPropertyListRef, nameServerAddress: [*c]CFDataRef) CFSocketError;
pub extern fn CFSocketRegisterSocketSignature(nameServerSignature: [*c]const CFSocketSignature, timeout: CFTimeInterval, name: CFStringRef, signature: [*c]const CFSocketSignature) CFSocketError;
pub extern fn CFSocketCopyRegisteredSocketSignature(nameServerSignature: [*c]const CFSocketSignature, timeout: CFTimeInterval, name: CFStringRef, signature: [*c]CFSocketSignature, nameServerAddress: [*c]CFDataRef) CFSocketError;
pub extern fn CFSocketUnregister(nameServerSignature: [*c]const CFSocketSignature, timeout: CFTimeInterval, name: CFStringRef) CFSocketError;
pub extern fn CFSocketSetDefaultNameRegistryPortNumber(port: UInt16) void;
pub extern fn CFSocketGetDefaultNameRegistryPortNumber() UInt16;
pub extern const kCFSocketCommandKey: CFStringRef;
pub extern const kCFSocketNameKey: CFStringRef;
pub extern const kCFSocketValueKey: CFStringRef;
pub extern const kCFSocketResultKey: CFStringRef;
pub extern const kCFSocketErrorKey: CFStringRef;
pub extern const kCFSocketRegisterCommand: CFStringRef;
pub extern const kCFSocketRetrieveCommand: CFStringRef;
pub const os_function_t = ?fn (?*c_void) callconv(.C) void;
pub const os_block_t = @compileError("unable to resolve typedef child type");
pub const struct_accessx_descriptor = extern struct {
    ad_name_offset: c_uint,
    ad_flags: c_int,
    ad_pad: [2]c_int,
};
pub extern fn getattrlistbulk(c_int, ?*c_void, ?*c_void, usize, u64) c_int;
pub extern fn getattrlistat(c_int, [*c]const u8, ?*c_void, ?*c_void, usize, c_ulong) c_int;
pub extern fn setattrlistat(c_int, [*c]const u8, ?*c_void, ?*c_void, usize, u32) c_int;
pub extern fn faccessat(c_int, [*c]const u8, c_int, c_int) c_int;
pub extern fn fchownat(c_int, [*c]const u8, uid_t, gid_t, c_int) c_int;
pub extern fn linkat(c_int, [*c]const u8, c_int, [*c]const u8, c_int) c_int;
pub extern fn readlinkat(c_int, [*c]const u8, [*c]u8, usize) isize;
pub extern fn symlinkat([*c]const u8, c_int, [*c]const u8) c_int;
pub extern fn unlinkat(c_int, [*c]const u8, c_int) c_int;
pub extern fn _exit(c_int) noreturn;
pub extern fn access([*c]const u8, c_int) c_int;
pub extern fn alarm(c_uint) c_uint;
pub extern fn chdir([*c]const u8) c_int;
pub extern fn chown([*c]const u8, uid_t, gid_t) c_int;
pub extern fn close(c_int) c_int;
pub extern fn dup(c_int) c_int;
pub extern fn dup2(c_int, c_int) c_int;
pub extern fn execl(__path: [*c]const u8, __arg0: [*c]const u8, ...) c_int;
pub extern fn execle(__path: [*c]const u8, __arg0: [*c]const u8, ...) c_int;
pub extern fn execlp(__file: [*c]const u8, __arg0: [*c]const u8, ...) c_int;
pub extern fn execv(__path: [*c]const u8, __argv: [*c]const [*c]u8) c_int;
pub extern fn execve(__file: [*c]const u8, __argv: [*c]const [*c]u8, __envp: [*c]const [*c]u8) c_int;
pub extern fn execvp(__file: [*c]const u8, __argv: [*c]const [*c]u8) c_int;
pub extern fn fork() pid_t;
pub extern fn fpathconf(c_int, c_int) c_long;
pub extern fn getcwd([*c]u8, usize) [*c]u8;
pub extern fn getegid() gid_t;
pub extern fn geteuid() uid_t;
pub extern fn getgid() gid_t;
pub extern fn getgroups(c_int, [*c]gid_t) c_int;
pub extern fn getlogin() [*c]u8;
pub extern fn getpgrp() pid_t;
pub extern fn getpid() pid_t;
pub extern fn getppid() pid_t;
pub extern fn getuid() uid_t;
pub extern fn isatty(c_int) c_int;
pub extern fn link([*c]const u8, [*c]const u8) c_int;
pub extern fn lseek(c_int, off_t, c_int) off_t;
pub extern fn pathconf([*c]const u8, c_int) c_long;
pub extern fn pause() c_int;
pub extern fn pipe([*c]c_int) c_int;
pub extern fn read(c_int, ?*c_void, usize) isize;
pub extern fn rmdir([*c]const u8) c_int;
pub extern fn setgid(gid_t) c_int;
pub extern fn setpgid(pid_t, pid_t) c_int;
pub extern fn setsid() pid_t;
pub extern fn setuid(uid_t) c_int;
pub extern fn sleep(c_uint) c_uint;
pub extern fn sysconf(c_int) c_long;
pub extern fn tcgetpgrp(c_int) pid_t;
pub extern fn tcsetpgrp(c_int, pid_t) c_int;
pub extern fn ttyname(c_int) [*c]u8;
pub extern fn ttyname_r(c_int, [*c]u8, usize) c_int;
pub extern fn unlink([*c]const u8) c_int;
pub extern fn write(__fd: c_int, __buf: ?*const c_void, __nbyte: usize) isize;
pub extern fn confstr(c_int, [*c]u8, usize) usize;
pub extern fn getopt(c_int, [*c]const [*c]u8, [*c]const u8) c_int;
pub extern var optarg: [*c]u8;
pub extern var optind: c_int;
pub extern var opterr: c_int;
pub extern var optopt: c_int;
pub extern fn brk(?*const c_void) ?*c_void;
pub extern fn chroot([*c]const u8) c_int;
pub extern fn crypt([*c]const u8, [*c]const u8) [*c]u8;
pub extern fn encrypt([*c]u8, c_int) void;
pub extern fn fchdir(c_int) c_int;
pub extern fn gethostid() c_long;
pub extern fn getpgid(pid_t) pid_t;
pub extern fn getsid(pid_t) pid_t;
pub extern fn getdtablesize() c_int;
pub extern fn getpagesize() c_int;
pub extern fn getpass([*c]const u8) [*c]u8;
pub extern fn getwd([*c]u8) [*c]u8;
pub extern fn lchown([*c]const u8, uid_t, gid_t) c_int;
pub extern fn lockf(c_int, c_int, off_t) c_int;
pub extern fn nice(c_int) c_int;
pub extern fn pread(__fd: c_int, __buf: ?*c_void, __nbyte: usize, __offset: off_t) isize;
pub extern fn pwrite(__fd: c_int, __buf: ?*const c_void, __nbyte: usize, __offset: off_t) isize;
pub extern fn sbrk(c_int) ?*c_void;
pub extern fn setpgrp() pid_t;
pub extern fn setregid(gid_t, gid_t) c_int;
pub extern fn setreuid(uid_t, uid_t) c_int;
pub extern fn sync() void;
pub extern fn truncate([*c]const u8, off_t) c_int;
pub extern fn ualarm(useconds_t, useconds_t) useconds_t;
pub extern fn usleep(useconds_t) c_int;
pub extern fn vfork() c_int;
pub extern fn fsync(c_int) c_int;
pub extern fn ftruncate(c_int, off_t) c_int;
pub extern fn getlogin_r([*c]u8, usize) c_int;
pub extern fn fchown(c_int, uid_t, gid_t) c_int;
pub extern fn gethostname([*c]u8, usize) c_int;
pub extern fn readlink(noalias [*c]const u8, noalias [*c]u8, usize) isize;
pub extern fn setegid(gid_t) c_int;
pub extern fn seteuid(uid_t) c_int;
pub extern fn symlink([*c]const u8, [*c]const u8) c_int;
pub extern fn pselect(c_int, noalias [*c]fd_set, noalias [*c]fd_set, noalias [*c]fd_set, noalias [*c]const struct_timespec, noalias [*c]const sigset_t) c_int;
pub extern fn select(c_int, noalias [*c]fd_set, noalias [*c]fd_set, noalias [*c]fd_set, noalias [*c]struct_timeval) c_int;
pub const uuid_t = __darwin_uuid_t;
pub extern fn accessx_np([*c]const struct_accessx_descriptor, usize, [*c]c_int, uid_t) c_int;
pub extern fn acct([*c]const u8) c_int;
pub extern fn add_profil([*c]u8, usize, c_ulong, c_uint) c_int;
pub extern fn endusershell() void;
pub extern fn execvP(__file: [*c]const u8, __searchpath: [*c]const u8, __argv: [*c]const [*c]u8) c_int;
pub extern fn fflagstostr(c_ulong) [*c]u8;
pub extern fn getdomainname([*c]u8, c_int) c_int;
pub extern fn getgrouplist([*c]const u8, c_int, [*c]c_int, [*c]c_int) c_int;
pub extern fn gethostuuid([*c]u8, [*c]const struct_timespec) c_int;
pub extern fn getmode(?*const c_void, mode_t) mode_t;
pub extern fn getpeereid(c_int, [*c]uid_t, [*c]gid_t) c_int;
pub extern fn getsgroups_np([*c]c_int, [*c]u8) c_int;
pub extern fn getusershell() [*c]u8;
pub extern fn getwgroups_np([*c]c_int, [*c]u8) c_int;
pub extern fn initgroups([*c]const u8, c_int) c_int;
pub extern fn issetugid() c_int;
pub extern fn mkdtemp([*c]u8) [*c]u8;
pub extern fn mknod([*c]const u8, mode_t, dev_t) c_int;
pub extern fn mkpath_np(path: [*c]const u8, omode: mode_t) c_int;
pub extern fn mkpathat_np(dfd: c_int, path: [*c]const u8, omode: mode_t) c_int;
pub extern fn mkstemps([*c]u8, c_int) c_int;
pub extern fn mkostemp(path: [*c]u8, oflags: c_int) c_int;
pub extern fn mkostemps(path: [*c]u8, slen: c_int, oflags: c_int) c_int;
pub extern fn mkstemp_dprotected_np(path: [*c]u8, dpclass: c_int, dpflags: c_int) c_int;
pub extern fn mkdtempat_np(dfd: c_int, path: [*c]u8) [*c]u8;
pub extern fn mkstempsat_np(dfd: c_int, path: [*c]u8, slen: c_int) c_int;
pub extern fn mkostempsat_np(dfd: c_int, path: [*c]u8, slen: c_int, oflags: c_int) c_int;
pub extern fn nfssvc(c_int, ?*c_void) c_int;
pub extern fn profil([*c]u8, usize, c_ulong, c_uint) c_int;
pub extern fn pthread_setugid_np(uid_t, gid_t) c_int;
pub extern fn pthread_getugid_np([*c]uid_t, [*c]gid_t) c_int;
pub extern fn reboot(c_int) c_int;
pub extern fn revoke([*c]const u8) c_int;
pub extern fn rcmd([*c][*c]u8, c_int, [*c]const u8, [*c]const u8, [*c]const u8, [*c]c_int) c_int;
pub extern fn rcmd_af([*c][*c]u8, c_int, [*c]const u8, [*c]const u8, [*c]const u8, [*c]c_int, c_int) c_int;
pub extern fn rresvport([*c]c_int) c_int;
pub extern fn rresvport_af([*c]c_int, c_int) c_int;
pub extern fn iruserok(c_ulong, c_int, [*c]const u8, [*c]const u8) c_int;
pub extern fn iruserok_sa(?*const c_void, c_int, c_int, [*c]const u8, [*c]const u8) c_int;
pub extern fn ruserok([*c]const u8, c_int, [*c]const u8, [*c]const u8) c_int;
pub extern fn setdomainname([*c]const u8, c_int) c_int;
pub extern fn setgroups(c_int, [*c]const gid_t) c_int;
pub extern fn sethostid(c_long) void;
pub extern fn sethostname([*c]const u8, c_int) c_int;
pub extern fn setlogin([*c]const u8) c_int;
pub extern fn setmode([*c]const u8) ?*c_void;
pub extern fn setrgid(gid_t) c_int;
pub extern fn setruid(uid_t) c_int;
pub extern fn setsgroups_np(c_int, [*c]const u8) c_int;
pub extern fn setusershell() void;
pub extern fn setwgroups_np(c_int, [*c]const u8) c_int;
pub extern fn strtofflags([*c][*c]u8, [*c]c_ulong, [*c]c_ulong) c_int;
pub extern fn swapon([*c]const u8) c_int;
pub extern fn ttyslot() c_int;
pub extern fn undelete([*c]const u8) c_int;
pub extern fn unwhiteout([*c]const u8) c_int;
pub extern fn syscall(c_int, ...) c_int;
pub extern fn fgetattrlist(c_int, ?*c_void, ?*c_void, usize, c_uint) c_int;
pub extern fn fsetattrlist(c_int, ?*c_void, ?*c_void, usize, c_uint) c_int;
pub extern fn getattrlist([*c]const u8, ?*c_void, ?*c_void, usize, c_uint) c_int;
pub extern fn setattrlist([*c]const u8, ?*c_void, ?*c_void, usize, c_uint) c_int;
pub extern fn exchangedata([*c]const u8, [*c]const u8, c_uint) c_int;
pub extern fn getdirentriesattr(c_int, ?*c_void, ?*c_void, usize, [*c]c_uint, [*c]c_uint, [*c]c_uint, c_uint) c_int;
pub const struct_fssearchblock = @OpaqueType();
pub const struct_searchstate = @OpaqueType();
pub extern fn searchfs([*c]const u8, ?*struct_fssearchblock, [*c]c_ulong, c_uint, c_uint, ?*struct_searchstate) c_int;
pub extern fn fsctl([*c]const u8, c_ulong, ?*c_void, c_uint) c_int;
pub extern fn ffsctl(c_int, c_ulong, ?*c_void, c_uint) c_int;
pub extern fn fsync_volume_np(c_int, c_int) c_int;
pub extern fn sync_volume_np([*c]const u8, c_int) c_int;
pub extern var optreset: c_int;
pub const struct_flock = extern struct {
    l_start: off_t,
    l_len: off_t,
    l_pid: pid_t,
    l_type: c_short,
    l_whence: c_short,
};
pub const struct_flocktimeout = extern struct {
    fl: struct_flock,
    timeout: struct_timespec,
};
pub const struct_radvisory = extern struct {
    ra_offset: off_t,
    ra_count: c_int,
};
pub const struct_fcodeblobs = extern struct {
    f_cd_hash: ?*c_void,
    f_hash_size: usize,
    f_cd_buffer: ?*c_void,
    f_cd_size: usize,
    f_out_size: [*c]c_uint,
    f_arch: c_int,
    __padding: c_int,
};
pub const fcodeblobs_t = struct_fcodeblobs;
pub const struct_fsignatures = extern struct {
    fs_file_start: off_t,
    fs_blob_start: ?*c_void,
    fs_blob_size: usize,
};
pub const fsignatures_t = struct_fsignatures;
pub const struct_fchecklv = extern struct {
    lv_file_start: off_t,
    lv_error_message_size: usize,
    lv_error_message: ?*c_void,
};
pub const fchecklv_t = struct_fchecklv;
pub const struct_fstore = extern struct {
    fst_flags: c_uint,
    fst_posmode: c_int,
    fst_offset: off_t,
    fst_length: off_t,
    fst_bytesalloc: off_t,
};
pub const fstore_t = struct_fstore;
pub const struct_fpunchhole = extern struct {
    fp_flags: c_uint,
    reserved: c_uint,
    fp_offset: off_t,
    fp_length: off_t,
};
pub const fpunchhole_t = struct_fpunchhole;
pub const struct_ftrimactivefile = extern struct {
    fta_offset: off_t,
    fta_length: off_t,
};
pub const ftrimactivefile_t = struct_ftrimactivefile;
pub const struct_fspecread = extern struct {
    fsr_flags: c_uint,
    reserved: c_uint,
    fsr_offset: off_t,
    fsr_length: off_t,
};
pub const fspecread_t = struct_fspecread;
pub const struct_fbootstraptransfer = extern struct {
    fbt_offset: off_t,
    fbt_length: usize,
    fbt_buffer: ?*c_void,
};
pub const fbootstraptransfer_t = struct_fbootstraptransfer;
pub const struct_log2phys = extern struct {
    l2p_flags: c_uint,
    l2p_contigbytes: off_t,
    l2p_devoffset: off_t,
};
pub const struct__filesec = @OpaqueType();
pub const filesec_t = ?*struct__filesec;
pub const FILESEC_OWNER = @enumToInt(enum_unnamed_124.FILESEC_OWNER);
pub const FILESEC_GROUP = @enumToInt(enum_unnamed_124.FILESEC_GROUP);
pub const FILESEC_UUID = @enumToInt(enum_unnamed_124.FILESEC_UUID);
pub const FILESEC_MODE = @enumToInt(enum_unnamed_124.FILESEC_MODE);
pub const FILESEC_ACL = @enumToInt(enum_unnamed_124.FILESEC_ACL);
pub const FILESEC_GRPUUID = @enumToInt(enum_unnamed_124.FILESEC_GRPUUID);
pub const FILESEC_ACL_RAW = @enumToInt(enum_unnamed_124.FILESEC_ACL_RAW);
pub const FILESEC_ACL_ALLOCSIZE = @enumToInt(enum_unnamed_124.FILESEC_ACL_ALLOCSIZE);
const enum_unnamed_124 = extern enum(c_int) {
    FILESEC_OWNER = 1,
    FILESEC_GROUP = 2,
    FILESEC_UUID = 3,
    FILESEC_MODE = 4,
    FILESEC_ACL = 5,
    FILESEC_GRPUUID = 6,
    FILESEC_ACL_RAW = 100,
    FILESEC_ACL_ALLOCSIZE = 101,
    _,
};
pub const filesec_property_t = enum_unnamed_124;
pub extern fn open([*c]const u8, c_int, ...) c_int;
pub extern fn openat(c_int, [*c]const u8, c_int, ...) c_int;
pub extern fn creat([*c]const u8, mode_t) c_int;
pub extern fn fcntl(c_int, c_int, ...) c_int;
pub extern fn openx_np([*c]const u8, c_int, filesec_t) c_int;
pub extern fn open_dprotected_np([*c]const u8, c_int, c_int, c_int, ...) c_int;
pub extern fn flock(c_int, c_int) c_int;
pub extern fn filesec_init() filesec_t;
pub extern fn filesec_dup(filesec_t) filesec_t;
pub extern fn filesec_free(filesec_t) void;
pub extern fn filesec_get_property(filesec_t, filesec_property_t, ?*c_void) c_int;
pub extern fn filesec_query_property(filesec_t, filesec_property_t, [*c]c_int) c_int;
pub extern fn filesec_set_property(filesec_t, filesec_property_t, ?*const c_void) c_int;
pub extern fn filesec_unset_property(filesec_t, filesec_property_t) c_int;
pub extern fn os_retain(object: ?*c_void) ?*c_void;
pub extern fn os_release(object: ?*c_void) void;
pub const dispatch_function_t = ?fn (?*c_void) callconv(.C) void;
pub const struct_time_value = extern struct {
    seconds: integer_t,
    microseconds: integer_t,
};
pub const time_value_t = struct_time_value;
pub const alarm_type_t = c_int;
pub const sleep_type_t = c_int;
pub const clock_id_t = c_int;
pub const clock_flavor_t = c_int;
pub const clock_attr_t = [*c]c_int;
pub const clock_res_t = c_int;
pub const struct_mach_timespec = extern struct {
    tv_sec: c_uint,
    tv_nsec: clock_res_t,
};
pub const mach_timespec_t = struct_mach_timespec;
pub const dispatch_time_t = u64;
pub const DISPATCH_WALLTIME_NOW = @enumToInt(enum_unnamed_125.DISPATCH_WALLTIME_NOW);
const enum_unnamed_125 = extern enum(c_ulong) {
    DISPATCH_WALLTIME_NOW = 18446744073709551614,
    _,
};
pub extern fn dispatch_time(when: dispatch_time_t, delta: i64) dispatch_time_t;
pub extern fn dispatch_walltime(when: [*c]const struct_timespec, delta: i64) dispatch_time_t;
pub const QOS_CLASS_USER_INTERACTIVE = @enumToInt(enum_unnamed_126.QOS_CLASS_USER_INTERACTIVE);
pub const QOS_CLASS_USER_INITIATED = @enumToInt(enum_unnamed_126.QOS_CLASS_USER_INITIATED);
pub const QOS_CLASS_DEFAULT = @enumToInt(enum_unnamed_126.QOS_CLASS_DEFAULT);
pub const QOS_CLASS_UTILITY = @enumToInt(enum_unnamed_126.QOS_CLASS_UTILITY);
pub const QOS_CLASS_BACKGROUND = @enumToInt(enum_unnamed_126.QOS_CLASS_BACKGROUND);
pub const QOS_CLASS_UNSPECIFIED = @enumToInt(enum_unnamed_126.QOS_CLASS_UNSPECIFIED);
const enum_unnamed_126 = extern enum(c_int) {
    QOS_CLASS_USER_INTERACTIVE = 33,
    QOS_CLASS_USER_INITIATED = 25,
    QOS_CLASS_DEFAULT = 21,
    QOS_CLASS_UTILITY = 17,
    QOS_CLASS_BACKGROUND = 9,
    QOS_CLASS_UNSPECIFIED = 0,
    _,
};
pub const qos_class_t = c_uint;
pub extern fn qos_class_self() qos_class_t;
pub extern fn qos_class_main() qos_class_t;
pub const struct__os_object_s = @OpaqueType();
pub const struct_dispatch_object_s = @OpaqueType();
pub const struct_dispatch_queue_s = @OpaqueType();
pub const struct_dispatch_queue_attr_s = @OpaqueType();
pub const struct_dispatch_group_s = @OpaqueType();
pub const struct_dispatch_source_s = @OpaqueType();
pub const struct_dispatch_channel_s = @OpaqueType();
pub const struct_dispatch_mach_s = @OpaqueType();
pub const struct_dispatch_mach_msg_s = @OpaqueType();
pub const struct_dispatch_semaphore_s = @OpaqueType();
pub const struct_dispatch_data_s = @OpaqueType();
pub const struct_dispatch_io_s = @OpaqueType();
const union_unnamed_127 = extern union {
    _os_obj: ?*struct__os_object_s,
    _do: ?*struct_dispatch_object_s,
    _dq: ?*struct_dispatch_queue_s,
    _dqa: ?*struct_dispatch_queue_attr_s,
    _dg: ?*struct_dispatch_group_s,
    _ds: ?*struct_dispatch_source_s,
    _dch: ?*struct_dispatch_channel_s,
    _dm: ?*struct_dispatch_mach_s,
    _dmsg: ?*struct_dispatch_mach_msg_s,
    _dsema: ?*struct_dispatch_semaphore_s,
    _ddata: ?*struct_dispatch_data_s,
    _dchannel: ?*struct_dispatch_io_s,
};
pub const dispatch_object_t = union_unnamed_127;
pub const dispatch_block_t = @compileError("unable to resolve typedef child type");
pub const dispatch_qos_class_t = qos_class_t;
pub extern fn dispatch_retain(object: dispatch_object_t) void;
pub extern fn dispatch_release(object: dispatch_object_t) void;
pub extern fn dispatch_get_context(object: dispatch_object_t) ?*c_void;
pub extern fn dispatch_set_context(object: dispatch_object_t, context: ?*c_void) void;
pub extern fn dispatch_set_finalizer_f(object: dispatch_object_t, finalizer: dispatch_function_t) void;
pub extern fn dispatch_activate(object: dispatch_object_t) void;
pub extern fn dispatch_suspend(object: dispatch_object_t) void;
pub extern fn dispatch_resume(object: dispatch_object_t) void;
pub extern fn dispatch_set_qos_class_floor(object: dispatch_object_t, qos_class: dispatch_qos_class_t, relative_priority: c_int) void;
pub extern fn dispatch_wait(object: ?*c_void, timeout: dispatch_time_t) c_long;
pub extern fn dispatch_notify(object: ?*c_void, queue: dispatch_object_t, notification_block: dispatch_block_t) void;
pub extern fn dispatch_cancel(object: ?*c_void) void;
pub extern fn dispatch_testcancel(object: ?*c_void) c_long;
pub extern fn dispatch_debug(object: dispatch_object_t, message: [*c]const u8, ...) void;
pub extern fn dispatch_debugv(object: dispatch_object_t, message: [*c]const u8, ap: [*c]struct___va_list_tag) void;
pub const dispatch_queue_t = ?*struct_dispatch_queue_s;
pub const dispatch_queue_global_t = dispatch_queue_t;
pub const dispatch_queue_serial_t = dispatch_queue_t;
pub const dispatch_queue_main_t = dispatch_queue_serial_t;
pub const dispatch_queue_concurrent_t = dispatch_queue_t;
pub extern fn dispatch_async(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_async_f(queue: dispatch_queue_t, context: ?*c_void, work: dispatch_function_t) void;
pub extern fn dispatch_sync(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_sync_f(queue: dispatch_queue_t, context: ?*c_void, work: dispatch_function_t) void;
pub extern fn dispatch_async_and_wait(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_async_and_wait_f(queue: dispatch_queue_t, context: ?*c_void, work: dispatch_function_t) void; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/dispatch/queue.h:481:1: warning: unsupported type: 'BlockPointer'
pub const dispatch_apply = @compileError("unable to resolve prototype of function");
pub extern fn dispatch_apply_f(iterations: usize, queue: dispatch_queue_t, context: ?*c_void, work: ?fn (?*c_void, usize) callconv(.C) void) void;
pub extern fn dispatch_get_current_queue() dispatch_queue_t;
pub extern var _dispatch_main_q: struct_dispatch_queue_s;
pub fn dispatch_get_main_queue() callconv(.C) dispatch_queue_main_t {
    return (@ptrCast(dispatch_queue_main_t, &(_dispatch_main_q)));
}
pub const dispatch_queue_priority_t = c_long;
pub extern fn dispatch_get_global_queue(identifier: c_long, flags: c_ulong) dispatch_queue_global_t;
pub const dispatch_queue_attr_t = ?*struct_dispatch_queue_attr_s;
pub extern var _dispatch_queue_attr_concurrent: struct_dispatch_queue_attr_s;
pub extern fn dispatch_queue_attr_make_initially_inactive(attr: dispatch_queue_attr_t) dispatch_queue_attr_t;
pub const DISPATCH_AUTORELEASE_FREQUENCY_INHERIT = @enumToInt(enum_unnamed_128.DISPATCH_AUTORELEASE_FREQUENCY_INHERIT);
pub const DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM = @enumToInt(enum_unnamed_128.DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
pub const DISPATCH_AUTORELEASE_FREQUENCY_NEVER = @enumToInt(enum_unnamed_128.DISPATCH_AUTORELEASE_FREQUENCY_NEVER);
const enum_unnamed_128 = extern enum(c_ulong) {
    DISPATCH_AUTORELEASE_FREQUENCY_INHERIT = 0,
    DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM = 1,
    DISPATCH_AUTORELEASE_FREQUENCY_NEVER = 2,
    _,
};
pub const dispatch_autorelease_frequency_t = enum_unnamed_128;
pub extern fn dispatch_queue_attr_make_with_autorelease_frequency(attr: dispatch_queue_attr_t, frequency: dispatch_autorelease_frequency_t) dispatch_queue_attr_t;
pub extern fn dispatch_queue_attr_make_with_qos_class(attr: dispatch_queue_attr_t, qos_class: dispatch_qos_class_t, relative_priority: c_int) dispatch_queue_attr_t;
pub extern fn dispatch_queue_create_with_target(label: [*c]const u8, attr: dispatch_queue_attr_t, target: dispatch_queue_t) dispatch_queue_t;
pub extern fn dispatch_queue_create(label: [*c]const u8, attr: dispatch_queue_attr_t) dispatch_queue_t;
pub extern fn dispatch_queue_get_label(queue: dispatch_queue_t) [*c]const u8;
pub extern fn dispatch_queue_get_qos_class(queue: dispatch_queue_t, relative_priority_ptr: [*c]c_int) dispatch_qos_class_t;
pub extern fn dispatch_set_target_queue(object: dispatch_object_t, queue: dispatch_queue_t) void;
pub extern fn dispatch_main() noreturn;
pub extern fn dispatch_after(when: dispatch_time_t, queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_after_f(when: dispatch_time_t, queue: dispatch_queue_t, context: ?*c_void, work: dispatch_function_t) void;
pub extern fn dispatch_barrier_async(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_barrier_async_f(queue: dispatch_queue_t, context: ?*c_void, work: dispatch_function_t) void;
pub extern fn dispatch_barrier_sync(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_barrier_sync_f(queue: dispatch_queue_t, context: ?*c_void, work: dispatch_function_t) void;
pub extern fn dispatch_barrier_async_and_wait(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_barrier_async_and_wait_f(queue: dispatch_queue_t, context: ?*c_void, work: dispatch_function_t) void;
pub extern fn dispatch_queue_set_specific(queue: dispatch_queue_t, key: ?*const c_void, context: ?*c_void, destructor: dispatch_function_t) void;
pub extern fn dispatch_queue_get_specific(queue: dispatch_queue_t, key: ?*const c_void) ?*c_void;
pub extern fn dispatch_get_specific(key: ?*const c_void) ?*c_void;
pub extern fn dispatch_assert_queue(queue: dispatch_queue_t) void;
pub extern fn dispatch_assert_queue_barrier(queue: dispatch_queue_t) void;
pub extern fn dispatch_assert_queue_not(queue: dispatch_queue_t) void;
pub const DISPATCH_BLOCK_BARRIER = @enumToInt(enum_unnamed_129.DISPATCH_BLOCK_BARRIER);
pub const DISPATCH_BLOCK_DETACHED = @enumToInt(enum_unnamed_129.DISPATCH_BLOCK_DETACHED);
pub const DISPATCH_BLOCK_ASSIGN_CURRENT = @enumToInt(enum_unnamed_129.DISPATCH_BLOCK_ASSIGN_CURRENT);
pub const DISPATCH_BLOCK_NO_QOS_CLASS = @enumToInt(enum_unnamed_129.DISPATCH_BLOCK_NO_QOS_CLASS);
pub const DISPATCH_BLOCK_INHERIT_QOS_CLASS = @enumToInt(enum_unnamed_129.DISPATCH_BLOCK_INHERIT_QOS_CLASS);
pub const DISPATCH_BLOCK_ENFORCE_QOS_CLASS = @enumToInt(enum_unnamed_129.DISPATCH_BLOCK_ENFORCE_QOS_CLASS);
const enum_unnamed_129 = extern enum(c_ulong) {
    DISPATCH_BLOCK_BARRIER = 1,
    DISPATCH_BLOCK_DETACHED = 2,
    DISPATCH_BLOCK_ASSIGN_CURRENT = 4,
    DISPATCH_BLOCK_NO_QOS_CLASS = 8,
    DISPATCH_BLOCK_INHERIT_QOS_CLASS = 16,
    DISPATCH_BLOCK_ENFORCE_QOS_CLASS = 32,
    _,
};
pub const dispatch_block_flags_t = enum_unnamed_129;
pub const dispatch_block_create = @compileError("unable to resolve function type ZigClangTypeClass.MacroQualified");
pub const dispatch_block_create_with_qos_class = @compileError("unable to resolve function type ZigClangTypeClass.MacroQualified");
pub extern fn dispatch_block_perform(flags: dispatch_block_flags_t, block: dispatch_block_t) void;
pub extern fn dispatch_block_wait(block: dispatch_block_t, timeout: dispatch_time_t) c_long;
pub extern fn dispatch_block_notify(block: dispatch_block_t, queue: dispatch_queue_t, notification_block: dispatch_block_t) void;
pub extern fn dispatch_block_cancel(block: dispatch_block_t) void;
pub extern fn dispatch_block_testcancel(block: dispatch_block_t) c_long;
pub const kern_return_t = c_int;
pub const mach_msg_timeout_t = natural_t;
pub const mach_msg_bits_t = c_uint;
pub const mach_msg_size_t = natural_t;
pub const mach_msg_id_t = integer_t;
pub const mach_msg_priority_t = c_uint;
pub const mach_msg_type_name_t = c_uint;
pub const mach_msg_copy_options_t = c_uint;
pub const mach_msg_guard_flags_t = c_uint;
pub const mach_msg_descriptor_type_t = c_uint;
const struct_unnamed_130 = @OpaqueType(); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/message.h:285:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_type_descriptor_t = struct_unnamed_130;
const struct_unnamed_131 = @OpaqueType(); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/message.h:293:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_port_descriptor_t = struct_unnamed_131;
const struct_unnamed_132 = @OpaqueType(); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/message.h:301:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_descriptor32_t = struct_unnamed_132;
const struct_unnamed_133 = @OpaqueType(); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/message.h:309:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_descriptor64_t = struct_unnamed_133;
const struct_unnamed_134 = @OpaqueType(); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/message.h:321:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_descriptor_t = struct_unnamed_134;
const struct_unnamed_135 = @OpaqueType(); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/message.h:333:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_ports_descriptor32_t = struct_unnamed_135;
const struct_unnamed_136 = @OpaqueType(); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/message.h:341:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_ports_descriptor64_t = struct_unnamed_136;
const struct_unnamed_137 = @OpaqueType(); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/message.h:353:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_ports_descriptor_t = struct_unnamed_137;
const struct_unnamed_138 = @OpaqueType(); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/message.h:365:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_guarded_port_descriptor32_t = struct_unnamed_138;
const struct_unnamed_139 = @OpaqueType(); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/message.h:372:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_guarded_port_descriptor64_t = struct_unnamed_139;
const struct_unnamed_140 = @OpaqueType(); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach/message.h:383:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_guarded_port_descriptor_t = struct_unnamed_140;
const union_unnamed_141 = extern union {
    port: mach_msg_port_descriptor_t,
    out_of_line: mach_msg_ool_descriptor_t,
    ool_ports: mach_msg_ool_ports_descriptor_t,
    type: mach_msg_type_descriptor_t,
    guarded_port: mach_msg_guarded_port_descriptor_t,
};
pub const mach_msg_descriptor_t = union_unnamed_141;
const struct_unnamed_142 = extern struct {
    msgh_descriptor_count: mach_msg_size_t,
};
pub const mach_msg_body_t = struct_unnamed_142;
const struct_unnamed_143 = extern struct {
    msgh_bits: mach_msg_bits_t,
    msgh_size: mach_msg_size_t,
    msgh_remote_port: mach_port_t,
    msgh_local_port: mach_port_t,
    msgh_voucher_port: mach_port_name_t,
    msgh_id: mach_msg_id_t,
};
pub const mach_msg_header_t = struct_unnamed_143;
const struct_unnamed_144 = extern struct {
    header: mach_msg_header_t,
    body: mach_msg_body_t,
};
pub const mach_msg_base_t = struct_unnamed_144;
pub const mach_msg_trailer_type_t = c_uint;
pub const mach_msg_trailer_size_t = c_uint;
pub const mach_msg_trailer_info_t = [*c]u8;
const struct_unnamed_145 = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t,
    msgh_trailer_size: mach_msg_trailer_size_t,
};
pub const mach_msg_trailer_t = struct_unnamed_145;
const struct_unnamed_146 = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t,
    msgh_trailer_size: mach_msg_trailer_size_t,
    msgh_seqno: mach_port_seqno_t,
};
pub const mach_msg_seqno_trailer_t = struct_unnamed_146;
const struct_unnamed_147 = extern struct {
    val: [2]c_uint,
};
pub const security_token_t = struct_unnamed_147;
const struct_unnamed_148 = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t,
    msgh_trailer_size: mach_msg_trailer_size_t,
    msgh_seqno: mach_port_seqno_t,
    msgh_sender: security_token_t,
};
pub const mach_msg_security_trailer_t = struct_unnamed_148;
const struct_unnamed_149 = extern struct {
    val: [8]c_uint,
};
pub const audit_token_t = struct_unnamed_149;
const struct_unnamed_150 = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t,
    msgh_trailer_size: mach_msg_trailer_size_t,
    msgh_seqno: mach_port_seqno_t,
    msgh_sender: security_token_t,
    msgh_audit: audit_token_t,
};
pub const mach_msg_audit_trailer_t = struct_unnamed_150;
const struct_unnamed_151 = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t,
    msgh_trailer_size: mach_msg_trailer_size_t,
    msgh_seqno: mach_port_seqno_t,
    msgh_sender: security_token_t,
    msgh_audit: audit_token_t,
    msgh_context: mach_port_context_t,
};
pub const mach_msg_context_trailer_t = struct_unnamed_151;
const struct_unnamed_152 = extern struct {
    sender: mach_port_name_t,
};
pub const msg_labels_t = struct_unnamed_152;
const struct_unnamed_153 = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t,
    msgh_trailer_size: mach_msg_trailer_size_t,
    msgh_seqno: mach_port_seqno_t,
    msgh_sender: security_token_t,
    msgh_audit: audit_token_t,
    msgh_context: mach_port_context_t,
    msgh_ad: c_int,
    msgh_labels: msg_labels_t,
};
pub const mach_msg_mac_trailer_t = struct_unnamed_153;
pub const mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub const mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
pub extern const KERNEL_SECURITY_TOKEN: security_token_t;
pub extern const KERNEL_AUDIT_TOKEN: audit_token_t;
pub const mach_msg_options_t = integer_t;
const struct_unnamed_154 = extern struct {
    header: mach_msg_header_t,
};
pub const mach_msg_empty_send_t = struct_unnamed_154;
const struct_unnamed_155 = extern struct {
    header: mach_msg_header_t,
    trailer: mach_msg_trailer_t,
};
pub const mach_msg_empty_rcv_t = struct_unnamed_155;
const union_unnamed_156 = extern union {
    send: mach_msg_empty_send_t,
    rcv: mach_msg_empty_rcv_t,
};
pub const mach_msg_empty_t = union_unnamed_156;
pub const mach_msg_type_size_t = natural_t;
pub const mach_msg_type_number_t = natural_t;
pub const mach_msg_option_t = integer_t;
pub const mach_msg_return_t = kern_return_t;
pub extern fn mach_msg_overwrite(msg: [*c]mach_msg_header_t, option: mach_msg_option_t, send_size: mach_msg_size_t, rcv_size: mach_msg_size_t, rcv_name: mach_port_name_t, timeout: mach_msg_timeout_t, notify: mach_port_name_t, rcv_msg: [*c]mach_msg_header_t, rcv_limit: mach_msg_size_t) mach_msg_return_t;
pub extern fn mach_msg(msg: [*c]mach_msg_header_t, option: mach_msg_option_t, send_size: mach_msg_size_t, rcv_size: mach_msg_size_t, rcv_name: mach_port_name_t, timeout: mach_msg_timeout_t, notify: mach_port_name_t) mach_msg_return_t;
pub extern fn mach_voucher_deallocate(voucher: mach_port_name_t) kern_return_t;
pub const dispatch_source_t = ?*struct_dispatch_source_s;
pub const struct_dispatch_source_type_s = @OpaqueType();
pub const dispatch_source_type_t = ?*const struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_data_add: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_data_or: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_data_replace: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_mach_send: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_mach_recv: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_memorypressure: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_proc: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_read: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_signal: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_timer: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_vnode: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_write: struct_dispatch_source_type_s;
pub const dispatch_source_mach_send_flags_t = c_ulong;
pub const dispatch_source_mach_recv_flags_t = c_ulong;
pub const dispatch_source_memorypressure_flags_t = c_ulong;
pub const dispatch_source_proc_flags_t = c_ulong;
pub const dispatch_source_vnode_flags_t = c_ulong;
pub const dispatch_source_timer_flags_t = c_ulong;
pub extern fn dispatch_source_create(type: dispatch_source_type_t, handle: usize, mask: c_ulong, queue: dispatch_queue_t) dispatch_source_t;
pub extern fn dispatch_source_set_event_handler(source: dispatch_source_t, handler: dispatch_block_t) void;
pub extern fn dispatch_source_set_event_handler_f(source: dispatch_source_t, handler: dispatch_function_t) void;
pub extern fn dispatch_source_set_cancel_handler(source: dispatch_source_t, handler: dispatch_block_t) void;
pub extern fn dispatch_source_set_cancel_handler_f(source: dispatch_source_t, handler: dispatch_function_t) void;
pub extern fn dispatch_source_cancel(source: dispatch_source_t) void;
pub extern fn dispatch_source_testcancel(source: dispatch_source_t) c_long;
pub extern fn dispatch_source_get_handle(source: dispatch_source_t) usize;
pub extern fn dispatch_source_get_mask(source: dispatch_source_t) c_ulong;
pub extern fn dispatch_source_get_data(source: dispatch_source_t) c_ulong;
pub extern fn dispatch_source_merge_data(source: dispatch_source_t, value: c_ulong) void;
pub extern fn dispatch_source_set_timer(source: dispatch_source_t, start: dispatch_time_t, interval: u64, leeway: u64) void;
pub extern fn dispatch_source_set_registration_handler(source: dispatch_source_t, handler: dispatch_block_t) void;
pub extern fn dispatch_source_set_registration_handler_f(source: dispatch_source_t, handler: dispatch_function_t) void;
pub const dispatch_group_t = ?*struct_dispatch_group_s;
pub extern fn dispatch_group_create() dispatch_group_t;
pub extern fn dispatch_group_async(group: dispatch_group_t, queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_group_async_f(group: dispatch_group_t, queue: dispatch_queue_t, context: ?*c_void, work: dispatch_function_t) void;
pub extern fn dispatch_group_wait(group: dispatch_group_t, timeout: dispatch_time_t) c_long;
pub extern fn dispatch_group_notify(group: dispatch_group_t, queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_group_notify_f(group: dispatch_group_t, queue: dispatch_queue_t, context: ?*c_void, work: dispatch_function_t) void;
pub extern fn dispatch_group_enter(group: dispatch_group_t) void;
pub extern fn dispatch_group_leave(group: dispatch_group_t) void;
pub const dispatch_semaphore_t = ?*struct_dispatch_semaphore_s;
pub extern fn dispatch_semaphore_create(value: c_long) dispatch_semaphore_t;
pub extern fn dispatch_semaphore_wait(dsema: dispatch_semaphore_t, timeout: dispatch_time_t) c_long;
pub extern fn dispatch_semaphore_signal(dsema: dispatch_semaphore_t) c_long;
pub const dispatch_once_t = isize;
pub extern fn dispatch_once(predicate: [*c]dispatch_once_t, block: dispatch_block_t) void; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/dispatch/base.h:167:31: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const _dispatch_once = @compileError("unable to translate function");
pub extern fn dispatch_once_f(predicate: [*c]dispatch_once_t, context: ?*c_void, function: dispatch_function_t) void; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/dispatch/base.h:167:31: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const _dispatch_once_f = @compileError("unable to translate function");
pub const dispatch_data_t = ?*struct_dispatch_data_s;
pub extern var _dispatch_data_empty: struct_dispatch_data_s;
pub extern const _dispatch_data_destructor_free: dispatch_block_t;
pub extern const _dispatch_data_destructor_munmap: dispatch_block_t;
pub extern fn dispatch_data_create(buffer: ?*const c_void, size: usize, queue: dispatch_queue_t, destructor: dispatch_block_t) dispatch_data_t;
pub extern fn dispatch_data_get_size(data: dispatch_data_t) usize;
pub extern fn dispatch_data_create_map(data: dispatch_data_t, buffer_ptr: [*c]?*const c_void, size_ptr: [*c]usize) dispatch_data_t;
pub extern fn dispatch_data_create_concat(data1: dispatch_data_t, data2: dispatch_data_t) dispatch_data_t;
pub extern fn dispatch_data_create_subrange(data: dispatch_data_t, offset: usize, length: usize) dispatch_data_t; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/dispatch/data.h:220:16: warning: unsupported type: 'BlockPointer'
pub const dispatch_data_applier_t = @compileError("unable to resolve typedef child type");
pub extern fn dispatch_data_apply(data: dispatch_data_t, applier: dispatch_data_applier_t) bool;
pub extern fn dispatch_data_copy_region(data: dispatch_data_t, location: usize, offset_ptr: [*c]usize) dispatch_data_t;
pub const dispatch_fd_t = c_int;
pub const dispatch_read = @compileError("unable to resolve prototype of function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/dispatch/io.h:151:1: warning: unsupported type: 'BlockPointer'
pub const dispatch_write = @compileError("unable to resolve prototype of function");
pub const dispatch_io_t = ?*struct_dispatch_io_s;
pub const dispatch_io_type_t = c_ulong;
pub const dispatch_io_create = @compileError("unable to resolve prototype of function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/dispatch/io.h:258:1: warning: unsupported type: 'BlockPointer'
pub const dispatch_io_create_with_path = @compileError("unable to resolve prototype of function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/dispatch/io.h:298:1: warning: unsupported type: 'BlockPointer'
pub const dispatch_io_create_with_io = @compileError("unable to resolve prototype of function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/dispatch/io.h:311:16: warning: unsupported type: 'BlockPointer'
pub const dispatch_io_handler_t = @compileError("unable to resolve typedef child type");
pub extern fn dispatch_io_read(channel: dispatch_io_t, offset: off_t, length: usize, queue: dispatch_queue_t, io_handler: dispatch_io_handler_t) void;
pub extern fn dispatch_io_write(channel: dispatch_io_t, offset: off_t, data: dispatch_data_t, queue: dispatch_queue_t, io_handler: dispatch_io_handler_t) void;
pub const dispatch_io_close_flags_t = c_ulong;
pub extern fn dispatch_io_close(channel: dispatch_io_t, flags: dispatch_io_close_flags_t) void;
pub extern fn dispatch_io_barrier(channel: dispatch_io_t, barrier: dispatch_block_t) void;
pub extern fn dispatch_io_get_descriptor(channel: dispatch_io_t) dispatch_fd_t;
pub extern fn dispatch_io_set_high_water(channel: dispatch_io_t, high_water: usize) void;
pub extern fn dispatch_io_set_low_water(channel: dispatch_io_t, low_water: usize) void;
pub const dispatch_io_interval_flags_t = c_ulong;
pub extern fn dispatch_io_set_interval(channel: dispatch_io_t, interval: u64, flags: dispatch_io_interval_flags_t) void;
pub const dispatch_workloop_t = dispatch_queue_t;
pub extern fn dispatch_workloop_create(label: [*c]const u8) dispatch_workloop_t;
pub extern fn dispatch_workloop_create_inactive(label: [*c]const u8) dispatch_workloop_t;
pub extern fn dispatch_workloop_set_autorelease_frequency(workloop: dispatch_workloop_t, frequency: dispatch_autorelease_frequency_t) void;
const struct_unnamed_157 = extern struct {
    domain: CFIndex,
    @"error": SInt32,
};
pub const CFStreamError = struct_unnamed_157;
pub const CFStreamPropertyKey = CFStringRef;
pub const CFStreamStatus = CFIndex;
pub const kCFStreamStatusNotOpen = @enumToInt(enum_unnamed_158.kCFStreamStatusNotOpen);
pub const kCFStreamStatusOpening = @enumToInt(enum_unnamed_158.kCFStreamStatusOpening);
pub const kCFStreamStatusOpen = @enumToInt(enum_unnamed_158.kCFStreamStatusOpen);
pub const kCFStreamStatusReading = @enumToInt(enum_unnamed_158.kCFStreamStatusReading);
pub const kCFStreamStatusWriting = @enumToInt(enum_unnamed_158.kCFStreamStatusWriting);
pub const kCFStreamStatusAtEnd = @enumToInt(enum_unnamed_158.kCFStreamStatusAtEnd);
pub const kCFStreamStatusClosed = @enumToInt(enum_unnamed_158.kCFStreamStatusClosed);
pub const kCFStreamStatusError = @enumToInt(enum_unnamed_158.kCFStreamStatusError);
const enum_unnamed_158 = extern enum(c_int) {
    kCFStreamStatusNotOpen = 0,
    kCFStreamStatusOpening = 1,
    kCFStreamStatusOpen = 2,
    kCFStreamStatusReading = 3,
    kCFStreamStatusWriting = 4,
    kCFStreamStatusAtEnd = 5,
    kCFStreamStatusClosed = 6,
    kCFStreamStatusError = 7,
    _,
};
pub const CFStreamEventType = CFOptionFlags;
pub const kCFStreamEventNone = @enumToInt(enum_unnamed_159.kCFStreamEventNone);
pub const kCFStreamEventOpenCompleted = @enumToInt(enum_unnamed_159.kCFStreamEventOpenCompleted);
pub const kCFStreamEventHasBytesAvailable = @enumToInt(enum_unnamed_159.kCFStreamEventHasBytesAvailable);
pub const kCFStreamEventCanAcceptBytes = @enumToInt(enum_unnamed_159.kCFStreamEventCanAcceptBytes);
pub const kCFStreamEventErrorOccurred = @enumToInt(enum_unnamed_159.kCFStreamEventErrorOccurred);
pub const kCFStreamEventEndEncountered = @enumToInt(enum_unnamed_159.kCFStreamEventEndEncountered);
const enum_unnamed_159 = extern enum(c_int) {
    kCFStreamEventNone = 0,
    kCFStreamEventOpenCompleted = 1,
    kCFStreamEventHasBytesAvailable = 2,
    kCFStreamEventCanAcceptBytes = 4,
    kCFStreamEventErrorOccurred = 8,
    kCFStreamEventEndEncountered = 16,
    _,
};
const struct_unnamed_160 = extern struct {
    version: CFIndex,
    info: ?*c_void,
    retain: ?fn (?*c_void) callconv(.C) ?*c_void,
    release: ?fn (?*c_void) callconv(.C) void,
    copyDescription: ?fn (?*c_void) callconv(.C) CFStringRef,
};
pub const CFStreamClientContext = struct_unnamed_160;
pub const struct___CFReadStream = @OpaqueType();
pub const CFReadStreamRef = ?*struct___CFReadStream;
pub const struct___CFWriteStream = @OpaqueType();
pub const CFWriteStreamRef = ?*struct___CFWriteStream;
pub const CFReadStreamClientCallBack = ?fn (CFReadStreamRef, CFStreamEventType, ?*c_void) callconv(.C) void;
pub const CFWriteStreamClientCallBack = ?fn (CFWriteStreamRef, CFStreamEventType, ?*c_void) callconv(.C) void;
pub extern fn CFReadStreamGetTypeID() CFTypeID;
pub extern fn CFWriteStreamGetTypeID() CFTypeID;
pub extern const kCFStreamPropertyDataWritten: CFStreamPropertyKey;
pub extern fn CFReadStreamCreateWithBytesNoCopy(alloc: CFAllocatorRef, bytes: [*c]const UInt8, length: CFIndex, bytesDeallocator: CFAllocatorRef) CFReadStreamRef;
pub extern fn CFWriteStreamCreateWithBuffer(alloc: CFAllocatorRef, buffer: [*c]UInt8, bufferCapacity: CFIndex) CFWriteStreamRef;
pub extern fn CFWriteStreamCreateWithAllocatedBuffers(alloc: CFAllocatorRef, bufferAllocator: CFAllocatorRef) CFWriteStreamRef;
pub extern fn CFReadStreamCreateWithFile(alloc: CFAllocatorRef, fileURL: CFURLRef) CFReadStreamRef;
pub extern fn CFWriteStreamCreateWithFile(alloc: CFAllocatorRef, fileURL: CFURLRef) CFWriteStreamRef;
pub extern fn CFStreamCreateBoundPair(alloc: CFAllocatorRef, readStream: [*c]CFReadStreamRef, writeStream: [*c]CFWriteStreamRef, transferBufferSize: CFIndex) void;
pub extern const kCFStreamPropertyAppendToFile: CFStreamPropertyKey;
pub extern const kCFStreamPropertyFileCurrentOffset: CFStreamPropertyKey;
pub extern const kCFStreamPropertySocketNativeHandle: CFStreamPropertyKey;
pub extern const kCFStreamPropertySocketRemoteHostName: CFStreamPropertyKey;
pub extern const kCFStreamPropertySocketRemotePortNumber: CFStreamPropertyKey;
pub extern const kCFStreamErrorDomainSOCKS: c_int;
pub extern const kCFStreamPropertySOCKSProxy: CFStringRef;
pub extern const kCFStreamPropertySOCKSProxyHost: CFStringRef;
pub extern const kCFStreamPropertySOCKSProxyPort: CFStringRef;
pub extern const kCFStreamPropertySOCKSVersion: CFStringRef;
pub extern const kCFStreamSocketSOCKSVersion4: CFStringRef;
pub extern const kCFStreamSocketSOCKSVersion5: CFStringRef;
pub extern const kCFStreamPropertySOCKSUser: CFStringRef;
pub extern const kCFStreamPropertySOCKSPassword: CFStringRef;
pub extern const kCFStreamErrorDomainSSL: c_int;
pub extern const kCFStreamPropertySocketSecurityLevel: CFStringRef;
pub extern const kCFStreamSocketSecurityLevelNone: CFStringRef;
pub extern const kCFStreamSocketSecurityLevelSSLv2: CFStringRef;
pub extern const kCFStreamSocketSecurityLevelSSLv3: CFStringRef;
pub extern const kCFStreamSocketSecurityLevelTLSv1: CFStringRef;
pub extern const kCFStreamSocketSecurityLevelNegotiatedSSL: CFStringRef;
pub extern const kCFStreamPropertyShouldCloseNativeSocket: CFStringRef;
pub extern fn CFStreamCreatePairWithSocket(alloc: CFAllocatorRef, sock: CFSocketNativeHandle, readStream: [*c]CFReadStreamRef, writeStream: [*c]CFWriteStreamRef) void;
pub extern fn CFStreamCreatePairWithSocketToHost(alloc: CFAllocatorRef, host: CFStringRef, port: UInt32, readStream: [*c]CFReadStreamRef, writeStream: [*c]CFWriteStreamRef) void;
pub extern fn CFStreamCreatePairWithPeerSocketSignature(alloc: CFAllocatorRef, signature: [*c]const CFSocketSignature, readStream: [*c]CFReadStreamRef, writeStream: [*c]CFWriteStreamRef) void;
pub extern fn CFReadStreamGetStatus(stream: CFReadStreamRef) CFStreamStatus;
pub extern fn CFWriteStreamGetStatus(stream: CFWriteStreamRef) CFStreamStatus;
pub extern fn CFReadStreamCopyError(stream: CFReadStreamRef) CFErrorRef;
pub extern fn CFWriteStreamCopyError(stream: CFWriteStreamRef) CFErrorRef;
pub extern fn CFReadStreamOpen(stream: CFReadStreamRef) Boolean;
pub extern fn CFWriteStreamOpen(stream: CFWriteStreamRef) Boolean;
pub extern fn CFReadStreamClose(stream: CFReadStreamRef) void;
pub extern fn CFWriteStreamClose(stream: CFWriteStreamRef) void;
pub extern fn CFReadStreamHasBytesAvailable(stream: CFReadStreamRef) Boolean;
pub extern fn CFReadStreamRead(stream: CFReadStreamRef, buffer: [*c]UInt8, bufferLength: CFIndex) CFIndex;
pub extern fn CFReadStreamGetBuffer(stream: CFReadStreamRef, maxBytesToRead: CFIndex, numBytesRead: [*c]CFIndex) [*c]const UInt8;
pub extern fn CFWriteStreamCanAcceptBytes(stream: CFWriteStreamRef) Boolean;
pub extern fn CFWriteStreamWrite(stream: CFWriteStreamRef, buffer: [*c]const UInt8, bufferLength: CFIndex) CFIndex;
pub extern fn CFReadStreamCopyProperty(stream: CFReadStreamRef, propertyName: CFStreamPropertyKey) CFTypeRef;
pub extern fn CFWriteStreamCopyProperty(stream: CFWriteStreamRef, propertyName: CFStreamPropertyKey) CFTypeRef;
pub extern fn CFReadStreamSetProperty(stream: CFReadStreamRef, propertyName: CFStreamPropertyKey, propertyValue: CFTypeRef) Boolean;
pub extern fn CFWriteStreamSetProperty(stream: CFWriteStreamRef, propertyName: CFStreamPropertyKey, propertyValue: CFTypeRef) Boolean;
pub extern fn CFReadStreamSetClient(stream: CFReadStreamRef, streamEvents: CFOptionFlags, clientCB: CFReadStreamClientCallBack, clientContext: [*c]CFStreamClientContext) Boolean;
pub extern fn CFWriteStreamSetClient(stream: CFWriteStreamRef, streamEvents: CFOptionFlags, clientCB: CFWriteStreamClientCallBack, clientContext: [*c]CFStreamClientContext) Boolean;
pub extern fn CFReadStreamScheduleWithRunLoop(stream: CFReadStreamRef, runLoop: CFRunLoopRef, runLoopMode: CFRunLoopMode) void;
pub extern fn CFWriteStreamScheduleWithRunLoop(stream: CFWriteStreamRef, runLoop: CFRunLoopRef, runLoopMode: CFRunLoopMode) void;
pub extern fn CFReadStreamUnscheduleFromRunLoop(stream: CFReadStreamRef, runLoop: CFRunLoopRef, runLoopMode: CFRunLoopMode) void;
pub extern fn CFWriteStreamUnscheduleFromRunLoop(stream: CFWriteStreamRef, runLoop: CFRunLoopRef, runLoopMode: CFRunLoopMode) void;
pub extern fn CFReadStreamSetDispatchQueue(stream: CFReadStreamRef, q: dispatch_queue_t) void;
pub extern fn CFWriteStreamSetDispatchQueue(stream: CFWriteStreamRef, q: dispatch_queue_t) void;
pub extern fn CFReadStreamCopyDispatchQueue(stream: CFReadStreamRef) dispatch_queue_t;
pub extern fn CFWriteStreamCopyDispatchQueue(stream: CFWriteStreamRef) dispatch_queue_t;
pub const CFStreamErrorDomain = CFIndex;
pub const kCFStreamErrorDomainCustom = @enumToInt(enum_unnamed_161.kCFStreamErrorDomainCustom);
pub const kCFStreamErrorDomainPOSIX = @enumToInt(enum_unnamed_161.kCFStreamErrorDomainPOSIX);
pub const kCFStreamErrorDomainMacOSStatus = @enumToInt(enum_unnamed_161.kCFStreamErrorDomainMacOSStatus);
const enum_unnamed_161 = extern enum(c_int) {
    kCFStreamErrorDomainCustom = -1,
    kCFStreamErrorDomainPOSIX = 1,
    kCFStreamErrorDomainMacOSStatus = 2,
    _,
};
pub extern fn CFReadStreamGetError(stream: CFReadStreamRef) CFStreamError;
pub extern fn CFWriteStreamGetError(stream: CFWriteStreamRef) CFStreamError;
pub const CFPropertyListMutabilityOptions = CFOptionFlags;
pub const kCFPropertyListImmutable = @enumToInt(enum_unnamed_162.kCFPropertyListImmutable);
pub const kCFPropertyListMutableContainers = @enumToInt(enum_unnamed_162.kCFPropertyListMutableContainers);
pub const kCFPropertyListMutableContainersAndLeaves = @enumToInt(enum_unnamed_162.kCFPropertyListMutableContainersAndLeaves);
const enum_unnamed_162 = extern enum(c_int) {
    kCFPropertyListImmutable = 0,
    kCFPropertyListMutableContainers = 1,
    kCFPropertyListMutableContainersAndLeaves = 2,
    _,
};
pub extern fn CFPropertyListCreateFromXMLData(allocator: CFAllocatorRef, xmlData: CFDataRef, mutabilityOption: CFOptionFlags, errorString: [*c]CFStringRef) CFPropertyListRef;
pub extern fn CFPropertyListCreateXMLData(allocator: CFAllocatorRef, propertyList: CFPropertyListRef) CFDataRef;
pub extern fn CFPropertyListCreateDeepCopy(allocator: CFAllocatorRef, propertyList: CFPropertyListRef, mutabilityOption: CFOptionFlags) CFPropertyListRef;
pub const CFPropertyListFormat = CFIndex;
pub const kCFPropertyListOpenStepFormat = @enumToInt(enum_unnamed_163.kCFPropertyListOpenStepFormat);
pub const kCFPropertyListXMLFormat_v1_0 = @enumToInt(enum_unnamed_163.kCFPropertyListXMLFormat_v1_0);
pub const kCFPropertyListBinaryFormat_v1_0 = @enumToInt(enum_unnamed_163.kCFPropertyListBinaryFormat_v1_0);
const enum_unnamed_163 = extern enum(c_int) {
    kCFPropertyListOpenStepFormat = 1,
    kCFPropertyListXMLFormat_v1_0 = 100,
    kCFPropertyListBinaryFormat_v1_0 = 200,
    _,
};
pub extern fn CFPropertyListIsValid(plist: CFPropertyListRef, format: CFPropertyListFormat) Boolean;
pub extern fn CFPropertyListWriteToStream(propertyList: CFPropertyListRef, stream: CFWriteStreamRef, format: CFPropertyListFormat, errorString: [*c]CFStringRef) CFIndex;
pub extern fn CFPropertyListCreateFromStream(allocator: CFAllocatorRef, stream: CFReadStreamRef, streamLength: CFIndex, mutabilityOption: CFOptionFlags, format: [*c]CFPropertyListFormat, errorString: [*c]CFStringRef) CFPropertyListRef;
pub const kCFPropertyListReadCorruptError = @enumToInt(enum_unnamed_164.kCFPropertyListReadCorruptError);
pub const kCFPropertyListReadUnknownVersionError = @enumToInt(enum_unnamed_164.kCFPropertyListReadUnknownVersionError);
pub const kCFPropertyListReadStreamError = @enumToInt(enum_unnamed_164.kCFPropertyListReadStreamError);
pub const kCFPropertyListWriteStreamError = @enumToInt(enum_unnamed_164.kCFPropertyListWriteStreamError);
const enum_unnamed_164 = extern enum(c_int) {
    kCFPropertyListReadCorruptError = 3840,
    kCFPropertyListReadUnknownVersionError = 3841,
    kCFPropertyListReadStreamError = 3842,
    kCFPropertyListWriteStreamError = 3851,
    _,
};
pub extern fn CFPropertyListCreateWithData(allocator: CFAllocatorRef, data: CFDataRef, options: CFOptionFlags, format: [*c]CFPropertyListFormat, @"error": [*c]CFErrorRef) CFPropertyListRef;
pub extern fn CFPropertyListCreateWithStream(allocator: CFAllocatorRef, stream: CFReadStreamRef, streamLength: CFIndex, options: CFOptionFlags, format: [*c]CFPropertyListFormat, @"error": [*c]CFErrorRef) CFPropertyListRef;
pub extern fn CFPropertyListWrite(propertyList: CFPropertyListRef, stream: CFWriteStreamRef, format: CFPropertyListFormat, options: CFOptionFlags, @"error": [*c]CFErrorRef) CFIndex;
pub extern fn CFPropertyListCreateData(allocator: CFAllocatorRef, propertyList: CFPropertyListRef, format: CFPropertyListFormat, options: CFOptionFlags, @"error": [*c]CFErrorRef) CFDataRef;
pub const CFSetRetainCallBack = ?fn (CFAllocatorRef, ?*const c_void) callconv(.C) ?*const c_void;
pub const CFSetReleaseCallBack = ?fn (CFAllocatorRef, ?*const c_void) callconv(.C) void;
pub const CFSetCopyDescriptionCallBack = ?fn (?*const c_void) callconv(.C) CFStringRef;
pub const CFSetEqualCallBack = ?fn (?*const c_void, ?*const c_void) callconv(.C) Boolean;
pub const CFSetHashCallBack = ?fn (?*const c_void) callconv(.C) CFHashCode;
const struct_unnamed_165 = extern struct {
    version: CFIndex,
    retain: CFSetRetainCallBack,
    release: CFSetReleaseCallBack,
    copyDescription: CFSetCopyDescriptionCallBack,
    equal: CFSetEqualCallBack,
    hash: CFSetHashCallBack,
};
pub const CFSetCallBacks = struct_unnamed_165;
pub extern const kCFTypeSetCallBacks: CFSetCallBacks;
pub extern const kCFCopyStringSetCallBacks: CFSetCallBacks;
pub const CFSetApplierFunction = ?fn (?*const c_void, ?*c_void) callconv(.C) void;
pub const struct___CFSet = @OpaqueType();
pub const CFSetRef = ?*const struct___CFSet;
pub const CFMutableSetRef = ?*struct___CFSet;
pub extern fn CFSetGetTypeID() CFTypeID;
pub extern fn CFSetCreate(allocator: CFAllocatorRef, values: [*c]?*const c_void, numValues: CFIndex, callBacks: [*c]const CFSetCallBacks) CFSetRef;
pub extern fn CFSetCreateCopy(allocator: CFAllocatorRef, theSet: CFSetRef) CFSetRef;
pub extern fn CFSetCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex, callBacks: [*c]const CFSetCallBacks) CFMutableSetRef;
pub extern fn CFSetCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, theSet: CFSetRef) CFMutableSetRef;
pub extern fn CFSetGetCount(theSet: CFSetRef) CFIndex;
pub extern fn CFSetGetCountOfValue(theSet: CFSetRef, value: ?*const c_void) CFIndex;
pub extern fn CFSetContainsValue(theSet: CFSetRef, value: ?*const c_void) Boolean;
pub extern fn CFSetGetValue(theSet: CFSetRef, value: ?*const c_void) ?*const c_void;
pub extern fn CFSetGetValueIfPresent(theSet: CFSetRef, candidate: ?*const c_void, value: [*c]?*const c_void) Boolean;
pub extern fn CFSetGetValues(theSet: CFSetRef, values: [*c]?*const c_void) void;
pub extern fn CFSetApplyFunction(theSet: CFSetRef, applier: CFSetApplierFunction, context: ?*c_void) void;
pub extern fn CFSetAddValue(theSet: CFMutableSetRef, value: ?*const c_void) void;
pub extern fn CFSetReplaceValue(theSet: CFMutableSetRef, value: ?*const c_void) void;
pub extern fn CFSetSetValue(theSet: CFMutableSetRef, value: ?*const c_void) void;
pub extern fn CFSetRemoveValue(theSet: CFMutableSetRef, value: ?*const c_void) void;
pub extern fn CFSetRemoveAllValues(theSet: CFMutableSetRef) void;
pub const CFStringEncodings = CFIndex;
pub const kCFStringEncodingMacJapanese = @enumToInt(enum_unnamed_166.kCFStringEncodingMacJapanese);
pub const kCFStringEncodingMacChineseTrad = @enumToInt(enum_unnamed_166.kCFStringEncodingMacChineseTrad);
pub const kCFStringEncodingMacKorean = @enumToInt(enum_unnamed_166.kCFStringEncodingMacKorean);
pub const kCFStringEncodingMacArabic = @enumToInt(enum_unnamed_166.kCFStringEncodingMacArabic);
pub const kCFStringEncodingMacHebrew = @enumToInt(enum_unnamed_166.kCFStringEncodingMacHebrew);
pub const kCFStringEncodingMacGreek = @enumToInt(enum_unnamed_166.kCFStringEncodingMacGreek);
pub const kCFStringEncodingMacCyrillic = @enumToInt(enum_unnamed_166.kCFStringEncodingMacCyrillic);
pub const kCFStringEncodingMacDevanagari = @enumToInt(enum_unnamed_166.kCFStringEncodingMacDevanagari);
pub const kCFStringEncodingMacGurmukhi = @enumToInt(enum_unnamed_166.kCFStringEncodingMacGurmukhi);
pub const kCFStringEncodingMacGujarati = @enumToInt(enum_unnamed_166.kCFStringEncodingMacGujarati);
pub const kCFStringEncodingMacOriya = @enumToInt(enum_unnamed_166.kCFStringEncodingMacOriya);
pub const kCFStringEncodingMacBengali = @enumToInt(enum_unnamed_166.kCFStringEncodingMacBengali);
pub const kCFStringEncodingMacTamil = @enumToInt(enum_unnamed_166.kCFStringEncodingMacTamil);
pub const kCFStringEncodingMacTelugu = @enumToInt(enum_unnamed_166.kCFStringEncodingMacTelugu);
pub const kCFStringEncodingMacKannada = @enumToInt(enum_unnamed_166.kCFStringEncodingMacKannada);
pub const kCFStringEncodingMacMalayalam = @enumToInt(enum_unnamed_166.kCFStringEncodingMacMalayalam);
pub const kCFStringEncodingMacSinhalese = @enumToInt(enum_unnamed_166.kCFStringEncodingMacSinhalese);
pub const kCFStringEncodingMacBurmese = @enumToInt(enum_unnamed_166.kCFStringEncodingMacBurmese);
pub const kCFStringEncodingMacKhmer = @enumToInt(enum_unnamed_166.kCFStringEncodingMacKhmer);
pub const kCFStringEncodingMacThai = @enumToInt(enum_unnamed_166.kCFStringEncodingMacThai);
pub const kCFStringEncodingMacLaotian = @enumToInt(enum_unnamed_166.kCFStringEncodingMacLaotian);
pub const kCFStringEncodingMacGeorgian = @enumToInt(enum_unnamed_166.kCFStringEncodingMacGeorgian);
pub const kCFStringEncodingMacArmenian = @enumToInt(enum_unnamed_166.kCFStringEncodingMacArmenian);
pub const kCFStringEncodingMacChineseSimp = @enumToInt(enum_unnamed_166.kCFStringEncodingMacChineseSimp);
pub const kCFStringEncodingMacTibetan = @enumToInt(enum_unnamed_166.kCFStringEncodingMacTibetan);
pub const kCFStringEncodingMacMongolian = @enumToInt(enum_unnamed_166.kCFStringEncodingMacMongolian);
pub const kCFStringEncodingMacEthiopic = @enumToInt(enum_unnamed_166.kCFStringEncodingMacEthiopic);
pub const kCFStringEncodingMacCentralEurRoman = @enumToInt(enum_unnamed_166.kCFStringEncodingMacCentralEurRoman);
pub const kCFStringEncodingMacVietnamese = @enumToInt(enum_unnamed_166.kCFStringEncodingMacVietnamese);
pub const kCFStringEncodingMacExtArabic = @enumToInt(enum_unnamed_166.kCFStringEncodingMacExtArabic);
pub const kCFStringEncodingMacSymbol = @enumToInt(enum_unnamed_166.kCFStringEncodingMacSymbol);
pub const kCFStringEncodingMacDingbats = @enumToInt(enum_unnamed_166.kCFStringEncodingMacDingbats);
pub const kCFStringEncodingMacTurkish = @enumToInt(enum_unnamed_166.kCFStringEncodingMacTurkish);
pub const kCFStringEncodingMacCroatian = @enumToInt(enum_unnamed_166.kCFStringEncodingMacCroatian);
pub const kCFStringEncodingMacIcelandic = @enumToInt(enum_unnamed_166.kCFStringEncodingMacIcelandic);
pub const kCFStringEncodingMacRomanian = @enumToInt(enum_unnamed_166.kCFStringEncodingMacRomanian);
pub const kCFStringEncodingMacCeltic = @enumToInt(enum_unnamed_166.kCFStringEncodingMacCeltic);
pub const kCFStringEncodingMacGaelic = @enumToInt(enum_unnamed_166.kCFStringEncodingMacGaelic);
pub const kCFStringEncodingMacFarsi = @enumToInt(enum_unnamed_166.kCFStringEncodingMacFarsi);
pub const kCFStringEncodingMacUkrainian = @enumToInt(enum_unnamed_166.kCFStringEncodingMacUkrainian);
pub const kCFStringEncodingMacInuit = @enumToInt(enum_unnamed_166.kCFStringEncodingMacInuit);
pub const kCFStringEncodingMacVT100 = @enumToInt(enum_unnamed_166.kCFStringEncodingMacVT100);
pub const kCFStringEncodingMacHFS = @enumToInt(enum_unnamed_166.kCFStringEncodingMacHFS);
pub const kCFStringEncodingISOLatin2 = @enumToInt(enum_unnamed_166.kCFStringEncodingISOLatin2);
pub const kCFStringEncodingISOLatin3 = @enumToInt(enum_unnamed_166.kCFStringEncodingISOLatin3);
pub const kCFStringEncodingISOLatin4 = @enumToInt(enum_unnamed_166.kCFStringEncodingISOLatin4);
pub const kCFStringEncodingISOLatinCyrillic = @enumToInt(enum_unnamed_166.kCFStringEncodingISOLatinCyrillic);
pub const kCFStringEncodingISOLatinArabic = @enumToInt(enum_unnamed_166.kCFStringEncodingISOLatinArabic);
pub const kCFStringEncodingISOLatinGreek = @enumToInt(enum_unnamed_166.kCFStringEncodingISOLatinGreek);
pub const kCFStringEncodingISOLatinHebrew = @enumToInt(enum_unnamed_166.kCFStringEncodingISOLatinHebrew);
pub const kCFStringEncodingISOLatin5 = @enumToInt(enum_unnamed_166.kCFStringEncodingISOLatin5);
pub const kCFStringEncodingISOLatin6 = @enumToInt(enum_unnamed_166.kCFStringEncodingISOLatin6);
pub const kCFStringEncodingISOLatinThai = @enumToInt(enum_unnamed_166.kCFStringEncodingISOLatinThai);
pub const kCFStringEncodingISOLatin7 = @enumToInt(enum_unnamed_166.kCFStringEncodingISOLatin7);
pub const kCFStringEncodingISOLatin8 = @enumToInt(enum_unnamed_166.kCFStringEncodingISOLatin8);
pub const kCFStringEncodingISOLatin9 = @enumToInt(enum_unnamed_166.kCFStringEncodingISOLatin9);
pub const kCFStringEncodingISOLatin10 = @enumToInt(enum_unnamed_166.kCFStringEncodingISOLatin10);
pub const kCFStringEncodingDOSLatinUS = @enumToInt(enum_unnamed_166.kCFStringEncodingDOSLatinUS);
pub const kCFStringEncodingDOSGreek = @enumToInt(enum_unnamed_166.kCFStringEncodingDOSGreek);
pub const kCFStringEncodingDOSBalticRim = @enumToInt(enum_unnamed_166.kCFStringEncodingDOSBalticRim);
pub const kCFStringEncodingDOSLatin1 = @enumToInt(enum_unnamed_166.kCFStringEncodingDOSLatin1);
pub const kCFStringEncodingDOSGreek1 = @enumToInt(enum_unnamed_166.kCFStringEncodingDOSGreek1);
pub const kCFStringEncodingDOSLatin2 = @enumToInt(enum_unnamed_166.kCFStringEncodingDOSLatin2);
pub const kCFStringEncodingDOSCyrillic = @enumToInt(enum_unnamed_166.kCFStringEncodingDOSCyrillic);
pub const kCFStringEncodingDOSTurkish = @enumToInt(enum_unnamed_166.kCFStringEncodingDOSTurkish);
pub const kCFStringEncodingDOSPortuguese = @enumToInt(enum_unnamed_166.kCFStringEncodingDOSPortuguese);
pub const kCFStringEncodingDOSIcelandic = @enumToInt(enum_unnamed_166.kCFStringEncodingDOSIcelandic);
pub const kCFStringEncodingDOSHebrew = @enumToInt(enum_unnamed_166.kCFStringEncodingDOSHebrew);
pub const kCFStringEncodingDOSCanadianFrench = @enumToInt(enum_unnamed_166.kCFStringEncodingDOSCanadianFrench);
pub const kCFStringEncodingDOSArabic = @enumToInt(enum_unnamed_166.kCFStringEncodingDOSArabic);
pub const kCFStringEncodingDOSNordic = @enumToInt(enum_unnamed_166.kCFStringEncodingDOSNordic);
pub const kCFStringEncodingDOSRussian = @enumToInt(enum_unnamed_166.kCFStringEncodingDOSRussian);
pub const kCFStringEncodingDOSGreek2 = @enumToInt(enum_unnamed_166.kCFStringEncodingDOSGreek2);
pub const kCFStringEncodingDOSThai = @enumToInt(enum_unnamed_166.kCFStringEncodingDOSThai);
pub const kCFStringEncodingDOSJapanese = @enumToInt(enum_unnamed_166.kCFStringEncodingDOSJapanese);
pub const kCFStringEncodingDOSChineseSimplif = @enumToInt(enum_unnamed_166.kCFStringEncodingDOSChineseSimplif);
pub const kCFStringEncodingDOSKorean = @enumToInt(enum_unnamed_166.kCFStringEncodingDOSKorean);
pub const kCFStringEncodingDOSChineseTrad = @enumToInt(enum_unnamed_166.kCFStringEncodingDOSChineseTrad);
pub const kCFStringEncodingWindowsLatin2 = @enumToInt(enum_unnamed_166.kCFStringEncodingWindowsLatin2);
pub const kCFStringEncodingWindowsCyrillic = @enumToInt(enum_unnamed_166.kCFStringEncodingWindowsCyrillic);
pub const kCFStringEncodingWindowsGreek = @enumToInt(enum_unnamed_166.kCFStringEncodingWindowsGreek);
pub const kCFStringEncodingWindowsLatin5 = @enumToInt(enum_unnamed_166.kCFStringEncodingWindowsLatin5);
pub const kCFStringEncodingWindowsHebrew = @enumToInt(enum_unnamed_166.kCFStringEncodingWindowsHebrew);
pub const kCFStringEncodingWindowsArabic = @enumToInt(enum_unnamed_166.kCFStringEncodingWindowsArabic);
pub const kCFStringEncodingWindowsBalticRim = @enumToInt(enum_unnamed_166.kCFStringEncodingWindowsBalticRim);
pub const kCFStringEncodingWindowsVietnamese = @enumToInt(enum_unnamed_166.kCFStringEncodingWindowsVietnamese);
pub const kCFStringEncodingWindowsKoreanJohab = @enumToInt(enum_unnamed_166.kCFStringEncodingWindowsKoreanJohab);
pub const kCFStringEncodingANSEL = @enumToInt(enum_unnamed_166.kCFStringEncodingANSEL);
pub const kCFStringEncodingJIS_X0201_76 = @enumToInt(enum_unnamed_166.kCFStringEncodingJIS_X0201_76);
pub const kCFStringEncodingJIS_X0208_83 = @enumToInt(enum_unnamed_166.kCFStringEncodingJIS_X0208_83);
pub const kCFStringEncodingJIS_X0208_90 = @enumToInt(enum_unnamed_166.kCFStringEncodingJIS_X0208_90);
pub const kCFStringEncodingJIS_X0212_90 = @enumToInt(enum_unnamed_166.kCFStringEncodingJIS_X0212_90);
pub const kCFStringEncodingJIS_C6226_78 = @enumToInt(enum_unnamed_166.kCFStringEncodingJIS_C6226_78);
pub const kCFStringEncodingShiftJIS_X0213 = @enumToInt(enum_unnamed_166.kCFStringEncodingShiftJIS_X0213);
pub const kCFStringEncodingShiftJIS_X0213_MenKuTen = @enumToInt(enum_unnamed_166.kCFStringEncodingShiftJIS_X0213_MenKuTen);
pub const kCFStringEncodingGB_2312_80 = @enumToInt(enum_unnamed_166.kCFStringEncodingGB_2312_80);
pub const kCFStringEncodingGBK_95 = @enumToInt(enum_unnamed_166.kCFStringEncodingGBK_95);
pub const kCFStringEncodingGB_18030_2000 = @enumToInt(enum_unnamed_166.kCFStringEncodingGB_18030_2000);
pub const kCFStringEncodingKSC_5601_87 = @enumToInt(enum_unnamed_166.kCFStringEncodingKSC_5601_87);
pub const kCFStringEncodingKSC_5601_92_Johab = @enumToInt(enum_unnamed_166.kCFStringEncodingKSC_5601_92_Johab);
pub const kCFStringEncodingCNS_11643_92_P1 = @enumToInt(enum_unnamed_166.kCFStringEncodingCNS_11643_92_P1);
pub const kCFStringEncodingCNS_11643_92_P2 = @enumToInt(enum_unnamed_166.kCFStringEncodingCNS_11643_92_P2);
pub const kCFStringEncodingCNS_11643_92_P3 = @enumToInt(enum_unnamed_166.kCFStringEncodingCNS_11643_92_P3);
pub const kCFStringEncodingISO_2022_JP = @enumToInt(enum_unnamed_166.kCFStringEncodingISO_2022_JP);
pub const kCFStringEncodingISO_2022_JP_2 = @enumToInt(enum_unnamed_166.kCFStringEncodingISO_2022_JP_2);
pub const kCFStringEncodingISO_2022_JP_1 = @enumToInt(enum_unnamed_166.kCFStringEncodingISO_2022_JP_1);
pub const kCFStringEncodingISO_2022_JP_3 = @enumToInt(enum_unnamed_166.kCFStringEncodingISO_2022_JP_3);
pub const kCFStringEncodingISO_2022_CN = @enumToInt(enum_unnamed_166.kCFStringEncodingISO_2022_CN);
pub const kCFStringEncodingISO_2022_CN_EXT = @enumToInt(enum_unnamed_166.kCFStringEncodingISO_2022_CN_EXT);
pub const kCFStringEncodingISO_2022_KR = @enumToInt(enum_unnamed_166.kCFStringEncodingISO_2022_KR);
pub const kCFStringEncodingEUC_JP = @enumToInt(enum_unnamed_166.kCFStringEncodingEUC_JP);
pub const kCFStringEncodingEUC_CN = @enumToInt(enum_unnamed_166.kCFStringEncodingEUC_CN);
pub const kCFStringEncodingEUC_TW = @enumToInt(enum_unnamed_166.kCFStringEncodingEUC_TW);
pub const kCFStringEncodingEUC_KR = @enumToInt(enum_unnamed_166.kCFStringEncodingEUC_KR);
pub const kCFStringEncodingShiftJIS = @enumToInt(enum_unnamed_166.kCFStringEncodingShiftJIS);
pub const kCFStringEncodingKOI8_R = @enumToInt(enum_unnamed_166.kCFStringEncodingKOI8_R);
pub const kCFStringEncodingBig5 = @enumToInt(enum_unnamed_166.kCFStringEncodingBig5);
pub const kCFStringEncodingMacRomanLatin1 = @enumToInt(enum_unnamed_166.kCFStringEncodingMacRomanLatin1);
pub const kCFStringEncodingHZ_GB_2312 = @enumToInt(enum_unnamed_166.kCFStringEncodingHZ_GB_2312);
pub const kCFStringEncodingBig5_HKSCS_1999 = @enumToInt(enum_unnamed_166.kCFStringEncodingBig5_HKSCS_1999);
pub const kCFStringEncodingVISCII = @enumToInt(enum_unnamed_166.kCFStringEncodingVISCII);
pub const kCFStringEncodingKOI8_U = @enumToInt(enum_unnamed_166.kCFStringEncodingKOI8_U);
pub const kCFStringEncodingBig5_E = @enumToInt(enum_unnamed_166.kCFStringEncodingBig5_E);
pub const kCFStringEncodingNextStepJapanese = @enumToInt(enum_unnamed_166.kCFStringEncodingNextStepJapanese);
pub const kCFStringEncodingEBCDIC_US = @enumToInt(enum_unnamed_166.kCFStringEncodingEBCDIC_US);
pub const kCFStringEncodingEBCDIC_CP037 = @enumToInt(enum_unnamed_166.kCFStringEncodingEBCDIC_CP037);
pub const kCFStringEncodingUTF7 = @enumToInt(enum_unnamed_166.kCFStringEncodingUTF7);
pub const kCFStringEncodingUTF7_IMAP = @enumToInt(enum_unnamed_166.kCFStringEncodingUTF7_IMAP);
pub const kCFStringEncodingShiftJIS_X0213_00 = @enumToInt(enum_unnamed_166.kCFStringEncodingShiftJIS_X0213_00);
const enum_unnamed_166 = extern enum(c_int) {
    kCFStringEncodingMacJapanese = 1,
    kCFStringEncodingMacChineseTrad = 2,
    kCFStringEncodingMacKorean = 3,
    kCFStringEncodingMacArabic = 4,
    kCFStringEncodingMacHebrew = 5,
    kCFStringEncodingMacGreek = 6,
    kCFStringEncodingMacCyrillic = 7,
    kCFStringEncodingMacDevanagari = 9,
    kCFStringEncodingMacGurmukhi = 10,
    kCFStringEncodingMacGujarati = 11,
    kCFStringEncodingMacOriya = 12,
    kCFStringEncodingMacBengali = 13,
    kCFStringEncodingMacTamil = 14,
    kCFStringEncodingMacTelugu = 15,
    kCFStringEncodingMacKannada = 16,
    kCFStringEncodingMacMalayalam = 17,
    kCFStringEncodingMacSinhalese = 18,
    kCFStringEncodingMacBurmese = 19,
    kCFStringEncodingMacKhmer = 20,
    kCFStringEncodingMacThai = 21,
    kCFStringEncodingMacLaotian = 22,
    kCFStringEncodingMacGeorgian = 23,
    kCFStringEncodingMacArmenian = 24,
    kCFStringEncodingMacChineseSimp = 25,
    kCFStringEncodingMacTibetan = 26,
    kCFStringEncodingMacMongolian = 27,
    kCFStringEncodingMacEthiopic = 28,
    kCFStringEncodingMacCentralEurRoman = 29,
    kCFStringEncodingMacVietnamese = 30,
    kCFStringEncodingMacExtArabic = 31,
    kCFStringEncodingMacSymbol = 33,
    kCFStringEncodingMacDingbats = 34,
    kCFStringEncodingMacTurkish = 35,
    kCFStringEncodingMacCroatian = 36,
    kCFStringEncodingMacIcelandic = 37,
    kCFStringEncodingMacRomanian = 38,
    kCFStringEncodingMacCeltic = 39,
    kCFStringEncodingMacGaelic = 40,
    kCFStringEncodingMacFarsi = 140,
    kCFStringEncodingMacUkrainian = 152,
    kCFStringEncodingMacInuit = 236,
    kCFStringEncodingMacVT100 = 252,
    kCFStringEncodingMacHFS = 255,
    kCFStringEncodingISOLatin2 = 514,
    kCFStringEncodingISOLatin3 = 515,
    kCFStringEncodingISOLatin4 = 516,
    kCFStringEncodingISOLatinCyrillic = 517,
    kCFStringEncodingISOLatinArabic = 518,
    kCFStringEncodingISOLatinGreek = 519,
    kCFStringEncodingISOLatinHebrew = 520,
    kCFStringEncodingISOLatin5 = 521,
    kCFStringEncodingISOLatin6 = 522,
    kCFStringEncodingISOLatinThai = 523,
    kCFStringEncodingISOLatin7 = 525,
    kCFStringEncodingISOLatin8 = 526,
    kCFStringEncodingISOLatin9 = 527,
    kCFStringEncodingISOLatin10 = 528,
    kCFStringEncodingDOSLatinUS = 1024,
    kCFStringEncodingDOSGreek = 1029,
    kCFStringEncodingDOSBalticRim = 1030,
    kCFStringEncodingDOSLatin1 = 1040,
    kCFStringEncodingDOSGreek1 = 1041,
    kCFStringEncodingDOSLatin2 = 1042,
    kCFStringEncodingDOSCyrillic = 1043,
    kCFStringEncodingDOSTurkish = 1044,
    kCFStringEncodingDOSPortuguese = 1045,
    kCFStringEncodingDOSIcelandic = 1046,
    kCFStringEncodingDOSHebrew = 1047,
    kCFStringEncodingDOSCanadianFrench = 1048,
    kCFStringEncodingDOSArabic = 1049,
    kCFStringEncodingDOSNordic = 1050,
    kCFStringEncodingDOSRussian = 1051,
    kCFStringEncodingDOSGreek2 = 1052,
    kCFStringEncodingDOSThai = 1053,
    kCFStringEncodingDOSJapanese = 1056,
    kCFStringEncodingDOSChineseSimplif = 1057,
    kCFStringEncodingDOSKorean = 1058,
    kCFStringEncodingDOSChineseTrad = 1059,
    kCFStringEncodingWindowsLatin2 = 1281,
    kCFStringEncodingWindowsCyrillic = 1282,
    kCFStringEncodingWindowsGreek = 1283,
    kCFStringEncodingWindowsLatin5 = 1284,
    kCFStringEncodingWindowsHebrew = 1285,
    kCFStringEncodingWindowsArabic = 1286,
    kCFStringEncodingWindowsBalticRim = 1287,
    kCFStringEncodingWindowsVietnamese = 1288,
    kCFStringEncodingWindowsKoreanJohab = 1296,
    kCFStringEncodingANSEL = 1537,
    kCFStringEncodingJIS_X0201_76 = 1568,
    kCFStringEncodingJIS_X0208_83 = 1569,
    kCFStringEncodingJIS_X0208_90 = 1570,
    kCFStringEncodingJIS_X0212_90 = 1571,
    kCFStringEncodingJIS_C6226_78 = 1572,
    kCFStringEncodingShiftJIS_X0213 = 1576,
    kCFStringEncodingShiftJIS_X0213_MenKuTen = 1577,
    kCFStringEncodingGB_2312_80 = 1584,
    kCFStringEncodingGBK_95 = 1585,
    kCFStringEncodingGB_18030_2000 = 1586,
    kCFStringEncodingKSC_5601_87 = 1600,
    kCFStringEncodingKSC_5601_92_Johab = 1601,
    kCFStringEncodingCNS_11643_92_P1 = 1617,
    kCFStringEncodingCNS_11643_92_P2 = 1618,
    kCFStringEncodingCNS_11643_92_P3 = 1619,
    kCFStringEncodingISO_2022_JP = 2080,
    kCFStringEncodingISO_2022_JP_2 = 2081,
    kCFStringEncodingISO_2022_JP_1 = 2082,
    kCFStringEncodingISO_2022_JP_3 = 2083,
    kCFStringEncodingISO_2022_CN = 2096,
    kCFStringEncodingISO_2022_CN_EXT = 2097,
    kCFStringEncodingISO_2022_KR = 2112,
    kCFStringEncodingEUC_JP = 2336,
    kCFStringEncodingEUC_CN = 2352,
    kCFStringEncodingEUC_TW = 2353,
    kCFStringEncodingEUC_KR = 2368,
    kCFStringEncodingShiftJIS = 2561,
    kCFStringEncodingKOI8_R = 2562,
    kCFStringEncodingBig5 = 2563,
    kCFStringEncodingMacRomanLatin1 = 2564,
    kCFStringEncodingHZ_GB_2312 = 2565,
    kCFStringEncodingBig5_HKSCS_1999 = 2566,
    kCFStringEncodingVISCII = 2567,
    kCFStringEncodingKOI8_U = 2568,
    kCFStringEncodingBig5_E = 2569,
    kCFStringEncodingNextStepJapanese = 2818,
    kCFStringEncodingEBCDIC_US = 3073,
    kCFStringEncodingEBCDIC_CP037 = 3074,
    kCFStringEncodingUTF7 = 67109120,
    kCFStringEncodingUTF7_IMAP = 2576,
    kCFStringEncodingShiftJIS_X0213_00 = 1576,
    _,
};
pub const CFTreeRetainCallBack = ?fn (?*const c_void) callconv(.C) ?*const c_void;
pub const CFTreeReleaseCallBack = ?fn (?*const c_void) callconv(.C) void;
pub const CFTreeCopyDescriptionCallBack = ?fn (?*const c_void) callconv(.C) CFStringRef;
const struct_unnamed_167 = extern struct {
    version: CFIndex,
    info: ?*c_void,
    retain: CFTreeRetainCallBack,
    release: CFTreeReleaseCallBack,
    copyDescription: CFTreeCopyDescriptionCallBack,
};
pub const CFTreeContext = struct_unnamed_167;
pub const CFTreeApplierFunction = ?fn (?*const c_void, ?*c_void) callconv(.C) void;
pub const struct___CFTree = @OpaqueType();
pub const CFTreeRef = ?*struct___CFTree;
pub extern fn CFTreeGetTypeID() CFTypeID;
pub extern fn CFTreeCreate(allocator: CFAllocatorRef, context: [*c]const CFTreeContext) CFTreeRef;
pub extern fn CFTreeGetParent(tree: CFTreeRef) CFTreeRef;
pub extern fn CFTreeGetNextSibling(tree: CFTreeRef) CFTreeRef;
pub extern fn CFTreeGetFirstChild(tree: CFTreeRef) CFTreeRef;
pub extern fn CFTreeGetContext(tree: CFTreeRef, context: [*c]CFTreeContext) void;
pub extern fn CFTreeGetChildCount(tree: CFTreeRef) CFIndex;
pub extern fn CFTreeGetChildAtIndex(tree: CFTreeRef, idx: CFIndex) CFTreeRef;
pub extern fn CFTreeGetChildren(tree: CFTreeRef, children: [*c]CFTreeRef) void;
pub extern fn CFTreeApplyFunctionToChildren(tree: CFTreeRef, applier: CFTreeApplierFunction, context: ?*c_void) void;
pub extern fn CFTreeFindRoot(tree: CFTreeRef) CFTreeRef;
pub extern fn CFTreeSetContext(tree: CFTreeRef, context: [*c]const CFTreeContext) void;
pub extern fn CFTreePrependChild(tree: CFTreeRef, newChild: CFTreeRef) void;
pub extern fn CFTreeAppendChild(tree: CFTreeRef, newChild: CFTreeRef) void;
pub extern fn CFTreeInsertSibling(tree: CFTreeRef, newSibling: CFTreeRef) void;
pub extern fn CFTreeRemove(tree: CFTreeRef) void;
pub extern fn CFTreeRemoveAllChildren(tree: CFTreeRef) void;
pub extern fn CFTreeSortChildren(tree: CFTreeRef, comparator: CFComparatorFunction, context: ?*c_void) void;
pub extern fn CFURLCreateDataAndPropertiesFromResource(alloc: CFAllocatorRef, url: CFURLRef, resourceData: [*c]CFDataRef, properties: [*c]CFDictionaryRef, desiredProperties: CFArrayRef, errorCode: [*c]SInt32) Boolean;
pub extern fn CFURLWriteDataAndPropertiesToResource(url: CFURLRef, dataToWrite: CFDataRef, propertiesToWrite: CFDictionaryRef, errorCode: [*c]SInt32) Boolean;
pub extern fn CFURLDestroyResource(url: CFURLRef, errorCode: [*c]SInt32) Boolean;
pub extern fn CFURLCreatePropertyFromResource(alloc: CFAllocatorRef, url: CFURLRef, property: CFStringRef, errorCode: [*c]SInt32) CFTypeRef;
pub const CFURLError = CFIndex;
pub const kCFURLUnknownError = @enumToInt(enum_unnamed_168.kCFURLUnknownError);
pub const kCFURLUnknownSchemeError = @enumToInt(enum_unnamed_168.kCFURLUnknownSchemeError);
pub const kCFURLResourceNotFoundError = @enumToInt(enum_unnamed_168.kCFURLResourceNotFoundError);
pub const kCFURLResourceAccessViolationError = @enumToInt(enum_unnamed_168.kCFURLResourceAccessViolationError);
pub const kCFURLRemoteHostUnavailableError = @enumToInt(enum_unnamed_168.kCFURLRemoteHostUnavailableError);
pub const kCFURLImproperArgumentsError = @enumToInt(enum_unnamed_168.kCFURLImproperArgumentsError);
pub const kCFURLUnknownPropertyKeyError = @enumToInt(enum_unnamed_168.kCFURLUnknownPropertyKeyError);
pub const kCFURLPropertyKeyUnavailableError = @enumToInt(enum_unnamed_168.kCFURLPropertyKeyUnavailableError);
pub const kCFURLTimeoutError = @enumToInt(enum_unnamed_168.kCFURLTimeoutError);
const enum_unnamed_168 = extern enum(c_int) {
    kCFURLUnknownError = -10,
    kCFURLUnknownSchemeError = -11,
    kCFURLResourceNotFoundError = -12,
    kCFURLResourceAccessViolationError = -13,
    kCFURLRemoteHostUnavailableError = -14,
    kCFURLImproperArgumentsError = -15,
    kCFURLUnknownPropertyKeyError = -16,
    kCFURLPropertyKeyUnavailableError = -17,
    kCFURLTimeoutError = -18,
    _,
};
pub extern const kCFURLFileExists: CFStringRef;
pub extern const kCFURLFileDirectoryContents: CFStringRef;
pub extern const kCFURLFileLength: CFStringRef;
pub extern const kCFURLFileLastModificationTime: CFStringRef;
pub extern const kCFURLFilePOSIXMode: CFStringRef;
pub extern const kCFURLFileOwnerID: CFStringRef;
pub extern const kCFURLHTTPStatusCode: CFStringRef;
pub extern const kCFURLHTTPStatusLine: CFStringRef;
pub const struct___CFUUID = @OpaqueType();
pub const CFUUIDRef = ?*const struct___CFUUID;
const struct_unnamed_169 = extern struct {
    byte0: UInt8,
    byte1: UInt8,
    byte2: UInt8,
    byte3: UInt8,
    byte4: UInt8,
    byte5: UInt8,
    byte6: UInt8,
    byte7: UInt8,
    byte8: UInt8,
    byte9: UInt8,
    byte10: UInt8,
    byte11: UInt8,
    byte12: UInt8,
    byte13: UInt8,
    byte14: UInt8,
    byte15: UInt8,
};
pub const CFUUIDBytes = struct_unnamed_169;
pub extern fn CFUUIDGetTypeID() CFTypeID;
pub extern fn CFUUIDCreate(alloc: CFAllocatorRef) CFUUIDRef;
pub extern fn CFUUIDCreateWithBytes(alloc: CFAllocatorRef, byte0: UInt8, byte1: UInt8, byte2: UInt8, byte3: UInt8, byte4: UInt8, byte5: UInt8, byte6: UInt8, byte7: UInt8, byte8: UInt8, byte9: UInt8, byte10: UInt8, byte11: UInt8, byte12: UInt8, byte13: UInt8, byte14: UInt8, byte15: UInt8) CFUUIDRef;
pub extern fn CFUUIDCreateFromString(alloc: CFAllocatorRef, uuidStr: CFStringRef) CFUUIDRef;
pub extern fn CFUUIDCreateString(alloc: CFAllocatorRef, uuid: CFUUIDRef) CFStringRef;
pub extern fn CFUUIDGetConstantUUIDWithBytes(alloc: CFAllocatorRef, byte0: UInt8, byte1: UInt8, byte2: UInt8, byte3: UInt8, byte4: UInt8, byte5: UInt8, byte6: UInt8, byte7: UInt8, byte8: UInt8, byte9: UInt8, byte10: UInt8, byte11: UInt8, byte12: UInt8, byte13: UInt8, byte14: UInt8, byte15: UInt8) CFUUIDRef;
pub extern fn CFUUIDGetUUIDBytes(uuid: CFUUIDRef) CFUUIDBytes;
pub extern fn CFUUIDCreateFromUUIDBytes(alloc: CFAllocatorRef, bytes: CFUUIDBytes) CFUUIDRef;
pub extern fn CFCopyHomeDirectoryURL() CFURLRef;
pub const struct___CFBundle = @OpaqueType();
pub const CFBundleRef = ?*struct___CFBundle;
pub const CFPlugInRef = ?*struct___CFBundle;
pub extern const kCFBundleInfoDictionaryVersionKey: CFStringRef;
pub extern const kCFBundleExecutableKey: CFStringRef;
pub extern const kCFBundleIdentifierKey: CFStringRef;
pub extern const kCFBundleVersionKey: CFStringRef;
pub extern const kCFBundleDevelopmentRegionKey: CFStringRef;
pub extern const kCFBundleNameKey: CFStringRef;
pub extern const kCFBundleLocalizationsKey: CFStringRef;
pub extern fn CFBundleGetMainBundle() CFBundleRef;
pub extern fn CFBundleGetBundleWithIdentifier(bundleID: CFStringRef) CFBundleRef;
pub extern fn CFBundleGetAllBundles() CFArrayRef;
pub extern fn CFBundleGetTypeID() CFTypeID;
pub extern fn CFBundleCreate(allocator: CFAllocatorRef, bundleURL: CFURLRef) CFBundleRef;
pub extern fn CFBundleCreateBundlesFromDirectory(allocator: CFAllocatorRef, directoryURL: CFURLRef, bundleType: CFStringRef) CFArrayRef;
pub extern fn CFBundleCopyBundleURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleGetValueForInfoDictionaryKey(bundle: CFBundleRef, key: CFStringRef) CFTypeRef;
pub extern fn CFBundleGetInfoDictionary(bundle: CFBundleRef) CFDictionaryRef;
pub extern fn CFBundleGetLocalInfoDictionary(bundle: CFBundleRef) CFDictionaryRef;
pub extern fn CFBundleGetPackageInfo(bundle: CFBundleRef, packageType: [*c]UInt32, packageCreator: [*c]UInt32) void;
pub extern fn CFBundleGetIdentifier(bundle: CFBundleRef) CFStringRef;
pub extern fn CFBundleGetVersionNumber(bundle: CFBundleRef) UInt32;
pub extern fn CFBundleGetDevelopmentRegion(bundle: CFBundleRef) CFStringRef;
pub extern fn CFBundleCopySupportFilesDirectoryURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopyResourcesDirectoryURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopyPrivateFrameworksURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopySharedFrameworksURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopySharedSupportURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopyBuiltInPlugInsURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopyInfoDictionaryInDirectory(bundleURL: CFURLRef) CFDictionaryRef;
pub extern fn CFBundleGetPackageInfoInDirectory(url: CFURLRef, packageType: [*c]UInt32, packageCreator: [*c]UInt32) Boolean;
pub extern fn CFBundleCopyResourceURL(bundle: CFBundleRef, resourceName: CFStringRef, resourceType: CFStringRef, subDirName: CFStringRef) CFURLRef;
pub extern fn CFBundleCopyResourceURLsOfType(bundle: CFBundleRef, resourceType: CFStringRef, subDirName: CFStringRef) CFArrayRef;
pub extern fn CFBundleCopyLocalizedString(bundle: CFBundleRef, key: CFStringRef, value: CFStringRef, tableName: CFStringRef) CFStringRef;
pub extern fn CFBundleCopyResourceURLInDirectory(bundleURL: CFURLRef, resourceName: CFStringRef, resourceType: CFStringRef, subDirName: CFStringRef) CFURLRef;
pub extern fn CFBundleCopyResourceURLsOfTypeInDirectory(bundleURL: CFURLRef, resourceType: CFStringRef, subDirName: CFStringRef) CFArrayRef;
pub extern fn CFBundleCopyBundleLocalizations(bundle: CFBundleRef) CFArrayRef;
pub extern fn CFBundleCopyPreferredLocalizationsFromArray(locArray: CFArrayRef) CFArrayRef;
pub extern fn CFBundleCopyLocalizationsForPreferences(locArray: CFArrayRef, prefArray: CFArrayRef) CFArrayRef;
pub extern fn CFBundleCopyResourceURLForLocalization(bundle: CFBundleRef, resourceName: CFStringRef, resourceType: CFStringRef, subDirName: CFStringRef, localizationName: CFStringRef) CFURLRef;
pub extern fn CFBundleCopyResourceURLsOfTypeForLocalization(bundle: CFBundleRef, resourceType: CFStringRef, subDirName: CFStringRef, localizationName: CFStringRef) CFArrayRef;
pub extern fn CFBundleCopyInfoDictionaryForURL(url: CFURLRef) CFDictionaryRef;
pub extern fn CFBundleCopyLocalizationsForURL(url: CFURLRef) CFArrayRef;
pub extern fn CFBundleCopyExecutableArchitecturesForURL(url: CFURLRef) CFArrayRef;
pub extern fn CFBundleCopyExecutableURL(bundle: CFBundleRef) CFURLRef;
pub const kCFBundleExecutableArchitectureI386 = @enumToInt(enum_unnamed_170.kCFBundleExecutableArchitectureI386);
pub const kCFBundleExecutableArchitecturePPC = @enumToInt(enum_unnamed_170.kCFBundleExecutableArchitecturePPC);
pub const kCFBundleExecutableArchitectureX86_64 = @enumToInt(enum_unnamed_170.kCFBundleExecutableArchitectureX86_64);
pub const kCFBundleExecutableArchitecturePPC64 = @enumToInt(enum_unnamed_170.kCFBundleExecutableArchitecturePPC64);
const enum_unnamed_170 = extern enum(c_int) {
    kCFBundleExecutableArchitectureI386 = 7,
    kCFBundleExecutableArchitecturePPC = 18,
    kCFBundleExecutableArchitectureX86_64 = 16777223,
    kCFBundleExecutableArchitecturePPC64 = 16777234,
    _,
};
pub extern fn CFBundleCopyExecutableArchitectures(bundle: CFBundleRef) CFArrayRef;
pub extern fn CFBundlePreflightExecutable(bundle: CFBundleRef, @"error": [*c]CFErrorRef) Boolean;
pub extern fn CFBundleLoadExecutableAndReturnError(bundle: CFBundleRef, @"error": [*c]CFErrorRef) Boolean;
pub extern fn CFBundleLoadExecutable(bundle: CFBundleRef) Boolean;
pub extern fn CFBundleIsExecutableLoaded(bundle: CFBundleRef) Boolean;
pub extern fn CFBundleUnloadExecutable(bundle: CFBundleRef) void;
pub extern fn CFBundleGetFunctionPointerForName(bundle: CFBundleRef, functionName: CFStringRef) ?*c_void;
pub extern fn CFBundleGetFunctionPointersForNames(bundle: CFBundleRef, functionNames: CFArrayRef, ftbl: [*c]?*c_void) void;
pub extern fn CFBundleGetDataPointerForName(bundle: CFBundleRef, symbolName: CFStringRef) ?*c_void;
pub extern fn CFBundleGetDataPointersForNames(bundle: CFBundleRef, symbolNames: CFArrayRef, stbl: [*c]?*c_void) void;
pub extern fn CFBundleCopyAuxiliaryExecutableURL(bundle: CFBundleRef, executableName: CFStringRef) CFURLRef;
pub extern fn CFBundleGetPlugIn(bundle: CFBundleRef) CFPlugInRef;
pub const CFBundleRefNum = c_int;
pub extern fn CFBundleOpenBundleResourceMap(bundle: CFBundleRef) CFBundleRefNum;
pub extern fn CFBundleOpenBundleResourceFiles(bundle: CFBundleRef, refNum: [*c]CFBundleRefNum, localizedRefNum: [*c]CFBundleRefNum) SInt32;
pub extern fn CFBundleCloseBundleResourceMap(bundle: CFBundleRef, refNum: CFBundleRefNum) void;
pub const struct___CFMessagePort = @OpaqueType();
pub const CFMessagePortRef = ?*struct___CFMessagePort;
pub const kCFMessagePortSuccess = @enumToInt(enum_unnamed_171.kCFMessagePortSuccess);
pub const kCFMessagePortSendTimeout = @enumToInt(enum_unnamed_171.kCFMessagePortSendTimeout);
pub const kCFMessagePortReceiveTimeout = @enumToInt(enum_unnamed_171.kCFMessagePortReceiveTimeout);
pub const kCFMessagePortIsInvalid = @enumToInt(enum_unnamed_171.kCFMessagePortIsInvalid);
pub const kCFMessagePortTransportError = @enumToInt(enum_unnamed_171.kCFMessagePortTransportError);
pub const kCFMessagePortBecameInvalidError = @enumToInt(enum_unnamed_171.kCFMessagePortBecameInvalidError);
const enum_unnamed_171 = extern enum(c_int) {
    kCFMessagePortSuccess = 0,
    kCFMessagePortSendTimeout = -1,
    kCFMessagePortReceiveTimeout = -2,
    kCFMessagePortIsInvalid = -3,
    kCFMessagePortTransportError = -4,
    kCFMessagePortBecameInvalidError = -5,
    _,
};
const struct_unnamed_172 = extern struct {
    version: CFIndex,
    info: ?*c_void,
    retain: ?fn (?*const c_void) callconv(.C) ?*const c_void,
    release: ?fn (?*const c_void) callconv(.C) void,
    copyDescription: ?fn (?*const c_void) callconv(.C) CFStringRef,
};
pub const CFMessagePortContext = struct_unnamed_172;
pub const CFMessagePortCallBack = ?fn (CFMessagePortRef, SInt32, CFDataRef, ?*c_void) callconv(.C) CFDataRef;
pub const CFMessagePortInvalidationCallBack = ?fn (CFMessagePortRef, ?*c_void) callconv(.C) void;
pub extern fn CFMessagePortGetTypeID() CFTypeID;
pub extern fn CFMessagePortCreateLocal(allocator: CFAllocatorRef, name: CFStringRef, callout: CFMessagePortCallBack, context: [*c]CFMessagePortContext, shouldFreeInfo: [*c]Boolean) CFMessagePortRef;
pub extern fn CFMessagePortCreateRemote(allocator: CFAllocatorRef, name: CFStringRef) CFMessagePortRef;
pub extern fn CFMessagePortIsRemote(ms: CFMessagePortRef) Boolean;
pub extern fn CFMessagePortGetName(ms: CFMessagePortRef) CFStringRef;
pub extern fn CFMessagePortSetName(ms: CFMessagePortRef, newName: CFStringRef) Boolean;
pub extern fn CFMessagePortGetContext(ms: CFMessagePortRef, context: [*c]CFMessagePortContext) void;
pub extern fn CFMessagePortInvalidate(ms: CFMessagePortRef) void;
pub extern fn CFMessagePortIsValid(ms: CFMessagePortRef) Boolean;
pub extern fn CFMessagePortGetInvalidationCallBack(ms: CFMessagePortRef) CFMessagePortInvalidationCallBack;
pub extern fn CFMessagePortSetInvalidationCallBack(ms: CFMessagePortRef, callout: CFMessagePortInvalidationCallBack) void;
pub extern fn CFMessagePortSendRequest(remote: CFMessagePortRef, msgid: SInt32, data: CFDataRef, sendTimeout: CFTimeInterval, rcvTimeout: CFTimeInterval, replyMode: CFStringRef, returnData: [*c]CFDataRef) SInt32;
pub extern fn CFMessagePortCreateRunLoopSource(allocator: CFAllocatorRef, local: CFMessagePortRef, order: CFIndex) CFRunLoopSourceRef;
pub extern fn CFMessagePortSetDispatchQueue(ms: CFMessagePortRef, queue: dispatch_queue_t) void;
pub extern const kCFPlugInDynamicRegistrationKey: CFStringRef;
pub extern const kCFPlugInDynamicRegisterFunctionKey: CFStringRef;
pub extern const kCFPlugInUnloadFunctionKey: CFStringRef;
pub extern const kCFPlugInFactoriesKey: CFStringRef;
pub extern const kCFPlugInTypesKey: CFStringRef;
pub const CFPlugInDynamicRegisterFunction = ?fn (CFPlugInRef) callconv(.C) void;
pub const CFPlugInUnloadFunction = ?fn (CFPlugInRef) callconv(.C) void;
pub const CFPlugInFactoryFunction = ?fn (CFAllocatorRef, CFUUIDRef) callconv(.C) ?*c_void;
pub extern fn CFPlugInGetTypeID() CFTypeID;
pub extern fn CFPlugInCreate(allocator: CFAllocatorRef, plugInURL: CFURLRef) CFPlugInRef;
pub extern fn CFPlugInGetBundle(plugIn: CFPlugInRef) CFBundleRef;
pub extern fn CFPlugInSetLoadOnDemand(plugIn: CFPlugInRef, flag: Boolean) void;
pub extern fn CFPlugInIsLoadOnDemand(plugIn: CFPlugInRef) Boolean;
pub extern fn CFPlugInFindFactoriesForPlugInType(typeUUID: CFUUIDRef) CFArrayRef;
pub extern fn CFPlugInFindFactoriesForPlugInTypeInPlugIn(typeUUID: CFUUIDRef, plugIn: CFPlugInRef) CFArrayRef;
pub extern fn CFPlugInInstanceCreate(allocator: CFAllocatorRef, factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) ?*c_void;
pub extern fn CFPlugInRegisterFactoryFunction(factoryUUID: CFUUIDRef, func: CFPlugInFactoryFunction) Boolean;
pub extern fn CFPlugInRegisterFactoryFunctionByName(factoryUUID: CFUUIDRef, plugIn: CFPlugInRef, functionName: CFStringRef) Boolean;
pub extern fn CFPlugInUnregisterFactory(factoryUUID: CFUUIDRef) Boolean;
pub extern fn CFPlugInRegisterPlugInType(factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) Boolean;
pub extern fn CFPlugInUnregisterPlugInType(factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) Boolean;
pub extern fn CFPlugInAddInstanceForFactory(factoryID: CFUUIDRef) void;
pub extern fn CFPlugInRemoveInstanceForFactory(factoryID: CFUUIDRef) void;
pub const struct___CFPlugInInstance = @OpaqueType();
pub const CFPlugInInstanceRef = ?*struct___CFPlugInInstance;
pub const CFPlugInInstanceGetInterfaceFunction = ?fn (CFPlugInInstanceRef, CFStringRef, [*c]?*c_void) callconv(.C) Boolean;
pub const CFPlugInInstanceDeallocateInstanceDataFunction = ?fn (?*c_void) callconv(.C) void;
pub extern fn CFPlugInInstanceGetInterfaceFunctionTable(instance: CFPlugInInstanceRef, interfaceName: CFStringRef, ftbl: [*c]?*c_void) Boolean;
pub extern fn CFPlugInInstanceGetFactoryName(instance: CFPlugInInstanceRef) CFStringRef;
pub extern fn CFPlugInInstanceGetInstanceData(instance: CFPlugInInstanceRef) ?*c_void;
pub extern fn CFPlugInInstanceGetTypeID() CFTypeID;
pub extern fn CFPlugInInstanceCreateWithInstanceDataSize(allocator: CFAllocatorRef, instanceDataSize: CFIndex, deallocateInstanceFunction: CFPlugInInstanceDeallocateInstanceDataFunction, factoryName: CFStringRef, getInterfaceFunction: CFPlugInInstanceGetInterfaceFunction) CFPlugInInstanceRef;
pub const struct___CFMachPort = @OpaqueType();
pub const CFMachPortRef = ?*struct___CFMachPort;
const struct_unnamed_173 = extern struct {
    version: CFIndex,
    info: ?*c_void,
    retain: ?fn (?*const c_void) callconv(.C) ?*const c_void,
    release: ?fn (?*const c_void) callconv(.C) void,
    copyDescription: ?fn (?*const c_void) callconv(.C) CFStringRef,
};
pub const CFMachPortContext = struct_unnamed_173;
pub const CFMachPortCallBack = ?fn (CFMachPortRef, ?*c_void, CFIndex, ?*c_void) callconv(.C) void;
pub const CFMachPortInvalidationCallBack = ?fn (CFMachPortRef, ?*c_void) callconv(.C) void;
pub extern fn CFMachPortGetTypeID() CFTypeID;
pub extern fn CFMachPortCreate(allocator: CFAllocatorRef, callout: CFMachPortCallBack, context: [*c]CFMachPortContext, shouldFreeInfo: [*c]Boolean) CFMachPortRef;
pub extern fn CFMachPortCreateWithPort(allocator: CFAllocatorRef, portNum: mach_port_t, callout: CFMachPortCallBack, context: [*c]CFMachPortContext, shouldFreeInfo: [*c]Boolean) CFMachPortRef;
pub extern fn CFMachPortGetPort(port: CFMachPortRef) mach_port_t;
pub extern fn CFMachPortGetContext(port: CFMachPortRef, context: [*c]CFMachPortContext) void;
pub extern fn CFMachPortInvalidate(port: CFMachPortRef) void;
pub extern fn CFMachPortIsValid(port: CFMachPortRef) Boolean;
pub extern fn CFMachPortGetInvalidationCallBack(port: CFMachPortRef) CFMachPortInvalidationCallBack;
pub extern fn CFMachPortSetInvalidationCallBack(port: CFMachPortRef, callout: CFMachPortInvalidationCallBack) void;
pub extern fn CFMachPortCreateRunLoopSource(allocator: CFAllocatorRef, port: CFMachPortRef, order: CFIndex) CFRunLoopSourceRef;
pub const struct___CFAttributedString = @OpaqueType();
pub const CFAttributedStringRef = ?*const struct___CFAttributedString;
pub const CFMutableAttributedStringRef = ?*struct___CFAttributedString;
pub extern fn CFAttributedStringGetTypeID() CFTypeID;
pub extern fn CFAttributedStringCreate(alloc: CFAllocatorRef, str: CFStringRef, attributes: CFDictionaryRef) CFAttributedStringRef;
pub extern fn CFAttributedStringCreateWithSubstring(alloc: CFAllocatorRef, aStr: CFAttributedStringRef, range: CFRange) CFAttributedStringRef;
pub extern fn CFAttributedStringCreateCopy(alloc: CFAllocatorRef, aStr: CFAttributedStringRef) CFAttributedStringRef;
pub extern fn CFAttributedStringGetString(aStr: CFAttributedStringRef) CFStringRef;
pub extern fn CFAttributedStringGetLength(aStr: CFAttributedStringRef) CFIndex;
pub extern fn CFAttributedStringGetAttributes(aStr: CFAttributedStringRef, loc: CFIndex, effectiveRange: [*c]CFRange) CFDictionaryRef;
pub extern fn CFAttributedStringGetAttribute(aStr: CFAttributedStringRef, loc: CFIndex, attrName: CFStringRef, effectiveRange: [*c]CFRange) CFTypeRef;
pub extern fn CFAttributedStringGetAttributesAndLongestEffectiveRange(aStr: CFAttributedStringRef, loc: CFIndex, inRange: CFRange, longestEffectiveRange: [*c]CFRange) CFDictionaryRef;
pub extern fn CFAttributedStringGetAttributeAndLongestEffectiveRange(aStr: CFAttributedStringRef, loc: CFIndex, attrName: CFStringRef, inRange: CFRange, longestEffectiveRange: [*c]CFRange) CFTypeRef;
pub extern fn CFAttributedStringCreateMutableCopy(alloc: CFAllocatorRef, maxLength: CFIndex, aStr: CFAttributedStringRef) CFMutableAttributedStringRef;
pub extern fn CFAttributedStringCreateMutable(alloc: CFAllocatorRef, maxLength: CFIndex) CFMutableAttributedStringRef;
pub extern fn CFAttributedStringReplaceString(aStr: CFMutableAttributedStringRef, range: CFRange, replacement: CFStringRef) void;
pub extern fn CFAttributedStringGetMutableString(aStr: CFMutableAttributedStringRef) CFMutableStringRef;
pub extern fn CFAttributedStringSetAttributes(aStr: CFMutableAttributedStringRef, range: CFRange, replacement: CFDictionaryRef, clearOtherAttributes: Boolean) void;
pub extern fn CFAttributedStringSetAttribute(aStr: CFMutableAttributedStringRef, range: CFRange, attrName: CFStringRef, value: CFTypeRef) void;
pub extern fn CFAttributedStringRemoveAttribute(aStr: CFMutableAttributedStringRef, range: CFRange, attrName: CFStringRef) void;
pub extern fn CFAttributedStringReplaceAttributedString(aStr: CFMutableAttributedStringRef, range: CFRange, replacement: CFAttributedStringRef) void;
pub extern fn CFAttributedStringBeginEditing(aStr: CFMutableAttributedStringRef) void;
pub extern fn CFAttributedStringEndEditing(aStr: CFMutableAttributedStringRef) void;
pub const struct___CFURLEnumerator = @OpaqueType();
pub const CFURLEnumeratorRef = ?*const struct___CFURLEnumerator;
pub extern fn CFURLEnumeratorGetTypeID() CFTypeID;
pub const CFURLEnumeratorOptions = CFOptionFlags;
pub const kCFURLEnumeratorDefaultBehavior = @enumToInt(enum_unnamed_174.kCFURLEnumeratorDefaultBehavior);
pub const kCFURLEnumeratorDescendRecursively = @enumToInt(enum_unnamed_174.kCFURLEnumeratorDescendRecursively);
pub const kCFURLEnumeratorSkipInvisibles = @enumToInt(enum_unnamed_174.kCFURLEnumeratorSkipInvisibles);
pub const kCFURLEnumeratorGenerateFileReferenceURLs = @enumToInt(enum_unnamed_174.kCFURLEnumeratorGenerateFileReferenceURLs);
pub const kCFURLEnumeratorSkipPackageContents = @enumToInt(enum_unnamed_174.kCFURLEnumeratorSkipPackageContents);
pub const kCFURLEnumeratorIncludeDirectoriesPreOrder = @enumToInt(enum_unnamed_174.kCFURLEnumeratorIncludeDirectoriesPreOrder);
pub const kCFURLEnumeratorIncludeDirectoriesPostOrder = @enumToInt(enum_unnamed_174.kCFURLEnumeratorIncludeDirectoriesPostOrder);
pub const kCFURLEnumeratorGenerateRelativePathURLs = @enumToInt(enum_unnamed_174.kCFURLEnumeratorGenerateRelativePathURLs);
const enum_unnamed_174 = extern enum(c_int) {
    kCFURLEnumeratorDefaultBehavior = 0,
    kCFURLEnumeratorDescendRecursively = 1,
    kCFURLEnumeratorSkipInvisibles = 2,
    kCFURLEnumeratorGenerateFileReferenceURLs = 4,
    kCFURLEnumeratorSkipPackageContents = 8,
    kCFURLEnumeratorIncludeDirectoriesPreOrder = 16,
    kCFURLEnumeratorIncludeDirectoriesPostOrder = 32,
    kCFURLEnumeratorGenerateRelativePathURLs = 64,
    _,
};
pub extern fn CFURLEnumeratorCreateForDirectoryURL(alloc: CFAllocatorRef, directoryURL: CFURLRef, option: CFURLEnumeratorOptions, propertyKeys: CFArrayRef) CFURLEnumeratorRef;
pub extern fn CFURLEnumeratorCreateForMountedVolumes(alloc: CFAllocatorRef, option: CFURLEnumeratorOptions, propertyKeys: CFArrayRef) CFURLEnumeratorRef;
pub const CFURLEnumeratorResult = CFIndex;
pub const kCFURLEnumeratorSuccess = @enumToInt(enum_unnamed_175.kCFURLEnumeratorSuccess);
pub const kCFURLEnumeratorEnd = @enumToInt(enum_unnamed_175.kCFURLEnumeratorEnd);
pub const kCFURLEnumeratorError = @enumToInt(enum_unnamed_175.kCFURLEnumeratorError);
pub const kCFURLEnumeratorDirectoryPostOrderSuccess = @enumToInt(enum_unnamed_175.kCFURLEnumeratorDirectoryPostOrderSuccess);
const enum_unnamed_175 = extern enum(c_int) {
    kCFURLEnumeratorSuccess = 1,
    kCFURLEnumeratorEnd = 2,
    kCFURLEnumeratorError = 3,
    kCFURLEnumeratorDirectoryPostOrderSuccess = 4,
    _,
};
pub extern fn CFURLEnumeratorGetNextURL(enumerator: CFURLEnumeratorRef, url: [*c]CFURLRef, @"error": [*c]CFErrorRef) CFURLEnumeratorResult;
pub extern fn CFURLEnumeratorSkipDescendents(enumerator: CFURLEnumeratorRef) void;
pub extern fn CFURLEnumeratorGetDescendentLevel(enumerator: CFURLEnumeratorRef) CFIndex;
pub extern fn CFURLEnumeratorGetSourceDidChange(enumerator: CFURLEnumeratorRef) Boolean;
const union_unnamed_176 = extern union {
    g_guid: [16]u8,
    g_guid_asint: [4]c_uint,
};
pub const guid_t = union_unnamed_176;
const struct_unnamed_177 = extern struct {
    sid_kind: u_int8_t,
    sid_authcount: u_int8_t,
    sid_authority: [6]u_int8_t,
    sid_authorities: [16]u_int32_t,
};
pub const ntsid_t = struct_unnamed_177;
pub const struct_kauth_identity_extlookup = extern struct {
    el_seqno: u_int32_t,
    el_result: u_int32_t,
    el_flags: u_int32_t,
    el_info_pid: __darwin_pid_t,
    el_extend: u_int64_t,
    el_info_reserved_1: u_int32_t,
    el_uid: uid_t,
    el_uguid: guid_t,
    el_uguid_valid: u_int32_t,
    el_usid: ntsid_t,
    el_usid_valid: u_int32_t,
    el_gid: gid_t,
    el_gguid: guid_t,
    el_gguid_valid: u_int32_t,
    el_gsid: ntsid_t,
    el_gsid_valid: u_int32_t,
    el_member_valid: u_int32_t,
    el_sup_grp_cnt: u_int32_t,
    el_sup_groups: [16]gid_t,
};
pub const struct_kauth_cache_sizes = extern struct {
    kcs_group_size: u_int32_t,
    kcs_id_size: u_int32_t,
};
pub const kauth_ace_rights_t = u_int32_t;
pub const struct_kauth_ace = extern struct {
    ace_applicable: guid_t,
    ace_flags: u_int32_t,
    ace_rights: kauth_ace_rights_t,
};
pub const kauth_ace_t = [*c]struct_kauth_ace;
pub const struct_kauth_acl = extern struct {
    acl_entrycount: u_int32_t,
    acl_flags: u_int32_t,
    acl_ace: [1]struct_kauth_ace,
};
pub const kauth_acl_t = [*c]struct_kauth_acl;
pub const struct_kauth_filesec = extern struct {
    fsec_magic: u_int32_t,
    fsec_owner: guid_t,
    fsec_group: guid_t,
    fsec_acl: struct_kauth_acl,
};
pub const kauth_filesec_t = [*c]struct_kauth_filesec;
pub const ACL_READ_DATA = @enumToInt(enum_unnamed_178.ACL_READ_DATA);
pub const ACL_LIST_DIRECTORY = @enumToInt(enum_unnamed_178.ACL_LIST_DIRECTORY);
pub const ACL_WRITE_DATA = @enumToInt(enum_unnamed_178.ACL_WRITE_DATA);
pub const ACL_ADD_FILE = @enumToInt(enum_unnamed_178.ACL_ADD_FILE);
pub const ACL_EXECUTE = @enumToInt(enum_unnamed_178.ACL_EXECUTE);
pub const ACL_SEARCH = @enumToInt(enum_unnamed_178.ACL_SEARCH);
pub const ACL_DELETE = @enumToInt(enum_unnamed_178.ACL_DELETE);
pub const ACL_APPEND_DATA = @enumToInt(enum_unnamed_178.ACL_APPEND_DATA);
pub const ACL_ADD_SUBDIRECTORY = @enumToInt(enum_unnamed_178.ACL_ADD_SUBDIRECTORY);
pub const ACL_DELETE_CHILD = @enumToInt(enum_unnamed_178.ACL_DELETE_CHILD);
pub const ACL_READ_ATTRIBUTES = @enumToInt(enum_unnamed_178.ACL_READ_ATTRIBUTES);
pub const ACL_WRITE_ATTRIBUTES = @enumToInt(enum_unnamed_178.ACL_WRITE_ATTRIBUTES);
pub const ACL_READ_EXTATTRIBUTES = @enumToInt(enum_unnamed_178.ACL_READ_EXTATTRIBUTES);
pub const ACL_WRITE_EXTATTRIBUTES = @enumToInt(enum_unnamed_178.ACL_WRITE_EXTATTRIBUTES);
pub const ACL_READ_SECURITY = @enumToInt(enum_unnamed_178.ACL_READ_SECURITY);
pub const ACL_WRITE_SECURITY = @enumToInt(enum_unnamed_178.ACL_WRITE_SECURITY);
pub const ACL_CHANGE_OWNER = @enumToInt(enum_unnamed_178.ACL_CHANGE_OWNER);
pub const ACL_SYNCHRONIZE = @enumToInt(enum_unnamed_178.ACL_SYNCHRONIZE);
const enum_unnamed_178 = extern enum(c_int) {
    ACL_READ_DATA = 2,
    ACL_LIST_DIRECTORY = 2,
    ACL_WRITE_DATA = 4,
    ACL_ADD_FILE = 4,
    ACL_EXECUTE = 8,
    ACL_SEARCH = 8,
    ACL_DELETE = 16,
    ACL_APPEND_DATA = 32,
    ACL_ADD_SUBDIRECTORY = 32,
    ACL_DELETE_CHILD = 64,
    ACL_READ_ATTRIBUTES = 128,
    ACL_WRITE_ATTRIBUTES = 256,
    ACL_READ_EXTATTRIBUTES = 512,
    ACL_WRITE_EXTATTRIBUTES = 1024,
    ACL_READ_SECURITY = 2048,
    ACL_WRITE_SECURITY = 4096,
    ACL_CHANGE_OWNER = 8192,
    ACL_SYNCHRONIZE = 1048576,
    _,
};
pub const acl_perm_t = enum_unnamed_178;
pub const ACL_UNDEFINED_TAG = @enumToInt(enum_unnamed_179.ACL_UNDEFINED_TAG);
pub const ACL_EXTENDED_ALLOW = @enumToInt(enum_unnamed_179.ACL_EXTENDED_ALLOW);
pub const ACL_EXTENDED_DENY = @enumToInt(enum_unnamed_179.ACL_EXTENDED_DENY);
const enum_unnamed_179 = extern enum(c_int) {
    ACL_UNDEFINED_TAG = 0,
    ACL_EXTENDED_ALLOW = 1,
    ACL_EXTENDED_DENY = 2,
    _,
};
pub const acl_tag_t = enum_unnamed_179;
pub const ACL_TYPE_EXTENDED = @enumToInt(enum_unnamed_180.ACL_TYPE_EXTENDED);
pub const ACL_TYPE_ACCESS = @enumToInt(enum_unnamed_180.ACL_TYPE_ACCESS);
pub const ACL_TYPE_DEFAULT = @enumToInt(enum_unnamed_180.ACL_TYPE_DEFAULT);
pub const ACL_TYPE_AFS = @enumToInt(enum_unnamed_180.ACL_TYPE_AFS);
pub const ACL_TYPE_CODA = @enumToInt(enum_unnamed_180.ACL_TYPE_CODA);
pub const ACL_TYPE_NTFS = @enumToInt(enum_unnamed_180.ACL_TYPE_NTFS);
pub const ACL_TYPE_NWFS = @enumToInt(enum_unnamed_180.ACL_TYPE_NWFS);
const enum_unnamed_180 = extern enum(c_int) {
    ACL_TYPE_EXTENDED = 256,
    ACL_TYPE_ACCESS = 0,
    ACL_TYPE_DEFAULT = 1,
    ACL_TYPE_AFS = 2,
    ACL_TYPE_CODA = 3,
    ACL_TYPE_NTFS = 4,
    ACL_TYPE_NWFS = 5,
    _,
};
pub const acl_type_t = enum_unnamed_180;
pub const ACL_FIRST_ENTRY = @enumToInt(enum_unnamed_181.ACL_FIRST_ENTRY);
pub const ACL_NEXT_ENTRY = @enumToInt(enum_unnamed_181.ACL_NEXT_ENTRY);
pub const ACL_LAST_ENTRY = @enumToInt(enum_unnamed_181.ACL_LAST_ENTRY);
const enum_unnamed_181 = extern enum(c_int) {
    ACL_FIRST_ENTRY = 0,
    ACL_NEXT_ENTRY = -1,
    ACL_LAST_ENTRY = -2,
    _,
};
pub const acl_entry_id_t = enum_unnamed_181;
pub const ACL_FLAG_DEFER_INHERIT = @enumToInt(enum_unnamed_182.ACL_FLAG_DEFER_INHERIT);
pub const ACL_FLAG_NO_INHERIT = @enumToInt(enum_unnamed_182.ACL_FLAG_NO_INHERIT);
pub const ACL_ENTRY_INHERITED = @enumToInt(enum_unnamed_182.ACL_ENTRY_INHERITED);
pub const ACL_ENTRY_FILE_INHERIT = @enumToInt(enum_unnamed_182.ACL_ENTRY_FILE_INHERIT);
pub const ACL_ENTRY_DIRECTORY_INHERIT = @enumToInt(enum_unnamed_182.ACL_ENTRY_DIRECTORY_INHERIT);
pub const ACL_ENTRY_LIMIT_INHERIT = @enumToInt(enum_unnamed_182.ACL_ENTRY_LIMIT_INHERIT);
pub const ACL_ENTRY_ONLY_INHERIT = @enumToInt(enum_unnamed_182.ACL_ENTRY_ONLY_INHERIT);
const enum_unnamed_182 = extern enum(c_int) {
    ACL_FLAG_DEFER_INHERIT = 1,
    ACL_FLAG_NO_INHERIT = 131072,
    ACL_ENTRY_INHERITED = 16,
    ACL_ENTRY_FILE_INHERIT = 32,
    ACL_ENTRY_DIRECTORY_INHERIT = 64,
    ACL_ENTRY_LIMIT_INHERIT = 128,
    ACL_ENTRY_ONLY_INHERIT = 256,
    _,
};
pub const acl_flag_t = enum_unnamed_182;
pub const struct__acl = @OpaqueType();
pub const struct__acl_entry = @OpaqueType();
pub const struct__acl_permset = @OpaqueType();
pub const struct__acl_flagset = @OpaqueType();
pub const acl_t = ?*struct__acl;
pub const acl_entry_t = ?*struct__acl_entry;
pub const acl_permset_t = ?*struct__acl_permset;
pub const acl_flagset_t = ?*struct__acl_flagset;
pub const acl_permset_mask_t = u_int64_t;
pub extern fn acl_dup(acl: acl_t) acl_t;
pub extern fn acl_free(obj_p: ?*c_void) c_int;
pub extern fn acl_init(count: c_int) acl_t;
pub extern fn acl_copy_entry(dest_d: acl_entry_t, src_d: acl_entry_t) c_int;
pub extern fn acl_create_entry(acl_p: [*c]acl_t, entry_p: [*c]acl_entry_t) c_int;
pub extern fn acl_create_entry_np(acl_p: [*c]acl_t, entry_p: [*c]acl_entry_t, entry_index: c_int) c_int;
pub extern fn acl_delete_entry(acl: acl_t, entry_d: acl_entry_t) c_int;
pub extern fn acl_get_entry(acl: acl_t, entry_id: c_int, entry_p: [*c]acl_entry_t) c_int;
pub extern fn acl_valid(acl: acl_t) c_int;
pub extern fn acl_valid_fd_np(fd: c_int, type: acl_type_t, acl: acl_t) c_int;
pub extern fn acl_valid_file_np(path: [*c]const u8, type: acl_type_t, acl: acl_t) c_int;
pub extern fn acl_valid_link_np(path: [*c]const u8, type: acl_type_t, acl: acl_t) c_int;
pub extern fn acl_add_perm(permset_d: acl_permset_t, perm: acl_perm_t) c_int;
pub extern fn acl_calc_mask(acl_p: [*c]acl_t) c_int;
pub extern fn acl_clear_perms(permset_d: acl_permset_t) c_int;
pub extern fn acl_delete_perm(permset_d: acl_permset_t, perm: acl_perm_t) c_int;
pub extern fn acl_get_perm_np(permset_d: acl_permset_t, perm: acl_perm_t) c_int;
pub extern fn acl_get_permset(entry_d: acl_entry_t, permset_p: [*c]acl_permset_t) c_int;
pub extern fn acl_set_permset(entry_d: acl_entry_t, permset_d: acl_permset_t) c_int;
pub extern fn acl_maximal_permset_mask_np(mask_p: [*c]acl_permset_mask_t) c_int;
pub extern fn acl_get_permset_mask_np(entry_d: acl_entry_t, mask_p: [*c]acl_permset_mask_t) c_int;
pub extern fn acl_set_permset_mask_np(entry_d: acl_entry_t, mask: acl_permset_mask_t) c_int;
pub extern fn acl_add_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) c_int;
pub extern fn acl_clear_flags_np(flagset_d: acl_flagset_t) c_int;
pub extern fn acl_delete_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) c_int;
pub extern fn acl_get_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) c_int;
pub extern fn acl_get_flagset_np(obj_p: ?*c_void, flagset_p: [*c]acl_flagset_t) c_int;
pub extern fn acl_set_flagset_np(obj_p: ?*c_void, flagset_d: acl_flagset_t) c_int;
pub extern fn acl_get_qualifier(entry_d: acl_entry_t) ?*c_void;
pub extern fn acl_get_tag_type(entry_d: acl_entry_t, tag_type_p: [*c]acl_tag_t) c_int;
pub extern fn acl_set_qualifier(entry_d: acl_entry_t, tag_qualifier_p: ?*const c_void) c_int;
pub extern fn acl_set_tag_type(entry_d: acl_entry_t, tag_type: acl_tag_t) c_int;
pub extern fn acl_delete_def_file(path_p: [*c]const u8) c_int;
pub extern fn acl_get_fd(fd: c_int) acl_t;
pub extern fn acl_get_fd_np(fd: c_int, type: acl_type_t) acl_t;
pub extern fn acl_get_file(path_p: [*c]const u8, type: acl_type_t) acl_t;
pub extern fn acl_get_link_np(path_p: [*c]const u8, type: acl_type_t) acl_t;
pub extern fn acl_set_fd(fd: c_int, acl: acl_t) c_int;
pub extern fn acl_set_fd_np(fd: c_int, acl: acl_t, acl_type: acl_type_t) c_int;
pub extern fn acl_set_file(path_p: [*c]const u8, type: acl_type_t, acl: acl_t) c_int;
pub extern fn acl_set_link_np(path_p: [*c]const u8, type: acl_type_t, acl: acl_t) c_int;
pub extern fn acl_copy_ext(buf_p: ?*c_void, acl: acl_t, size: isize) isize;
pub extern fn acl_copy_ext_native(buf_p: ?*c_void, acl: acl_t, size: isize) isize;
pub extern fn acl_copy_int(buf_p: ?*const c_void) acl_t;
pub extern fn acl_copy_int_native(buf_p: ?*const c_void) acl_t;
pub extern fn acl_from_text(buf_p: [*c]const u8) acl_t;
pub extern fn acl_size(acl: acl_t) isize;
pub extern fn acl_to_text(acl: acl_t, len_p: [*c]isize) [*c]u8;
pub const struct___CFFileSecurity = @OpaqueType();
pub const CFFileSecurityRef = ?*struct___CFFileSecurity;
pub extern fn CFFileSecurityGetTypeID() CFTypeID;
pub extern fn CFFileSecurityCreate(allocator: CFAllocatorRef) CFFileSecurityRef;
pub extern fn CFFileSecurityCreateCopy(allocator: CFAllocatorRef, fileSec: CFFileSecurityRef) CFFileSecurityRef;
pub extern fn CFFileSecurityCopyOwnerUUID(fileSec: CFFileSecurityRef, ownerUUID: [*c]CFUUIDRef) Boolean;
pub extern fn CFFileSecuritySetOwnerUUID(fileSec: CFFileSecurityRef, ownerUUID: CFUUIDRef) Boolean;
pub extern fn CFFileSecurityCopyGroupUUID(fileSec: CFFileSecurityRef, groupUUID: [*c]CFUUIDRef) Boolean;
pub extern fn CFFileSecuritySetGroupUUID(fileSec: CFFileSecurityRef, groupUUID: CFUUIDRef) Boolean;
pub extern fn CFFileSecurityCopyAccessControlList(fileSec: CFFileSecurityRef, accessControlList: [*c]acl_t) Boolean;
pub extern fn CFFileSecuritySetAccessControlList(fileSec: CFFileSecurityRef, accessControlList: acl_t) Boolean;
pub extern fn CFFileSecurityGetOwner(fileSec: CFFileSecurityRef, owner: [*c]uid_t) Boolean;
pub extern fn CFFileSecuritySetOwner(fileSec: CFFileSecurityRef, owner: uid_t) Boolean;
pub extern fn CFFileSecurityGetGroup(fileSec: CFFileSecurityRef, group: [*c]gid_t) Boolean;
pub extern fn CFFileSecuritySetGroup(fileSec: CFFileSecurityRef, group: gid_t) Boolean;
pub extern fn CFFileSecurityGetMode(fileSec: CFFileSecurityRef, mode: [*c]mode_t) Boolean;
pub extern fn CFFileSecuritySetMode(fileSec: CFFileSecurityRef, mode: mode_t) Boolean;
pub const CFFileSecurityClearOptions = CFOptionFlags;
pub const kCFFileSecurityClearOwner = @enumToInt(enum_unnamed_183.kCFFileSecurityClearOwner);
pub const kCFFileSecurityClearGroup = @enumToInt(enum_unnamed_183.kCFFileSecurityClearGroup);
pub const kCFFileSecurityClearMode = @enumToInt(enum_unnamed_183.kCFFileSecurityClearMode);
pub const kCFFileSecurityClearOwnerUUID = @enumToInt(enum_unnamed_183.kCFFileSecurityClearOwnerUUID);
pub const kCFFileSecurityClearGroupUUID = @enumToInt(enum_unnamed_183.kCFFileSecurityClearGroupUUID);
pub const kCFFileSecurityClearAccessControlList = @enumToInt(enum_unnamed_183.kCFFileSecurityClearAccessControlList);
const enum_unnamed_183 = extern enum(c_int) {
    kCFFileSecurityClearOwner = 1,
    kCFFileSecurityClearGroup = 2,
    kCFFileSecurityClearMode = 4,
    kCFFileSecurityClearOwnerUUID = 8,
    kCFFileSecurityClearGroupUUID = 16,
    kCFFileSecurityClearAccessControlList = 32,
    _,
};
pub extern fn CFFileSecurityClearProperties(fileSec: CFFileSecurityRef, clearPropertyMask: CFFileSecurityClearOptions) Boolean;
pub extern fn CFStringTokenizerCopyBestStringLanguage(string: CFStringRef, range: CFRange) CFStringRef;
pub const struct___CFStringTokenizer = @OpaqueType();
pub const CFStringTokenizerRef = ?*struct___CFStringTokenizer;
pub const kCFStringTokenizerUnitWord = @enumToInt(enum_unnamed_184.kCFStringTokenizerUnitWord);
pub const kCFStringTokenizerUnitSentence = @enumToInt(enum_unnamed_184.kCFStringTokenizerUnitSentence);
pub const kCFStringTokenizerUnitParagraph = @enumToInt(enum_unnamed_184.kCFStringTokenizerUnitParagraph);
pub const kCFStringTokenizerUnitLineBreak = @enumToInt(enum_unnamed_184.kCFStringTokenizerUnitLineBreak);
pub const kCFStringTokenizerUnitWordBoundary = @enumToInt(enum_unnamed_184.kCFStringTokenizerUnitWordBoundary);
pub const kCFStringTokenizerAttributeLatinTranscription = @enumToInt(enum_unnamed_184.kCFStringTokenizerAttributeLatinTranscription);
pub const kCFStringTokenizerAttributeLanguage = @enumToInt(enum_unnamed_184.kCFStringTokenizerAttributeLanguage);
const enum_unnamed_184 = extern enum(c_int) {
    kCFStringTokenizerUnitWord = 0,
    kCFStringTokenizerUnitSentence = 1,
    kCFStringTokenizerUnitParagraph = 2,
    kCFStringTokenizerUnitLineBreak = 3,
    kCFStringTokenizerUnitWordBoundary = 4,
    kCFStringTokenizerAttributeLatinTranscription = 65536,
    kCFStringTokenizerAttributeLanguage = 131072,
    _,
};
pub const CFStringTokenizerTokenType = CFOptionFlags;
pub const kCFStringTokenizerTokenNone = @enumToInt(enum_unnamed_185.kCFStringTokenizerTokenNone);
pub const kCFStringTokenizerTokenNormal = @enumToInt(enum_unnamed_185.kCFStringTokenizerTokenNormal);
pub const kCFStringTokenizerTokenHasSubTokensMask = @enumToInt(enum_unnamed_185.kCFStringTokenizerTokenHasSubTokensMask);
pub const kCFStringTokenizerTokenHasDerivedSubTokensMask = @enumToInt(enum_unnamed_185.kCFStringTokenizerTokenHasDerivedSubTokensMask);
pub const kCFStringTokenizerTokenHasHasNumbersMask = @enumToInt(enum_unnamed_185.kCFStringTokenizerTokenHasHasNumbersMask);
pub const kCFStringTokenizerTokenHasNonLettersMask = @enumToInt(enum_unnamed_185.kCFStringTokenizerTokenHasNonLettersMask);
pub const kCFStringTokenizerTokenIsCJWordMask = @enumToInt(enum_unnamed_185.kCFStringTokenizerTokenIsCJWordMask);
const enum_unnamed_185 = extern enum(c_int) {
    kCFStringTokenizerTokenNone = 0,
    kCFStringTokenizerTokenNormal = 1,
    kCFStringTokenizerTokenHasSubTokensMask = 2,
    kCFStringTokenizerTokenHasDerivedSubTokensMask = 4,
    kCFStringTokenizerTokenHasHasNumbersMask = 8,
    kCFStringTokenizerTokenHasNonLettersMask = 16,
    kCFStringTokenizerTokenIsCJWordMask = 32,
    _,
};
pub extern fn CFStringTokenizerGetTypeID() CFTypeID;
pub extern fn CFStringTokenizerCreate(alloc: CFAllocatorRef, string: CFStringRef, range: CFRange, options: CFOptionFlags, locale: CFLocaleRef) CFStringTokenizerRef;
pub extern fn CFStringTokenizerSetString(tokenizer: CFStringTokenizerRef, string: CFStringRef, range: CFRange) void;
pub extern fn CFStringTokenizerGoToTokenAtIndex(tokenizer: CFStringTokenizerRef, index: CFIndex) CFStringTokenizerTokenType;
pub extern fn CFStringTokenizerAdvanceToNextToken(tokenizer: CFStringTokenizerRef) CFStringTokenizerTokenType;
pub extern fn CFStringTokenizerGetCurrentTokenRange(tokenizer: CFStringTokenizerRef) CFRange;
pub extern fn CFStringTokenizerCopyCurrentTokenAttribute(tokenizer: CFStringTokenizerRef, attribute: CFOptionFlags) CFTypeRef;
pub extern fn CFStringTokenizerGetCurrentSubTokens(tokenizer: CFStringTokenizerRef, ranges: [*c]CFRange, maxRangeLength: CFIndex, derivedSubTokens: CFMutableArrayRef) CFIndex;
pub const CFFileDescriptorNativeDescriptor = c_int;
pub const struct___CFFileDescriptor = @OpaqueType();
pub const CFFileDescriptorRef = ?*struct___CFFileDescriptor;
pub const kCFFileDescriptorReadCallBack = @enumToInt(enum_unnamed_186.kCFFileDescriptorReadCallBack);
pub const kCFFileDescriptorWriteCallBack = @enumToInt(enum_unnamed_186.kCFFileDescriptorWriteCallBack);
const enum_unnamed_186 = extern enum(c_int) {
    kCFFileDescriptorReadCallBack = 1,
    kCFFileDescriptorWriteCallBack = 2,
    _,
};
pub const CFFileDescriptorCallBack = ?fn (CFFileDescriptorRef, CFOptionFlags, ?*c_void) callconv(.C) void;
const struct_unnamed_187 = extern struct {
    version: CFIndex,
    info: ?*c_void,
    retain: ?fn (?*c_void) callconv(.C) ?*c_void,
    release: ?fn (?*c_void) callconv(.C) void,
    copyDescription: ?fn (?*c_void) callconv(.C) CFStringRef,
};
pub const CFFileDescriptorContext = struct_unnamed_187;
pub extern fn CFFileDescriptorGetTypeID() CFTypeID;
pub extern fn CFFileDescriptorCreate(allocator: CFAllocatorRef, fd: CFFileDescriptorNativeDescriptor, closeOnInvalidate: Boolean, callout: CFFileDescriptorCallBack, context: [*c]const CFFileDescriptorContext) CFFileDescriptorRef;
pub extern fn CFFileDescriptorGetNativeDescriptor(f: CFFileDescriptorRef) CFFileDescriptorNativeDescriptor;
pub extern fn CFFileDescriptorGetContext(f: CFFileDescriptorRef, context: [*c]CFFileDescriptorContext) void;
pub extern fn CFFileDescriptorEnableCallBacks(f: CFFileDescriptorRef, callBackTypes: CFOptionFlags) void;
pub extern fn CFFileDescriptorDisableCallBacks(f: CFFileDescriptorRef, callBackTypes: CFOptionFlags) void;
pub extern fn CFFileDescriptorInvalidate(f: CFFileDescriptorRef) void;
pub extern fn CFFileDescriptorIsValid(f: CFFileDescriptorRef) Boolean;
pub extern fn CFFileDescriptorCreateRunLoopSource(allocator: CFAllocatorRef, f: CFFileDescriptorRef, order: CFIndex) CFRunLoopSourceRef;
pub const struct___CFUserNotification = @OpaqueType();
pub const CFUserNotificationRef = ?*struct___CFUserNotification;
pub const CFUserNotificationCallBack = ?fn (CFUserNotificationRef, CFOptionFlags) callconv(.C) void;
pub extern fn CFUserNotificationGetTypeID() CFTypeID;
pub extern fn CFUserNotificationCreate(allocator: CFAllocatorRef, timeout: CFTimeInterval, flags: CFOptionFlags, @"error": [*c]SInt32, dictionary: CFDictionaryRef) CFUserNotificationRef;
pub extern fn CFUserNotificationReceiveResponse(userNotification: CFUserNotificationRef, timeout: CFTimeInterval, responseFlags: [*c]CFOptionFlags) SInt32;
pub extern fn CFUserNotificationGetResponseValue(userNotification: CFUserNotificationRef, key: CFStringRef, idx: CFIndex) CFStringRef;
pub extern fn CFUserNotificationGetResponseDictionary(userNotification: CFUserNotificationRef) CFDictionaryRef;
pub extern fn CFUserNotificationUpdate(userNotification: CFUserNotificationRef, timeout: CFTimeInterval, flags: CFOptionFlags, dictionary: CFDictionaryRef) SInt32;
pub extern fn CFUserNotificationCancel(userNotification: CFUserNotificationRef) SInt32;
pub extern fn CFUserNotificationCreateRunLoopSource(allocator: CFAllocatorRef, userNotification: CFUserNotificationRef, callout: CFUserNotificationCallBack, order: CFIndex) CFRunLoopSourceRef;
pub extern fn CFUserNotificationDisplayNotice(timeout: CFTimeInterval, flags: CFOptionFlags, iconURL: CFURLRef, soundURL: CFURLRef, localizationURL: CFURLRef, alertHeader: CFStringRef, alertMessage: CFStringRef, defaultButtonTitle: CFStringRef) SInt32;
pub extern fn CFUserNotificationDisplayAlert(timeout: CFTimeInterval, flags: CFOptionFlags, iconURL: CFURLRef, soundURL: CFURLRef, localizationURL: CFURLRef, alertHeader: CFStringRef, alertMessage: CFStringRef, defaultButtonTitle: CFStringRef, alternateButtonTitle: CFStringRef, otherButtonTitle: CFStringRef, responseFlags: [*c]CFOptionFlags) SInt32;
pub const kCFUserNotificationStopAlertLevel = @enumToInt(enum_unnamed_188.kCFUserNotificationStopAlertLevel);
pub const kCFUserNotificationNoteAlertLevel = @enumToInt(enum_unnamed_188.kCFUserNotificationNoteAlertLevel);
pub const kCFUserNotificationCautionAlertLevel = @enumToInt(enum_unnamed_188.kCFUserNotificationCautionAlertLevel);
pub const kCFUserNotificationPlainAlertLevel = @enumToInt(enum_unnamed_188.kCFUserNotificationPlainAlertLevel);
const enum_unnamed_188 = extern enum(c_int) {
    kCFUserNotificationStopAlertLevel = 0,
    kCFUserNotificationNoteAlertLevel = 1,
    kCFUserNotificationCautionAlertLevel = 2,
    kCFUserNotificationPlainAlertLevel = 3,
    _,
};
pub const kCFUserNotificationDefaultResponse = @enumToInt(enum_unnamed_189.kCFUserNotificationDefaultResponse);
pub const kCFUserNotificationAlternateResponse = @enumToInt(enum_unnamed_189.kCFUserNotificationAlternateResponse);
pub const kCFUserNotificationOtherResponse = @enumToInt(enum_unnamed_189.kCFUserNotificationOtherResponse);
pub const kCFUserNotificationCancelResponse = @enumToInt(enum_unnamed_189.kCFUserNotificationCancelResponse);
const enum_unnamed_189 = extern enum(c_int) {
    kCFUserNotificationDefaultResponse = 0,
    kCFUserNotificationAlternateResponse = 1,
    kCFUserNotificationOtherResponse = 2,
    kCFUserNotificationCancelResponse = 3,
    _,
};
pub const kCFUserNotificationNoDefaultButtonFlag = @enumToInt(enum_unnamed_190.kCFUserNotificationNoDefaultButtonFlag);
pub const kCFUserNotificationUseRadioButtonsFlag = @enumToInt(enum_unnamed_190.kCFUserNotificationUseRadioButtonsFlag);
const enum_unnamed_190 = extern enum(c_int) {
    kCFUserNotificationNoDefaultButtonFlag = 32,
    kCFUserNotificationUseRadioButtonsFlag = 64,
    _,
};
pub fn CFUserNotificationCheckBoxChecked(arg_i: CFIndex) callconv(.C) CFOptionFlags {
    var i = arg_i;
    return (@bitCast(CFOptionFlags, (@as(c_ulong, 1) << @intCast(@import("std").math.Log2Int(c_ulong), (@bitCast(c_long, @as(c_long, @as(c_int, 8))) + i)))));
}
pub fn CFUserNotificationSecureTextField(arg_i: CFIndex) callconv(.C) CFOptionFlags {
    var i = arg_i;
    return (@bitCast(CFOptionFlags, (@as(c_ulong, 1) << @intCast(@import("std").math.Log2Int(c_ulong), (@bitCast(c_long, @as(c_long, @as(c_int, 16))) + i)))));
}
pub fn CFUserNotificationPopUpSelection(arg_n: CFIndex) callconv(.C) CFOptionFlags {
    var n = arg_n;
    return (@bitCast(CFOptionFlags, (n << @intCast(@import("std").math.Log2Int(CFIndex), 24))));
}
pub extern const kCFUserNotificationIconURLKey: CFStringRef;
pub extern const kCFUserNotificationSoundURLKey: CFStringRef;
pub extern const kCFUserNotificationLocalizationURLKey: CFStringRef;
pub extern const kCFUserNotificationAlertHeaderKey: CFStringRef;
pub extern const kCFUserNotificationAlertMessageKey: CFStringRef;
pub extern const kCFUserNotificationDefaultButtonTitleKey: CFStringRef;
pub extern const kCFUserNotificationAlternateButtonTitleKey: CFStringRef;
pub extern const kCFUserNotificationOtherButtonTitleKey: CFStringRef;
pub extern const kCFUserNotificationProgressIndicatorValueKey: CFStringRef;
pub extern const kCFUserNotificationPopUpTitlesKey: CFStringRef;
pub extern const kCFUserNotificationTextFieldTitlesKey: CFStringRef;
pub extern const kCFUserNotificationCheckBoxTitlesKey: CFStringRef;
pub extern const kCFUserNotificationTextFieldValuesKey: CFStringRef;
pub extern const kCFUserNotificationPopUpSelectionKey: CFStringRef;
pub extern const kCFUserNotificationAlertTopMostKey: CFStringRef;
pub extern const kCFUserNotificationKeyboardTypesKey: CFStringRef;
pub const kCFXMLNodeCurrentVersion = @enumToInt(enum_unnamed_191.kCFXMLNodeCurrentVersion);
const enum_unnamed_191 = extern enum(c_int) {
    kCFXMLNodeCurrentVersion = 1,
    _,
};
pub const struct___CFXMLNode = @OpaqueType();
pub const CFXMLNodeRef = ?*const struct___CFXMLNode;
pub const CFXMLTreeRef = CFTreeRef;
pub const CFXMLNodeTypeCode = CFIndex;
pub const kCFXMLNodeTypeDocument = @enumToInt(enum_unnamed_192.kCFXMLNodeTypeDocument);
pub const kCFXMLNodeTypeElement = @enumToInt(enum_unnamed_192.kCFXMLNodeTypeElement);
pub const kCFXMLNodeTypeAttribute = @enumToInt(enum_unnamed_192.kCFXMLNodeTypeAttribute);
pub const kCFXMLNodeTypeProcessingInstruction = @enumToInt(enum_unnamed_192.kCFXMLNodeTypeProcessingInstruction);
pub const kCFXMLNodeTypeComment = @enumToInt(enum_unnamed_192.kCFXMLNodeTypeComment);
pub const kCFXMLNodeTypeText = @enumToInt(enum_unnamed_192.kCFXMLNodeTypeText);
pub const kCFXMLNodeTypeCDATASection = @enumToInt(enum_unnamed_192.kCFXMLNodeTypeCDATASection);
pub const kCFXMLNodeTypeDocumentFragment = @enumToInt(enum_unnamed_192.kCFXMLNodeTypeDocumentFragment);
pub const kCFXMLNodeTypeEntity = @enumToInt(enum_unnamed_192.kCFXMLNodeTypeEntity);
pub const kCFXMLNodeTypeEntityReference = @enumToInt(enum_unnamed_192.kCFXMLNodeTypeEntityReference);
pub const kCFXMLNodeTypeDocumentType = @enumToInt(enum_unnamed_192.kCFXMLNodeTypeDocumentType);
pub const kCFXMLNodeTypeWhitespace = @enumToInt(enum_unnamed_192.kCFXMLNodeTypeWhitespace);
pub const kCFXMLNodeTypeNotation = @enumToInt(enum_unnamed_192.kCFXMLNodeTypeNotation);
pub const kCFXMLNodeTypeElementTypeDeclaration = @enumToInt(enum_unnamed_192.kCFXMLNodeTypeElementTypeDeclaration);
pub const kCFXMLNodeTypeAttributeListDeclaration = @enumToInt(enum_unnamed_192.kCFXMLNodeTypeAttributeListDeclaration);
const enum_unnamed_192 = extern enum(c_int) {
    kCFXMLNodeTypeDocument = 1,
    kCFXMLNodeTypeElement = 2,
    kCFXMLNodeTypeAttribute = 3,
    kCFXMLNodeTypeProcessingInstruction = 4,
    kCFXMLNodeTypeComment = 5,
    kCFXMLNodeTypeText = 6,
    kCFXMLNodeTypeCDATASection = 7,
    kCFXMLNodeTypeDocumentFragment = 8,
    kCFXMLNodeTypeEntity = 9,
    kCFXMLNodeTypeEntityReference = 10,
    kCFXMLNodeTypeDocumentType = 11,
    kCFXMLNodeTypeWhitespace = 12,
    kCFXMLNodeTypeNotation = 13,
    kCFXMLNodeTypeElementTypeDeclaration = 14,
    kCFXMLNodeTypeAttributeListDeclaration = 15,
    _,
};
const struct_unnamed_193 = extern struct {
    attributes: CFDictionaryRef,
    attributeOrder: CFArrayRef,
    isEmpty: Boolean,
    _reserved: [3]u8,
};
pub const CFXMLElementInfo = struct_unnamed_193;
const struct_unnamed_194 = extern struct {
    dataString: CFStringRef,
};
pub const CFXMLProcessingInstructionInfo = struct_unnamed_194;
const struct_unnamed_195 = extern struct {
    sourceURL: CFURLRef,
    encoding: CFStringEncoding,
};
pub const CFXMLDocumentInfo = struct_unnamed_195;
const struct_unnamed_196 = extern struct {
    systemID: CFURLRef,
    publicID: CFStringRef,
};
pub const CFXMLExternalID = struct_unnamed_196;
const struct_unnamed_197 = extern struct {
    externalID: CFXMLExternalID,
};
pub const CFXMLDocumentTypeInfo = struct_unnamed_197;
const struct_unnamed_198 = extern struct {
    externalID: CFXMLExternalID,
};
pub const CFXMLNotationInfo = struct_unnamed_198;
const struct_unnamed_199 = extern struct {
    contentDescription: CFStringRef,
};
pub const CFXMLElementTypeDeclarationInfo = struct_unnamed_199;
const struct_unnamed_200 = extern struct {
    attributeName: CFStringRef,
    typeString: CFStringRef,
    defaultString: CFStringRef,
};
pub const CFXMLAttributeDeclarationInfo = struct_unnamed_200;
const struct_unnamed_201 = extern struct {
    numberOfAttributes: CFIndex,
    attributes: [*c]CFXMLAttributeDeclarationInfo,
};
pub const CFXMLAttributeListDeclarationInfo = struct_unnamed_201;
pub const CFXMLEntityTypeCode = CFIndex;
pub const kCFXMLEntityTypeParameter = @enumToInt(enum_unnamed_202.kCFXMLEntityTypeParameter);
pub const kCFXMLEntityTypeParsedInternal = @enumToInt(enum_unnamed_202.kCFXMLEntityTypeParsedInternal);
pub const kCFXMLEntityTypeParsedExternal = @enumToInt(enum_unnamed_202.kCFXMLEntityTypeParsedExternal);
pub const kCFXMLEntityTypeUnparsed = @enumToInt(enum_unnamed_202.kCFXMLEntityTypeUnparsed);
pub const kCFXMLEntityTypeCharacter = @enumToInt(enum_unnamed_202.kCFXMLEntityTypeCharacter);
const enum_unnamed_202 = extern enum(c_int) {
    kCFXMLEntityTypeParameter,
    kCFXMLEntityTypeParsedInternal,
    kCFXMLEntityTypeParsedExternal,
    kCFXMLEntityTypeUnparsed,
    kCFXMLEntityTypeCharacter,
    _,
};
const struct_unnamed_203 = extern struct {
    entityType: CFXMLEntityTypeCode,
    replacementText: CFStringRef,
    entityID: CFXMLExternalID,
    notationName: CFStringRef,
};
pub const CFXMLEntityInfo = struct_unnamed_203;
const struct_unnamed_204 = extern struct {
    entityType: CFXMLEntityTypeCode,
};
pub const CFXMLEntityReferenceInfo = struct_unnamed_204;
pub extern fn CFXMLNodeGetTypeID() CFTypeID;
pub extern fn CFXMLNodeCreate(alloc: CFAllocatorRef, xmlType: CFXMLNodeTypeCode, dataString: CFStringRef, additionalInfoPtr: ?*const c_void, version: CFIndex) CFXMLNodeRef;
pub extern fn CFXMLNodeCreateCopy(alloc: CFAllocatorRef, origNode: CFXMLNodeRef) CFXMLNodeRef;
pub extern fn CFXMLNodeGetTypeCode(node: CFXMLNodeRef) CFXMLNodeTypeCode;
pub extern fn CFXMLNodeGetString(node: CFXMLNodeRef) CFStringRef;
pub extern fn CFXMLNodeGetInfoPtr(node: CFXMLNodeRef) ?*const c_void;
pub extern fn CFXMLNodeGetVersion(node: CFXMLNodeRef) CFIndex;
pub extern fn CFXMLTreeCreateWithNode(allocator: CFAllocatorRef, node: CFXMLNodeRef) CFXMLTreeRef;
pub extern fn CFXMLTreeGetNode(xmlTree: CFXMLTreeRef) CFXMLNodeRef;
pub const struct___CFXMLParser = @OpaqueType();
pub const CFXMLParserRef = ?*struct___CFXMLParser;
pub const CFXMLParserOptions = CFOptionFlags;
pub const kCFXMLParserValidateDocument = @enumToInt(enum_unnamed_205.kCFXMLParserValidateDocument);
pub const kCFXMLParserSkipMetaData = @enumToInt(enum_unnamed_205.kCFXMLParserSkipMetaData);
pub const kCFXMLParserReplacePhysicalEntities = @enumToInt(enum_unnamed_205.kCFXMLParserReplacePhysicalEntities);
pub const kCFXMLParserSkipWhitespace = @enumToInt(enum_unnamed_205.kCFXMLParserSkipWhitespace);
pub const kCFXMLParserResolveExternalEntities = @enumToInt(enum_unnamed_205.kCFXMLParserResolveExternalEntities);
pub const kCFXMLParserAddImpliedAttributes = @enumToInt(enum_unnamed_205.kCFXMLParserAddImpliedAttributes);
pub const kCFXMLParserAllOptions = @enumToInt(enum_unnamed_205.kCFXMLParserAllOptions);
pub const kCFXMLParserNoOptions = @enumToInt(enum_unnamed_205.kCFXMLParserNoOptions);
const enum_unnamed_205 = extern enum(c_int) {
    kCFXMLParserValidateDocument = 1,
    kCFXMLParserSkipMetaData = 2,
    kCFXMLParserReplacePhysicalEntities = 4,
    kCFXMLParserSkipWhitespace = 8,
    kCFXMLParserResolveExternalEntities = 16,
    kCFXMLParserAddImpliedAttributes = 32,
    kCFXMLParserAllOptions = 16777215,
    kCFXMLParserNoOptions = 0,
    _,
};
pub const CFXMLParserStatusCode = CFIndex;
pub const kCFXMLStatusParseNotBegun = @enumToInt(enum_unnamed_206.kCFXMLStatusParseNotBegun);
pub const kCFXMLStatusParseInProgress = @enumToInt(enum_unnamed_206.kCFXMLStatusParseInProgress);
pub const kCFXMLStatusParseSuccessful = @enumToInt(enum_unnamed_206.kCFXMLStatusParseSuccessful);
pub const kCFXMLErrorUnexpectedEOF = @enumToInt(enum_unnamed_206.kCFXMLErrorUnexpectedEOF);
pub const kCFXMLErrorUnknownEncoding = @enumToInt(enum_unnamed_206.kCFXMLErrorUnknownEncoding);
pub const kCFXMLErrorEncodingConversionFailure = @enumToInt(enum_unnamed_206.kCFXMLErrorEncodingConversionFailure);
pub const kCFXMLErrorMalformedProcessingInstruction = @enumToInt(enum_unnamed_206.kCFXMLErrorMalformedProcessingInstruction);
pub const kCFXMLErrorMalformedDTD = @enumToInt(enum_unnamed_206.kCFXMLErrorMalformedDTD);
pub const kCFXMLErrorMalformedName = @enumToInt(enum_unnamed_206.kCFXMLErrorMalformedName);
pub const kCFXMLErrorMalformedCDSect = @enumToInt(enum_unnamed_206.kCFXMLErrorMalformedCDSect);
pub const kCFXMLErrorMalformedCloseTag = @enumToInt(enum_unnamed_206.kCFXMLErrorMalformedCloseTag);
pub const kCFXMLErrorMalformedStartTag = @enumToInt(enum_unnamed_206.kCFXMLErrorMalformedStartTag);
pub const kCFXMLErrorMalformedDocument = @enumToInt(enum_unnamed_206.kCFXMLErrorMalformedDocument);
pub const kCFXMLErrorElementlessDocument = @enumToInt(enum_unnamed_206.kCFXMLErrorElementlessDocument);
pub const kCFXMLErrorMalformedComment = @enumToInt(enum_unnamed_206.kCFXMLErrorMalformedComment);
pub const kCFXMLErrorMalformedCharacterReference = @enumToInt(enum_unnamed_206.kCFXMLErrorMalformedCharacterReference);
pub const kCFXMLErrorMalformedParsedCharacterData = @enumToInt(enum_unnamed_206.kCFXMLErrorMalformedParsedCharacterData);
pub const kCFXMLErrorNoData = @enumToInt(enum_unnamed_206.kCFXMLErrorNoData);
const enum_unnamed_206 = extern enum(c_int) {
    kCFXMLStatusParseNotBegun = -2,
    kCFXMLStatusParseInProgress = -1,
    kCFXMLStatusParseSuccessful = 0,
    kCFXMLErrorUnexpectedEOF = 1,
    kCFXMLErrorUnknownEncoding = 2,
    kCFXMLErrorEncodingConversionFailure = 3,
    kCFXMLErrorMalformedProcessingInstruction = 4,
    kCFXMLErrorMalformedDTD = 5,
    kCFXMLErrorMalformedName = 6,
    kCFXMLErrorMalformedCDSect = 7,
    kCFXMLErrorMalformedCloseTag = 8,
    kCFXMLErrorMalformedStartTag = 9,
    kCFXMLErrorMalformedDocument = 10,
    kCFXMLErrorElementlessDocument = 11,
    kCFXMLErrorMalformedComment = 12,
    kCFXMLErrorMalformedCharacterReference = 13,
    kCFXMLErrorMalformedParsedCharacterData = 14,
    kCFXMLErrorNoData = 15,
    _,
};
pub const CFXMLParserCreateXMLStructureCallBack = ?fn (CFXMLParserRef, CFXMLNodeRef, ?*c_void) callconv(.C) ?*c_void;
pub const CFXMLParserAddChildCallBack = ?fn (CFXMLParserRef, ?*c_void, ?*c_void, ?*c_void) callconv(.C) void;
pub const CFXMLParserEndXMLStructureCallBack = ?fn (CFXMLParserRef, ?*c_void, ?*c_void) callconv(.C) void;
pub const CFXMLParserResolveExternalEntityCallBack = ?fn (CFXMLParserRef, [*c]CFXMLExternalID, ?*c_void) callconv(.C) CFDataRef;
pub const CFXMLParserHandleErrorCallBack = ?fn (CFXMLParserRef, CFXMLParserStatusCode, ?*c_void) callconv(.C) Boolean;
const struct_unnamed_207 = extern struct {
    version: CFIndex,
    createXMLStructure: CFXMLParserCreateXMLStructureCallBack,
    addChild: CFXMLParserAddChildCallBack,
    endXMLStructure: CFXMLParserEndXMLStructureCallBack,
    resolveExternalEntity: CFXMLParserResolveExternalEntityCallBack,
    handleError: CFXMLParserHandleErrorCallBack,
};
pub const CFXMLParserCallBacks = struct_unnamed_207;
pub const CFXMLParserRetainCallBack = ?fn (?*const c_void) callconv(.C) ?*const c_void;
pub const CFXMLParserReleaseCallBack = ?fn (?*const c_void) callconv(.C) void;
pub const CFXMLParserCopyDescriptionCallBack = ?fn (?*const c_void) callconv(.C) CFStringRef;
const struct_unnamed_208 = extern struct {
    version: CFIndex,
    info: ?*c_void,
    retain: CFXMLParserRetainCallBack,
    release: CFXMLParserReleaseCallBack,
    copyDescription: CFXMLParserCopyDescriptionCallBack,
};
pub const CFXMLParserContext = struct_unnamed_208;
pub extern fn CFXMLParserGetTypeID() CFTypeID;
pub extern fn CFXMLParserCreate(allocator: CFAllocatorRef, xmlData: CFDataRef, dataSource: CFURLRef, parseOptions: CFOptionFlags, versionOfNodes: CFIndex, callBacks: [*c]CFXMLParserCallBacks, context: [*c]CFXMLParserContext) CFXMLParserRef;
pub extern fn CFXMLParserCreateWithDataFromURL(allocator: CFAllocatorRef, dataSource: CFURLRef, parseOptions: CFOptionFlags, versionOfNodes: CFIndex, callBacks: [*c]CFXMLParserCallBacks, context: [*c]CFXMLParserContext) CFXMLParserRef;
pub extern fn CFXMLParserGetContext(parser: CFXMLParserRef, context: [*c]CFXMLParserContext) void;
pub extern fn CFXMLParserGetCallBacks(parser: CFXMLParserRef, callBacks: [*c]CFXMLParserCallBacks) void;
pub extern fn CFXMLParserGetSourceURL(parser: CFXMLParserRef) CFURLRef;
pub extern fn CFXMLParserGetLocation(parser: CFXMLParserRef) CFIndex;
pub extern fn CFXMLParserGetLineNumber(parser: CFXMLParserRef) CFIndex;
pub extern fn CFXMLParserGetDocument(parser: CFXMLParserRef) ?*c_void;
pub extern fn CFXMLParserGetStatusCode(parser: CFXMLParserRef) CFXMLParserStatusCode;
pub extern fn CFXMLParserCopyErrorDescription(parser: CFXMLParserRef) CFStringRef;
pub extern fn CFXMLParserAbort(parser: CFXMLParserRef, errorCode: CFXMLParserStatusCode, errorDescription: CFStringRef) void;
pub extern fn CFXMLParserParse(parser: CFXMLParserRef) Boolean;
pub extern fn CFXMLTreeCreateFromData(allocator: CFAllocatorRef, xmlData: CFDataRef, dataSource: CFURLRef, parseOptions: CFOptionFlags, versionOfNodes: CFIndex) CFXMLTreeRef;
pub extern fn CFXMLTreeCreateFromDataWithError(allocator: CFAllocatorRef, xmlData: CFDataRef, dataSource: CFURLRef, parseOptions: CFOptionFlags, versionOfNodes: CFIndex, errorDict: [*c]CFDictionaryRef) CFXMLTreeRef;
pub extern fn CFXMLTreeCreateWithDataFromURL(allocator: CFAllocatorRef, dataSource: CFURLRef, parseOptions: CFOptionFlags, versionOfNodes: CFIndex) CFXMLTreeRef;
pub extern fn CFXMLTreeCreateXMLData(allocator: CFAllocatorRef, xmlTree: CFXMLTreeRef) CFDataRef;
pub extern fn CFXMLCreateStringByEscapingEntities(allocator: CFAllocatorRef, string: CFStringRef, entitiesDictionary: CFDictionaryRef) CFStringRef;
pub extern fn CFXMLCreateStringByUnescapingEntities(allocator: CFAllocatorRef, string: CFStringRef, entitiesDictionary: CFDictionaryRef) CFStringRef;
pub extern const kCFXMLTreeErrorDescription: CFStringRef;
pub extern const kCFXMLTreeErrorLineNumber: CFStringRef;
pub extern const kCFXMLTreeErrorLocation: CFStringRef;
pub extern const kCFXMLTreeErrorStatusCode: CFStringRef;
pub const kAudioObjectSystemObject = @enumToInt(enum_unnamed_209.kAudioObjectSystemObject);
const enum_unnamed_209 = extern enum(c_int) {
    kAudioObjectSystemObject = 1,
    _,
};
pub const AudioObjectPropertyListenerProc = ?fn (AudioObjectID, UInt32, [*c]const AudioObjectPropertyAddress, ?*c_void) callconv(.C) OSStatus;
pub const AudioObjectPropertyListenerBlock = @compileError("unable to resolve typedef child type");
pub const kAudioObjectPropertyCreator = @enumToInt(enum_unnamed_210.kAudioObjectPropertyCreator);
pub const kAudioObjectPropertyListenerAdded = @enumToInt(enum_unnamed_210.kAudioObjectPropertyListenerAdded);
pub const kAudioObjectPropertyListenerRemoved = @enumToInt(enum_unnamed_210.kAudioObjectPropertyListenerRemoved);
const enum_unnamed_210 = extern enum(c_int) {
    kAudioObjectPropertyCreator = 1869638759,
    kAudioObjectPropertyListenerAdded = 1818850145,
    kAudioObjectPropertyListenerRemoved = 1818850162,
    _,
};
pub extern fn AudioObjectShow(inObjectID: AudioObjectID) void;
pub extern fn AudioObjectHasProperty(inObjectID: AudioObjectID, inAddress: [*c]const AudioObjectPropertyAddress) Boolean;
pub extern fn AudioObjectIsPropertySettable(inObjectID: AudioObjectID, inAddress: [*c]const AudioObjectPropertyAddress, outIsSettable: [*c]Boolean) OSStatus;
pub extern fn AudioObjectGetPropertyDataSize(inObjectID: AudioObjectID, inAddress: [*c]const AudioObjectPropertyAddress, inQualifierDataSize: UInt32, inQualifierData: ?*const c_void, outDataSize: [*c]UInt32) OSStatus;
pub extern fn AudioObjectGetPropertyData(inObjectID: AudioObjectID, inAddress: [*c]const AudioObjectPropertyAddress, inQualifierDataSize: UInt32, inQualifierData: ?*const c_void, ioDataSize: [*c]UInt32, outData: ?*c_void) OSStatus;
pub extern fn AudioObjectSetPropertyData(inObjectID: AudioObjectID, inAddress: [*c]const AudioObjectPropertyAddress, inQualifierDataSize: UInt32, inQualifierData: ?*const c_void, inDataSize: UInt32, inData: ?*const c_void) OSStatus;
pub extern fn AudioObjectAddPropertyListener(inObjectID: AudioObjectID, inAddress: [*c]const AudioObjectPropertyAddress, inListener: AudioObjectPropertyListenerProc, inClientData: ?*c_void) OSStatus;
pub extern fn AudioObjectRemovePropertyListener(inObjectID: AudioObjectID, inAddress: [*c]const AudioObjectPropertyAddress, inListener: AudioObjectPropertyListenerProc, inClientData: ?*c_void) OSStatus;
pub extern fn AudioObjectAddPropertyListenerBlock(inObjectID: AudioObjectID, inAddress: [*c]const AudioObjectPropertyAddress, inDispatchQueue: dispatch_queue_t, inListener: AudioObjectPropertyListenerBlock) OSStatus;
pub extern fn AudioObjectRemovePropertyListenerBlock(inObjectID: AudioObjectID, inAddress: [*c]const AudioObjectPropertyAddress, inDispatchQueue: dispatch_queue_t, inListener: AudioObjectPropertyListenerBlock) OSStatus;
pub const kAudioSystemObjectClassID = @enumToInt(enum_unnamed_211.kAudioSystemObjectClassID);
const enum_unnamed_211 = extern enum(c_int) {
    kAudioSystemObjectClassID = 1634957683,
    _,
};
pub const AudioHardwarePowerHint = UInt32;
pub const kAudioHardwarePowerHintNone = @enumToInt(enum_unnamed_212.kAudioHardwarePowerHintNone);
pub const kAudioHardwarePowerHintFavorSavingPower = @enumToInt(enum_unnamed_212.kAudioHardwarePowerHintFavorSavingPower);
const enum_unnamed_212 = extern enum(c_int) {
    kAudioHardwarePowerHintNone = 0,
    kAudioHardwarePowerHintFavorSavingPower = 1,
    _,
};
pub const kAudioHardwarePropertyDevices = @enumToInt(enum_unnamed_213.kAudioHardwarePropertyDevices);
pub const kAudioHardwarePropertyDefaultInputDevice = @enumToInt(enum_unnamed_213.kAudioHardwarePropertyDefaultInputDevice);
pub const kAudioHardwarePropertyDefaultOutputDevice = @enumToInt(enum_unnamed_213.kAudioHardwarePropertyDefaultOutputDevice);
pub const kAudioHardwarePropertyDefaultSystemOutputDevice = @enumToInt(enum_unnamed_213.kAudioHardwarePropertyDefaultSystemOutputDevice);
pub const kAudioHardwarePropertyTranslateUIDToDevice = @enumToInt(enum_unnamed_213.kAudioHardwarePropertyTranslateUIDToDevice);
pub const kAudioHardwarePropertyMixStereoToMono = @enumToInt(enum_unnamed_213.kAudioHardwarePropertyMixStereoToMono);
pub const kAudioHardwarePropertyPlugInList = @enumToInt(enum_unnamed_213.kAudioHardwarePropertyPlugInList);
pub const kAudioHardwarePropertyTranslateBundleIDToPlugIn = @enumToInt(enum_unnamed_213.kAudioHardwarePropertyTranslateBundleIDToPlugIn);
pub const kAudioHardwarePropertyTransportManagerList = @enumToInt(enum_unnamed_213.kAudioHardwarePropertyTransportManagerList);
pub const kAudioHardwarePropertyTranslateBundleIDToTransportManager = @enumToInt(enum_unnamed_213.kAudioHardwarePropertyTranslateBundleIDToTransportManager);
pub const kAudioHardwarePropertyBoxList = @enumToInt(enum_unnamed_213.kAudioHardwarePropertyBoxList);
pub const kAudioHardwarePropertyTranslateUIDToBox = @enumToInt(enum_unnamed_213.kAudioHardwarePropertyTranslateUIDToBox);
pub const kAudioHardwarePropertyClockDeviceList = @enumToInt(enum_unnamed_213.kAudioHardwarePropertyClockDeviceList);
pub const kAudioHardwarePropertyTranslateUIDToClockDevice = @enumToInt(enum_unnamed_213.kAudioHardwarePropertyTranslateUIDToClockDevice);
pub const kAudioHardwarePropertyProcessIsMaster = @enumToInt(enum_unnamed_213.kAudioHardwarePropertyProcessIsMaster);
pub const kAudioHardwarePropertyIsInitingOrExiting = @enumToInt(enum_unnamed_213.kAudioHardwarePropertyIsInitingOrExiting);
pub const kAudioHardwarePropertyUserIDChanged = @enumToInt(enum_unnamed_213.kAudioHardwarePropertyUserIDChanged);
pub const kAudioHardwarePropertyProcessIsAudible = @enumToInt(enum_unnamed_213.kAudioHardwarePropertyProcessIsAudible);
pub const kAudioHardwarePropertySleepingIsAllowed = @enumToInt(enum_unnamed_213.kAudioHardwarePropertySleepingIsAllowed);
pub const kAudioHardwarePropertyUnloadingIsAllowed = @enumToInt(enum_unnamed_213.kAudioHardwarePropertyUnloadingIsAllowed);
pub const kAudioHardwarePropertyHogModeIsAllowed = @enumToInt(enum_unnamed_213.kAudioHardwarePropertyHogModeIsAllowed);
pub const kAudioHardwarePropertyUserSessionIsActiveOrHeadless = @enumToInt(enum_unnamed_213.kAudioHardwarePropertyUserSessionIsActiveOrHeadless);
pub const kAudioHardwarePropertyServiceRestarted = @enumToInt(enum_unnamed_213.kAudioHardwarePropertyServiceRestarted);
pub const kAudioHardwarePropertyPowerHint = @enumToInt(enum_unnamed_213.kAudioHardwarePropertyPowerHint);
const enum_unnamed_213 = extern enum(c_int) {
    kAudioHardwarePropertyDevices = 1684370979,
    kAudioHardwarePropertyDefaultInputDevice = 1682533920,
    kAudioHardwarePropertyDefaultOutputDevice = 1682929012,
    kAudioHardwarePropertyDefaultSystemOutputDevice = 1934587252,
    kAudioHardwarePropertyTranslateUIDToDevice = 1969841252,
    kAudioHardwarePropertyMixStereoToMono = 1937010031,
    kAudioHardwarePropertyPlugInList = 1886152483,
    kAudioHardwarePropertyTranslateBundleIDToPlugIn = 1651074160,
    kAudioHardwarePropertyTransportManagerList = 1953326883,
    kAudioHardwarePropertyTranslateBundleIDToTransportManager = 1953325673,
    kAudioHardwarePropertyBoxList = 1651472419,
    kAudioHardwarePropertyTranslateUIDToBox = 1969841250,
    kAudioHardwarePropertyClockDeviceList = 1668049699,
    kAudioHardwarePropertyTranslateUIDToClockDevice = 1969841251,
    kAudioHardwarePropertyProcessIsMaster = 1835103092,
    kAudioHardwarePropertyIsInitingOrExiting = 1768845172,
    kAudioHardwarePropertyUserIDChanged = 1702193508,
    kAudioHardwarePropertyProcessIsAudible = 1886221684,
    kAudioHardwarePropertySleepingIsAllowed = 1936483696,
    kAudioHardwarePropertyUnloadingIsAllowed = 1970170980,
    kAudioHardwarePropertyHogModeIsAllowed = 1752131442,
    kAudioHardwarePropertyUserSessionIsActiveOrHeadless = 1970496882,
    kAudioHardwarePropertyServiceRestarted = 1936880500,
    kAudioHardwarePropertyPowerHint = 1886353256,
    _,
};
pub extern fn AudioHardwareUnload() OSStatus;
pub extern fn AudioHardwareCreateAggregateDevice(inDescription: CFDictionaryRef, outDeviceID: [*c]AudioObjectID) OSStatus;
pub extern fn AudioHardwareDestroyAggregateDevice(inDeviceID: AudioObjectID) OSStatus;
pub const kAudioPlugInCreateAggregateDevice = @enumToInt(enum_unnamed_214.kAudioPlugInCreateAggregateDevice);
pub const kAudioPlugInDestroyAggregateDevice = @enumToInt(enum_unnamed_214.kAudioPlugInDestroyAggregateDevice);
const enum_unnamed_214 = extern enum(c_int) {
    kAudioPlugInCreateAggregateDevice = 1667327847,
    kAudioPlugInDestroyAggregateDevice = 1684105063,
    _,
};
pub const kAudioTransportManagerCreateEndPointDevice = @enumToInt(enum_unnamed_215.kAudioTransportManagerCreateEndPointDevice);
pub const kAudioTransportManagerDestroyEndPointDevice = @enumToInt(enum_unnamed_215.kAudioTransportManagerDestroyEndPointDevice);
const enum_unnamed_215 = extern enum(c_int) {
    kAudioTransportManagerCreateEndPointDevice = 1667523958,
    kAudioTransportManagerDestroyEndPointDevice = 1684301174,
    _,
};
pub const AudioDeviceIOProc = ?fn (AudioObjectID, [*c]const AudioTimeStamp, [*c]const AudioBufferList, [*c]const AudioTimeStamp, [*c]AudioBufferList, [*c]const AudioTimeStamp, ?*c_void) callconv(.C) OSStatus;
pub const AudioDeviceIOBlock = @compileError("unable to resolve typedef child type");
pub const AudioDeviceIOProcID = AudioDeviceIOProc;
pub const struct_AudioHardwareIOProcStreamUsage = extern struct {
    mIOProc: ?*c_void,
    mNumberStreams: UInt32,
    mStreamIsOn: [1]UInt32,
};
pub const AudioHardwareIOProcStreamUsage = struct_AudioHardwareIOProcStreamUsage;
pub const kAudioDeviceStartTimeIsInputFlag = @enumToInt(enum_unnamed_216.kAudioDeviceStartTimeIsInputFlag);
pub const kAudioDeviceStartTimeDontConsultDeviceFlag = @enumToInt(enum_unnamed_216.kAudioDeviceStartTimeDontConsultDeviceFlag);
pub const kAudioDeviceStartTimeDontConsultHALFlag = @enumToInt(enum_unnamed_216.kAudioDeviceStartTimeDontConsultHALFlag);
const enum_unnamed_216 = extern enum(c_int) {
    kAudioDeviceStartTimeIsInputFlag = 1,
    kAudioDeviceStartTimeDontConsultDeviceFlag = 2,
    kAudioDeviceStartTimeDontConsultHALFlag = 4,
    _,
};
pub const kAudioDevicePropertyPlugIn = @enumToInt(enum_unnamed_217.kAudioDevicePropertyPlugIn);
pub const kAudioDevicePropertyDeviceHasChanged = @enumToInt(enum_unnamed_217.kAudioDevicePropertyDeviceHasChanged);
pub const kAudioDevicePropertyDeviceIsRunningSomewhere = @enumToInt(enum_unnamed_217.kAudioDevicePropertyDeviceIsRunningSomewhere);
pub const kAudioDeviceProcessorOverload = @enumToInt(enum_unnamed_217.kAudioDeviceProcessorOverload);
pub const kAudioDevicePropertyIOStoppedAbnormally = @enumToInt(enum_unnamed_217.kAudioDevicePropertyIOStoppedAbnormally);
pub const kAudioDevicePropertyHogMode = @enumToInt(enum_unnamed_217.kAudioDevicePropertyHogMode);
pub const kAudioDevicePropertyBufferFrameSize = @enumToInt(enum_unnamed_217.kAudioDevicePropertyBufferFrameSize);
pub const kAudioDevicePropertyBufferFrameSizeRange = @enumToInt(enum_unnamed_217.kAudioDevicePropertyBufferFrameSizeRange);
pub const kAudioDevicePropertyUsesVariableBufferFrameSizes = @enumToInt(enum_unnamed_217.kAudioDevicePropertyUsesVariableBufferFrameSizes);
pub const kAudioDevicePropertyIOCycleUsage = @enumToInt(enum_unnamed_217.kAudioDevicePropertyIOCycleUsage);
pub const kAudioDevicePropertyStreamConfiguration = @enumToInt(enum_unnamed_217.kAudioDevicePropertyStreamConfiguration);
pub const kAudioDevicePropertyIOProcStreamUsage = @enumToInt(enum_unnamed_217.kAudioDevicePropertyIOProcStreamUsage);
pub const kAudioDevicePropertyActualSampleRate = @enumToInt(enum_unnamed_217.kAudioDevicePropertyActualSampleRate);
pub const kAudioDevicePropertyClockDevice = @enumToInt(enum_unnamed_217.kAudioDevicePropertyClockDevice);
const enum_unnamed_217 = extern enum(c_int) {
    kAudioDevicePropertyPlugIn = 1886156135,
    kAudioDevicePropertyDeviceHasChanged = 1684629094,
    kAudioDevicePropertyDeviceIsRunningSomewhere = 1735356005,
    kAudioDeviceProcessorOverload = 1870030194,
    kAudioDevicePropertyIOStoppedAbnormally = 1937010788,
    kAudioDevicePropertyHogMode = 1869180523,
    kAudioDevicePropertyBufferFrameSize = 1718839674,
    kAudioDevicePropertyBufferFrameSizeRange = 1718843939,
    kAudioDevicePropertyUsesVariableBufferFrameSizes = 1986425722,
    kAudioDevicePropertyIOCycleUsage = 1852012899,
    kAudioDevicePropertyStreamConfiguration = 1936482681,
    kAudioDevicePropertyIOProcStreamUsage = 1937077093,
    kAudioDevicePropertyActualSampleRate = 1634955892,
    kAudioDevicePropertyClockDevice = 1634755428,
    _,
};
pub const kAudioDevicePropertyJackIsConnected = @enumToInt(enum_unnamed_218.kAudioDevicePropertyJackIsConnected);
pub const kAudioDevicePropertyVolumeScalar = @enumToInt(enum_unnamed_218.kAudioDevicePropertyVolumeScalar);
pub const kAudioDevicePropertyVolumeDecibels = @enumToInt(enum_unnamed_218.kAudioDevicePropertyVolumeDecibels);
pub const kAudioDevicePropertyVolumeRangeDecibels = @enumToInt(enum_unnamed_218.kAudioDevicePropertyVolumeRangeDecibels);
pub const kAudioDevicePropertyVolumeScalarToDecibels = @enumToInt(enum_unnamed_218.kAudioDevicePropertyVolumeScalarToDecibels);
pub const kAudioDevicePropertyVolumeDecibelsToScalar = @enumToInt(enum_unnamed_218.kAudioDevicePropertyVolumeDecibelsToScalar);
pub const kAudioDevicePropertyStereoPan = @enumToInt(enum_unnamed_218.kAudioDevicePropertyStereoPan);
pub const kAudioDevicePropertyStereoPanChannels = @enumToInt(enum_unnamed_218.kAudioDevicePropertyStereoPanChannels);
pub const kAudioDevicePropertyMute = @enumToInt(enum_unnamed_218.kAudioDevicePropertyMute);
pub const kAudioDevicePropertySolo = @enumToInt(enum_unnamed_218.kAudioDevicePropertySolo);
pub const kAudioDevicePropertyPhantomPower = @enumToInt(enum_unnamed_218.kAudioDevicePropertyPhantomPower);
pub const kAudioDevicePropertyPhaseInvert = @enumToInt(enum_unnamed_218.kAudioDevicePropertyPhaseInvert);
pub const kAudioDevicePropertyClipLight = @enumToInt(enum_unnamed_218.kAudioDevicePropertyClipLight);
pub const kAudioDevicePropertyTalkback = @enumToInt(enum_unnamed_218.kAudioDevicePropertyTalkback);
pub const kAudioDevicePropertyListenback = @enumToInt(enum_unnamed_218.kAudioDevicePropertyListenback);
pub const kAudioDevicePropertyDataSource = @enumToInt(enum_unnamed_218.kAudioDevicePropertyDataSource);
pub const kAudioDevicePropertyDataSources = @enumToInt(enum_unnamed_218.kAudioDevicePropertyDataSources);
pub const kAudioDevicePropertyDataSourceNameForIDCFString = @enumToInt(enum_unnamed_218.kAudioDevicePropertyDataSourceNameForIDCFString);
pub const kAudioDevicePropertyDataSourceKindForID = @enumToInt(enum_unnamed_218.kAudioDevicePropertyDataSourceKindForID);
pub const kAudioDevicePropertyClockSource = @enumToInt(enum_unnamed_218.kAudioDevicePropertyClockSource);
pub const kAudioDevicePropertyClockSources = @enumToInt(enum_unnamed_218.kAudioDevicePropertyClockSources);
pub const kAudioDevicePropertyClockSourceNameForIDCFString = @enumToInt(enum_unnamed_218.kAudioDevicePropertyClockSourceNameForIDCFString);
pub const kAudioDevicePropertyClockSourceKindForID = @enumToInt(enum_unnamed_218.kAudioDevicePropertyClockSourceKindForID);
pub const kAudioDevicePropertyPlayThru = @enumToInt(enum_unnamed_218.kAudioDevicePropertyPlayThru);
pub const kAudioDevicePropertyPlayThruSolo = @enumToInt(enum_unnamed_218.kAudioDevicePropertyPlayThruSolo);
pub const kAudioDevicePropertyPlayThruVolumeScalar = @enumToInt(enum_unnamed_218.kAudioDevicePropertyPlayThruVolumeScalar);
pub const kAudioDevicePropertyPlayThruVolumeDecibels = @enumToInt(enum_unnamed_218.kAudioDevicePropertyPlayThruVolumeDecibels);
pub const kAudioDevicePropertyPlayThruVolumeRangeDecibels = @enumToInt(enum_unnamed_218.kAudioDevicePropertyPlayThruVolumeRangeDecibels);
pub const kAudioDevicePropertyPlayThruVolumeScalarToDecibels = @enumToInt(enum_unnamed_218.kAudioDevicePropertyPlayThruVolumeScalarToDecibels);
pub const kAudioDevicePropertyPlayThruVolumeDecibelsToScalar = @enumToInt(enum_unnamed_218.kAudioDevicePropertyPlayThruVolumeDecibelsToScalar);
pub const kAudioDevicePropertyPlayThruStereoPan = @enumToInt(enum_unnamed_218.kAudioDevicePropertyPlayThruStereoPan);
pub const kAudioDevicePropertyPlayThruStereoPanChannels = @enumToInt(enum_unnamed_218.kAudioDevicePropertyPlayThruStereoPanChannels);
pub const kAudioDevicePropertyPlayThruDestination = @enumToInt(enum_unnamed_218.kAudioDevicePropertyPlayThruDestination);
pub const kAudioDevicePropertyPlayThruDestinations = @enumToInt(enum_unnamed_218.kAudioDevicePropertyPlayThruDestinations);
pub const kAudioDevicePropertyPlayThruDestinationNameForIDCFString = @enumToInt(enum_unnamed_218.kAudioDevicePropertyPlayThruDestinationNameForIDCFString);
pub const kAudioDevicePropertyChannelNominalLineLevel = @enumToInt(enum_unnamed_218.kAudioDevicePropertyChannelNominalLineLevel);
pub const kAudioDevicePropertyChannelNominalLineLevels = @enumToInt(enum_unnamed_218.kAudioDevicePropertyChannelNominalLineLevels);
pub const kAudioDevicePropertyChannelNominalLineLevelNameForIDCFString = @enumToInt(enum_unnamed_218.kAudioDevicePropertyChannelNominalLineLevelNameForIDCFString);
pub const kAudioDevicePropertyHighPassFilterSetting = @enumToInt(enum_unnamed_218.kAudioDevicePropertyHighPassFilterSetting);
pub const kAudioDevicePropertyHighPassFilterSettings = @enumToInt(enum_unnamed_218.kAudioDevicePropertyHighPassFilterSettings);
pub const kAudioDevicePropertyHighPassFilterSettingNameForIDCFString = @enumToInt(enum_unnamed_218.kAudioDevicePropertyHighPassFilterSettingNameForIDCFString);
pub const kAudioDevicePropertySubVolumeScalar = @enumToInt(enum_unnamed_218.kAudioDevicePropertySubVolumeScalar);
pub const kAudioDevicePropertySubVolumeDecibels = @enumToInt(enum_unnamed_218.kAudioDevicePropertySubVolumeDecibels);
pub const kAudioDevicePropertySubVolumeRangeDecibels = @enumToInt(enum_unnamed_218.kAudioDevicePropertySubVolumeRangeDecibels);
pub const kAudioDevicePropertySubVolumeScalarToDecibels = @enumToInt(enum_unnamed_218.kAudioDevicePropertySubVolumeScalarToDecibels);
pub const kAudioDevicePropertySubVolumeDecibelsToScalar = @enumToInt(enum_unnamed_218.kAudioDevicePropertySubVolumeDecibelsToScalar);
pub const kAudioDevicePropertySubMute = @enumToInt(enum_unnamed_218.kAudioDevicePropertySubMute);
const enum_unnamed_218 = extern enum(c_int) {
    kAudioDevicePropertyJackIsConnected = 1784767339,
    kAudioDevicePropertyVolumeScalar = 1987013741,
    kAudioDevicePropertyVolumeDecibels = 1987013732,
    kAudioDevicePropertyVolumeRangeDecibels = 1986290211,
    kAudioDevicePropertyVolumeScalarToDecibels = 1983013986,
    kAudioDevicePropertyVolumeDecibelsToScalar = 1684157046,
    kAudioDevicePropertyStereoPan = 1936744814,
    kAudioDevicePropertyStereoPanChannels = 1936748067,
    kAudioDevicePropertyMute = 1836414053,
    kAudioDevicePropertySolo = 1936682095,
    kAudioDevicePropertyPhantomPower = 1885888878,
    kAudioDevicePropertyPhaseInvert = 1885893481,
    kAudioDevicePropertyClipLight = 1668049264,
    kAudioDevicePropertyTalkback = 1952541794,
    kAudioDevicePropertyListenback = 1819504226,
    kAudioDevicePropertyDataSource = 1936945763,
    kAudioDevicePropertyDataSources = 1936941859,
    kAudioDevicePropertyDataSourceNameForIDCFString = 1819501422,
    kAudioDevicePropertyDataSourceKindForID = 1936941931,
    kAudioDevicePropertyClockSource = 1668510307,
    kAudioDevicePropertyClockSources = 1668506403,
    kAudioDevicePropertyClockSourceNameForIDCFString = 1818456942,
    kAudioDevicePropertyClockSourceKindForID = 1668506475,
    kAudioDevicePropertyPlayThru = 1953002101,
    kAudioDevicePropertyPlayThruSolo = 1953002099,
    kAudioDevicePropertyPlayThruVolumeScalar = 1836479331,
    kAudioDevicePropertyPlayThruVolumeDecibels = 1836475490,
    kAudioDevicePropertyPlayThruVolumeRangeDecibels = 1836475427,
    kAudioDevicePropertyPlayThruVolumeScalarToDecibels = 1836462692,
    kAudioDevicePropertyPlayThruVolumeDecibelsToScalar = 1836462707,
    kAudioDevicePropertyPlayThruStereoPan = 1836281966,
    kAudioDevicePropertyPlayThruStereoPanChannels = 1836281891,
    kAudioDevicePropertyPlayThruDestination = 1835295859,
    kAudioDevicePropertyPlayThruDestinations = 1835295779,
    kAudioDevicePropertyPlayThruDestinationNameForIDCFString = 1835295843,
    kAudioDevicePropertyChannelNominalLineLevel = 1852601964,
    kAudioDevicePropertyChannelNominalLineLevels = 1852601891,
    kAudioDevicePropertyChannelNominalLineLevelNameForIDCFString = 1818455660,
    kAudioDevicePropertyHighPassFilterSetting = 1751740518,
    kAudioDevicePropertyHighPassFilterSettings = 1751740451,
    kAudioDevicePropertyHighPassFilterSettingNameForIDCFString = 1751740524,
    kAudioDevicePropertySubVolumeScalar = 1937140845,
    kAudioDevicePropertySubVolumeDecibels = 1937140836,
    kAudioDevicePropertySubVolumeRangeDecibels = 1937138723,
    kAudioDevicePropertySubVolumeScalarToDecibels = 1937125988,
    kAudioDevicePropertySubVolumeDecibelsToScalar = 1935946358,
    kAudioDevicePropertySubMute = 1936553332,
    _,
};
pub extern fn AudioDeviceCreateIOProcID(inDevice: AudioObjectID, inProc: AudioDeviceIOProc, inClientData: ?*c_void, outIOProcID: [*c]AudioDeviceIOProcID) OSStatus;
pub extern fn AudioDeviceCreateIOProcIDWithBlock(outIOProcID: [*c]AudioDeviceIOProcID, inDevice: AudioObjectID, inDispatchQueue: dispatch_queue_t, inIOBlock: AudioDeviceIOBlock) OSStatus;
pub extern fn AudioDeviceDestroyIOProcID(inDevice: AudioObjectID, inIOProcID: AudioDeviceIOProcID) OSStatus;
pub extern fn AudioDeviceStart(inDevice: AudioObjectID, inProcID: AudioDeviceIOProcID) OSStatus;
pub extern fn AudioDeviceStartAtTime(inDevice: AudioObjectID, inProcID: AudioDeviceIOProcID, ioRequestedStartTime: [*c]AudioTimeStamp, inFlags: UInt32) OSStatus;
pub extern fn AudioDeviceStop(inDevice: AudioObjectID, inProcID: AudioDeviceIOProcID) OSStatus;
pub extern fn AudioDeviceGetCurrentTime(inDevice: AudioObjectID, outTime: [*c]AudioTimeStamp) OSStatus;
pub extern fn AudioDeviceTranslateTime(inDevice: AudioObjectID, inTime: [*c]const AudioTimeStamp, outTime: [*c]AudioTimeStamp) OSStatus;
pub extern fn AudioDeviceGetNearestStartTime(inDevice: AudioObjectID, ioRequestedStartTime: [*c]AudioTimeStamp, inFlags: UInt32) OSStatus;
pub const kAudioAggregateDeviceClassID = @enumToInt(enum_unnamed_219.kAudioAggregateDeviceClassID);
const enum_unnamed_219 = extern enum(c_int) {
    kAudioAggregateDeviceClassID = 1633773415,
    _,
};
pub const kAudioAggregateDevicePropertyFullSubDeviceList = @enumToInt(enum_unnamed_220.kAudioAggregateDevicePropertyFullSubDeviceList);
pub const kAudioAggregateDevicePropertyActiveSubDeviceList = @enumToInt(enum_unnamed_220.kAudioAggregateDevicePropertyActiveSubDeviceList);
pub const kAudioAggregateDevicePropertyComposition = @enumToInt(enum_unnamed_220.kAudioAggregateDevicePropertyComposition);
pub const kAudioAggregateDevicePropertyMasterSubDevice = @enumToInt(enum_unnamed_220.kAudioAggregateDevicePropertyMasterSubDevice);
pub const kAudioAggregateDevicePropertyClockDevice = @enumToInt(enum_unnamed_220.kAudioAggregateDevicePropertyClockDevice);
const enum_unnamed_220 = extern enum(c_int) {
    kAudioAggregateDevicePropertyFullSubDeviceList = 1735554416,
    kAudioAggregateDevicePropertyActiveSubDeviceList = 1634169456,
    kAudioAggregateDevicePropertyComposition = 1633906541,
    kAudioAggregateDevicePropertyMasterSubDevice = 1634562932,
    kAudioAggregateDevicePropertyClockDevice = 1634755428,
    _,
};
pub const kAudioSubDeviceClassID = @enumToInt(enum_unnamed_221.kAudioSubDeviceClassID);
const enum_unnamed_221 = extern enum(c_int) {
    kAudioSubDeviceClassID = 1634956642,
    _,
};
pub const kAudioSubDeviceDriftCompensationMinQuality = @enumToInt(enum_unnamed_222.kAudioSubDeviceDriftCompensationMinQuality);
pub const kAudioSubDeviceDriftCompensationLowQuality = @enumToInt(enum_unnamed_222.kAudioSubDeviceDriftCompensationLowQuality);
pub const kAudioSubDeviceDriftCompensationMediumQuality = @enumToInt(enum_unnamed_222.kAudioSubDeviceDriftCompensationMediumQuality);
pub const kAudioSubDeviceDriftCompensationHighQuality = @enumToInt(enum_unnamed_222.kAudioSubDeviceDriftCompensationHighQuality);
pub const kAudioSubDeviceDriftCompensationMaxQuality = @enumToInt(enum_unnamed_222.kAudioSubDeviceDriftCompensationMaxQuality);
const enum_unnamed_222 = extern enum(c_int) {
    kAudioSubDeviceDriftCompensationMinQuality = 0,
    kAudioSubDeviceDriftCompensationLowQuality = 32,
    kAudioSubDeviceDriftCompensationMediumQuality = 64,
    kAudioSubDeviceDriftCompensationHighQuality = 96,
    kAudioSubDeviceDriftCompensationMaxQuality = 127,
    _,
};
pub const kAudioSubDevicePropertyExtraLatency = @enumToInt(enum_unnamed_223.kAudioSubDevicePropertyExtraLatency);
pub const kAudioSubDevicePropertyDriftCompensation = @enumToInt(enum_unnamed_223.kAudioSubDevicePropertyDriftCompensation);
pub const kAudioSubDevicePropertyDriftCompensationQuality = @enumToInt(enum_unnamed_223.kAudioSubDevicePropertyDriftCompensationQuality);
const enum_unnamed_223 = extern enum(c_int) {
    kAudioSubDevicePropertyExtraLatency = 2020373603,
    kAudioSubDevicePropertyDriftCompensation = 1685218932,
    kAudioSubDevicePropertyDriftCompensationQuality = 1685218929,
    _,
};
pub const kAudioDevicePropertyScopeInput = @enumToInt(enum_unnamed_224.kAudioDevicePropertyScopeInput);
pub const kAudioDevicePropertyScopeOutput = @enumToInt(enum_unnamed_224.kAudioDevicePropertyScopeOutput);
pub const kAudioDevicePropertyScopePlayThrough = @enumToInt(enum_unnamed_224.kAudioDevicePropertyScopePlayThrough);
const enum_unnamed_224 = extern enum(c_int) {
    kAudioDevicePropertyScopeInput = 1768845428,
    kAudioDevicePropertyScopeOutput = 1869968496,
    kAudioDevicePropertyScopePlayThrough = 1886679669,
    _,
};
pub const kAudioPropertyWildcardPropertyID = @enumToInt(enum_unnamed_225.kAudioPropertyWildcardPropertyID);
const enum_unnamed_225 = extern enum(c_int) {
    kAudioPropertyWildcardPropertyID = 707406378,
    _,
};
pub const kAudioPropertyWildcardSection = @enumToInt(enum_unnamed_226.kAudioPropertyWildcardSection);
const enum_unnamed_226 = extern enum(c_int) {
    kAudioPropertyWildcardSection = 255,
    _,
};
pub const kAudioPropertyWildcardChannel = @enumToInt(enum_unnamed_227.kAudioPropertyWildcardChannel);
const enum_unnamed_227 = extern enum(c_int) {
    kAudioPropertyWildcardChannel = 4294967295,
    _,
};
pub const kAudioISubOwnerControlClassID = @enumToInt(enum_unnamed_228.kAudioISubOwnerControlClassID);
const enum_unnamed_228 = extern enum(c_int) {
    kAudioISubOwnerControlClassID = 1635017576,
    _,
};
pub const kAudioLevelControlPropertyDecibelsToScalarTransferFunction = @enumToInt(enum_unnamed_229.kAudioLevelControlPropertyDecibelsToScalarTransferFunction);
const enum_unnamed_229 = extern enum(c_int) {
    kAudioLevelControlPropertyDecibelsToScalarTransferFunction = 1818457190,
    _,
};
pub const AudioLevelControlTransferFunction = UInt32;
pub const kAudioLevelControlTranferFunctionLinear = @enumToInt(enum_unnamed_230.kAudioLevelControlTranferFunctionLinear);
pub const kAudioLevelControlTranferFunction1Over3 = @enumToInt(enum_unnamed_230.kAudioLevelControlTranferFunction1Over3);
pub const kAudioLevelControlTranferFunction1Over2 = @enumToInt(enum_unnamed_230.kAudioLevelControlTranferFunction1Over2);
pub const kAudioLevelControlTranferFunction3Over4 = @enumToInt(enum_unnamed_230.kAudioLevelControlTranferFunction3Over4);
pub const kAudioLevelControlTranferFunction3Over2 = @enumToInt(enum_unnamed_230.kAudioLevelControlTranferFunction3Over2);
pub const kAudioLevelControlTranferFunction2Over1 = @enumToInt(enum_unnamed_230.kAudioLevelControlTranferFunction2Over1);
pub const kAudioLevelControlTranferFunction3Over1 = @enumToInt(enum_unnamed_230.kAudioLevelControlTranferFunction3Over1);
pub const kAudioLevelControlTranferFunction4Over1 = @enumToInt(enum_unnamed_230.kAudioLevelControlTranferFunction4Over1);
pub const kAudioLevelControlTranferFunction5Over1 = @enumToInt(enum_unnamed_230.kAudioLevelControlTranferFunction5Over1);
pub const kAudioLevelControlTranferFunction6Over1 = @enumToInt(enum_unnamed_230.kAudioLevelControlTranferFunction6Over1);
pub const kAudioLevelControlTranferFunction7Over1 = @enumToInt(enum_unnamed_230.kAudioLevelControlTranferFunction7Over1);
pub const kAudioLevelControlTranferFunction8Over1 = @enumToInt(enum_unnamed_230.kAudioLevelControlTranferFunction8Over1);
pub const kAudioLevelControlTranferFunction9Over1 = @enumToInt(enum_unnamed_230.kAudioLevelControlTranferFunction9Over1);
pub const kAudioLevelControlTranferFunction10Over1 = @enumToInt(enum_unnamed_230.kAudioLevelControlTranferFunction10Over1);
pub const kAudioLevelControlTranferFunction11Over1 = @enumToInt(enum_unnamed_230.kAudioLevelControlTranferFunction11Over1);
pub const kAudioLevelControlTranferFunction12Over1 = @enumToInt(enum_unnamed_230.kAudioLevelControlTranferFunction12Over1);
const enum_unnamed_230 = extern enum(c_int) {
    kAudioLevelControlTranferFunctionLinear = 0,
    kAudioLevelControlTranferFunction1Over3 = 1,
    kAudioLevelControlTranferFunction1Over2 = 2,
    kAudioLevelControlTranferFunction3Over4 = 3,
    kAudioLevelControlTranferFunction3Over2 = 4,
    kAudioLevelControlTranferFunction2Over1 = 5,
    kAudioLevelControlTranferFunction3Over1 = 6,
    kAudioLevelControlTranferFunction4Over1 = 7,
    kAudioLevelControlTranferFunction5Over1 = 8,
    kAudioLevelControlTranferFunction6Over1 = 9,
    kAudioLevelControlTranferFunction7Over1 = 10,
    kAudioLevelControlTranferFunction8Over1 = 11,
    kAudioLevelControlTranferFunction9Over1 = 12,
    kAudioLevelControlTranferFunction10Over1 = 13,
    kAudioLevelControlTranferFunction11Over1 = 14,
    kAudioLevelControlTranferFunction12Over1 = 15,
    _,
};
pub const AudioHardwarePropertyID = AudioObjectPropertySelector;
pub const AudioHardwarePropertyListenerProc = ?fn (AudioHardwarePropertyID, ?*c_void) callconv(.C) OSStatus;
pub const kAudioHardwarePropertyRunLoop = @enumToInt(enum_unnamed_231.kAudioHardwarePropertyRunLoop);
pub const kAudioHardwarePropertyDeviceForUID = @enumToInt(enum_unnamed_231.kAudioHardwarePropertyDeviceForUID);
pub const kAudioHardwarePropertyPlugInForBundleID = @enumToInt(enum_unnamed_231.kAudioHardwarePropertyPlugInForBundleID);
const enum_unnamed_231 = extern enum(c_int) {
    kAudioHardwarePropertyRunLoop = 1919839344,
    kAudioHardwarePropertyDeviceForUID = 1685416292,
    kAudioHardwarePropertyPlugInForBundleID = 1885954665,
    _,
};
pub const kAudioHardwarePropertyBootChimeVolumeScalar = @enumToInt(enum_unnamed_232.kAudioHardwarePropertyBootChimeVolumeScalar);
pub const kAudioHardwarePropertyBootChimeVolumeDecibels = @enumToInt(enum_unnamed_232.kAudioHardwarePropertyBootChimeVolumeDecibels);
pub const kAudioHardwarePropertyBootChimeVolumeRangeDecibels = @enumToInt(enum_unnamed_232.kAudioHardwarePropertyBootChimeVolumeRangeDecibels);
pub const kAudioHardwarePropertyBootChimeVolumeScalarToDecibels = @enumToInt(enum_unnamed_232.kAudioHardwarePropertyBootChimeVolumeScalarToDecibels);
pub const kAudioHardwarePropertyBootChimeVolumeDecibelsToScalar = @enumToInt(enum_unnamed_232.kAudioHardwarePropertyBootChimeVolumeDecibelsToScalar);
pub const kAudioHardwarePropertyBootChimeVolumeDecibelsToScalarTransferFunction = @enumToInt(enum_unnamed_232.kAudioHardwarePropertyBootChimeVolumeDecibelsToScalarTransferFunction);
const enum_unnamed_232 = extern enum(c_int) {
    kAudioHardwarePropertyBootChimeVolumeScalar = 1650620019,
    kAudioHardwarePropertyBootChimeVolumeDecibels = 1650620004,
    kAudioHardwarePropertyBootChimeVolumeRangeDecibels = 1650615331,
    kAudioHardwarePropertyBootChimeVolumeScalarToDecibels = 1651913316,
    kAudioHardwarePropertyBootChimeVolumeDecibelsToScalar = 1650733686,
    kAudioHardwarePropertyBootChimeVolumeDecibelsToScalarTransferFunction = 1651930214,
    _,
};
pub extern fn AudioHardwareAddRunLoopSource(inRunLoopSource: CFRunLoopSourceRef) OSStatus;
pub extern fn AudioHardwareRemoveRunLoopSource(inRunLoopSource: CFRunLoopSourceRef) OSStatus;
pub extern fn AudioHardwareGetPropertyInfo(inPropertyID: AudioHardwarePropertyID, outSize: [*c]UInt32, outWritable: [*c]Boolean) OSStatus;
pub extern fn AudioHardwareGetProperty(inPropertyID: AudioHardwarePropertyID, ioPropertyDataSize: [*c]UInt32, outPropertyData: ?*c_void) OSStatus;
pub extern fn AudioHardwareSetProperty(inPropertyID: AudioHardwarePropertyID, inPropertyDataSize: UInt32, inPropertyData: ?*const c_void) OSStatus;
pub extern fn AudioHardwareAddPropertyListener(inPropertyID: AudioHardwarePropertyID, inProc: AudioHardwarePropertyListenerProc, inClientData: ?*c_void) OSStatus;
pub extern fn AudioHardwareRemovePropertyListener(inPropertyID: AudioHardwarePropertyID, inProc: AudioHardwarePropertyListenerProc) OSStatus;
pub const AudioDeviceID = AudioObjectID;
pub const AudioDevicePropertyID = AudioObjectPropertySelector;
pub const AudioDevicePropertyListenerProc = ?fn (AudioDeviceID, UInt32, Boolean, AudioDevicePropertyID, ?*c_void) callconv(.C) OSStatus;
pub const kAudioDeviceUnknown = @enumToInt(enum_unnamed_233.kAudioDeviceUnknown);
const enum_unnamed_233 = extern enum(c_int) {
    kAudioDeviceUnknown = 0,
    _,
};
pub const kAudioDeviceTransportTypeAutoAggregate = @enumToInt(enum_unnamed_234.kAudioDeviceTransportTypeAutoAggregate);
const enum_unnamed_234 = extern enum(c_int) {
    kAudioDeviceTransportTypeAutoAggregate = 1718055536,
    _,
};
pub const kAudioDevicePropertyVolumeDecibelsToScalarTransferFunction = @enumToInt(enum_unnamed_235.kAudioDevicePropertyVolumeDecibelsToScalarTransferFunction);
pub const kAudioDevicePropertyPlayThruVolumeDecibelsToScalarTransferFunction = @enumToInt(enum_unnamed_235.kAudioDevicePropertyPlayThruVolumeDecibelsToScalarTransferFunction);
pub const kAudioDevicePropertyDriverShouldOwniSub = @enumToInt(enum_unnamed_235.kAudioDevicePropertyDriverShouldOwniSub);
pub const kAudioDevicePropertySubVolumeDecibelsToScalarTransferFunction = @enumToInt(enum_unnamed_235.kAudioDevicePropertySubVolumeDecibelsToScalarTransferFunction);
const enum_unnamed_235 = extern enum(c_int) {
    kAudioDevicePropertyVolumeDecibelsToScalarTransferFunction = 1986229350,
    kAudioDevicePropertyPlayThruVolumeDecibelsToScalarTransferFunction = 1836479590,
    kAudioDevicePropertyDriverShouldOwniSub = 1769174370,
    kAudioDevicePropertySubVolumeDecibelsToScalarTransferFunction = 1937142886,
    _,
};
pub const kAudioDevicePropertyDeviceName = @enumToInt(enum_unnamed_236.kAudioDevicePropertyDeviceName);
pub const kAudioDevicePropertyDeviceNameCFString = @enumToInt(enum_unnamed_236.kAudioDevicePropertyDeviceNameCFString);
pub const kAudioDevicePropertyDeviceManufacturer = @enumToInt(enum_unnamed_236.kAudioDevicePropertyDeviceManufacturer);
pub const kAudioDevicePropertyDeviceManufacturerCFString = @enumToInt(enum_unnamed_236.kAudioDevicePropertyDeviceManufacturerCFString);
pub const kAudioDevicePropertyRegisterBufferList = @enumToInt(enum_unnamed_236.kAudioDevicePropertyRegisterBufferList);
pub const kAudioDevicePropertyBufferSize = @enumToInt(enum_unnamed_236.kAudioDevicePropertyBufferSize);
pub const kAudioDevicePropertyBufferSizeRange = @enumToInt(enum_unnamed_236.kAudioDevicePropertyBufferSizeRange);
pub const kAudioDevicePropertyChannelName = @enumToInt(enum_unnamed_236.kAudioDevicePropertyChannelName);
pub const kAudioDevicePropertyChannelNameCFString = @enumToInt(enum_unnamed_236.kAudioDevicePropertyChannelNameCFString);
pub const kAudioDevicePropertyChannelCategoryName = @enumToInt(enum_unnamed_236.kAudioDevicePropertyChannelCategoryName);
pub const kAudioDevicePropertyChannelCategoryNameCFString = @enumToInt(enum_unnamed_236.kAudioDevicePropertyChannelCategoryNameCFString);
pub const kAudioDevicePropertyChannelNumberName = @enumToInt(enum_unnamed_236.kAudioDevicePropertyChannelNumberName);
pub const kAudioDevicePropertyChannelNumberNameCFString = @enumToInt(enum_unnamed_236.kAudioDevicePropertyChannelNumberNameCFString);
pub const kAudioDevicePropertySupportsMixing = @enumToInt(enum_unnamed_236.kAudioDevicePropertySupportsMixing);
pub const kAudioDevicePropertyStreamFormat = @enumToInt(enum_unnamed_236.kAudioDevicePropertyStreamFormat);
pub const kAudioDevicePropertyStreamFormats = @enumToInt(enum_unnamed_236.kAudioDevicePropertyStreamFormats);
pub const kAudioDevicePropertyStreamFormatSupported = @enumToInt(enum_unnamed_236.kAudioDevicePropertyStreamFormatSupported);
pub const kAudioDevicePropertyStreamFormatMatch = @enumToInt(enum_unnamed_236.kAudioDevicePropertyStreamFormatMatch);
pub const kAudioDevicePropertyDataSourceNameForID = @enumToInt(enum_unnamed_236.kAudioDevicePropertyDataSourceNameForID);
pub const kAudioDevicePropertyClockSourceNameForID = @enumToInt(enum_unnamed_236.kAudioDevicePropertyClockSourceNameForID);
pub const kAudioDevicePropertyPlayThruDestinationNameForID = @enumToInt(enum_unnamed_236.kAudioDevicePropertyPlayThruDestinationNameForID);
pub const kAudioDevicePropertyChannelNominalLineLevelNameForID = @enumToInt(enum_unnamed_236.kAudioDevicePropertyChannelNominalLineLevelNameForID);
pub const kAudioDevicePropertyHighPassFilterSettingNameForID = @enumToInt(enum_unnamed_236.kAudioDevicePropertyHighPassFilterSettingNameForID);
const enum_unnamed_236 = extern enum(c_int) {
    kAudioDevicePropertyDeviceName = 1851878757,
    kAudioDevicePropertyDeviceNameCFString = 1819173229,
    kAudioDevicePropertyDeviceManufacturer = 1835101042,
    kAudioDevicePropertyDeviceManufacturerCFString = 1819107691,
    kAudioDevicePropertyRegisterBufferList = 1919055206,
    kAudioDevicePropertyBufferSize = 1651730810,
    kAudioDevicePropertyBufferSizeRange = 1651735075,
    kAudioDevicePropertyChannelName = 1667788397,
    kAudioDevicePropertyChannelNameCFString = 1818454126,
    kAudioDevicePropertyChannelCategoryName = 1667460717,
    kAudioDevicePropertyChannelCategoryNameCFString = 1818452846,
    kAudioDevicePropertyChannelNumberName = 1668181613,
    kAudioDevicePropertyChannelNumberNameCFString = 1818455662,
    kAudioDevicePropertySupportsMixing = 1835628607,
    kAudioDevicePropertyStreamFormat = 1936092532,
    kAudioDevicePropertyStreamFormats = 1936092451,
    kAudioDevicePropertyStreamFormatSupported = 1936092479,
    kAudioDevicePropertyStreamFormatMatch = 1936092525,
    kAudioDevicePropertyDataSourceNameForID = 1936941934,
    kAudioDevicePropertyClockSourceNameForID = 1668506478,
    kAudioDevicePropertyPlayThruDestinationNameForID = 1835295854,
    kAudioDevicePropertyChannelNominalLineLevelNameForID = 1668181110,
    kAudioDevicePropertyHighPassFilterSettingNameForID = 1667787120,
    _,
};
pub extern fn AudioDeviceAddIOProc(inDevice: AudioDeviceID, inProc: AudioDeviceIOProc, inClientData: ?*c_void) OSStatus;
pub extern fn AudioDeviceRemoveIOProc(inDevice: AudioDeviceID, inProc: AudioDeviceIOProc) OSStatus;
pub extern fn AudioDeviceRead(inDevice: AudioDeviceID, inStartTime: [*c]const AudioTimeStamp, outData: [*c]AudioBufferList) OSStatus;
pub extern fn AudioDeviceGetPropertyInfo(inDevice: AudioDeviceID, inChannel: UInt32, isInput: Boolean, inPropertyID: AudioDevicePropertyID, outSize: [*c]UInt32, outWritable: [*c]Boolean) OSStatus;
pub extern fn AudioDeviceGetProperty(inDevice: AudioDeviceID, inChannel: UInt32, isInput: Boolean, inPropertyID: AudioDevicePropertyID, ioPropertyDataSize: [*c]UInt32, outPropertyData: ?*c_void) OSStatus;
pub extern fn AudioDeviceSetProperty(inDevice: AudioDeviceID, inWhen: [*c]const AudioTimeStamp, inChannel: UInt32, isInput: Boolean, inPropertyID: AudioDevicePropertyID, inPropertyDataSize: UInt32, inPropertyData: ?*const c_void) OSStatus;
pub extern fn AudioDeviceAddPropertyListener(inDevice: AudioDeviceID, inChannel: UInt32, isInput: Boolean, inPropertyID: AudioDevicePropertyID, inProc: AudioDevicePropertyListenerProc, inClientData: ?*c_void) OSStatus;
pub extern fn AudioDeviceRemovePropertyListener(inDevice: AudioDeviceID, inChannel: UInt32, isInput: Boolean, inPropertyID: AudioDevicePropertyID, inProc: AudioDevicePropertyListenerProc) OSStatus;
pub const AudioStreamID = AudioObjectID;
pub const AudioStreamPropertyListenerProc = ?fn (AudioStreamID, UInt32, AudioDevicePropertyID, ?*c_void) callconv(.C) OSStatus;
pub const kAudioStreamUnknown = @enumToInt(enum_unnamed_237.kAudioStreamUnknown);
const enum_unnamed_237 = extern enum(c_int) {
    kAudioStreamUnknown = 0,
    _,
};
pub const kAudioStreamPropertyOwningDevice = @enumToInt(enum_unnamed_238.kAudioStreamPropertyOwningDevice);
pub const kAudioStreamPropertyPhysicalFormats = @enumToInt(enum_unnamed_238.kAudioStreamPropertyPhysicalFormats);
pub const kAudioStreamPropertyPhysicalFormatSupported = @enumToInt(enum_unnamed_238.kAudioStreamPropertyPhysicalFormatSupported);
pub const kAudioStreamPropertyPhysicalFormatMatch = @enumToInt(enum_unnamed_238.kAudioStreamPropertyPhysicalFormatMatch);
const enum_unnamed_238 = extern enum(c_int) {
    kAudioStreamPropertyOwningDevice = 1937007734,
    kAudioStreamPropertyPhysicalFormats = 1885762595,
    kAudioStreamPropertyPhysicalFormatSupported = 1885762623,
    kAudioStreamPropertyPhysicalFormatMatch = 1885762669,
    _,
};
pub extern fn AudioStreamGetPropertyInfo(inStream: AudioStreamID, inChannel: UInt32, inPropertyID: AudioDevicePropertyID, outSize: [*c]UInt32, outWritable: [*c]Boolean) OSStatus;
pub extern fn AudioStreamGetProperty(inStream: AudioStreamID, inChannel: UInt32, inPropertyID: AudioDevicePropertyID, ioPropertyDataSize: [*c]UInt32, outPropertyData: ?*c_void) OSStatus;
pub extern fn AudioStreamSetProperty(inStream: AudioStreamID, inWhen: [*c]const AudioTimeStamp, inChannel: UInt32, inPropertyID: AudioDevicePropertyID, inPropertyDataSize: UInt32, inPropertyData: ?*const c_void) OSStatus;
pub extern fn AudioStreamAddPropertyListener(inStream: AudioStreamID, inChannel: UInt32, inPropertyID: AudioDevicePropertyID, inProc: AudioStreamPropertyListenerProc, inClientData: ?*c_void) OSStatus;
pub extern fn AudioStreamRemovePropertyListener(inStream: AudioStreamID, inChannel: UInt32, inPropertyID: AudioDevicePropertyID, inProc: AudioStreamPropertyListenerProc) OSStatus;
pub const kAudioBootChimeVolumeControlClassID = @enumToInt(enum_unnamed_239.kAudioBootChimeVolumeControlClassID);
const enum_unnamed_239 = extern enum(c_int) {
    kAudioBootChimeVolumeControlClassID = 1886544237,
    _,
};
pub const kAudioControlPropertyVariant = @enumToInt(enum_unnamed_240.kAudioControlPropertyVariant);
const enum_unnamed_240 = extern enum(c_int) {
    kAudioControlPropertyVariant = 1668702578,
    _,
};
pub const kAudioClockSourceControlPropertyItemKind = @enumToInt(enum_unnamed_241.kAudioClockSourceControlPropertyItemKind);
const enum_unnamed_241 = extern enum(c_int) {
    kAudioClockSourceControlPropertyItemKind = 1668049771,
    _,
};
pub extern fn AudioGetCurrentHostTime() UInt64;
pub extern fn AudioGetHostClockFrequency() Float64;
pub extern fn AudioGetHostClockMinimumTimeDelta() UInt32;
pub extern fn AudioConvertHostTimeToNanos(inHostTime: UInt64) UInt64;
pub extern fn AudioConvertNanosToHostTime(inNanos: UInt64) UInt64;
pub const AudioComponentFlags = UInt32;
pub const kAudioComponentFlag_Unsearchable = @enumToInt(enum_unnamed_242.kAudioComponentFlag_Unsearchable);
pub const kAudioComponentFlag_SandboxSafe = @enumToInt(enum_unnamed_242.kAudioComponentFlag_SandboxSafe);
pub const kAudioComponentFlag_IsV3AudioUnit = @enumToInt(enum_unnamed_242.kAudioComponentFlag_IsV3AudioUnit);
pub const kAudioComponentFlag_RequiresAsyncInstantiation = @enumToInt(enum_unnamed_242.kAudioComponentFlag_RequiresAsyncInstantiation);
pub const kAudioComponentFlag_CanLoadInProcess = @enumToInt(enum_unnamed_242.kAudioComponentFlag_CanLoadInProcess);
const enum_unnamed_242 = extern enum(c_int) {
    kAudioComponentFlag_Unsearchable = 1,
    kAudioComponentFlag_SandboxSafe = 2,
    kAudioComponentFlag_IsV3AudioUnit = 4,
    kAudioComponentFlag_RequiresAsyncInstantiation = 8,
    kAudioComponentFlag_CanLoadInProcess = 16,
    _,
};
pub const AudioComponentInstantiationOptions = UInt32;
pub const kAudioComponentInstantiation_LoadOutOfProcess = @enumToInt(enum_unnamed_243.kAudioComponentInstantiation_LoadOutOfProcess);
pub const kAudioComponentInstantiation_LoadInProcess = @enumToInt(enum_unnamed_243.kAudioComponentInstantiation_LoadInProcess);
const enum_unnamed_243 = extern enum(c_int) {
    kAudioComponentInstantiation_LoadOutOfProcess = 1,
    kAudioComponentInstantiation_LoadInProcess = 2,
    _,
};
pub const struct_AudioComponentDescription = extern struct {
    componentType: OSType,
    componentSubType: OSType,
    componentManufacturer: OSType,
    componentFlags: UInt32,
    componentFlagsMask: UInt32,
};
pub const AudioComponentDescription = struct_AudioComponentDescription;
pub const struct_OpaqueAudioComponent = @OpaqueType();
pub const AudioComponent = ?*struct_OpaqueAudioComponent;
pub const struct_ComponentInstanceRecord = @OpaqueType();
pub const AudioComponentInstance = ?*struct_ComponentInstanceRecord;
pub const AudioComponentMethod = ?fn (?*c_void, ...) callconv(.C) OSStatus;
pub const struct_AudioComponentPlugInInterface = extern struct {
    Open: ?fn (?*c_void, AudioComponentInstance) callconv(.C) OSStatus,
    Close: ?fn (?*c_void) callconv(.C) OSStatus,
    Lookup: ?fn (SInt16) callconv(.C) AudioComponentMethod,
    reserved: ?*c_void,
};
pub const AudioComponentPlugInInterface = struct_AudioComponentPlugInInterface;
pub const AudioComponentFactoryFunction = ?fn ([*c]const AudioComponentDescription) callconv(.C) [*c]AudioComponentPlugInInterface;
pub extern fn AudioComponentFindNext(inComponent: AudioComponent, inDesc: [*c]const AudioComponentDescription) AudioComponent;
pub extern fn AudioComponentCount(inDesc: [*c]const AudioComponentDescription) UInt32;
pub extern fn AudioComponentCopyName(inComponent: AudioComponent, outName: [*c]CFStringRef) OSStatus;
pub extern fn AudioComponentGetDescription(inComponent: AudioComponent, outDesc: [*c]AudioComponentDescription) OSStatus;
pub extern fn AudioComponentGetVersion(inComponent: AudioComponent, outVersion: [*c]UInt32) OSStatus;
pub extern fn AudioComponentInstanceNew(inComponent: AudioComponent, outInstance: [*c]AudioComponentInstance) OSStatus; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/AudioToolbox.framework/Headers/AudioComponent.h:507:1: warning: unsupported type: 'BlockPointer'
pub const AudioComponentInstantiate = @compileError("unable to resolve prototype of function");
pub extern fn AudioComponentInstanceDispose(inInstance: AudioComponentInstance) OSStatus;
pub extern fn AudioComponentInstanceGetComponent(inInstance: AudioComponentInstance) AudioComponent;
pub extern fn AudioComponentInstanceCanDo(inInstance: AudioComponentInstance, inSelectorID: SInt16) Boolean;
pub extern fn AudioComponentRegister(inDesc: [*c]const AudioComponentDescription, inName: CFStringRef, inVersion: UInt32, inFactory: AudioComponentFactoryFunction) AudioComponent;
pub extern fn AudioComponentCopyConfigurationInfo(inComponent: AudioComponent, outConfigurationInfo: [*c]CFDictionaryRef) OSStatus;
pub const AudioComponentValidationResult = UInt32;
pub const kAudioComponentValidationResult_Unknown = @enumToInt(enum_unnamed_244.kAudioComponentValidationResult_Unknown);
pub const kAudioComponentValidationResult_Passed = @enumToInt(enum_unnamed_244.kAudioComponentValidationResult_Passed);
pub const kAudioComponentValidationResult_Failed = @enumToInt(enum_unnamed_244.kAudioComponentValidationResult_Failed);
pub const kAudioComponentValidationResult_TimedOut = @enumToInt(enum_unnamed_244.kAudioComponentValidationResult_TimedOut);
pub const kAudioComponentValidationResult_UnauthorizedError_Open = @enumToInt(enum_unnamed_244.kAudioComponentValidationResult_UnauthorizedError_Open);
pub const kAudioComponentValidationResult_UnauthorizedError_Init = @enumToInt(enum_unnamed_244.kAudioComponentValidationResult_UnauthorizedError_Init);
const enum_unnamed_244 = extern enum(c_int) {
    kAudioComponentValidationResult_Unknown = 0,
    kAudioComponentValidationResult_Passed = 1,
    kAudioComponentValidationResult_Failed = 2,
    kAudioComponentValidationResult_TimedOut = 3,
    kAudioComponentValidationResult_UnauthorizedError_Open = 4,
    kAudioComponentValidationResult_UnauthorizedError_Init = 5,
    _,
};
pub extern fn AudioComponentValidate(inComponent: AudioComponent, inValidationParameters: CFDictionaryRef, outValidationResult: [*c]AudioComponentValidationResult) OSStatus;
pub const AudioCodec = AudioComponentInstance;
pub const AudioCodecPropertyID = UInt32;
pub const struct_AudioCodecMagicCookieInfo = extern struct {
    mMagicCookieSize: UInt32,
    mMagicCookie: ?*const c_void,
};
pub const AudioCodecMagicCookieInfo = struct_AudioCodecMagicCookieInfo;
pub const kAudioDecoderComponentType = @enumToInt(enum_unnamed_245.kAudioDecoderComponentType);
pub const kAudioEncoderComponentType = @enumToInt(enum_unnamed_245.kAudioEncoderComponentType);
pub const kAudioUnityCodecComponentType = @enumToInt(enum_unnamed_245.kAudioUnityCodecComponentType);
const enum_unnamed_245 = extern enum(c_int) {
    kAudioDecoderComponentType = 1633969507,
    kAudioEncoderComponentType = 1634037347,
    kAudioUnityCodecComponentType = 1633903715,
    _,
};
pub const kAudioCodecPropertySupportedInputFormats = @enumToInt(enum_unnamed_246.kAudioCodecPropertySupportedInputFormats);
pub const kAudioCodecPropertySupportedOutputFormats = @enumToInt(enum_unnamed_246.kAudioCodecPropertySupportedOutputFormats);
pub const kAudioCodecPropertyAvailableInputSampleRates = @enumToInt(enum_unnamed_246.kAudioCodecPropertyAvailableInputSampleRates);
pub const kAudioCodecPropertyAvailableOutputSampleRates = @enumToInt(enum_unnamed_246.kAudioCodecPropertyAvailableOutputSampleRates);
pub const kAudioCodecPropertyAvailableBitRateRange = @enumToInt(enum_unnamed_246.kAudioCodecPropertyAvailableBitRateRange);
pub const kAudioCodecPropertyMinimumNumberInputPackets = @enumToInt(enum_unnamed_246.kAudioCodecPropertyMinimumNumberInputPackets);
pub const kAudioCodecPropertyMinimumNumberOutputPackets = @enumToInt(enum_unnamed_246.kAudioCodecPropertyMinimumNumberOutputPackets);
pub const kAudioCodecPropertyAvailableNumberChannels = @enumToInt(enum_unnamed_246.kAudioCodecPropertyAvailableNumberChannels);
pub const kAudioCodecPropertyDoesSampleRateConversion = @enumToInt(enum_unnamed_246.kAudioCodecPropertyDoesSampleRateConversion);
pub const kAudioCodecPropertyAvailableInputChannelLayoutTags = @enumToInt(enum_unnamed_246.kAudioCodecPropertyAvailableInputChannelLayoutTags);
pub const kAudioCodecPropertyAvailableOutputChannelLayoutTags = @enumToInt(enum_unnamed_246.kAudioCodecPropertyAvailableOutputChannelLayoutTags);
pub const kAudioCodecPropertyInputFormatsForOutputFormat = @enumToInt(enum_unnamed_246.kAudioCodecPropertyInputFormatsForOutputFormat);
pub const kAudioCodecPropertyOutputFormatsForInputFormat = @enumToInt(enum_unnamed_246.kAudioCodecPropertyOutputFormatsForInputFormat);
pub const kAudioCodecPropertyFormatInfo = @enumToInt(enum_unnamed_246.kAudioCodecPropertyFormatInfo);
const enum_unnamed_246 = extern enum(c_int) {
    kAudioCodecPropertySupportedInputFormats = 1768320291,
    kAudioCodecPropertySupportedOutputFormats = 1868983587,
    kAudioCodecPropertyAvailableInputSampleRates = 1634300786,
    kAudioCodecPropertyAvailableOutputSampleRates = 1634694002,
    kAudioCodecPropertyAvailableBitRateRange = 1633841780,
    kAudioCodecPropertyMinimumNumberInputPackets = 1835952496,
    kAudioCodecPropertyMinimumNumberOutputPackets = 1835954032,
    kAudioCodecPropertyAvailableNumberChannels = 1668116067,
    kAudioCodecPropertyDoesSampleRateConversion = 1819112035,
    kAudioCodecPropertyAvailableInputChannelLayoutTags = 1634296684,
    kAudioCodecPropertyAvailableOutputChannelLayoutTags = 1634689900,
    kAudioCodecPropertyInputFormatsForOutputFormat = 1768305775,
    kAudioCodecPropertyOutputFormatsForInputFormat = 1868969065,
    kAudioCodecPropertyFormatInfo = 1633904233,
    _,
};
pub const kAudioCodecPropertyInputBufferSize = @enumToInt(enum_unnamed_247.kAudioCodecPropertyInputBufferSize);
pub const kAudioCodecPropertyPacketFrameSize = @enumToInt(enum_unnamed_247.kAudioCodecPropertyPacketFrameSize);
pub const kAudioCodecPropertyHasVariablePacketByteSizes = @enumToInt(enum_unnamed_247.kAudioCodecPropertyHasVariablePacketByteSizes);
pub const kAudioCodecPropertyEmploysDependentPackets = @enumToInt(enum_unnamed_247.kAudioCodecPropertyEmploysDependentPackets);
pub const kAudioCodecPropertyMaximumPacketByteSize = @enumToInt(enum_unnamed_247.kAudioCodecPropertyMaximumPacketByteSize);
pub const kAudioCodecPropertyPacketSizeLimitForVBR = @enumToInt(enum_unnamed_247.kAudioCodecPropertyPacketSizeLimitForVBR);
pub const kAudioCodecPropertyCurrentInputFormat = @enumToInt(enum_unnamed_247.kAudioCodecPropertyCurrentInputFormat);
pub const kAudioCodecPropertyCurrentOutputFormat = @enumToInt(enum_unnamed_247.kAudioCodecPropertyCurrentOutputFormat);
pub const kAudioCodecPropertyMagicCookie = @enumToInt(enum_unnamed_247.kAudioCodecPropertyMagicCookie);
pub const kAudioCodecPropertyUsedInputBufferSize = @enumToInt(enum_unnamed_247.kAudioCodecPropertyUsedInputBufferSize);
pub const kAudioCodecPropertyIsInitialized = @enumToInt(enum_unnamed_247.kAudioCodecPropertyIsInitialized);
pub const kAudioCodecPropertyCurrentTargetBitRate = @enumToInt(enum_unnamed_247.kAudioCodecPropertyCurrentTargetBitRate);
pub const kAudioCodecPropertyCurrentInputSampleRate = @enumToInt(enum_unnamed_247.kAudioCodecPropertyCurrentInputSampleRate);
pub const kAudioCodecPropertyCurrentOutputSampleRate = @enumToInt(enum_unnamed_247.kAudioCodecPropertyCurrentOutputSampleRate);
pub const kAudioCodecPropertyQualitySetting = @enumToInt(enum_unnamed_247.kAudioCodecPropertyQualitySetting);
pub const kAudioCodecPropertyApplicableBitRateRange = @enumToInt(enum_unnamed_247.kAudioCodecPropertyApplicableBitRateRange);
pub const kAudioCodecPropertyRecommendedBitRateRange = @enumToInt(enum_unnamed_247.kAudioCodecPropertyRecommendedBitRateRange);
pub const kAudioCodecPropertyApplicableInputSampleRates = @enumToInt(enum_unnamed_247.kAudioCodecPropertyApplicableInputSampleRates);
pub const kAudioCodecPropertyApplicableOutputSampleRates = @enumToInt(enum_unnamed_247.kAudioCodecPropertyApplicableOutputSampleRates);
pub const kAudioCodecPropertyPaddedZeros = @enumToInt(enum_unnamed_247.kAudioCodecPropertyPaddedZeros);
pub const kAudioCodecPropertyPrimeMethod = @enumToInt(enum_unnamed_247.kAudioCodecPropertyPrimeMethod);
pub const kAudioCodecPropertyPrimeInfo = @enumToInt(enum_unnamed_247.kAudioCodecPropertyPrimeInfo);
pub const kAudioCodecPropertyCurrentInputChannelLayout = @enumToInt(enum_unnamed_247.kAudioCodecPropertyCurrentInputChannelLayout);
pub const kAudioCodecPropertyCurrentOutputChannelLayout = @enumToInt(enum_unnamed_247.kAudioCodecPropertyCurrentOutputChannelLayout);
pub const kAudioCodecPropertySettings = @enumToInt(enum_unnamed_247.kAudioCodecPropertySettings);
pub const kAudioCodecPropertyFormatList = @enumToInt(enum_unnamed_247.kAudioCodecPropertyFormatList);
pub const kAudioCodecPropertyBitRateControlMode = @enumToInt(enum_unnamed_247.kAudioCodecPropertyBitRateControlMode);
pub const kAudioCodecPropertySoundQualityForVBR = @enumToInt(enum_unnamed_247.kAudioCodecPropertySoundQualityForVBR);
pub const kAudioCodecPropertyBitRateForVBR = @enumToInt(enum_unnamed_247.kAudioCodecPropertyBitRateForVBR);
pub const kAudioCodecPropertyDelayMode = @enumToInt(enum_unnamed_247.kAudioCodecPropertyDelayMode);
pub const kAudioCodecPropertyAdjustLocalQuality = @enumToInt(enum_unnamed_247.kAudioCodecPropertyAdjustLocalQuality);
pub const kAudioCodecPropertyProgramTargetLevel = @enumToInt(enum_unnamed_247.kAudioCodecPropertyProgramTargetLevel);
pub const kAudioCodecPropertyDynamicRangeControlMode = @enumToInt(enum_unnamed_247.kAudioCodecPropertyDynamicRangeControlMode);
pub const kAudioCodecPropertyProgramTargetLevelConstant = @enumToInt(enum_unnamed_247.kAudioCodecPropertyProgramTargetLevelConstant);
const enum_unnamed_247 = extern enum(c_int) {
    kAudioCodecPropertyInputBufferSize = 1952609638,
    kAudioCodecPropertyPacketFrameSize = 1885432678,
    kAudioCodecPropertyHasVariablePacketByteSizes = 1987078975,
    kAudioCodecPropertyEmploysDependentPackets = 1685089087,
    kAudioCodecPropertyMaximumPacketByteSize = 1885432674,
    kAudioCodecPropertyPacketSizeLimitForVBR = 1885432684,
    kAudioCodecPropertyCurrentInputFormat = 1768320372,
    kAudioCodecPropertyCurrentOutputFormat = 1868983668,
    kAudioCodecPropertyMagicCookie = 1802857321,
    kAudioCodecPropertyUsedInputBufferSize = 1969386854,
    kAudioCodecPropertyIsInitialized = 1768843636,
    kAudioCodecPropertyCurrentTargetBitRate = 1651663220,
    kAudioCodecPropertyCurrentInputSampleRate = 1667855218,
    kAudioCodecPropertyCurrentOutputSampleRate = 1668248434,
    kAudioCodecPropertyQualitySetting = 1936876401,
    kAudioCodecPropertyApplicableBitRateRange = 1651668065,
    kAudioCodecPropertyRecommendedBitRateRange = 1651668082,
    kAudioCodecPropertyApplicableInputSampleRates = 1769173601,
    kAudioCodecPropertyApplicableOutputSampleRates = 1869836897,
    kAudioCodecPropertyPaddedZeros = 1885430832,
    kAudioCodecPropertyPrimeMethod = 1886547309,
    kAudioCodecPropertyPrimeInfo = 1886546285,
    kAudioCodecPropertyCurrentInputChannelLayout = 1768123424,
    kAudioCodecPropertyCurrentOutputChannelLayout = 1868786720,
    kAudioCodecPropertySettings = 1633907488,
    kAudioCodecPropertyFormatList = 1633904236,
    kAudioCodecPropertyBitRateControlMode = 1633903206,
    kAudioCodecPropertySoundQualityForVBR = 1986163313,
    kAudioCodecPropertyBitRateForVBR = 1986163298,
    kAudioCodecPropertyDelayMode = 1684893540,
    kAudioCodecPropertyAdjustLocalQuality = 1584488812,
    kAudioCodecPropertyProgramTargetLevel = 1886418028,
    kAudioCodecPropertyDynamicRangeControlMode = 1835299427,
    kAudioCodecPropertyProgramTargetLevelConstant = 1886678115,
    _,
};
pub const kAudioCodecQuality_Max = @enumToInt(enum_unnamed_248.kAudioCodecQuality_Max);
pub const kAudioCodecQuality_High = @enumToInt(enum_unnamed_248.kAudioCodecQuality_High);
pub const kAudioCodecQuality_Medium = @enumToInt(enum_unnamed_248.kAudioCodecQuality_Medium);
pub const kAudioCodecQuality_Low = @enumToInt(enum_unnamed_248.kAudioCodecQuality_Low);
pub const kAudioCodecQuality_Min = @enumToInt(enum_unnamed_248.kAudioCodecQuality_Min);
const enum_unnamed_248 = extern enum(c_int) {
    kAudioCodecQuality_Max = 127,
    kAudioCodecQuality_High = 96,
    kAudioCodecQuality_Medium = 64,
    kAudioCodecQuality_Low = 32,
    kAudioCodecQuality_Min = 0,
    _,
};
pub const kAudioCodecPrimeMethod_Pre = @enumToInt(enum_unnamed_249.kAudioCodecPrimeMethod_Pre);
pub const kAudioCodecPrimeMethod_Normal = @enumToInt(enum_unnamed_249.kAudioCodecPrimeMethod_Normal);
pub const kAudioCodecPrimeMethod_None = @enumToInt(enum_unnamed_249.kAudioCodecPrimeMethod_None);
const enum_unnamed_249 = extern enum(c_int) {
    kAudioCodecPrimeMethod_Pre = 0,
    kAudioCodecPrimeMethod_Normal = 1,
    kAudioCodecPrimeMethod_None = 2,
    _,
};
pub const kAudioCodecBitRateControlMode_Constant = @enumToInt(enum_unnamed_250.kAudioCodecBitRateControlMode_Constant);
pub const kAudioCodecBitRateControlMode_LongTermAverage = @enumToInt(enum_unnamed_250.kAudioCodecBitRateControlMode_LongTermAverage);
pub const kAudioCodecBitRateControlMode_VariableConstrained = @enumToInt(enum_unnamed_250.kAudioCodecBitRateControlMode_VariableConstrained);
pub const kAudioCodecBitRateControlMode_Variable = @enumToInt(enum_unnamed_250.kAudioCodecBitRateControlMode_Variable);
const enum_unnamed_250 = extern enum(c_int) {
    kAudioCodecBitRateControlMode_Constant = 0,
    kAudioCodecBitRateControlMode_LongTermAverage = 1,
    kAudioCodecBitRateControlMode_VariableConstrained = 2,
    kAudioCodecBitRateControlMode_Variable = 3,
    _,
};
pub const kAudioCodecDelayMode_Compatibility = @enumToInt(enum_unnamed_251.kAudioCodecDelayMode_Compatibility);
pub const kAudioCodecDelayMode_Minimum = @enumToInt(enum_unnamed_251.kAudioCodecDelayMode_Minimum);
pub const kAudioCodecDelayMode_Optimal = @enumToInt(enum_unnamed_251.kAudioCodecDelayMode_Optimal);
const enum_unnamed_251 = extern enum(c_int) {
    kAudioCodecDelayMode_Compatibility = 0,
    kAudioCodecDelayMode_Minimum = 1,
    kAudioCodecDelayMode_Optimal = 2,
    _,
};
pub const kProgramTargetLevel_None = @enumToInt(enum_unnamed_252.kProgramTargetLevel_None);
pub const kProgramTargetLevel_Minus31dB = @enumToInt(enum_unnamed_252.kProgramTargetLevel_Minus31dB);
pub const kProgramTargetLevel_Minus23dB = @enumToInt(enum_unnamed_252.kProgramTargetLevel_Minus23dB);
pub const kProgramTargetLevel_Minus20dB = @enumToInt(enum_unnamed_252.kProgramTargetLevel_Minus20dB);
const enum_unnamed_252 = extern enum(c_int) {
    kProgramTargetLevel_None = 0,
    kProgramTargetLevel_Minus31dB = 1,
    kProgramTargetLevel_Minus23dB = 2,
    kProgramTargetLevel_Minus20dB = 3,
    _,
};
pub const kDynamicRangeControlMode_None = @enumToInt(enum_unnamed_253.kDynamicRangeControlMode_None);
pub const kDynamicRangeControlMode_Light = @enumToInt(enum_unnamed_253.kDynamicRangeControlMode_Light);
pub const kDynamicRangeControlMode_Heavy = @enumToInt(enum_unnamed_253.kDynamicRangeControlMode_Heavy);
const enum_unnamed_253 = extern enum(c_int) {
    kDynamicRangeControlMode_None = 0,
    kDynamicRangeControlMode_Light = 1,
    kDynamicRangeControlMode_Heavy = 2,
    _,
};
pub const struct_AudioCodecPrimeInfo = extern struct {
    leadingFrames: UInt32,
    trailingFrames: UInt32,
};
pub const AudioCodecPrimeInfo = struct_AudioCodecPrimeInfo;
pub const AudioSettingsFlags = UInt32;
pub const kAudioSettingsFlags_ExpertParameter = @enumToInt(enum_unnamed_254.kAudioSettingsFlags_ExpertParameter);
pub const kAudioSettingsFlags_InvisibleParameter = @enumToInt(enum_unnamed_254.kAudioSettingsFlags_InvisibleParameter);
pub const kAudioSettingsFlags_MetaParameter = @enumToInt(enum_unnamed_254.kAudioSettingsFlags_MetaParameter);
pub const kAudioSettingsFlags_UserInterfaceParameter = @enumToInt(enum_unnamed_254.kAudioSettingsFlags_UserInterfaceParameter);
const enum_unnamed_254 = extern enum(c_int) {
    kAudioSettingsFlags_ExpertParameter = 1,
    kAudioSettingsFlags_InvisibleParameter = 2,
    kAudioSettingsFlags_MetaParameter = 4,
    kAudioSettingsFlags_UserInterfaceParameter = 8,
    _,
};
pub const kAudioCodecProduceOutputPacketFailure = @enumToInt(enum_unnamed_255.kAudioCodecProduceOutputPacketFailure);
pub const kAudioCodecProduceOutputPacketSuccess = @enumToInt(enum_unnamed_255.kAudioCodecProduceOutputPacketSuccess);
pub const kAudioCodecProduceOutputPacketSuccessHasMore = @enumToInt(enum_unnamed_255.kAudioCodecProduceOutputPacketSuccessHasMore);
pub const kAudioCodecProduceOutputPacketNeedsMoreInputData = @enumToInt(enum_unnamed_255.kAudioCodecProduceOutputPacketNeedsMoreInputData);
pub const kAudioCodecProduceOutputPacketAtEOF = @enumToInt(enum_unnamed_255.kAudioCodecProduceOutputPacketAtEOF);
const enum_unnamed_255 = extern enum(c_int) {
    kAudioCodecProduceOutputPacketFailure = 1,
    kAudioCodecProduceOutputPacketSuccess = 2,
    kAudioCodecProduceOutputPacketSuccessHasMore = 3,
    kAudioCodecProduceOutputPacketNeedsMoreInputData = 4,
    kAudioCodecProduceOutputPacketAtEOF = 5,
    _,
};
pub const kAudioCodecGetPropertyInfoSelect = @enumToInt(enum_unnamed_256.kAudioCodecGetPropertyInfoSelect);
pub const kAudioCodecGetPropertySelect = @enumToInt(enum_unnamed_256.kAudioCodecGetPropertySelect);
pub const kAudioCodecSetPropertySelect = @enumToInt(enum_unnamed_256.kAudioCodecSetPropertySelect);
pub const kAudioCodecInitializeSelect = @enumToInt(enum_unnamed_256.kAudioCodecInitializeSelect);
pub const kAudioCodecUninitializeSelect = @enumToInt(enum_unnamed_256.kAudioCodecUninitializeSelect);
pub const kAudioCodecAppendInputDataSelect = @enumToInt(enum_unnamed_256.kAudioCodecAppendInputDataSelect);
pub const kAudioCodecProduceOutputDataSelect = @enumToInt(enum_unnamed_256.kAudioCodecProduceOutputDataSelect);
pub const kAudioCodecResetSelect = @enumToInt(enum_unnamed_256.kAudioCodecResetSelect);
pub const kAudioCodecAppendInputBufferListSelect = @enumToInt(enum_unnamed_256.kAudioCodecAppendInputBufferListSelect);
pub const kAudioCodecProduceOutputBufferListSelect = @enumToInt(enum_unnamed_256.kAudioCodecProduceOutputBufferListSelect);
const enum_unnamed_256 = extern enum(c_int) {
    kAudioCodecGetPropertyInfoSelect = 1,
    kAudioCodecGetPropertySelect = 2,
    kAudioCodecSetPropertySelect = 3,
    kAudioCodecInitializeSelect = 4,
    kAudioCodecUninitializeSelect = 5,
    kAudioCodecAppendInputDataSelect = 6,
    kAudioCodecProduceOutputDataSelect = 7,
    kAudioCodecResetSelect = 8,
    kAudioCodecAppendInputBufferListSelect = 9,
    kAudioCodecProduceOutputBufferListSelect = 10,
    _,
};
pub const kAudioCodecNoError = @enumToInt(enum_unnamed_257.kAudioCodecNoError);
pub const kAudioCodecUnspecifiedError = @enumToInt(enum_unnamed_257.kAudioCodecUnspecifiedError);
pub const kAudioCodecUnknownPropertyError = @enumToInt(enum_unnamed_257.kAudioCodecUnknownPropertyError);
pub const kAudioCodecBadPropertySizeError = @enumToInt(enum_unnamed_257.kAudioCodecBadPropertySizeError);
pub const kAudioCodecIllegalOperationError = @enumToInt(enum_unnamed_257.kAudioCodecIllegalOperationError);
pub const kAudioCodecUnsupportedFormatError = @enumToInt(enum_unnamed_257.kAudioCodecUnsupportedFormatError);
pub const kAudioCodecStateError = @enumToInt(enum_unnamed_257.kAudioCodecStateError);
pub const kAudioCodecNotEnoughBufferSpaceError = @enumToInt(enum_unnamed_257.kAudioCodecNotEnoughBufferSpaceError);
pub const kAudioCodecBadDataError = @enumToInt(enum_unnamed_257.kAudioCodecBadDataError);
const enum_unnamed_257 = extern enum(c_int) {
    kAudioCodecNoError = 0,
    kAudioCodecUnspecifiedError = 2003329396,
    kAudioCodecUnknownPropertyError = 2003332927,
    kAudioCodecBadPropertySizeError = 561211770,
    kAudioCodecIllegalOperationError = 1852797029,
    kAudioCodecUnsupportedFormatError = 560226676,
    kAudioCodecStateError = 561214580,
    kAudioCodecNotEnoughBufferSpaceError = 560100710,
    kAudioCodecBadDataError = 1650549857,
    _,
};
pub extern fn AudioCodecGetPropertyInfo(inCodec: AudioCodec, inPropertyID: AudioCodecPropertyID, outSize: [*c]UInt32, outWritable: [*c]Boolean) OSStatus;
pub extern fn AudioCodecGetProperty(inCodec: AudioCodec, inPropertyID: AudioCodecPropertyID, ioPropertyDataSize: [*c]UInt32, outPropertyData: ?*c_void) OSStatus;
pub extern fn AudioCodecSetProperty(inCodec: AudioCodec, inPropertyID: AudioCodecPropertyID, inPropertyDataSize: UInt32, inPropertyData: ?*const c_void) OSStatus;
pub extern fn AudioCodecInitialize(inCodec: AudioCodec, inInputFormat: [*c]const AudioStreamBasicDescription, inOutputFormat: [*c]const AudioStreamBasicDescription, inMagicCookie: ?*const c_void, inMagicCookieByteSize: UInt32) OSStatus;
pub extern fn AudioCodecUninitialize(inCodec: AudioCodec) OSStatus;
pub extern fn AudioCodecAppendInputData(inCodec: AudioCodec, inInputData: ?*const c_void, ioInputDataByteSize: [*c]UInt32, ioNumberPackets: [*c]UInt32, inPacketDescription: [*c]const AudioStreamPacketDescription) OSStatus;
pub extern fn AudioCodecProduceOutputPackets(inCodec: AudioCodec, outOutputData: ?*c_void, ioOutputDataByteSize: [*c]UInt32, ioNumberPackets: [*c]UInt32, outPacketDescription: [*c]AudioStreamPacketDescription, outStatus: [*c]UInt32) OSStatus;
pub extern fn AudioCodecAppendInputBufferList(inCodec: AudioCodec, inBufferList: [*c]const AudioBufferList, ioNumberPackets: [*c]UInt32, inPacketDescription: [*c]const AudioStreamPacketDescription, outBytesConsumed: [*c]UInt32) OSStatus;
pub extern fn AudioCodecProduceOutputBufferList(inCodec: AudioCodec, ioBufferList: [*c]AudioBufferList, ioNumberPackets: [*c]UInt32, outPacketDescription: [*c]AudioStreamPacketDescription, outStatus: [*c]UInt32) OSStatus;
pub extern fn AudioCodecReset(inCodec: AudioCodec) OSStatus;
pub const AudioCodecGetPropertyInfoProc = ?fn (?*c_void, AudioCodecPropertyID, [*c]UInt32, [*c]Boolean) callconv(.C) OSStatus;
pub const AudioCodecGetPropertyProc = ?fn (?*c_void, AudioCodecPropertyID, [*c]UInt32, ?*c_void) callconv(.C) OSStatus;
pub const AudioCodecSetPropertyProc = ?fn (?*c_void, AudioCodecPropertyID, UInt32, ?*const c_void) callconv(.C) OSStatus;
pub const AudioCodecInitializeProc = ?fn (?*c_void, [*c]const AudioStreamBasicDescription, [*c]const AudioStreamBasicDescription, ?*const c_void, UInt32) callconv(.C) OSStatus;
pub const AudioCodecUninitializeProc = ?fn (?*c_void) callconv(.C) OSStatus;
pub const AudioCodecAppendInputDataProc = ?fn (?*c_void, ?*const c_void, [*c]UInt32, [*c]UInt32, [*c]const AudioStreamPacketDescription) callconv(.C) OSStatus;
pub const AudioCodecProduceOutputPacketsProc = ?fn (?*c_void, ?*c_void, [*c]UInt32, [*c]UInt32, [*c]AudioStreamPacketDescription, [*c]UInt32) callconv(.C) OSStatus;
pub const AudioCodecResetProc = ?fn (?*c_void) callconv(.C) OSStatus;
pub const AudioCodecAppendInputBufferListProc = ?fn (?*c_void, [*c]const AudioBufferList, [*c]UInt32, [*c]const AudioStreamPacketDescription, [*c]UInt32) callconv(.C) OSStatus;
pub const AudioCodecProduceOutputBufferListProc = ?fn (?*c_void, [*c]AudioBufferList, [*c]UInt32, [*c]AudioStreamPacketDescription, [*c]UInt32) callconv(.C) OSStatus;
pub const kAudioCodecPropertyMinimumDelayMode = @enumToInt(enum_unnamed_258.kAudioCodecPropertyMinimumDelayMode);
const enum_unnamed_258 = extern enum(c_int) {
    kAudioCodecPropertyMinimumDelayMode = 1835296108,
    _,
};
pub const kAudioCodecPropertyNameCFString = @enumToInt(enum_unnamed_259.kAudioCodecPropertyNameCFString);
pub const kAudioCodecPropertyManufacturerCFString = @enumToInt(enum_unnamed_259.kAudioCodecPropertyManufacturerCFString);
pub const kAudioCodecPropertyFormatCFString = @enumToInt(enum_unnamed_259.kAudioCodecPropertyFormatCFString);
const enum_unnamed_259 = extern enum(c_int) {
    kAudioCodecPropertyNameCFString = 1819173229,
    kAudioCodecPropertyManufacturerCFString = 1819107691,
    kAudioCodecPropertyFormatCFString = 1818652530,
    _,
};
pub const kAudioCodecPropertyRequiresPacketDescription = @enumToInt(enum_unnamed_260.kAudioCodecPropertyRequiresPacketDescription);
pub const kAudioCodecPropertyAvailableBitRates = @enumToInt(enum_unnamed_260.kAudioCodecPropertyAvailableBitRates);
pub const kAudioCodecExtendFrequencies = @enumToInt(enum_unnamed_260.kAudioCodecExtendFrequencies);
pub const kAudioCodecUseRecommendedSampleRate = @enumToInt(enum_unnamed_260.kAudioCodecUseRecommendedSampleRate);
pub const kAudioCodecOutputPrecedence = @enumToInt(enum_unnamed_260.kAudioCodecOutputPrecedence);
pub const kAudioCodecBitRateFormat = @enumToInt(enum_unnamed_260.kAudioCodecBitRateFormat);
pub const kAudioCodecDoesSampleRateConversion = @enumToInt(enum_unnamed_260.kAudioCodecDoesSampleRateConversion);
pub const kAudioCodecInputFormatsForOutputFormat = @enumToInt(enum_unnamed_260.kAudioCodecInputFormatsForOutputFormat);
pub const kAudioCodecOutputFormatsForInputFormat = @enumToInt(enum_unnamed_260.kAudioCodecOutputFormatsForInputFormat);
pub const kAudioCodecPropertyInputChannelLayout = @enumToInt(enum_unnamed_260.kAudioCodecPropertyInputChannelLayout);
pub const kAudioCodecPropertyOutputChannelLayout = @enumToInt(enum_unnamed_260.kAudioCodecPropertyOutputChannelLayout);
pub const kAudioCodecPropertyAvailableInputChannelLayouts = @enumToInt(enum_unnamed_260.kAudioCodecPropertyAvailableInputChannelLayouts);
pub const kAudioCodecPropertyAvailableOutputChannelLayouts = @enumToInt(enum_unnamed_260.kAudioCodecPropertyAvailableOutputChannelLayouts);
pub const kAudioCodecPropertyZeroFramesPadded = @enumToInt(enum_unnamed_260.kAudioCodecPropertyZeroFramesPadded);
const enum_unnamed_260 = extern enum(c_int) {
    kAudioCodecPropertyRequiresPacketDescription = 1885432676,
    kAudioCodecPropertyAvailableBitRates = 1651668003,
    kAudioCodecExtendFrequencies = 1633903974,
    kAudioCodecUseRecommendedSampleRate = 1970434930,
    kAudioCodecOutputPrecedence = 1869639794,
    kAudioCodecBitRateFormat = 1633903206,
    kAudioCodecDoesSampleRateConversion = 1819112035,
    kAudioCodecInputFormatsForOutputFormat = 1768305775,
    kAudioCodecOutputFormatsForInputFormat = 1868969065,
    kAudioCodecPropertyInputChannelLayout = 1768123424,
    kAudioCodecPropertyOutputChannelLayout = 1868786720,
    kAudioCodecPropertyAvailableInputChannelLayouts = 1634296684,
    kAudioCodecPropertyAvailableOutputChannelLayouts = 1634689900,
    kAudioCodecPropertyZeroFramesPadded = 1885430832,
    _,
};
pub const kAudioCodecBitRateFormat_CBR = @enumToInt(enum_unnamed_261.kAudioCodecBitRateFormat_CBR);
pub const kAudioCodecBitRateFormat_ABR = @enumToInt(enum_unnamed_261.kAudioCodecBitRateFormat_ABR);
pub const kAudioCodecBitRateFormat_VBR = @enumToInt(enum_unnamed_261.kAudioCodecBitRateFormat_VBR);
const enum_unnamed_261 = extern enum(c_int) {
    kAudioCodecBitRateFormat_CBR = 0,
    kAudioCodecBitRateFormat_ABR = 1,
    kAudioCodecBitRateFormat_VBR = 2,
    _,
};
pub const kAudioCodecOutputPrecedenceNone = @enumToInt(enum_unnamed_262.kAudioCodecOutputPrecedenceNone);
pub const kAudioCodecOutputPrecedenceBitRate = @enumToInt(enum_unnamed_262.kAudioCodecOutputPrecedenceBitRate);
pub const kAudioCodecOutputPrecedenceSampleRate = @enumToInt(enum_unnamed_262.kAudioCodecOutputPrecedenceSampleRate);
const enum_unnamed_262 = extern enum(c_int) {
    kAudioCodecOutputPrecedenceNone = 0,
    kAudioCodecOutputPrecedenceBitRate = 1,
    kAudioCodecOutputPrecedenceSampleRate = 2,
    _,
};
pub const MagicCookieInfo = struct_AudioCodecMagicCookieInfo;
pub const kHintBasic = @enumToInt(enum_unnamed_263.kHintBasic);
pub const kHintAdvanced = @enumToInt(enum_unnamed_263.kHintAdvanced);
pub const kHintHidden = @enumToInt(enum_unnamed_263.kHintHidden);
const enum_unnamed_263 = extern enum(c_int) {
    kHintBasic = 0,
    kHintAdvanced = 1,
    kHintHidden = 2,
    _,
};
pub const AudioUnit = AudioComponentInstance;
pub const kAudioUnitType_Output = @enumToInt(enum_unnamed_264.kAudioUnitType_Output);
pub const kAudioUnitType_MusicDevice = @enumToInt(enum_unnamed_264.kAudioUnitType_MusicDevice);
pub const kAudioUnitType_MusicEffect = @enumToInt(enum_unnamed_264.kAudioUnitType_MusicEffect);
pub const kAudioUnitType_FormatConverter = @enumToInt(enum_unnamed_264.kAudioUnitType_FormatConverter);
pub const kAudioUnitType_Effect = @enumToInt(enum_unnamed_264.kAudioUnitType_Effect);
pub const kAudioUnitType_Mixer = @enumToInt(enum_unnamed_264.kAudioUnitType_Mixer);
pub const kAudioUnitType_Panner = @enumToInt(enum_unnamed_264.kAudioUnitType_Panner);
pub const kAudioUnitType_Generator = @enumToInt(enum_unnamed_264.kAudioUnitType_Generator);
pub const kAudioUnitType_OfflineEffect = @enumToInt(enum_unnamed_264.kAudioUnitType_OfflineEffect);
pub const kAudioUnitType_MIDIProcessor = @enumToInt(enum_unnamed_264.kAudioUnitType_MIDIProcessor);
const enum_unnamed_264 = extern enum(c_int) {
    kAudioUnitType_Output = 1635086197,
    kAudioUnitType_MusicDevice = 1635085685,
    kAudioUnitType_MusicEffect = 1635085670,
    kAudioUnitType_FormatConverter = 1635083875,
    kAudioUnitType_Effect = 1635083896,
    kAudioUnitType_Mixer = 1635085688,
    kAudioUnitType_Panner = 1635086446,
    kAudioUnitType_Generator = 1635084142,
    kAudioUnitType_OfflineEffect = 1635086188,
    kAudioUnitType_MIDIProcessor = 1635085673,
    _,
};
pub const kAudioUnitManufacturer_Apple = @enumToInt(enum_unnamed_265.kAudioUnitManufacturer_Apple);
const enum_unnamed_265 = extern enum(c_int) {
    kAudioUnitManufacturer_Apple = 1634758764,
    _,
};
pub const kAudioUnitSubType_GenericOutput = @enumToInt(enum_unnamed_266.kAudioUnitSubType_GenericOutput);
pub const kAudioUnitSubType_VoiceProcessingIO = @enumToInt(enum_unnamed_266.kAudioUnitSubType_VoiceProcessingIO);
const enum_unnamed_266 = extern enum(c_int) {
    kAudioUnitSubType_GenericOutput = 1734700658,
    kAudioUnitSubType_VoiceProcessingIO = 1987078511,
    _,
};
pub const kAudioUnitSubType_HALOutput = @enumToInt(enum_unnamed_267.kAudioUnitSubType_HALOutput);
pub const kAudioUnitSubType_DefaultOutput = @enumToInt(enum_unnamed_267.kAudioUnitSubType_DefaultOutput);
pub const kAudioUnitSubType_SystemOutput = @enumToInt(enum_unnamed_267.kAudioUnitSubType_SystemOutput);
const enum_unnamed_267 = extern enum(c_int) {
    kAudioUnitSubType_HALOutput = 1634230636,
    kAudioUnitSubType_DefaultOutput = 1684366880,
    kAudioUnitSubType_SystemOutput = 1937339168,
    _,
};
pub const kAudioUnitSubType_DLSSynth = @enumToInt(enum_unnamed_268.kAudioUnitSubType_DLSSynth);
pub const kAudioUnitSubType_Sampler = @enumToInt(enum_unnamed_268.kAudioUnitSubType_Sampler);
pub const kAudioUnitSubType_MIDISynth = @enumToInt(enum_unnamed_268.kAudioUnitSubType_MIDISynth);
const enum_unnamed_268 = extern enum(c_int) {
    kAudioUnitSubType_DLSSynth = 1684828960,
    kAudioUnitSubType_Sampler = 1935764848,
    kAudioUnitSubType_MIDISynth = 1836284270,
    _,
};
pub const kAudioUnitSubType_AUConverter = @enumToInt(enum_unnamed_269.kAudioUnitSubType_AUConverter);
pub const kAudioUnitSubType_Varispeed = @enumToInt(enum_unnamed_269.kAudioUnitSubType_Varispeed);
pub const kAudioUnitSubType_DeferredRenderer = @enumToInt(enum_unnamed_269.kAudioUnitSubType_DeferredRenderer);
pub const kAudioUnitSubType_Splitter = @enumToInt(enum_unnamed_269.kAudioUnitSubType_Splitter);
pub const kAudioUnitSubType_MultiSplitter = @enumToInt(enum_unnamed_269.kAudioUnitSubType_MultiSplitter);
pub const kAudioUnitSubType_Merger = @enumToInt(enum_unnamed_269.kAudioUnitSubType_Merger);
pub const kAudioUnitSubType_NewTimePitch = @enumToInt(enum_unnamed_269.kAudioUnitSubType_NewTimePitch);
pub const kAudioUnitSubType_AUiPodTimeOther = @enumToInt(enum_unnamed_269.kAudioUnitSubType_AUiPodTimeOther);
pub const kAudioUnitSubType_RoundTripAAC = @enumToInt(enum_unnamed_269.kAudioUnitSubType_RoundTripAAC);
const enum_unnamed_269 = extern enum(c_int) {
    kAudioUnitSubType_AUConverter = 1668247158,
    kAudioUnitSubType_Varispeed = 1986097769,
    kAudioUnitSubType_DeferredRenderer = 1684366962,
    kAudioUnitSubType_Splitter = 1936747636,
    kAudioUnitSubType_MultiSplitter = 1836281964,
    kAudioUnitSubType_Merger = 1835364967,
    kAudioUnitSubType_NewTimePitch = 1853191280,
    kAudioUnitSubType_AUiPodTimeOther = 1768977519,
    kAudioUnitSubType_RoundTripAAC = 1918984547,
    _,
};
pub const kAudioUnitSubType_TimePitch = @enumToInt(enum_unnamed_270.kAudioUnitSubType_TimePitch);
const enum_unnamed_270 = extern enum(c_int) {
    kAudioUnitSubType_TimePitch = 1953329268,
    _,
};
pub const kAudioUnitSubType_PeakLimiter = @enumToInt(enum_unnamed_271.kAudioUnitSubType_PeakLimiter);
pub const kAudioUnitSubType_DynamicsProcessor = @enumToInt(enum_unnamed_271.kAudioUnitSubType_DynamicsProcessor);
pub const kAudioUnitSubType_LowPassFilter = @enumToInt(enum_unnamed_271.kAudioUnitSubType_LowPassFilter);
pub const kAudioUnitSubType_HighPassFilter = @enumToInt(enum_unnamed_271.kAudioUnitSubType_HighPassFilter);
pub const kAudioUnitSubType_BandPassFilter = @enumToInt(enum_unnamed_271.kAudioUnitSubType_BandPassFilter);
pub const kAudioUnitSubType_HighShelfFilter = @enumToInt(enum_unnamed_271.kAudioUnitSubType_HighShelfFilter);
pub const kAudioUnitSubType_LowShelfFilter = @enumToInt(enum_unnamed_271.kAudioUnitSubType_LowShelfFilter);
pub const kAudioUnitSubType_ParametricEQ = @enumToInt(enum_unnamed_271.kAudioUnitSubType_ParametricEQ);
pub const kAudioUnitSubType_Distortion = @enumToInt(enum_unnamed_271.kAudioUnitSubType_Distortion);
pub const kAudioUnitSubType_Delay = @enumToInt(enum_unnamed_271.kAudioUnitSubType_Delay);
pub const kAudioUnitSubType_SampleDelay = @enumToInt(enum_unnamed_271.kAudioUnitSubType_SampleDelay);
pub const kAudioUnitSubType_NBandEQ = @enumToInt(enum_unnamed_271.kAudioUnitSubType_NBandEQ);
pub const kAudioUnitSubType_Reverb2 = @enumToInt(enum_unnamed_271.kAudioUnitSubType_Reverb2);
const enum_unnamed_271 = extern enum(c_int) {
    kAudioUnitSubType_PeakLimiter = 1819112562,
    kAudioUnitSubType_DynamicsProcessor = 1684237680,
    kAudioUnitSubType_LowPassFilter = 1819304307,
    kAudioUnitSubType_HighPassFilter = 1752195443,
    kAudioUnitSubType_BandPassFilter = 1651532147,
    kAudioUnitSubType_HighShelfFilter = 1752393830,
    kAudioUnitSubType_LowShelfFilter = 1819502694,
    kAudioUnitSubType_ParametricEQ = 1886217585,
    kAudioUnitSubType_Distortion = 1684632436,
    kAudioUnitSubType_Delay = 1684368505,
    kAudioUnitSubType_SampleDelay = 1935961209,
    kAudioUnitSubType_NBandEQ = 1851942257,
    kAudioUnitSubType_Reverb2 = 1920361010,
    _,
};
pub const kAudioUnitSubType_GraphicEQ = @enumToInt(enum_unnamed_272.kAudioUnitSubType_GraphicEQ);
pub const kAudioUnitSubType_MultiBandCompressor = @enumToInt(enum_unnamed_272.kAudioUnitSubType_MultiBandCompressor);
pub const kAudioUnitSubType_MatrixReverb = @enumToInt(enum_unnamed_272.kAudioUnitSubType_MatrixReverb);
pub const kAudioUnitSubType_Pitch = @enumToInt(enum_unnamed_272.kAudioUnitSubType_Pitch);
pub const kAudioUnitSubType_AUFilter = @enumToInt(enum_unnamed_272.kAudioUnitSubType_AUFilter);
pub const kAudioUnitSubType_NetSend = @enumToInt(enum_unnamed_272.kAudioUnitSubType_NetSend);
pub const kAudioUnitSubType_RogerBeep = @enumToInt(enum_unnamed_272.kAudioUnitSubType_RogerBeep);
const enum_unnamed_272 = extern enum(c_int) {
    kAudioUnitSubType_GraphicEQ = 1735550321,
    kAudioUnitSubType_MultiBandCompressor = 1835232624,
    kAudioUnitSubType_MatrixReverb = 1836213622,
    kAudioUnitSubType_Pitch = 1953329268,
    kAudioUnitSubType_AUFilter = 1718185076,
    kAudioUnitSubType_NetSend = 1853058660,
    kAudioUnitSubType_RogerBeep = 1919903602,
    _,
};
pub const kAudioUnitSubType_MultiChannelMixer = @enumToInt(enum_unnamed_273.kAudioUnitSubType_MultiChannelMixer);
pub const kAudioUnitSubType_MatrixMixer = @enumToInt(enum_unnamed_273.kAudioUnitSubType_MatrixMixer);
pub const kAudioUnitSubType_SpatialMixer = @enumToInt(enum_unnamed_273.kAudioUnitSubType_SpatialMixer);
const enum_unnamed_273 = extern enum(c_int) {
    kAudioUnitSubType_MultiChannelMixer = 1835232632,
    kAudioUnitSubType_MatrixMixer = 1836608888,
    kAudioUnitSubType_SpatialMixer = 862217581,
    _,
};
pub const kAudioUnitSubType_StereoMixer = @enumToInt(enum_unnamed_274.kAudioUnitSubType_StereoMixer);
pub const kAudioUnitSubType_3DMixer = @enumToInt(enum_unnamed_274.kAudioUnitSubType_3DMixer);
const enum_unnamed_274 = extern enum(c_int) {
    kAudioUnitSubType_StereoMixer = 1936554098,
    kAudioUnitSubType_3DMixer = 862219640,
    _,
};
pub const kAudioUnitSubType_SphericalHeadPanner = @enumToInt(enum_unnamed_275.kAudioUnitSubType_SphericalHeadPanner);
pub const kAudioUnitSubType_VectorPanner = @enumToInt(enum_unnamed_275.kAudioUnitSubType_VectorPanner);
pub const kAudioUnitSubType_SoundFieldPanner = @enumToInt(enum_unnamed_275.kAudioUnitSubType_SoundFieldPanner);
pub const kAudioUnitSubType_HRTFPanner = @enumToInt(enum_unnamed_275.kAudioUnitSubType_HRTFPanner);
const enum_unnamed_275 = extern enum(c_int) {
    kAudioUnitSubType_SphericalHeadPanner = 1936746610,
    kAudioUnitSubType_VectorPanner = 1986158963,
    kAudioUnitSubType_SoundFieldPanner = 1634558569,
    kAudioUnitSubType_HRTFPanner = 1752331366,
    _,
};
pub const kAudioUnitSubType_NetReceive = @enumToInt(enum_unnamed_276.kAudioUnitSubType_NetReceive);
pub const kAudioUnitSubType_ScheduledSoundPlayer = @enumToInt(enum_unnamed_276.kAudioUnitSubType_ScheduledSoundPlayer);
pub const kAudioUnitSubType_AudioFilePlayer = @enumToInt(enum_unnamed_276.kAudioUnitSubType_AudioFilePlayer);
const enum_unnamed_276 = extern enum(c_int) {
    kAudioUnitSubType_NetReceive = 1852990326,
    kAudioUnitSubType_ScheduledSoundPlayer = 1936945260,
    kAudioUnitSubType_AudioFilePlayer = 1634103404,
    _,
};
pub const AudioUnitRenderActionFlags = UInt32;
pub const kAudioUnitRenderAction_PreRender = @enumToInt(enum_unnamed_277.kAudioUnitRenderAction_PreRender);
pub const kAudioUnitRenderAction_PostRender = @enumToInt(enum_unnamed_277.kAudioUnitRenderAction_PostRender);
pub const kAudioUnitRenderAction_OutputIsSilence = @enumToInt(enum_unnamed_277.kAudioUnitRenderAction_OutputIsSilence);
pub const kAudioOfflineUnitRenderAction_Preflight = @enumToInt(enum_unnamed_277.kAudioOfflineUnitRenderAction_Preflight);
pub const kAudioOfflineUnitRenderAction_Render = @enumToInt(enum_unnamed_277.kAudioOfflineUnitRenderAction_Render);
pub const kAudioOfflineUnitRenderAction_Complete = @enumToInt(enum_unnamed_277.kAudioOfflineUnitRenderAction_Complete);
pub const kAudioUnitRenderAction_PostRenderError = @enumToInt(enum_unnamed_277.kAudioUnitRenderAction_PostRenderError);
pub const kAudioUnitRenderAction_DoNotCheckRenderArgs = @enumToInt(enum_unnamed_277.kAudioUnitRenderAction_DoNotCheckRenderArgs);
const enum_unnamed_277 = extern enum(c_int) {
    kAudioUnitRenderAction_PreRender = 4,
    kAudioUnitRenderAction_PostRender = 8,
    kAudioUnitRenderAction_OutputIsSilence = 16,
    kAudioOfflineUnitRenderAction_Preflight = 32,
    kAudioOfflineUnitRenderAction_Render = 64,
    kAudioOfflineUnitRenderAction_Complete = 128,
    kAudioUnitRenderAction_PostRenderError = 256,
    kAudioUnitRenderAction_DoNotCheckRenderArgs = 512,
    _,
};
pub const kAudioUnitErr_InvalidProperty = @enumToInt(enum_unnamed_278.kAudioUnitErr_InvalidProperty);
pub const kAudioUnitErr_InvalidParameter = @enumToInt(enum_unnamed_278.kAudioUnitErr_InvalidParameter);
pub const kAudioUnitErr_InvalidElement = @enumToInt(enum_unnamed_278.kAudioUnitErr_InvalidElement);
pub const kAudioUnitErr_NoConnection = @enumToInt(enum_unnamed_278.kAudioUnitErr_NoConnection);
pub const kAudioUnitErr_FailedInitialization = @enumToInt(enum_unnamed_278.kAudioUnitErr_FailedInitialization);
pub const kAudioUnitErr_TooManyFramesToProcess = @enumToInt(enum_unnamed_278.kAudioUnitErr_TooManyFramesToProcess);
pub const kAudioUnitErr_InvalidFile = @enumToInt(enum_unnamed_278.kAudioUnitErr_InvalidFile);
pub const kAudioUnitErr_UnknownFileType = @enumToInt(enum_unnamed_278.kAudioUnitErr_UnknownFileType);
pub const kAudioUnitErr_FileNotSpecified = @enumToInt(enum_unnamed_278.kAudioUnitErr_FileNotSpecified);
pub const kAudioUnitErr_FormatNotSupported = @enumToInt(enum_unnamed_278.kAudioUnitErr_FormatNotSupported);
pub const kAudioUnitErr_Uninitialized = @enumToInt(enum_unnamed_278.kAudioUnitErr_Uninitialized);
pub const kAudioUnitErr_InvalidScope = @enumToInt(enum_unnamed_278.kAudioUnitErr_InvalidScope);
pub const kAudioUnitErr_PropertyNotWritable = @enumToInt(enum_unnamed_278.kAudioUnitErr_PropertyNotWritable);
pub const kAudioUnitErr_CannotDoInCurrentContext = @enumToInt(enum_unnamed_278.kAudioUnitErr_CannotDoInCurrentContext);
pub const kAudioUnitErr_InvalidPropertyValue = @enumToInt(enum_unnamed_278.kAudioUnitErr_InvalidPropertyValue);
pub const kAudioUnitErr_PropertyNotInUse = @enumToInt(enum_unnamed_278.kAudioUnitErr_PropertyNotInUse);
pub const kAudioUnitErr_Initialized = @enumToInt(enum_unnamed_278.kAudioUnitErr_Initialized);
pub const kAudioUnitErr_InvalidOfflineRender = @enumToInt(enum_unnamed_278.kAudioUnitErr_InvalidOfflineRender);
pub const kAudioUnitErr_Unauthorized = @enumToInt(enum_unnamed_278.kAudioUnitErr_Unauthorized);
pub const kAudioUnitErr_MIDIOutputBufferFull = @enumToInt(enum_unnamed_278.kAudioUnitErr_MIDIOutputBufferFull);
pub const kAudioComponentErr_InstanceTimedOut = @enumToInt(enum_unnamed_278.kAudioComponentErr_InstanceTimedOut);
pub const kAudioComponentErr_InstanceInvalidated = @enumToInt(enum_unnamed_278.kAudioComponentErr_InstanceInvalidated);
pub const kAudioUnitErr_RenderTimeout = @enumToInt(enum_unnamed_278.kAudioUnitErr_RenderTimeout);
pub const kAudioUnitErr_ExtensionNotFound = @enumToInt(enum_unnamed_278.kAudioUnitErr_ExtensionNotFound);
pub const kAudioUnitErr_InvalidParameterValue = @enumToInt(enum_unnamed_278.kAudioUnitErr_InvalidParameterValue);
pub const kAudioUnitErr_InvalidFilePath = @enumToInt(enum_unnamed_278.kAudioUnitErr_InvalidFilePath);
pub const kAudioUnitErr_MissingKey = @enumToInt(enum_unnamed_278.kAudioUnitErr_MissingKey);
const enum_unnamed_278 = extern enum(c_int) {
    kAudioUnitErr_InvalidProperty = -10879,
    kAudioUnitErr_InvalidParameter = -10878,
    kAudioUnitErr_InvalidElement = -10877,
    kAudioUnitErr_NoConnection = -10876,
    kAudioUnitErr_FailedInitialization = -10875,
    kAudioUnitErr_TooManyFramesToProcess = -10874,
    kAudioUnitErr_InvalidFile = -10871,
    kAudioUnitErr_UnknownFileType = -10870,
    kAudioUnitErr_FileNotSpecified = -10869,
    kAudioUnitErr_FormatNotSupported = -10868,
    kAudioUnitErr_Uninitialized = -10867,
    kAudioUnitErr_InvalidScope = -10866,
    kAudioUnitErr_PropertyNotWritable = -10865,
    kAudioUnitErr_CannotDoInCurrentContext = -10863,
    kAudioUnitErr_InvalidPropertyValue = -10851,
    kAudioUnitErr_PropertyNotInUse = -10850,
    kAudioUnitErr_Initialized = -10849,
    kAudioUnitErr_InvalidOfflineRender = -10848,
    kAudioUnitErr_Unauthorized = -10847,
    kAudioUnitErr_MIDIOutputBufferFull = -66753,
    kAudioComponentErr_InstanceTimedOut = -66754,
    kAudioComponentErr_InstanceInvalidated = -66749,
    kAudioUnitErr_RenderTimeout = -66745,
    kAudioUnitErr_ExtensionNotFound = -66744,
    kAudioUnitErr_InvalidParameterValue = -66743,
    kAudioUnitErr_InvalidFilePath = -66742,
    kAudioUnitErr_MissingKey = -66741,
    _,
};
pub const AudioUnitPropertyID = UInt32;
pub const AudioUnitScope = UInt32;
pub const AudioUnitElement = UInt32;
pub const AudioUnitParameterID = UInt32;
pub const AudioUnitParameterValue = Float32;
pub const AUParameterEventType = UInt32;
pub const kParameterEvent_Immediate = @enumToInt(enum_unnamed_279.kParameterEvent_Immediate);
pub const kParameterEvent_Ramped = @enumToInt(enum_unnamed_279.kParameterEvent_Ramped);
const enum_unnamed_279 = extern enum(c_int) {
    kParameterEvent_Immediate = 1,
    kParameterEvent_Ramped = 2,
    _,
};
const struct_unnamed_281 = extern struct {
    startBufferOffset: SInt32,
    durationInFrames: UInt32,
    startValue: AudioUnitParameterValue,
    endValue: AudioUnitParameterValue,
};
const struct_unnamed_282 = extern struct {
    bufferOffset: UInt32,
    value: AudioUnitParameterValue,
};
const union_unnamed_280 = extern union {
    ramp: struct_unnamed_281,
    immediate: struct_unnamed_282,
};
pub const struct_AudioUnitParameterEvent = extern struct {
    scope: AudioUnitScope,
    element: AudioUnitElement,
    parameter: AudioUnitParameterID,
    eventType: AUParameterEventType,
    eventValues: union_unnamed_280,
};
pub const AudioUnitParameterEvent = struct_AudioUnitParameterEvent;
pub const struct_AudioUnitParameter = extern struct {
    mAudioUnit: AudioUnit,
    mParameterID: AudioUnitParameterID,
    mScope: AudioUnitScope,
    mElement: AudioUnitElement,
};
pub const AudioUnitParameter = struct_AudioUnitParameter;
pub const struct_AudioUnitProperty = extern struct {
    mAudioUnit: AudioUnit,
    mPropertyID: AudioUnitPropertyID,
    mScope: AudioUnitScope,
    mElement: AudioUnitElement,
};
pub const AudioUnitProperty = struct_AudioUnitProperty;
pub const AURenderCallback = ?fn (?*c_void, [*c]AudioUnitRenderActionFlags, [*c]const AudioTimeStamp, UInt32, UInt32, [*c]AudioBufferList) callconv(.C) OSStatus;
pub const AudioUnitPropertyListenerProc = ?fn (?*c_void, AudioUnit, AudioUnitPropertyID, AudioUnitScope, AudioUnitElement) callconv(.C) void;
pub const AUInputSamplesInOutputCallback = ?fn (?*c_void, [*c]const AudioTimeStamp, Float64, Float64) callconv(.C) void;
pub extern const kAudioComponentRegistrationsChangedNotification: CFStringRef;
pub extern const kAudioComponentInstanceInvalidationNotification: CFStringRef;
pub extern fn AudioUnitInitialize(inUnit: AudioUnit) OSStatus;
pub extern fn AudioUnitUninitialize(inUnit: AudioUnit) OSStatus;
pub extern fn AudioUnitGetPropertyInfo(inUnit: AudioUnit, inID: AudioUnitPropertyID, inScope: AudioUnitScope, inElement: AudioUnitElement, outDataSize: [*c]UInt32, outWritable: [*c]Boolean) OSStatus;
pub extern fn AudioUnitGetProperty(inUnit: AudioUnit, inID: AudioUnitPropertyID, inScope: AudioUnitScope, inElement: AudioUnitElement, outData: ?*c_void, ioDataSize: [*c]UInt32) OSStatus;
pub extern fn AudioUnitSetProperty(inUnit: AudioUnit, inID: AudioUnitPropertyID, inScope: AudioUnitScope, inElement: AudioUnitElement, inData: ?*const c_void, inDataSize: UInt32) OSStatus;
pub extern fn AudioUnitAddPropertyListener(inUnit: AudioUnit, inID: AudioUnitPropertyID, inProc: AudioUnitPropertyListenerProc, inProcUserData: ?*c_void) OSStatus;
pub extern fn AudioUnitRemovePropertyListenerWithUserData(inUnit: AudioUnit, inID: AudioUnitPropertyID, inProc: AudioUnitPropertyListenerProc, inProcUserData: ?*c_void) OSStatus;
pub extern fn AudioUnitAddRenderNotify(inUnit: AudioUnit, inProc: AURenderCallback, inProcUserData: ?*c_void) OSStatus;
pub extern fn AudioUnitRemoveRenderNotify(inUnit: AudioUnit, inProc: AURenderCallback, inProcUserData: ?*c_void) OSStatus;
pub extern fn AudioUnitGetParameter(inUnit: AudioUnit, inID: AudioUnitParameterID, inScope: AudioUnitScope, inElement: AudioUnitElement, outValue: [*c]AudioUnitParameterValue) OSStatus;
pub extern fn AudioUnitSetParameter(inUnit: AudioUnit, inID: AudioUnitParameterID, inScope: AudioUnitScope, inElement: AudioUnitElement, inValue: AudioUnitParameterValue, inBufferOffsetInFrames: UInt32) OSStatus;
pub extern fn AudioUnitScheduleParameters(inUnit: AudioUnit, inParameterEvent: [*c]const AudioUnitParameterEvent, inNumParamEvents: UInt32) OSStatus;
pub extern fn AudioUnitRender(inUnit: AudioUnit, ioActionFlags: [*c]AudioUnitRenderActionFlags, inTimeStamp: [*c]const AudioTimeStamp, inOutputBusNumber: UInt32, inNumberFrames: UInt32, ioData: [*c]AudioBufferList) OSStatus;
pub extern fn AudioUnitProcess(inUnit: AudioUnit, ioActionFlags: [*c]AudioUnitRenderActionFlags, inTimeStamp: [*c]const AudioTimeStamp, inNumberFrames: UInt32, ioData: [*c]AudioBufferList) OSStatus;
pub extern fn AudioUnitProcessMultiple(inUnit: AudioUnit, ioActionFlags: [*c]AudioUnitRenderActionFlags, inTimeStamp: [*c]const AudioTimeStamp, inNumberFrames: UInt32, inNumberInputBufferLists: UInt32, inInputBufferLists: [*c][*c]const AudioBufferList, inNumberOutputBufferLists: UInt32, ioOutputBufferLists: [*c][*c]AudioBufferList) OSStatus;
pub extern fn AudioUnitReset(inUnit: AudioUnit, inScope: AudioUnitScope, inElement: AudioUnitElement) OSStatus;
pub extern fn AudioUnitExtensionSetComponentList(extensionIdentifier: CFStringRef, audioComponentInfo: CFArrayRef) OSStatus;
pub extern fn AudioUnitExtensionCopyComponentList(extensionIdentifier: CFStringRef) CFArrayRef;
pub const kAudioUnitRange = @enumToInt(enum_unnamed_283.kAudioUnitRange);
pub const kAudioUnitInitializeSelect = @enumToInt(enum_unnamed_283.kAudioUnitInitializeSelect);
pub const kAudioUnitUninitializeSelect = @enumToInt(enum_unnamed_283.kAudioUnitUninitializeSelect);
pub const kAudioUnitGetPropertyInfoSelect = @enumToInt(enum_unnamed_283.kAudioUnitGetPropertyInfoSelect);
pub const kAudioUnitGetPropertySelect = @enumToInt(enum_unnamed_283.kAudioUnitGetPropertySelect);
pub const kAudioUnitSetPropertySelect = @enumToInt(enum_unnamed_283.kAudioUnitSetPropertySelect);
pub const kAudioUnitAddPropertyListenerSelect = @enumToInt(enum_unnamed_283.kAudioUnitAddPropertyListenerSelect);
pub const kAudioUnitRemovePropertyListenerSelect = @enumToInt(enum_unnamed_283.kAudioUnitRemovePropertyListenerSelect);
pub const kAudioUnitRemovePropertyListenerWithUserDataSelect = @enumToInt(enum_unnamed_283.kAudioUnitRemovePropertyListenerWithUserDataSelect);
pub const kAudioUnitAddRenderNotifySelect = @enumToInt(enum_unnamed_283.kAudioUnitAddRenderNotifySelect);
pub const kAudioUnitRemoveRenderNotifySelect = @enumToInt(enum_unnamed_283.kAudioUnitRemoveRenderNotifySelect);
pub const kAudioUnitGetParameterSelect = @enumToInt(enum_unnamed_283.kAudioUnitGetParameterSelect);
pub const kAudioUnitSetParameterSelect = @enumToInt(enum_unnamed_283.kAudioUnitSetParameterSelect);
pub const kAudioUnitScheduleParametersSelect = @enumToInt(enum_unnamed_283.kAudioUnitScheduleParametersSelect);
pub const kAudioUnitRenderSelect = @enumToInt(enum_unnamed_283.kAudioUnitRenderSelect);
pub const kAudioUnitResetSelect = @enumToInt(enum_unnamed_283.kAudioUnitResetSelect);
pub const kAudioUnitComplexRenderSelect = @enumToInt(enum_unnamed_283.kAudioUnitComplexRenderSelect);
pub const kAudioUnitProcessSelect = @enumToInt(enum_unnamed_283.kAudioUnitProcessSelect);
pub const kAudioUnitProcessMultipleSelect = @enumToInt(enum_unnamed_283.kAudioUnitProcessMultipleSelect);
const enum_unnamed_283 = extern enum(c_int) {
    kAudioUnitRange = 0,
    kAudioUnitInitializeSelect = 1,
    kAudioUnitUninitializeSelect = 2,
    kAudioUnitGetPropertyInfoSelect = 3,
    kAudioUnitGetPropertySelect = 4,
    kAudioUnitSetPropertySelect = 5,
    kAudioUnitAddPropertyListenerSelect = 10,
    kAudioUnitRemovePropertyListenerSelect = 11,
    kAudioUnitRemovePropertyListenerWithUserDataSelect = 18,
    kAudioUnitAddRenderNotifySelect = 15,
    kAudioUnitRemoveRenderNotifySelect = 16,
    kAudioUnitGetParameterSelect = 6,
    kAudioUnitSetParameterSelect = 7,
    kAudioUnitScheduleParametersSelect = 17,
    kAudioUnitRenderSelect = 14,
    kAudioUnitResetSelect = 9,
    kAudioUnitComplexRenderSelect = 19,
    kAudioUnitProcessSelect = 20,
    kAudioUnitProcessMultipleSelect = 21,
    _,
};
pub const AudioUnitInitializeProc = ?fn (?*c_void) callconv(.C) OSStatus;
pub const AudioUnitUninitializeProc = ?fn (?*c_void) callconv(.C) OSStatus;
pub const AudioUnitGetPropertyInfoProc = ?fn (?*c_void, AudioUnitPropertyID, AudioUnitScope, AudioUnitElement, [*c]UInt32, [*c]Boolean) callconv(.C) OSStatus;
pub const AudioUnitGetPropertyProc = ?fn (?*c_void, AudioUnitPropertyID, AudioUnitScope, AudioUnitElement, ?*c_void, [*c]UInt32) callconv(.C) OSStatus;
pub const AudioUnitSetPropertyProc = ?fn (?*c_void, AudioUnitPropertyID, AudioUnitScope, AudioUnitElement, ?*const c_void, UInt32) callconv(.C) OSStatus;
pub const AudioUnitAddPropertyListenerProc = ?fn (?*c_void, AudioUnitPropertyID, AudioUnitPropertyListenerProc, ?*c_void) callconv(.C) OSStatus;
pub const AudioUnitRemovePropertyListenerProc = ?fn (?*c_void, AudioUnitPropertyID, AudioUnitPropertyListenerProc) callconv(.C) OSStatus;
pub const AudioUnitRemovePropertyListenerWithUserDataProc = ?fn (?*c_void, AudioUnitPropertyID, AudioUnitPropertyListenerProc, ?*c_void) callconv(.C) OSStatus;
pub const AudioUnitAddRenderNotifyProc = ?fn (?*c_void, AURenderCallback, ?*c_void) callconv(.C) OSStatus;
pub const AudioUnitRemoveRenderNotifyProc = ?fn (?*c_void, AURenderCallback, ?*c_void) callconv(.C) OSStatus;
pub const AudioUnitScheduleParametersProc = ?fn (?*c_void, [*c]const AudioUnitParameterEvent, UInt32) callconv(.C) OSStatus;
pub const AudioUnitResetProc = ?fn (?*c_void, AudioUnitScope, AudioUnitElement) callconv(.C) OSStatus;
pub const AudioUnitComplexRenderProc = ?fn (?*c_void, [*c]AudioUnitRenderActionFlags, [*c]const AudioTimeStamp, UInt32, UInt32, [*c]UInt32, [*c]AudioStreamPacketDescription, [*c]AudioBufferList, ?*c_void, [*c]UInt32) callconv(.C) OSStatus;
pub const AudioUnitProcessProc = ?fn (?*c_void, [*c]AudioUnitRenderActionFlags, [*c]const AudioTimeStamp, UInt32, [*c]AudioBufferList) callconv(.C) OSStatus;
pub const AudioUnitProcessMultipleProc = ?fn (?*c_void, [*c]AudioUnitRenderActionFlags, [*c]const AudioTimeStamp, UInt32, UInt32, [*c][*c]const AudioBufferList, UInt32, [*c][*c]AudioBufferList) callconv(.C) OSStatus;
pub const AudioUnitGetParameterProc = ?fn (?*c_void, AudioUnitParameterID, AudioUnitScope, AudioUnitElement, [*c]AudioUnitParameterValue) callconv(.C) OSStatus;
pub const AudioUnitSetParameterProc = ?fn (?*c_void, AudioUnitParameterID, AudioUnitScope, AudioUnitElement, AudioUnitParameterValue, UInt32) callconv(.C) OSStatus;
pub const AudioUnitRenderProc = ?fn (?*c_void, [*c]AudioUnitRenderActionFlags, [*c]const AudioTimeStamp, UInt32, UInt32, [*c]AudioBufferList) callconv(.C) OSStatus;
pub const kAudioUnitErr_IllegalInstrument = @enumToInt(enum_unnamed_284.kAudioUnitErr_IllegalInstrument);
pub const kAudioUnitErr_InstrumentTypeNotFound = @enumToInt(enum_unnamed_284.kAudioUnitErr_InstrumentTypeNotFound);
const enum_unnamed_284 = extern enum(c_int) {
    kAudioUnitErr_IllegalInstrument = -10873,
    kAudioUnitErr_InstrumentTypeNotFound = -10872,
    _,
};
pub extern fn AudioOutputUnitStart(ci: AudioUnit) OSStatus;
pub extern fn AudioOutputUnitStop(ci: AudioUnit) OSStatus;
pub const kAudioOutputUnitRange = @enumToInt(enum_unnamed_285.kAudioOutputUnitRange);
pub const kAudioOutputUnitStartSelect = @enumToInt(enum_unnamed_285.kAudioOutputUnitStartSelect);
pub const kAudioOutputUnitStopSelect = @enumToInt(enum_unnamed_285.kAudioOutputUnitStopSelect);
const enum_unnamed_285 = extern enum(c_int) {
    kAudioOutputUnitRange = 512,
    kAudioOutputUnitStartSelect = 513,
    kAudioOutputUnitStopSelect = 514,
    _,
};
pub const AudioOutputUnitStartProc = ?fn (?*c_void) callconv(.C) OSStatus;
pub const AudioOutputUnitStopProc = ?fn (?*c_void) callconv(.C) OSStatus;
pub const kAudioUnitScope_Global = @enumToInt(enum_unnamed_286.kAudioUnitScope_Global);
pub const kAudioUnitScope_Input = @enumToInt(enum_unnamed_286.kAudioUnitScope_Input);
pub const kAudioUnitScope_Output = @enumToInt(enum_unnamed_286.kAudioUnitScope_Output);
pub const kAudioUnitScope_Group = @enumToInt(enum_unnamed_286.kAudioUnitScope_Group);
pub const kAudioUnitScope_Part = @enumToInt(enum_unnamed_286.kAudioUnitScope_Part);
pub const kAudioUnitScope_Note = @enumToInt(enum_unnamed_286.kAudioUnitScope_Note);
pub const kAudioUnitScope_Layer = @enumToInt(enum_unnamed_286.kAudioUnitScope_Layer);
pub const kAudioUnitScope_LayerItem = @enumToInt(enum_unnamed_286.kAudioUnitScope_LayerItem);
const enum_unnamed_286 = extern enum(c_int) {
    kAudioUnitScope_Global = 0,
    kAudioUnitScope_Input = 1,
    kAudioUnitScope_Output = 2,
    kAudioUnitScope_Group = 3,
    kAudioUnitScope_Part = 4,
    kAudioUnitScope_Note = 5,
    kAudioUnitScope_Layer = 6,
    kAudioUnitScope_LayerItem = 7,
    _,
};
pub const kAudioUnitProperty_ClassInfo = @enumToInt(enum_unnamed_287.kAudioUnitProperty_ClassInfo);
pub const kAudioUnitProperty_MakeConnection = @enumToInt(enum_unnamed_287.kAudioUnitProperty_MakeConnection);
pub const kAudioUnitProperty_SampleRate = @enumToInt(enum_unnamed_287.kAudioUnitProperty_SampleRate);
pub const kAudioUnitProperty_ParameterList = @enumToInt(enum_unnamed_287.kAudioUnitProperty_ParameterList);
pub const kAudioUnitProperty_ParameterInfo = @enumToInt(enum_unnamed_287.kAudioUnitProperty_ParameterInfo);
pub const kAudioUnitProperty_CPULoad = @enumToInt(enum_unnamed_287.kAudioUnitProperty_CPULoad);
pub const kAudioUnitProperty_StreamFormat = @enumToInt(enum_unnamed_287.kAudioUnitProperty_StreamFormat);
pub const kAudioUnitProperty_ElementCount = @enumToInt(enum_unnamed_287.kAudioUnitProperty_ElementCount);
pub const kAudioUnitProperty_Latency = @enumToInt(enum_unnamed_287.kAudioUnitProperty_Latency);
pub const kAudioUnitProperty_SupportedNumChannels = @enumToInt(enum_unnamed_287.kAudioUnitProperty_SupportedNumChannels);
pub const kAudioUnitProperty_MaximumFramesPerSlice = @enumToInt(enum_unnamed_287.kAudioUnitProperty_MaximumFramesPerSlice);
pub const kAudioUnitProperty_ParameterValueStrings = @enumToInt(enum_unnamed_287.kAudioUnitProperty_ParameterValueStrings);
pub const kAudioUnitProperty_AudioChannelLayout = @enumToInt(enum_unnamed_287.kAudioUnitProperty_AudioChannelLayout);
pub const kAudioUnitProperty_TailTime = @enumToInt(enum_unnamed_287.kAudioUnitProperty_TailTime);
pub const kAudioUnitProperty_BypassEffect = @enumToInt(enum_unnamed_287.kAudioUnitProperty_BypassEffect);
pub const kAudioUnitProperty_LastRenderError = @enumToInt(enum_unnamed_287.kAudioUnitProperty_LastRenderError);
pub const kAudioUnitProperty_SetRenderCallback = @enumToInt(enum_unnamed_287.kAudioUnitProperty_SetRenderCallback);
pub const kAudioUnitProperty_FactoryPresets = @enumToInt(enum_unnamed_287.kAudioUnitProperty_FactoryPresets);
pub const kAudioUnitProperty_RenderQuality = @enumToInt(enum_unnamed_287.kAudioUnitProperty_RenderQuality);
pub const kAudioUnitProperty_HostCallbacks = @enumToInt(enum_unnamed_287.kAudioUnitProperty_HostCallbacks);
pub const kAudioUnitProperty_InPlaceProcessing = @enumToInt(enum_unnamed_287.kAudioUnitProperty_InPlaceProcessing);
pub const kAudioUnitProperty_ElementName = @enumToInt(enum_unnamed_287.kAudioUnitProperty_ElementName);
pub const kAudioUnitProperty_SupportedChannelLayoutTags = @enumToInt(enum_unnamed_287.kAudioUnitProperty_SupportedChannelLayoutTags);
pub const kAudioUnitProperty_PresentPreset = @enumToInt(enum_unnamed_287.kAudioUnitProperty_PresentPreset);
pub const kAudioUnitProperty_DependentParameters = @enumToInt(enum_unnamed_287.kAudioUnitProperty_DependentParameters);
pub const kAudioUnitProperty_InputSamplesInOutput = @enumToInt(enum_unnamed_287.kAudioUnitProperty_InputSamplesInOutput);
pub const kAudioUnitProperty_ShouldAllocateBuffer = @enumToInt(enum_unnamed_287.kAudioUnitProperty_ShouldAllocateBuffer);
pub const kAudioUnitProperty_FrequencyResponse = @enumToInt(enum_unnamed_287.kAudioUnitProperty_FrequencyResponse);
pub const kAudioUnitProperty_ParameterHistoryInfo = @enumToInt(enum_unnamed_287.kAudioUnitProperty_ParameterHistoryInfo);
pub const kAudioUnitProperty_NickName = @enumToInt(enum_unnamed_287.kAudioUnitProperty_NickName);
pub const kAudioUnitProperty_OfflineRender = @enumToInt(enum_unnamed_287.kAudioUnitProperty_OfflineRender);
pub const kAudioUnitProperty_ParameterIDName = @enumToInt(enum_unnamed_287.kAudioUnitProperty_ParameterIDName);
pub const kAudioUnitProperty_ParameterStringFromValue = @enumToInt(enum_unnamed_287.kAudioUnitProperty_ParameterStringFromValue);
pub const kAudioUnitProperty_ParameterClumpName = @enumToInt(enum_unnamed_287.kAudioUnitProperty_ParameterClumpName);
pub const kAudioUnitProperty_ParameterValueFromString = @enumToInt(enum_unnamed_287.kAudioUnitProperty_ParameterValueFromString);
pub const kAudioUnitProperty_ContextName = @enumToInt(enum_unnamed_287.kAudioUnitProperty_ContextName);
pub const kAudioUnitProperty_PresentationLatency = @enumToInt(enum_unnamed_287.kAudioUnitProperty_PresentationLatency);
pub const kAudioUnitProperty_ClassInfoFromDocument = @enumToInt(enum_unnamed_287.kAudioUnitProperty_ClassInfoFromDocument);
pub const kAudioUnitProperty_RequestViewController = @enumToInt(enum_unnamed_287.kAudioUnitProperty_RequestViewController);
pub const kAudioUnitProperty_ParametersForOverview = @enumToInt(enum_unnamed_287.kAudioUnitProperty_ParametersForOverview);
pub const kAudioUnitProperty_SupportsMPE = @enumToInt(enum_unnamed_287.kAudioUnitProperty_SupportsMPE);
pub const kAudioUnitProperty_FastDispatch = @enumToInt(enum_unnamed_287.kAudioUnitProperty_FastDispatch);
pub const kAudioUnitProperty_SetExternalBuffer = @enumToInt(enum_unnamed_287.kAudioUnitProperty_SetExternalBuffer);
pub const kAudioUnitProperty_GetUIComponentList = @enumToInt(enum_unnamed_287.kAudioUnitProperty_GetUIComponentList);
pub const kAudioUnitProperty_CocoaUI = @enumToInt(enum_unnamed_287.kAudioUnitProperty_CocoaUI);
pub const kAudioUnitProperty_IconLocation = @enumToInt(enum_unnamed_287.kAudioUnitProperty_IconLocation);
pub const kAudioUnitProperty_AUHostIdentifier = @enumToInt(enum_unnamed_287.kAudioUnitProperty_AUHostIdentifier);
pub const kAudioUnitProperty_MIDIOutputCallbackInfo = @enumToInt(enum_unnamed_287.kAudioUnitProperty_MIDIOutputCallbackInfo);
pub const kAudioUnitProperty_MIDIOutputCallback = @enumToInt(enum_unnamed_287.kAudioUnitProperty_MIDIOutputCallback);
const enum_unnamed_287 = extern enum(c_int) {
    kAudioUnitProperty_ClassInfo = 0,
    kAudioUnitProperty_MakeConnection = 1,
    kAudioUnitProperty_SampleRate = 2,
    kAudioUnitProperty_ParameterList = 3,
    kAudioUnitProperty_ParameterInfo = 4,
    kAudioUnitProperty_CPULoad = 6,
    kAudioUnitProperty_StreamFormat = 8,
    kAudioUnitProperty_ElementCount = 11,
    kAudioUnitProperty_Latency = 12,
    kAudioUnitProperty_SupportedNumChannels = 13,
    kAudioUnitProperty_MaximumFramesPerSlice = 14,
    kAudioUnitProperty_ParameterValueStrings = 16,
    kAudioUnitProperty_AudioChannelLayout = 19,
    kAudioUnitProperty_TailTime = 20,
    kAudioUnitProperty_BypassEffect = 21,
    kAudioUnitProperty_LastRenderError = 22,
    kAudioUnitProperty_SetRenderCallback = 23,
    kAudioUnitProperty_FactoryPresets = 24,
    kAudioUnitProperty_RenderQuality = 26,
    kAudioUnitProperty_HostCallbacks = 27,
    kAudioUnitProperty_InPlaceProcessing = 29,
    kAudioUnitProperty_ElementName = 30,
    kAudioUnitProperty_SupportedChannelLayoutTags = 32,
    kAudioUnitProperty_PresentPreset = 36,
    kAudioUnitProperty_DependentParameters = 45,
    kAudioUnitProperty_InputSamplesInOutput = 49,
    kAudioUnitProperty_ShouldAllocateBuffer = 51,
    kAudioUnitProperty_FrequencyResponse = 52,
    kAudioUnitProperty_ParameterHistoryInfo = 53,
    kAudioUnitProperty_NickName = 54,
    kAudioUnitProperty_OfflineRender = 37,
    kAudioUnitProperty_ParameterIDName = 34,
    kAudioUnitProperty_ParameterStringFromValue = 33,
    kAudioUnitProperty_ParameterClumpName = 35,
    kAudioUnitProperty_ParameterValueFromString = 38,
    kAudioUnitProperty_ContextName = 25,
    kAudioUnitProperty_PresentationLatency = 40,
    kAudioUnitProperty_ClassInfoFromDocument = 50,
    kAudioUnitProperty_RequestViewController = 56,
    kAudioUnitProperty_ParametersForOverview = 57,
    kAudioUnitProperty_SupportsMPE = 58,
    kAudioUnitProperty_FastDispatch = 5,
    kAudioUnitProperty_SetExternalBuffer = 15,
    kAudioUnitProperty_GetUIComponentList = 18,
    kAudioUnitProperty_CocoaUI = 31,
    kAudioUnitProperty_IconLocation = 39,
    kAudioUnitProperty_AUHostIdentifier = 46,
    kAudioUnitProperty_MIDIOutputCallbackInfo = 47,
    kAudioUnitProperty_MIDIOutputCallback = 48,
    _,
};
pub const struct_AudioUnitConnection = extern struct {
    sourceAudioUnit: AudioUnit,
    sourceOutputNumber: UInt32,
    destInputNumber: UInt32,
};
pub const AudioUnitConnection = struct_AudioUnitConnection;
pub const struct_AUChannelInfo = extern struct {
    inChannels: SInt16,
    outChannels: SInt16,
};
pub const AUChannelInfo = struct_AUChannelInfo;
pub const struct_AudioUnitExternalBuffer = extern struct {
    buffer: [*c]Byte,
    size: UInt32,
};
pub const AudioUnitExternalBuffer = struct_AudioUnitExternalBuffer;
pub const struct_AURenderCallbackStruct = extern struct {
    inputProc: AURenderCallback,
    inputProcRefCon: ?*c_void,
};
pub const AURenderCallbackStruct = struct_AURenderCallbackStruct;
pub const struct_AUPreset = extern struct {
    presetNumber: SInt32,
    presetName: CFStringRef,
};
pub const AUPreset = struct_AUPreset;
pub const kRenderQuality_Max = @enumToInt(enum_unnamed_288.kRenderQuality_Max);
pub const kRenderQuality_High = @enumToInt(enum_unnamed_288.kRenderQuality_High);
pub const kRenderQuality_Medium = @enumToInt(enum_unnamed_288.kRenderQuality_Medium);
pub const kRenderQuality_Low = @enumToInt(enum_unnamed_288.kRenderQuality_Low);
pub const kRenderQuality_Min = @enumToInt(enum_unnamed_288.kRenderQuality_Min);
const enum_unnamed_288 = extern enum(c_int) {
    kRenderQuality_Max = 127,
    kRenderQuality_High = 96,
    kRenderQuality_Medium = 64,
    kRenderQuality_Low = 32,
    kRenderQuality_Min = 0,
    _,
};
pub const kNumberOfResponseFrequencies = @enumToInt(enum_unnamed_289.kNumberOfResponseFrequencies);
const enum_unnamed_289 = extern enum(c_int) {
    kNumberOfResponseFrequencies = 1024,
    _,
};
pub const struct_AudioUnitFrequencyResponseBin = extern struct {
    mFrequency: Float64,
    mMagnitude: Float64,
};
pub const AudioUnitFrequencyResponseBin = struct_AudioUnitFrequencyResponseBin;
pub const HostCallback_GetBeatAndTempo = ?fn (?*c_void, [*c]Float64, [*c]Float64) callconv(.C) OSStatus;
pub const HostCallback_GetMusicalTimeLocation = ?fn (?*c_void, [*c]UInt32, [*c]Float32, [*c]UInt32, [*c]Float64) callconv(.C) OSStatus;
pub const HostCallback_GetTransportState = ?fn (?*c_void, [*c]Boolean, [*c]Boolean, [*c]Float64, [*c]Boolean, [*c]Float64, [*c]Float64) callconv(.C) OSStatus;
pub const HostCallback_GetTransportState2 = ?fn (?*c_void, [*c]Boolean, [*c]Boolean, [*c]Boolean, [*c]Float64, [*c]Boolean, [*c]Float64, [*c]Float64) callconv(.C) OSStatus;
pub const struct_HostCallbackInfo = extern struct {
    hostUserData: ?*c_void,
    beatAndTempoProc: HostCallback_GetBeatAndTempo,
    musicalTimeLocationProc: HostCallback_GetMusicalTimeLocation,
    transportStateProc: HostCallback_GetTransportState,
    transportStateProc2: HostCallback_GetTransportState2,
};
pub const HostCallbackInfo = struct_HostCallbackInfo;
pub const struct_AUDependentParameter = extern struct {
    mScope: AudioUnitScope,
    mParameterID: AudioUnitParameterID,
};
pub const AUDependentParameter = struct_AUDependentParameter;
pub const struct_AudioUnitCocoaViewInfo = extern struct {
    mCocoaAUViewBundleLocation: CFURLRef,
    mCocoaAUViewClass: [1]CFStringRef,
};
pub const AudioUnitCocoaViewInfo = struct_AudioUnitCocoaViewInfo;
pub const struct_AUHostVersionIdentifier = extern struct {
    hostName: CFStringRef,
    hostVersion: UInt32,
};
pub const AUHostVersionIdentifier = struct_AUHostVersionIdentifier;
pub const struct_MIDIPacketList = extern struct {
    numPackets: UInt32,
    packet: [1]MIDIPacket,
};
pub const AUMIDIOutputCallback = ?fn (?*c_void, [*c]const AudioTimeStamp, UInt32, [*c]const struct_MIDIPacketList) callconv(.C) OSStatus;
pub const struct_AUMIDIOutputCallbackStruct = extern struct {
    midiOutputCallback: AUMIDIOutputCallback,
    userData: ?*c_void,
};
pub const AUMIDIOutputCallbackStruct = struct_AUMIDIOutputCallbackStruct;
pub const struct_AUInputSamplesInOutputCallbackStruct = extern struct {
    inputToOutputCallback: AUInputSamplesInOutputCallback,
    userData: ?*c_void,
};
pub const AUInputSamplesInOutputCallbackStruct = struct_AUInputSamplesInOutputCallbackStruct;
pub const struct_AudioUnitParameterHistoryInfo = extern struct {
    updatesPerSecond: Float32,
    historyDurationInSeconds: Float32,
};
pub const AudioUnitParameterHistoryInfo = struct_AudioUnitParameterHistoryInfo;
pub const AudioUnitParameterUnit = UInt32;
pub const kAudioUnitParameterUnit_Generic = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_Generic);
pub const kAudioUnitParameterUnit_Indexed = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_Indexed);
pub const kAudioUnitParameterUnit_Boolean = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_Boolean);
pub const kAudioUnitParameterUnit_Percent = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_Percent);
pub const kAudioUnitParameterUnit_Seconds = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_Seconds);
pub const kAudioUnitParameterUnit_SampleFrames = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_SampleFrames);
pub const kAudioUnitParameterUnit_Phase = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_Phase);
pub const kAudioUnitParameterUnit_Rate = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_Rate);
pub const kAudioUnitParameterUnit_Hertz = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_Hertz);
pub const kAudioUnitParameterUnit_Cents = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_Cents);
pub const kAudioUnitParameterUnit_RelativeSemiTones = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_RelativeSemiTones);
pub const kAudioUnitParameterUnit_MIDINoteNumber = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_MIDINoteNumber);
pub const kAudioUnitParameterUnit_MIDIController = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_MIDIController);
pub const kAudioUnitParameterUnit_Decibels = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_Decibels);
pub const kAudioUnitParameterUnit_LinearGain = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_LinearGain);
pub const kAudioUnitParameterUnit_Degrees = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_Degrees);
pub const kAudioUnitParameterUnit_EqualPowerCrossfade = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_EqualPowerCrossfade);
pub const kAudioUnitParameterUnit_MixerFaderCurve1 = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_MixerFaderCurve1);
pub const kAudioUnitParameterUnit_Pan = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_Pan);
pub const kAudioUnitParameterUnit_Meters = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_Meters);
pub const kAudioUnitParameterUnit_AbsoluteCents = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_AbsoluteCents);
pub const kAudioUnitParameterUnit_Octaves = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_Octaves);
pub const kAudioUnitParameterUnit_BPM = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_BPM);
pub const kAudioUnitParameterUnit_Beats = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_Beats);
pub const kAudioUnitParameterUnit_Milliseconds = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_Milliseconds);
pub const kAudioUnitParameterUnit_Ratio = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_Ratio);
pub const kAudioUnitParameterUnit_CustomUnit = @enumToInt(enum_unnamed_290.kAudioUnitParameterUnit_CustomUnit);
const enum_unnamed_290 = extern enum(c_int) {
    kAudioUnitParameterUnit_Generic = 0,
    kAudioUnitParameterUnit_Indexed = 1,
    kAudioUnitParameterUnit_Boolean = 2,
    kAudioUnitParameterUnit_Percent = 3,
    kAudioUnitParameterUnit_Seconds = 4,
    kAudioUnitParameterUnit_SampleFrames = 5,
    kAudioUnitParameterUnit_Phase = 6,
    kAudioUnitParameterUnit_Rate = 7,
    kAudioUnitParameterUnit_Hertz = 8,
    kAudioUnitParameterUnit_Cents = 9,
    kAudioUnitParameterUnit_RelativeSemiTones = 10,
    kAudioUnitParameterUnit_MIDINoteNumber = 11,
    kAudioUnitParameterUnit_MIDIController = 12,
    kAudioUnitParameterUnit_Decibels = 13,
    kAudioUnitParameterUnit_LinearGain = 14,
    kAudioUnitParameterUnit_Degrees = 15,
    kAudioUnitParameterUnit_EqualPowerCrossfade = 16,
    kAudioUnitParameterUnit_MixerFaderCurve1 = 17,
    kAudioUnitParameterUnit_Pan = 18,
    kAudioUnitParameterUnit_Meters = 19,
    kAudioUnitParameterUnit_AbsoluteCents = 20,
    kAudioUnitParameterUnit_Octaves = 21,
    kAudioUnitParameterUnit_BPM = 22,
    kAudioUnitParameterUnit_Beats = 23,
    kAudioUnitParameterUnit_Milliseconds = 24,
    kAudioUnitParameterUnit_Ratio = 25,
    kAudioUnitParameterUnit_CustomUnit = 26,
    _,
};
pub const AudioUnitParameterOptions = UInt32;
pub const kAudioUnitParameterFlag_CFNameRelease = @enumToInt(enum_unnamed_291.kAudioUnitParameterFlag_CFNameRelease);
pub const kAudioUnitParameterFlag_OmitFromPresets = @enumToInt(enum_unnamed_291.kAudioUnitParameterFlag_OmitFromPresets);
pub const kAudioUnitParameterFlag_PlotHistory = @enumToInt(enum_unnamed_291.kAudioUnitParameterFlag_PlotHistory);
pub const kAudioUnitParameterFlag_MeterReadOnly = @enumToInt(enum_unnamed_291.kAudioUnitParameterFlag_MeterReadOnly);
pub const kAudioUnitParameterFlag_DisplayMask = @enumToInt(enum_unnamed_291.kAudioUnitParameterFlag_DisplayMask);
pub const kAudioUnitParameterFlag_DisplaySquareRoot = @enumToInt(enum_unnamed_291.kAudioUnitParameterFlag_DisplaySquareRoot);
pub const kAudioUnitParameterFlag_DisplaySquared = @enumToInt(enum_unnamed_291.kAudioUnitParameterFlag_DisplaySquared);
pub const kAudioUnitParameterFlag_DisplayCubed = @enumToInt(enum_unnamed_291.kAudioUnitParameterFlag_DisplayCubed);
pub const kAudioUnitParameterFlag_DisplayCubeRoot = @enumToInt(enum_unnamed_291.kAudioUnitParameterFlag_DisplayCubeRoot);
pub const kAudioUnitParameterFlag_DisplayExponential = @enumToInt(enum_unnamed_291.kAudioUnitParameterFlag_DisplayExponential);
pub const kAudioUnitParameterFlag_HasClump = @enumToInt(enum_unnamed_291.kAudioUnitParameterFlag_HasClump);
pub const kAudioUnitParameterFlag_ValuesHaveStrings = @enumToInt(enum_unnamed_291.kAudioUnitParameterFlag_ValuesHaveStrings);
pub const kAudioUnitParameterFlag_DisplayLogarithmic = @enumToInt(enum_unnamed_291.kAudioUnitParameterFlag_DisplayLogarithmic);
pub const kAudioUnitParameterFlag_IsHighResolution = @enumToInt(enum_unnamed_291.kAudioUnitParameterFlag_IsHighResolution);
pub const kAudioUnitParameterFlag_NonRealTime = @enumToInt(enum_unnamed_291.kAudioUnitParameterFlag_NonRealTime);
pub const kAudioUnitParameterFlag_CanRamp = @enumToInt(enum_unnamed_291.kAudioUnitParameterFlag_CanRamp);
pub const kAudioUnitParameterFlag_ExpertMode = @enumToInt(enum_unnamed_291.kAudioUnitParameterFlag_ExpertMode);
pub const kAudioUnitParameterFlag_HasCFNameString = @enumToInt(enum_unnamed_291.kAudioUnitParameterFlag_HasCFNameString);
pub const kAudioUnitParameterFlag_IsGlobalMeta = @enumToInt(enum_unnamed_291.kAudioUnitParameterFlag_IsGlobalMeta);
pub const kAudioUnitParameterFlag_IsElementMeta = @enumToInt(enum_unnamed_291.kAudioUnitParameterFlag_IsElementMeta);
pub const kAudioUnitParameterFlag_IsReadable = @enumToInt(enum_unnamed_291.kAudioUnitParameterFlag_IsReadable);
pub const kAudioUnitParameterFlag_IsWritable = @enumToInt(enum_unnamed_291.kAudioUnitParameterFlag_IsWritable);
const enum_unnamed_291 = extern enum(c_int) {
    kAudioUnitParameterFlag_CFNameRelease = 16,
    kAudioUnitParameterFlag_OmitFromPresets = 8192,
    kAudioUnitParameterFlag_PlotHistory = 16384,
    kAudioUnitParameterFlag_MeterReadOnly = 32768,
    kAudioUnitParameterFlag_DisplayMask = 4653056,
    kAudioUnitParameterFlag_DisplaySquareRoot = 65536,
    kAudioUnitParameterFlag_DisplaySquared = 131072,
    kAudioUnitParameterFlag_DisplayCubed = 196608,
    kAudioUnitParameterFlag_DisplayCubeRoot = 262144,
    kAudioUnitParameterFlag_DisplayExponential = 327680,
    kAudioUnitParameterFlag_HasClump = 1048576,
    kAudioUnitParameterFlag_ValuesHaveStrings = 2097152,
    kAudioUnitParameterFlag_DisplayLogarithmic = 4194304,
    kAudioUnitParameterFlag_IsHighResolution = 8388608,
    kAudioUnitParameterFlag_NonRealTime = 16777216,
    kAudioUnitParameterFlag_CanRamp = 33554432,
    kAudioUnitParameterFlag_ExpertMode = 67108864,
    kAudioUnitParameterFlag_HasCFNameString = 134217728,
    kAudioUnitParameterFlag_IsGlobalMeta = 268435456,
    kAudioUnitParameterFlag_IsElementMeta = 536870912,
    kAudioUnitParameterFlag_IsReadable = 1073741824,
    kAudioUnitParameterFlag_IsWritable = 2147483648,
    _,
};
pub const struct_AudioUnitParameterInfo = extern struct {
    name: [52]u8,
    unitName: CFStringRef,
    clumpID: UInt32,
    cfNameString: CFStringRef,
    unit: AudioUnitParameterUnit,
    minValue: AudioUnitParameterValue,
    maxValue: AudioUnitParameterValue,
    defaultValue: AudioUnitParameterValue,
    flags: AudioUnitParameterOptions,
};
pub const AudioUnitParameterInfo = struct_AudioUnitParameterInfo;
pub const kAudioUnitClumpID_System = @enumToInt(enum_unnamed_292.kAudioUnitClumpID_System);
const enum_unnamed_292 = extern enum(c_int) {
    kAudioUnitClumpID_System = 0,
    _,
};
pub fn GetAudioUnitParameterDisplayType(arg_flags: AudioUnitParameterOptions) callconv(.C) AudioUnitParameterOptions {
    var flags = arg_flags;
    return (flags & @bitCast(c_uint, kAudioUnitParameterFlag_DisplayMask));
}
pub fn SetAudioUnitParameterDisplayType(arg_flags: AudioUnitParameterOptions, arg_displayType: AudioUnitParameterOptions) callconv(.C) AudioUnitParameterOptions {
    var flags = arg_flags;
    var displayType = arg_displayType;
    return ((flags & @bitCast(c_uint, ~kAudioUnitParameterFlag_DisplayMask)) | displayType);
}
pub const kAudioUnitParameterName_Full = @enumToInt(enum_unnamed_293.kAudioUnitParameterName_Full);
const enum_unnamed_293 = extern enum(c_int) {
    kAudioUnitParameterName_Full = -1,
    _,
};
pub const struct_AudioUnitParameterNameInfo = extern struct {
    inID: AudioUnitParameterID,
    inDesiredLength: SInt32,
    outName: CFStringRef,
};
pub const AudioUnitParameterIDName = struct_AudioUnitParameterNameInfo;
pub const struct_AudioUnitParameterStringFromValue = extern struct {
    inParamID: AudioUnitParameterID,
    inValue: [*c]const AudioUnitParameterValue,
    outString: CFStringRef,
};
pub const AudioUnitParameterStringFromValue = struct_AudioUnitParameterStringFromValue;
pub const struct_AudioUnitParameterValueFromString = extern struct {
    inParamID: AudioUnitParameterID,
    inString: CFStringRef,
    outValue: AudioUnitParameterValue,
};
pub const AudioUnitParameterValueFromString = struct_AudioUnitParameterValueFromString;
pub const kAudioOutputUnitProperty_IsRunning = @enumToInt(enum_unnamed_294.kAudioOutputUnitProperty_IsRunning);
const enum_unnamed_294 = extern enum(c_int) {
    kAudioOutputUnitProperty_IsRunning = 2001,
    _,
};
pub const kAudioUnitProperty_AllParameterMIDIMappings = @enumToInt(enum_unnamed_295.kAudioUnitProperty_AllParameterMIDIMappings);
pub const kAudioUnitProperty_AddParameterMIDIMapping = @enumToInt(enum_unnamed_295.kAudioUnitProperty_AddParameterMIDIMapping);
pub const kAudioUnitProperty_RemoveParameterMIDIMapping = @enumToInt(enum_unnamed_295.kAudioUnitProperty_RemoveParameterMIDIMapping);
pub const kAudioUnitProperty_HotMapParameterMIDIMapping = @enumToInt(enum_unnamed_295.kAudioUnitProperty_HotMapParameterMIDIMapping);
const enum_unnamed_295 = extern enum(c_int) {
    kAudioUnitProperty_AllParameterMIDIMappings = 41,
    kAudioUnitProperty_AddParameterMIDIMapping = 42,
    kAudioUnitProperty_RemoveParameterMIDIMapping = 43,
    kAudioUnitProperty_HotMapParameterMIDIMapping = 44,
    _,
};
pub const AUParameterMIDIMappingFlags = UInt32;
pub const kAUParameterMIDIMapping_AnyChannelFlag = @enumToInt(enum_unnamed_296.kAUParameterMIDIMapping_AnyChannelFlag);
pub const kAUParameterMIDIMapping_AnyNoteFlag = @enumToInt(enum_unnamed_296.kAUParameterMIDIMapping_AnyNoteFlag);
pub const kAUParameterMIDIMapping_SubRange = @enumToInt(enum_unnamed_296.kAUParameterMIDIMapping_SubRange);
pub const kAUParameterMIDIMapping_Toggle = @enumToInt(enum_unnamed_296.kAUParameterMIDIMapping_Toggle);
pub const kAUParameterMIDIMapping_Bipolar = @enumToInt(enum_unnamed_296.kAUParameterMIDIMapping_Bipolar);
pub const kAUParameterMIDIMapping_Bipolar_On = @enumToInt(enum_unnamed_296.kAUParameterMIDIMapping_Bipolar_On);
const enum_unnamed_296 = extern enum(c_int) {
    kAUParameterMIDIMapping_AnyChannelFlag = 1,
    kAUParameterMIDIMapping_AnyNoteFlag = 2,
    kAUParameterMIDIMapping_SubRange = 4,
    kAUParameterMIDIMapping_Toggle = 8,
    kAUParameterMIDIMapping_Bipolar = 16,
    kAUParameterMIDIMapping_Bipolar_On = 32,
    _,
};
pub const struct_AUParameterMIDIMapping = extern struct {
    mScope: AudioUnitScope,
    mElement: AudioUnitElement,
    mParameterID: AudioUnitParameterID,
    mFlags: AUParameterMIDIMappingFlags,
    mSubRangeMin: AudioUnitParameterValue,
    mSubRangeMax: AudioUnitParameterValue,
    mStatus: UInt8,
    mData1: UInt8,
    reserved1: UInt8,
    reserved2: UInt8,
    reserved3: UInt32,
};
pub const AUParameterMIDIMapping = struct_AUParameterMIDIMapping;
pub const kMusicDeviceProperty_MIDIXMLNames = @enumToInt(enum_unnamed_297.kMusicDeviceProperty_MIDIXMLNames);
pub const kMusicDeviceProperty_PartGroup = @enumToInt(enum_unnamed_297.kMusicDeviceProperty_PartGroup);
pub const kMusicDeviceProperty_DualSchedulingMode = @enumToInt(enum_unnamed_297.kMusicDeviceProperty_DualSchedulingMode);
pub const kMusicDeviceProperty_SupportsStartStopNote = @enumToInt(enum_unnamed_297.kMusicDeviceProperty_SupportsStartStopNote);
const enum_unnamed_297 = extern enum(c_int) {
    kMusicDeviceProperty_MIDIXMLNames = 1006,
    kMusicDeviceProperty_PartGroup = 1010,
    kMusicDeviceProperty_DualSchedulingMode = 1013,
    kMusicDeviceProperty_SupportsStartStopNote = 1014,
    _,
};
pub const kMusicDeviceSampleFrameMask_SampleOffset = @enumToInt(enum_unnamed_298.kMusicDeviceSampleFrameMask_SampleOffset);
pub const kMusicDeviceSampleFrameMask_IsScheduled = @enumToInt(enum_unnamed_298.kMusicDeviceSampleFrameMask_IsScheduled);
const enum_unnamed_298 = extern enum(c_int) {
    kMusicDeviceSampleFrameMask_SampleOffset = 16777215,
    kMusicDeviceSampleFrameMask_IsScheduled = 16777216,
    _,
};
pub const kAudioUnitOfflineProperty_InputSize = @enumToInt(enum_unnamed_299.kAudioUnitOfflineProperty_InputSize);
pub const kAudioUnitOfflineProperty_OutputSize = @enumToInt(enum_unnamed_299.kAudioUnitOfflineProperty_OutputSize);
pub const kAudioUnitOfflineProperty_StartOffset = @enumToInt(enum_unnamed_299.kAudioUnitOfflineProperty_StartOffset);
pub const kAudioUnitOfflineProperty_PreflightRequirements = @enumToInt(enum_unnamed_299.kAudioUnitOfflineProperty_PreflightRequirements);
pub const kAudioUnitOfflineProperty_PreflightName = @enumToInt(enum_unnamed_299.kAudioUnitOfflineProperty_PreflightName);
const enum_unnamed_299 = extern enum(c_int) {
    kAudioUnitOfflineProperty_InputSize = 3020,
    kAudioUnitOfflineProperty_OutputSize = 3021,
    kAudioUnitOfflineProperty_StartOffset = 3022,
    kAudioUnitOfflineProperty_PreflightRequirements = 3023,
    kAudioUnitOfflineProperty_PreflightName = 3024,
    _,
};
pub const kOfflinePreflight_NotRequired = @enumToInt(enum_unnamed_300.kOfflinePreflight_NotRequired);
pub const kOfflinePreflight_Optional = @enumToInt(enum_unnamed_300.kOfflinePreflight_Optional);
pub const kOfflinePreflight_Required = @enumToInt(enum_unnamed_300.kOfflinePreflight_Required);
const enum_unnamed_300 = extern enum(c_int) {
    kOfflinePreflight_NotRequired = 0,
    kOfflinePreflight_Optional = 1,
    kOfflinePreflight_Required = 2,
    _,
};
pub const kAudioUnitProperty_DistanceAttenuationData = @enumToInt(enum_unnamed_301.kAudioUnitProperty_DistanceAttenuationData);
const enum_unnamed_301 = extern enum(c_int) {
    kAudioUnitProperty_DistanceAttenuationData = 3600,
    _,
};
const struct_unnamed_302 = extern struct {
    inDistance: Float32,
    outGain: Float32,
};
pub const struct_AUDistanceAttenuationData = extern struct {
    inNumberOfPairs: UInt32,
    pairs: [1]struct_unnamed_302,
};
pub const AUDistanceAttenuationData = struct_AUDistanceAttenuationData;
pub const kAudioUnitMigrateProperty_FromPlugin = @enumToInt(enum_unnamed_303.kAudioUnitMigrateProperty_FromPlugin);
pub const kAudioUnitMigrateProperty_OldAutomation = @enumToInt(enum_unnamed_303.kAudioUnitMigrateProperty_OldAutomation);
const enum_unnamed_303 = extern enum(c_int) {
    kAudioUnitMigrateProperty_FromPlugin = 4000,
    kAudioUnitMigrateProperty_OldAutomation = 4001,
    _,
};
pub const kOtherPluginFormat_Undefined = @enumToInt(enum_unnamed_304.kOtherPluginFormat_Undefined);
pub const kOtherPluginFormat_kMAS = @enumToInt(enum_unnamed_304.kOtherPluginFormat_kMAS);
pub const kOtherPluginFormat_kVST = @enumToInt(enum_unnamed_304.kOtherPluginFormat_kVST);
pub const kOtherPluginFormat_AU = @enumToInt(enum_unnamed_304.kOtherPluginFormat_AU);
const enum_unnamed_304 = extern enum(c_int) {
    kOtherPluginFormat_Undefined = 0,
    kOtherPluginFormat_kMAS = 1,
    kOtherPluginFormat_kVST = 2,
    kOtherPluginFormat_AU = 3,
    _,
};
pub const struct_AudioUnitOtherPluginDesc = extern struct {
    format: UInt32,
    plugin: AudioClassDescription,
};
pub const AudioUnitOtherPluginDesc = struct_AudioUnitOtherPluginDesc;
pub const struct_AudioUnitParameterValueTranslation = extern struct {
    otherDesc: AudioUnitOtherPluginDesc,
    otherParamID: UInt32,
    otherValue: Float32,
    auParamID: AudioUnitParameterID,
    auValue: AudioUnitParameterValue,
};
pub const AudioUnitParameterValueTranslation = struct_AudioUnitParameterValueTranslation;
pub const struct_AudioUnitPresetMAS_SettingData = extern struct {
    isStockSetting: UInt32,
    settingID: UInt32,
    dataLen: UInt32,
    data: [1]UInt8,
};
pub const AudioUnitPresetMAS_SettingData = struct_AudioUnitPresetMAS_SettingData;
pub const struct_AudioUnitPresetMAS_Settings = extern struct {
    manufacturerID: UInt32,
    effectID: UInt32,
    variantID: UInt32,
    settingsVersion: UInt32,
    numberOfSettings: UInt32,
    settings: [1]AudioUnitPresetMAS_SettingData,
};
pub const AudioUnitPresetMAS_Settings = struct_AudioUnitPresetMAS_Settings;
pub const kAudioUnitProperty_SampleRateConverterComplexity = @enumToInt(enum_unnamed_305.kAudioUnitProperty_SampleRateConverterComplexity);
const enum_unnamed_305 = extern enum(c_int) {
    kAudioUnitProperty_SampleRateConverterComplexity = 3014,
    _,
};
pub const kAudioUnitSampleRateConverterComplexity_Linear = @enumToInt(enum_unnamed_306.kAudioUnitSampleRateConverterComplexity_Linear);
pub const kAudioUnitSampleRateConverterComplexity_Normal = @enumToInt(enum_unnamed_306.kAudioUnitSampleRateConverterComplexity_Normal);
pub const kAudioUnitSampleRateConverterComplexity_Mastering = @enumToInt(enum_unnamed_306.kAudioUnitSampleRateConverterComplexity_Mastering);
const enum_unnamed_306 = extern enum(c_int) {
    kAudioUnitSampleRateConverterComplexity_Linear = 1818848869,
    kAudioUnitSampleRateConverterComplexity_Normal = 1852797549,
    kAudioUnitSampleRateConverterComplexity_Mastering = 1650553971,
    _,
};
pub const kAudioOutputUnitProperty_CurrentDevice = @enumToInt(enum_unnamed_307.kAudioOutputUnitProperty_CurrentDevice);
pub const kAudioOutputUnitProperty_ChannelMap = @enumToInt(enum_unnamed_307.kAudioOutputUnitProperty_ChannelMap);
pub const kAudioOutputUnitProperty_EnableIO = @enumToInt(enum_unnamed_307.kAudioOutputUnitProperty_EnableIO);
pub const kAudioOutputUnitProperty_StartTime = @enumToInt(enum_unnamed_307.kAudioOutputUnitProperty_StartTime);
pub const kAudioOutputUnitProperty_SetInputCallback = @enumToInt(enum_unnamed_307.kAudioOutputUnitProperty_SetInputCallback);
pub const kAudioOutputUnitProperty_HasIO = @enumToInt(enum_unnamed_307.kAudioOutputUnitProperty_HasIO);
pub const kAudioOutputUnitProperty_StartTimestampsAtZero = @enumToInt(enum_unnamed_307.kAudioOutputUnitProperty_StartTimestampsAtZero);
const enum_unnamed_307 = extern enum(c_int) {
    kAudioOutputUnitProperty_CurrentDevice = 2000,
    kAudioOutputUnitProperty_ChannelMap = 2002,
    kAudioOutputUnitProperty_EnableIO = 2003,
    kAudioOutputUnitProperty_StartTime = 2004,
    kAudioOutputUnitProperty_SetInputCallback = 2005,
    kAudioOutputUnitProperty_HasIO = 2006,
    kAudioOutputUnitProperty_StartTimestampsAtZero = 2007,
    _,
};
pub const struct_AudioOutputUnitStartAtTimeParams = extern struct {
    mTimestamp: AudioTimeStamp,
    mFlags: UInt32,
};
pub const AudioOutputUnitStartAtTimeParams = struct_AudioOutputUnitStartAtTimeParams;
pub const kAUVoiceIOProperty_BypassVoiceProcessing = @enumToInt(enum_unnamed_308.kAUVoiceIOProperty_BypassVoiceProcessing);
pub const kAUVoiceIOProperty_VoiceProcessingEnableAGC = @enumToInt(enum_unnamed_308.kAUVoiceIOProperty_VoiceProcessingEnableAGC);
pub const kAUVoiceIOProperty_MuteOutput = @enumToInt(enum_unnamed_308.kAUVoiceIOProperty_MuteOutput);
const enum_unnamed_308 = extern enum(c_int) {
    kAUVoiceIOProperty_BypassVoiceProcessing = 2100,
    kAUVoiceIOProperty_VoiceProcessingEnableAGC = 2101,
    kAUVoiceIOProperty_MuteOutput = 2104,
    _,
};
pub const kAUVoiceIOProperty_VoiceProcessingQuality = @enumToInt(enum_unnamed_309.kAUVoiceIOProperty_VoiceProcessingQuality);
const enum_unnamed_309 = extern enum(c_int) {
    kAUVoiceIOProperty_VoiceProcessingQuality = 2103,
    _,
};
pub const kAUNBandEQProperty_NumberOfBands = @enumToInt(enum_unnamed_310.kAUNBandEQProperty_NumberOfBands);
pub const kAUNBandEQProperty_MaxNumberOfBands = @enumToInt(enum_unnamed_310.kAUNBandEQProperty_MaxNumberOfBands);
pub const kAUNBandEQProperty_BiquadCoefficients = @enumToInt(enum_unnamed_310.kAUNBandEQProperty_BiquadCoefficients);
const enum_unnamed_310 = extern enum(c_int) {
    kAUNBandEQProperty_NumberOfBands = 2200,
    kAUNBandEQProperty_MaxNumberOfBands = 2201,
    kAUNBandEQProperty_BiquadCoefficients = 2203,
    _,
};
pub const kAUVoiceIOErr_UnexpectedNumberOfInputChannels = @enumToInt(enum_unnamed_311.kAUVoiceIOErr_UnexpectedNumberOfInputChannels);
const enum_unnamed_311 = extern enum(c_int) {
    kAUVoiceIOErr_UnexpectedNumberOfInputChannels = -66784,
    _,
};
pub const kAudioUnitProperty_MeteringMode = @enumToInt(enum_unnamed_312.kAudioUnitProperty_MeteringMode);
pub const kAudioUnitProperty_MatrixLevels = @enumToInt(enum_unnamed_312.kAudioUnitProperty_MatrixLevels);
pub const kAudioUnitProperty_MatrixDimensions = @enumToInt(enum_unnamed_312.kAudioUnitProperty_MatrixDimensions);
pub const kAudioUnitProperty_MeterClipping = @enumToInt(enum_unnamed_312.kAudioUnitProperty_MeterClipping);
pub const kAudioUnitProperty_InputAnchorTimeStamp = @enumToInt(enum_unnamed_312.kAudioUnitProperty_InputAnchorTimeStamp);
const enum_unnamed_312 = extern enum(c_int) {
    kAudioUnitProperty_MeteringMode = 3007,
    kAudioUnitProperty_MatrixLevels = 3006,
    kAudioUnitProperty_MatrixDimensions = 3009,
    kAudioUnitProperty_MeterClipping = 3011,
    kAudioUnitProperty_InputAnchorTimeStamp = 3016,
    _,
};
pub const struct_AudioUnitMeterClipping = extern struct {
    peakValueSinceLastCall: Float32,
    sawInfinity: Boolean,
    sawNotANumber: Boolean,
};
pub const AudioUnitMeterClipping = struct_AudioUnitMeterClipping;
pub const kAudioUnitProperty_ReverbRoomType = @enumToInt(enum_unnamed_313.kAudioUnitProperty_ReverbRoomType);
pub const kAudioUnitProperty_UsesInternalReverb = @enumToInt(enum_unnamed_313.kAudioUnitProperty_UsesInternalReverb);
pub const kAudioUnitProperty_SpatializationAlgorithm = @enumToInt(enum_unnamed_313.kAudioUnitProperty_SpatializationAlgorithm);
pub const kAudioUnitProperty_SpatialMixerDistanceParams = @enumToInt(enum_unnamed_313.kAudioUnitProperty_SpatialMixerDistanceParams);
pub const kAudioUnitProperty_SpatialMixerAttenuationCurve = @enumToInt(enum_unnamed_313.kAudioUnitProperty_SpatialMixerAttenuationCurve);
pub const kAudioUnitProperty_SpatialMixerRenderingFlags = @enumToInt(enum_unnamed_313.kAudioUnitProperty_SpatialMixerRenderingFlags);
const enum_unnamed_313 = extern enum(c_int) {
    kAudioUnitProperty_ReverbRoomType = 10,
    kAudioUnitProperty_UsesInternalReverb = 1005,
    kAudioUnitProperty_SpatializationAlgorithm = 3000,
    kAudioUnitProperty_SpatialMixerDistanceParams = 3010,
    kAudioUnitProperty_SpatialMixerAttenuationCurve = 3013,
    kAudioUnitProperty_SpatialMixerRenderingFlags = 3003,
    _,
};
pub const AUSpatializationAlgorithm = UInt32;
pub const kSpatializationAlgorithm_EqualPowerPanning = @enumToInt(enum_unnamed_314.kSpatializationAlgorithm_EqualPowerPanning);
pub const kSpatializationAlgorithm_SphericalHead = @enumToInt(enum_unnamed_314.kSpatializationAlgorithm_SphericalHead);
pub const kSpatializationAlgorithm_HRTF = @enumToInt(enum_unnamed_314.kSpatializationAlgorithm_HRTF);
pub const kSpatializationAlgorithm_SoundField = @enumToInt(enum_unnamed_314.kSpatializationAlgorithm_SoundField);
pub const kSpatializationAlgorithm_VectorBasedPanning = @enumToInt(enum_unnamed_314.kSpatializationAlgorithm_VectorBasedPanning);
pub const kSpatializationAlgorithm_StereoPassThrough = @enumToInt(enum_unnamed_314.kSpatializationAlgorithm_StereoPassThrough);
pub const kSpatializationAlgorithm_HRTFHQ = @enumToInt(enum_unnamed_314.kSpatializationAlgorithm_HRTFHQ);
const enum_unnamed_314 = extern enum(c_int) {
    kSpatializationAlgorithm_EqualPowerPanning = 0,
    kSpatializationAlgorithm_SphericalHead = 1,
    kSpatializationAlgorithm_HRTF = 2,
    kSpatializationAlgorithm_SoundField = 3,
    kSpatializationAlgorithm_VectorBasedPanning = 4,
    kSpatializationAlgorithm_StereoPassThrough = 5,
    kSpatializationAlgorithm_HRTFHQ = 6,
    _,
};
pub const AUReverbRoomType = UInt32;
pub const kReverbRoomType_SmallRoom = @enumToInt(enum_unnamed_315.kReverbRoomType_SmallRoom);
pub const kReverbRoomType_MediumRoom = @enumToInt(enum_unnamed_315.kReverbRoomType_MediumRoom);
pub const kReverbRoomType_LargeRoom = @enumToInt(enum_unnamed_315.kReverbRoomType_LargeRoom);
pub const kReverbRoomType_MediumHall = @enumToInt(enum_unnamed_315.kReverbRoomType_MediumHall);
pub const kReverbRoomType_LargeHall = @enumToInt(enum_unnamed_315.kReverbRoomType_LargeHall);
pub const kReverbRoomType_Plate = @enumToInt(enum_unnamed_315.kReverbRoomType_Plate);
pub const kReverbRoomType_MediumChamber = @enumToInt(enum_unnamed_315.kReverbRoomType_MediumChamber);
pub const kReverbRoomType_LargeChamber = @enumToInt(enum_unnamed_315.kReverbRoomType_LargeChamber);
pub const kReverbRoomType_Cathedral = @enumToInt(enum_unnamed_315.kReverbRoomType_Cathedral);
pub const kReverbRoomType_LargeRoom2 = @enumToInt(enum_unnamed_315.kReverbRoomType_LargeRoom2);
pub const kReverbRoomType_MediumHall2 = @enumToInt(enum_unnamed_315.kReverbRoomType_MediumHall2);
pub const kReverbRoomType_MediumHall3 = @enumToInt(enum_unnamed_315.kReverbRoomType_MediumHall3);
pub const kReverbRoomType_LargeHall2 = @enumToInt(enum_unnamed_315.kReverbRoomType_LargeHall2);
const enum_unnamed_315 = extern enum(c_int) {
    kReverbRoomType_SmallRoom = 0,
    kReverbRoomType_MediumRoom = 1,
    kReverbRoomType_LargeRoom = 2,
    kReverbRoomType_MediumHall = 3,
    kReverbRoomType_LargeHall = 4,
    kReverbRoomType_Plate = 5,
    kReverbRoomType_MediumChamber = 6,
    kReverbRoomType_LargeChamber = 7,
    kReverbRoomType_Cathedral = 8,
    kReverbRoomType_LargeRoom2 = 9,
    kReverbRoomType_MediumHall2 = 10,
    kReverbRoomType_MediumHall3 = 11,
    kReverbRoomType_LargeHall2 = 12,
    _,
};
pub const AUSpatialMixerAttenuationCurve = UInt32;
pub const kSpatialMixerAttenuationCurve_Power = @enumToInt(enum_unnamed_316.kSpatialMixerAttenuationCurve_Power);
pub const kSpatialMixerAttenuationCurve_Exponential = @enumToInt(enum_unnamed_316.kSpatialMixerAttenuationCurve_Exponential);
pub const kSpatialMixerAttenuationCurve_Inverse = @enumToInt(enum_unnamed_316.kSpatialMixerAttenuationCurve_Inverse);
pub const kSpatialMixerAttenuationCurve_Linear = @enumToInt(enum_unnamed_316.kSpatialMixerAttenuationCurve_Linear);
const enum_unnamed_316 = extern enum(c_int) {
    kSpatialMixerAttenuationCurve_Power = 0,
    kSpatialMixerAttenuationCurve_Exponential = 1,
    kSpatialMixerAttenuationCurve_Inverse = 2,
    kSpatialMixerAttenuationCurve_Linear = 3,
    _,
};
pub const struct_MixerDistanceParams = extern struct {
    mReferenceDistance: Float32,
    mMaxDistance: Float32,
    mMaxAttenuation: Float32,
};
pub const MixerDistanceParams = struct_MixerDistanceParams;
pub const AUSpatialMixerRenderingFlags = UInt32;
pub const kSpatialMixerRenderingFlags_InterAuralDelay = @enumToInt(enum_unnamed_317.kSpatialMixerRenderingFlags_InterAuralDelay);
pub const kSpatialMixerRenderingFlags_DistanceAttenuation = @enumToInt(enum_unnamed_317.kSpatialMixerRenderingFlags_DistanceAttenuation);
const enum_unnamed_317 = extern enum(c_int) {
    kSpatialMixerRenderingFlags_InterAuralDelay = 1,
    kSpatialMixerRenderingFlags_DistanceAttenuation = 4,
    _,
};
pub const kAudioUnitProperty_3DMixerDistanceParams = @enumToInt(enum_unnamed_318.kAudioUnitProperty_3DMixerDistanceParams);
pub const kAudioUnitProperty_3DMixerAttenuationCurve = @enumToInt(enum_unnamed_318.kAudioUnitProperty_3DMixerAttenuationCurve);
pub const kAudioUnitProperty_DopplerShift = @enumToInt(enum_unnamed_318.kAudioUnitProperty_DopplerShift);
pub const kAudioUnitProperty_3DMixerRenderingFlags = @enumToInt(enum_unnamed_318.kAudioUnitProperty_3DMixerRenderingFlags);
pub const kAudioUnitProperty_3DMixerDistanceAtten = @enumToInt(enum_unnamed_318.kAudioUnitProperty_3DMixerDistanceAtten);
pub const kAudioUnitProperty_ReverbPreset = @enumToInt(enum_unnamed_318.kAudioUnitProperty_ReverbPreset);
const enum_unnamed_318 = extern enum(c_int) {
    kAudioUnitProperty_3DMixerDistanceParams = 3010,
    kAudioUnitProperty_3DMixerAttenuationCurve = 3013,
    kAudioUnitProperty_DopplerShift = 3002,
    kAudioUnitProperty_3DMixerRenderingFlags = 3003,
    kAudioUnitProperty_3DMixerDistanceAtten = 3004,
    kAudioUnitProperty_ReverbPreset = 3012,
    _,
};
pub const AU3DMixerRenderingFlags = UInt32;
pub const k3DMixerRenderingFlags_InterAuralDelay = @enumToInt(enum_unnamed_319.k3DMixerRenderingFlags_InterAuralDelay);
pub const k3DMixerRenderingFlags_DopplerShift = @enumToInt(enum_unnamed_319.k3DMixerRenderingFlags_DopplerShift);
pub const k3DMixerRenderingFlags_DistanceAttenuation = @enumToInt(enum_unnamed_319.k3DMixerRenderingFlags_DistanceAttenuation);
pub const k3DMixerRenderingFlags_DistanceFilter = @enumToInt(enum_unnamed_319.k3DMixerRenderingFlags_DistanceFilter);
pub const k3DMixerRenderingFlags_DistanceDiffusion = @enumToInt(enum_unnamed_319.k3DMixerRenderingFlags_DistanceDiffusion);
pub const k3DMixerRenderingFlags_LinearDistanceAttenuation = @enumToInt(enum_unnamed_319.k3DMixerRenderingFlags_LinearDistanceAttenuation);
pub const k3DMixerRenderingFlags_ConstantReverbBlend = @enumToInt(enum_unnamed_319.k3DMixerRenderingFlags_ConstantReverbBlend);
const enum_unnamed_319 = extern enum(c_int) {
    k3DMixerRenderingFlags_InterAuralDelay = 1,
    k3DMixerRenderingFlags_DopplerShift = 2,
    k3DMixerRenderingFlags_DistanceAttenuation = 4,
    k3DMixerRenderingFlags_DistanceFilter = 8,
    k3DMixerRenderingFlags_DistanceDiffusion = 16,
    k3DMixerRenderingFlags_LinearDistanceAttenuation = 32,
    k3DMixerRenderingFlags_ConstantReverbBlend = 64,
    _,
};
pub const AU3DMixerAttenuationCurve = UInt32;
pub const k3DMixerAttenuationCurve_Power = @enumToInt(enum_unnamed_320.k3DMixerAttenuationCurve_Power);
pub const k3DMixerAttenuationCurve_Exponential = @enumToInt(enum_unnamed_320.k3DMixerAttenuationCurve_Exponential);
pub const k3DMixerAttenuationCurve_Inverse = @enumToInt(enum_unnamed_320.k3DMixerAttenuationCurve_Inverse);
pub const k3DMixerAttenuationCurve_Linear = @enumToInt(enum_unnamed_320.k3DMixerAttenuationCurve_Linear);
const enum_unnamed_320 = extern enum(c_int) {
    k3DMixerAttenuationCurve_Power = 0,
    k3DMixerAttenuationCurve_Exponential = 1,
    k3DMixerAttenuationCurve_Inverse = 2,
    k3DMixerAttenuationCurve_Linear = 3,
    _,
};
pub const kAudioUnitProperty_ScheduleAudioSlice = @enumToInt(enum_unnamed_321.kAudioUnitProperty_ScheduleAudioSlice);
pub const kAudioUnitProperty_ScheduleStartTimeStamp = @enumToInt(enum_unnamed_321.kAudioUnitProperty_ScheduleStartTimeStamp);
pub const kAudioUnitProperty_CurrentPlayTime = @enumToInt(enum_unnamed_321.kAudioUnitProperty_CurrentPlayTime);
const enum_unnamed_321 = extern enum(c_int) {
    kAudioUnitProperty_ScheduleAudioSlice = 3300,
    kAudioUnitProperty_ScheduleStartTimeStamp = 3301,
    kAudioUnitProperty_CurrentPlayTime = 3302,
    _,
};
pub const AUScheduledAudioSliceFlags = UInt32;
pub const kScheduledAudioSliceFlag_Complete = @enumToInt(enum_unnamed_322.kScheduledAudioSliceFlag_Complete);
pub const kScheduledAudioSliceFlag_BeganToRender = @enumToInt(enum_unnamed_322.kScheduledAudioSliceFlag_BeganToRender);
pub const kScheduledAudioSliceFlag_BeganToRenderLate = @enumToInt(enum_unnamed_322.kScheduledAudioSliceFlag_BeganToRenderLate);
pub const kScheduledAudioSliceFlag_Loop = @enumToInt(enum_unnamed_322.kScheduledAudioSliceFlag_Loop);
pub const kScheduledAudioSliceFlag_Interrupt = @enumToInt(enum_unnamed_322.kScheduledAudioSliceFlag_Interrupt);
pub const kScheduledAudioSliceFlag_InterruptAtLoop = @enumToInt(enum_unnamed_322.kScheduledAudioSliceFlag_InterruptAtLoop);
const enum_unnamed_322 = extern enum(c_int) {
    kScheduledAudioSliceFlag_Complete = 1,
    kScheduledAudioSliceFlag_BeganToRender = 2,
    kScheduledAudioSliceFlag_BeganToRenderLate = 4,
    kScheduledAudioSliceFlag_Loop = 8,
    kScheduledAudioSliceFlag_Interrupt = 16,
    kScheduledAudioSliceFlag_InterruptAtLoop = 32,
    _,
};
pub const struct_ScheduledAudioSlice = extern struct {
    mTimeStamp: AudioTimeStamp,
    mCompletionProc: ScheduledAudioSliceCompletionProc,
    mCompletionProcUserData: ?*c_void,
    mFlags: AUScheduledAudioSliceFlags,
    mReserved: UInt32,
    mReserved2: ?*c_void,
    mNumberFrames: UInt32,
    mBufferList: [*c]AudioBufferList,
};
pub const ScheduledAudioSlice = struct_ScheduledAudioSlice;
pub const ScheduledAudioSliceCompletionProc = ?fn (?*c_void, [*c]ScheduledAudioSlice) callconv(.C) void;
pub const kAudioUnitProperty_ScheduledFileIDs = @enumToInt(enum_unnamed_323.kAudioUnitProperty_ScheduledFileIDs);
pub const kAudioUnitProperty_ScheduledFileRegion = @enumToInt(enum_unnamed_323.kAudioUnitProperty_ScheduledFileRegion);
pub const kAudioUnitProperty_ScheduledFilePrime = @enumToInt(enum_unnamed_323.kAudioUnitProperty_ScheduledFilePrime);
pub const kAudioUnitProperty_ScheduledFileBufferSizeFrames = @enumToInt(enum_unnamed_323.kAudioUnitProperty_ScheduledFileBufferSizeFrames);
pub const kAudioUnitProperty_ScheduledFileNumberBuffers = @enumToInt(enum_unnamed_323.kAudioUnitProperty_ScheduledFileNumberBuffers);
const enum_unnamed_323 = extern enum(c_int) {
    kAudioUnitProperty_ScheduledFileIDs = 3310,
    kAudioUnitProperty_ScheduledFileRegion = 3311,
    kAudioUnitProperty_ScheduledFilePrime = 3312,
    kAudioUnitProperty_ScheduledFileBufferSizeFrames = 3313,
    kAudioUnitProperty_ScheduledFileNumberBuffers = 3314,
    _,
};
pub const struct_OpaqueAudioFileID = @OpaqueType();
pub const struct_ScheduledAudioFileRegion = extern struct {
    mTimeStamp: AudioTimeStamp,
    mCompletionProc: ScheduledAudioFileRegionCompletionProc,
    mCompletionProcUserData: ?*c_void,
    mAudioFile: ?*struct_OpaqueAudioFileID,
    mLoopCount: UInt32,
    mStartFrame: SInt64,
    mFramesToPlay: UInt32,
};
pub const ScheduledAudioFileRegion = struct_ScheduledAudioFileRegion;
pub const ScheduledAudioFileRegionCompletionProc = ?fn (?*c_void, [*c]ScheduledAudioFileRegion, OSStatus) callconv(.C) void;
pub const kMusicDeviceProperty_UsesInternalReverb = @enumToInt(enum_unnamed_324.kMusicDeviceProperty_UsesInternalReverb);
pub const kMusicDeviceProperty_SoundBankData = @enumToInt(enum_unnamed_324.kMusicDeviceProperty_SoundBankData);
pub const kMusicDeviceProperty_StreamFromDisk = @enumToInt(enum_unnamed_324.kMusicDeviceProperty_StreamFromDisk);
pub const kMusicDeviceProperty_SoundBankFSRef = @enumToInt(enum_unnamed_324.kMusicDeviceProperty_SoundBankFSRef);
const enum_unnamed_324 = extern enum(c_int) {
    kMusicDeviceProperty_UsesInternalReverb = 1005,
    kMusicDeviceProperty_SoundBankData = 1008,
    kMusicDeviceProperty_StreamFromDisk = 1011,
    kMusicDeviceProperty_SoundBankFSRef = 1012,
    _,
};
pub const kMusicDeviceProperty_InstrumentName = @enumToInt(enum_unnamed_325.kMusicDeviceProperty_InstrumentName);
pub const kMusicDeviceProperty_InstrumentNumber = @enumToInt(enum_unnamed_325.kMusicDeviceProperty_InstrumentNumber);
const enum_unnamed_325 = extern enum(c_int) {
    kMusicDeviceProperty_InstrumentName = 1001,
    kMusicDeviceProperty_InstrumentNumber = 1004,
    _,
};
pub const kMusicDeviceProperty_InstrumentCount = @enumToInt(enum_unnamed_326.kMusicDeviceProperty_InstrumentCount);
pub const kMusicDeviceProperty_BankName = @enumToInt(enum_unnamed_326.kMusicDeviceProperty_BankName);
pub const kMusicDeviceProperty_SoundBankURL = @enumToInt(enum_unnamed_326.kMusicDeviceProperty_SoundBankURL);
const enum_unnamed_326 = extern enum(c_int) {
    kMusicDeviceProperty_InstrumentCount = 1000,
    kMusicDeviceProperty_BankName = 1007,
    kMusicDeviceProperty_SoundBankURL = 1100,
    _,
};
pub const kAUMIDISynthProperty_EnablePreload = @enumToInt(enum_unnamed_327.kAUMIDISynthProperty_EnablePreload);
const enum_unnamed_327 = extern enum(c_int) {
    kAUMIDISynthProperty_EnablePreload = 4119,
    _,
};
pub const kAUSamplerProperty_LoadInstrument = @enumToInt(enum_unnamed_328.kAUSamplerProperty_LoadInstrument);
pub const kAUSamplerProperty_LoadAudioFiles = @enumToInt(enum_unnamed_328.kAUSamplerProperty_LoadAudioFiles);
const enum_unnamed_328 = extern enum(c_int) {
    kAUSamplerProperty_LoadInstrument = 4102,
    kAUSamplerProperty_LoadAudioFiles = 4101,
    _,
};
pub const struct_AUSamplerInstrumentData = extern struct {
    fileURL: CFURLRef,
    instrumentType: UInt8,
    bankMSB: UInt8,
    bankLSB: UInt8,
    presetID: UInt8,
};
pub const AUSamplerInstrumentData = struct_AUSamplerInstrumentData;
pub const kInstrumentType_DLSPreset = @enumToInt(enum_unnamed_329.kInstrumentType_DLSPreset);
pub const kInstrumentType_SF2Preset = @enumToInt(enum_unnamed_329.kInstrumentType_SF2Preset);
pub const kInstrumentType_AUPreset = @enumToInt(enum_unnamed_329.kInstrumentType_AUPreset);
pub const kInstrumentType_Audiofile = @enumToInt(enum_unnamed_329.kInstrumentType_Audiofile);
pub const kInstrumentType_EXS24 = @enumToInt(enum_unnamed_329.kInstrumentType_EXS24);
const enum_unnamed_329 = extern enum(c_int) {
    kInstrumentType_DLSPreset = 1,
    kInstrumentType_SF2Preset = 1,
    kInstrumentType_AUPreset = 2,
    kInstrumentType_Audiofile = 3,
    kInstrumentType_EXS24 = 4,
    _,
};
pub const kAUSampler_DefaultPercussionBankMSB = @enumToInt(enum_unnamed_330.kAUSampler_DefaultPercussionBankMSB);
pub const kAUSampler_DefaultMelodicBankMSB = @enumToInt(enum_unnamed_330.kAUSampler_DefaultMelodicBankMSB);
pub const kAUSampler_DefaultBankLSB = @enumToInt(enum_unnamed_330.kAUSampler_DefaultBankLSB);
const enum_unnamed_330 = extern enum(c_int) {
    kAUSampler_DefaultPercussionBankMSB = 120,
    kAUSampler_DefaultMelodicBankMSB = 121,
    kAUSampler_DefaultBankLSB = 0,
    _,
};
pub const kAudioUnitProperty_DeferredRendererPullSize = @enumToInt(enum_unnamed_331.kAudioUnitProperty_DeferredRendererPullSize);
pub const kAudioUnitProperty_DeferredRendererExtraLatency = @enumToInt(enum_unnamed_331.kAudioUnitProperty_DeferredRendererExtraLatency);
pub const kAudioUnitProperty_DeferredRendererWaitFrames = @enumToInt(enum_unnamed_331.kAudioUnitProperty_DeferredRendererWaitFrames);
const enum_unnamed_331 = extern enum(c_int) {
    kAudioUnitProperty_DeferredRendererPullSize = 3320,
    kAudioUnitProperty_DeferredRendererExtraLatency = 3321,
    kAudioUnitProperty_DeferredRendererWaitFrames = 3322,
    _,
};
pub const kAUNetReceiveProperty_Hostname = @enumToInt(enum_unnamed_332.kAUNetReceiveProperty_Hostname);
pub const kAUNetReceiveProperty_Password = @enumToInt(enum_unnamed_332.kAUNetReceiveProperty_Password);
const enum_unnamed_332 = extern enum(c_int) {
    kAUNetReceiveProperty_Hostname = 3511,
    kAUNetReceiveProperty_Password = 3512,
    _,
};
pub const kAUNetSendProperty_PortNum = @enumToInt(enum_unnamed_333.kAUNetSendProperty_PortNum);
pub const kAUNetSendProperty_TransmissionFormat = @enumToInt(enum_unnamed_333.kAUNetSendProperty_TransmissionFormat);
pub const kAUNetSendProperty_TransmissionFormatIndex = @enumToInt(enum_unnamed_333.kAUNetSendProperty_TransmissionFormatIndex);
pub const kAUNetSendProperty_ServiceName = @enumToInt(enum_unnamed_333.kAUNetSendProperty_ServiceName);
pub const kAUNetSendProperty_Disconnect = @enumToInt(enum_unnamed_333.kAUNetSendProperty_Disconnect);
pub const kAUNetSendProperty_Password = @enumToInt(enum_unnamed_333.kAUNetSendProperty_Password);
const enum_unnamed_333 = extern enum(c_int) {
    kAUNetSendProperty_PortNum = 3513,
    kAUNetSendProperty_TransmissionFormat = 3514,
    kAUNetSendProperty_TransmissionFormatIndex = 3515,
    kAUNetSendProperty_ServiceName = 3516,
    kAUNetSendProperty_Disconnect = 3517,
    kAUNetSendProperty_Password = 3518,
    _,
};
pub const kAUNetSendPresetFormat_PCMFloat32 = @enumToInt(enum_unnamed_334.kAUNetSendPresetFormat_PCMFloat32);
pub const kAUNetSendPresetFormat_PCMInt24 = @enumToInt(enum_unnamed_334.kAUNetSendPresetFormat_PCMInt24);
pub const kAUNetSendPresetFormat_PCMInt16 = @enumToInt(enum_unnamed_334.kAUNetSendPresetFormat_PCMInt16);
pub const kAUNetSendPresetFormat_Lossless24 = @enumToInt(enum_unnamed_334.kAUNetSendPresetFormat_Lossless24);
pub const kAUNetSendPresetFormat_Lossless16 = @enumToInt(enum_unnamed_334.kAUNetSendPresetFormat_Lossless16);
pub const kAUNetSendPresetFormat_ULaw = @enumToInt(enum_unnamed_334.kAUNetSendPresetFormat_ULaw);
pub const kAUNetSendPresetFormat_IMA4 = @enumToInt(enum_unnamed_334.kAUNetSendPresetFormat_IMA4);
pub const kAUNetSendPresetFormat_AAC_128kbpspc = @enumToInt(enum_unnamed_334.kAUNetSendPresetFormat_AAC_128kbpspc);
pub const kAUNetSendPresetFormat_AAC_96kbpspc = @enumToInt(enum_unnamed_334.kAUNetSendPresetFormat_AAC_96kbpspc);
pub const kAUNetSendPresetFormat_AAC_80kbpspc = @enumToInt(enum_unnamed_334.kAUNetSendPresetFormat_AAC_80kbpspc);
pub const kAUNetSendPresetFormat_AAC_64kbpspc = @enumToInt(enum_unnamed_334.kAUNetSendPresetFormat_AAC_64kbpspc);
pub const kAUNetSendPresetFormat_AAC_48kbpspc = @enumToInt(enum_unnamed_334.kAUNetSendPresetFormat_AAC_48kbpspc);
pub const kAUNetSendPresetFormat_AAC_40kbpspc = @enumToInt(enum_unnamed_334.kAUNetSendPresetFormat_AAC_40kbpspc);
pub const kAUNetSendPresetFormat_AAC_32kbpspc = @enumToInt(enum_unnamed_334.kAUNetSendPresetFormat_AAC_32kbpspc);
pub const kAUNetSendPresetFormat_AAC_LD_64kbpspc = @enumToInt(enum_unnamed_334.kAUNetSendPresetFormat_AAC_LD_64kbpspc);
pub const kAUNetSendPresetFormat_AAC_LD_48kbpspc = @enumToInt(enum_unnamed_334.kAUNetSendPresetFormat_AAC_LD_48kbpspc);
pub const kAUNetSendPresetFormat_AAC_LD_40kbpspc = @enumToInt(enum_unnamed_334.kAUNetSendPresetFormat_AAC_LD_40kbpspc);
pub const kAUNetSendPresetFormat_AAC_LD_32kbpspc = @enumToInt(enum_unnamed_334.kAUNetSendPresetFormat_AAC_LD_32kbpspc);
pub const kAUNetSendNumPresetFormats = @enumToInt(enum_unnamed_334.kAUNetSendNumPresetFormats);
const enum_unnamed_334 = extern enum(c_int) {
    kAUNetSendPresetFormat_PCMFloat32 = 0,
    kAUNetSendPresetFormat_PCMInt24 = 1,
    kAUNetSendPresetFormat_PCMInt16 = 2,
    kAUNetSendPresetFormat_Lossless24 = 3,
    kAUNetSendPresetFormat_Lossless16 = 4,
    kAUNetSendPresetFormat_ULaw = 5,
    kAUNetSendPresetFormat_IMA4 = 6,
    kAUNetSendPresetFormat_AAC_128kbpspc = 7,
    kAUNetSendPresetFormat_AAC_96kbpspc = 8,
    kAUNetSendPresetFormat_AAC_80kbpspc = 9,
    kAUNetSendPresetFormat_AAC_64kbpspc = 10,
    kAUNetSendPresetFormat_AAC_48kbpspc = 11,
    kAUNetSendPresetFormat_AAC_40kbpspc = 12,
    kAUNetSendPresetFormat_AAC_32kbpspc = 13,
    kAUNetSendPresetFormat_AAC_LD_64kbpspc = 14,
    kAUNetSendPresetFormat_AAC_LD_48kbpspc = 15,
    kAUNetSendPresetFormat_AAC_LD_40kbpspc = 16,
    kAUNetSendPresetFormat_AAC_LD_32kbpspc = 17,
    kAUNetSendNumPresetFormats = 18,
    _,
};
pub const struct_AUNumVersion = extern struct {
    nonRelRev: UInt8,
    stage: UInt8,
    minorAndBugRev: UInt8,
    majorRev: UInt8,
};
pub const AUNumVersion = struct_AUNumVersion;
pub const struct_AUHostIdentifier = extern struct {
    hostName: CFStringRef,
    hostVersion: AUNumVersion,
};
pub const AUHostIdentifier = struct_AUHostIdentifier;
pub const kAudioUnitParameterFlag_Global = @enumToInt(enum_unnamed_335.kAudioUnitParameterFlag_Global);
pub const kAudioUnitParameterFlag_Input = @enumToInt(enum_unnamed_335.kAudioUnitParameterFlag_Input);
pub const kAudioUnitParameterFlag_Output = @enumToInt(enum_unnamed_335.kAudioUnitParameterFlag_Output);
pub const kAudioUnitParameterFlag_Group = @enumToInt(enum_unnamed_335.kAudioUnitParameterFlag_Group);
const enum_unnamed_335 = extern enum(c_int) {
    kAudioUnitParameterFlag_Global = 1,
    kAudioUnitParameterFlag_Input = 2,
    kAudioUnitParameterFlag_Output = 4,
    kAudioUnitParameterFlag_Group = 8,
    _,
};
pub const kAudioUnitParameterFlag_HasName = @enumToInt(enum_unnamed_336.kAudioUnitParameterFlag_HasName);
const enum_unnamed_336 = extern enum(c_int) {
    kAudioUnitParameterFlag_HasName = 2097152,
    _,
};
pub const kAudioUnitProperty_SRCAlgorithm = @enumToInt(enum_unnamed_337.kAudioUnitProperty_SRCAlgorithm);
pub const kAudioUnitProperty_MIDIControlMapping = @enumToInt(enum_unnamed_337.kAudioUnitProperty_MIDIControlMapping);
pub const kAudioUnitProperty_CurrentPreset = @enumToInt(enum_unnamed_337.kAudioUnitProperty_CurrentPreset);
pub const kAudioUnitProperty_ParameterValueName = @enumToInt(enum_unnamed_337.kAudioUnitProperty_ParameterValueName);
pub const kAudioUnitProperty_BusCount = @enumToInt(enum_unnamed_337.kAudioUnitProperty_BusCount);
pub const kAudioOfflineUnitProperty_InputSize = @enumToInt(enum_unnamed_337.kAudioOfflineUnitProperty_InputSize);
pub const kAudioOfflineUnitProperty_OutputSize = @enumToInt(enum_unnamed_337.kAudioOfflineUnitProperty_OutputSize);
const enum_unnamed_337 = extern enum(c_int) {
    kAudioUnitProperty_SRCAlgorithm = 9,
    kAudioUnitProperty_MIDIControlMapping = 17,
    kAudioUnitProperty_CurrentPreset = 28,
    kAudioUnitProperty_ParameterValueName = 33,
    kAudioUnitProperty_BusCount = 11,
    kAudioOfflineUnitProperty_InputSize = 3020,
    kAudioOfflineUnitProperty_OutputSize = 3021,
    _,
};
pub const kAudioUnitSRCAlgorithm_Polyphase = @enumToInt(enum_unnamed_338.kAudioUnitSRCAlgorithm_Polyphase);
pub const kAudioUnitSRCAlgorithm_MediumQuality = @enumToInt(enum_unnamed_338.kAudioUnitSRCAlgorithm_MediumQuality);
const enum_unnamed_338 = extern enum(c_int) {
    kAudioUnitSRCAlgorithm_Polyphase = 1886350457,
    kAudioUnitSRCAlgorithm_MediumQuality = 1668510307,
    _,
};
pub const struct_AudioUnitMIDIControlMapping = extern struct {
    midiNRPN: UInt16,
    midiControl: UInt8,
    scope: UInt8,
    element: AudioUnitElement,
    parameter: AudioUnitParameterID,
};
pub const AudioUnitMIDIControlMapping = struct_AudioUnitMIDIControlMapping;
pub const struct_AudioUnitParameterValueName = extern struct {
    inParamID: AudioUnitParameterID,
    inValue: [*c]const Float32,
    outName: CFStringRef,
};
pub const AudioUnitParameterValueName = struct_AudioUnitParameterValueName;
pub const kMusicDeviceProperty_GroupOutputBus = @enumToInt(enum_unnamed_339.kMusicDeviceProperty_GroupOutputBus);
pub const kMusicDeviceProperty_SoundBankFSSpec = @enumToInt(enum_unnamed_339.kMusicDeviceProperty_SoundBankFSSpec);
pub const kAudioUnitProperty_PannerMode = @enumToInt(enum_unnamed_339.kAudioUnitProperty_PannerMode);
const enum_unnamed_339 = extern enum(c_int) {
    kMusicDeviceProperty_GroupOutputBus = 1002,
    kMusicDeviceProperty_SoundBankFSSpec = 1003,
    kAudioUnitProperty_PannerMode = 3008,
    _,
};
pub const kAudioUnitProperty_SpeakerConfiguration = @enumToInt(enum_unnamed_340.kAudioUnitProperty_SpeakerConfiguration);
const enum_unnamed_340 = extern enum(c_int) {
    kAudioUnitProperty_SpeakerConfiguration = 3001,
    _,
};
pub const kSpeakerConfiguration_HeadPhones = @enumToInt(enum_unnamed_341.kSpeakerConfiguration_HeadPhones);
pub const kSpeakerConfiguration_Stereo = @enumToInt(enum_unnamed_341.kSpeakerConfiguration_Stereo);
pub const kSpeakerConfiguration_Quad = @enumToInt(enum_unnamed_341.kSpeakerConfiguration_Quad);
pub const kSpeakerConfiguration_5_0 = @enumToInt(enum_unnamed_341.kSpeakerConfiguration_5_0);
pub const kSpeakerConfiguration_5_1 = @enumToInt(enum_unnamed_341.kSpeakerConfiguration_5_1);
const enum_unnamed_341 = extern enum(c_int) {
    kSpeakerConfiguration_HeadPhones = 0,
    kSpeakerConfiguration_Stereo = 1,
    kSpeakerConfiguration_Quad = 2,
    kSpeakerConfiguration_5_0 = 3,
    kSpeakerConfiguration_5_1 = 3,
    _,
};
pub const struct_AUSamplerBankPresetData = extern struct {
    bankURL: CFURLRef,
    bankMSB: UInt8,
    bankLSB: UInt8,
    presetID: UInt8,
    reserved: UInt8,
};
pub const AUSamplerBankPresetData = struct_AUSamplerBankPresetData;
pub const kAUSamplerProperty_LoadPresetFromBank = @enumToInt(enum_unnamed_342.kAUSamplerProperty_LoadPresetFromBank);
pub const kAUSamplerProperty_BankAndPreset = @enumToInt(enum_unnamed_342.kAUSamplerProperty_BankAndPreset);
const enum_unnamed_342 = extern enum(c_int) {
    kAUSamplerProperty_LoadPresetFromBank = 4100,
    kAUSamplerProperty_BankAndPreset = 4100,
    _,
};
pub const kAUGroupParameterID_Volume = @enumToInt(enum_unnamed_343.kAUGroupParameterID_Volume);
pub const kAUGroupParameterID_Sustain = @enumToInt(enum_unnamed_343.kAUGroupParameterID_Sustain);
pub const kAUGroupParameterID_Sostenuto = @enumToInt(enum_unnamed_343.kAUGroupParameterID_Sostenuto);
pub const kAUGroupParameterID_AllNotesOff = @enumToInt(enum_unnamed_343.kAUGroupParameterID_AllNotesOff);
pub const kAUGroupParameterID_ModWheel = @enumToInt(enum_unnamed_343.kAUGroupParameterID_ModWheel);
pub const kAUGroupParameterID_PitchBend = @enumToInt(enum_unnamed_343.kAUGroupParameterID_PitchBend);
pub const kAUGroupParameterID_AllSoundOff = @enumToInt(enum_unnamed_343.kAUGroupParameterID_AllSoundOff);
pub const kAUGroupParameterID_ResetAllControllers = @enumToInt(enum_unnamed_343.kAUGroupParameterID_ResetAllControllers);
pub const kAUGroupParameterID_Pan = @enumToInt(enum_unnamed_343.kAUGroupParameterID_Pan);
pub const kAUGroupParameterID_Foot = @enumToInt(enum_unnamed_343.kAUGroupParameterID_Foot);
pub const kAUGroupParameterID_ChannelPressure = @enumToInt(enum_unnamed_343.kAUGroupParameterID_ChannelPressure);
pub const kAUGroupParameterID_KeyPressure = @enumToInt(enum_unnamed_343.kAUGroupParameterID_KeyPressure);
pub const kAUGroupParameterID_Expression = @enumToInt(enum_unnamed_343.kAUGroupParameterID_Expression);
pub const kAUGroupParameterID_DataEntry = @enumToInt(enum_unnamed_343.kAUGroupParameterID_DataEntry);
pub const kAUGroupParameterID_Volume_LSB = @enumToInt(enum_unnamed_343.kAUGroupParameterID_Volume_LSB);
pub const kAUGroupParameterID_ModWheel_LSB = @enumToInt(enum_unnamed_343.kAUGroupParameterID_ModWheel_LSB);
pub const kAUGroupParameterID_Pan_LSB = @enumToInt(enum_unnamed_343.kAUGroupParameterID_Pan_LSB);
pub const kAUGroupParameterID_Foot_LSB = @enumToInt(enum_unnamed_343.kAUGroupParameterID_Foot_LSB);
pub const kAUGroupParameterID_Expression_LSB = @enumToInt(enum_unnamed_343.kAUGroupParameterID_Expression_LSB);
pub const kAUGroupParameterID_DataEntry_LSB = @enumToInt(enum_unnamed_343.kAUGroupParameterID_DataEntry_LSB);
pub const kAUGroupParameterID_KeyPressure_FirstKey = @enumToInt(enum_unnamed_343.kAUGroupParameterID_KeyPressure_FirstKey);
pub const kAUGroupParameterID_KeyPressure_LastKey = @enumToInt(enum_unnamed_343.kAUGroupParameterID_KeyPressure_LastKey);
const enum_unnamed_343 = extern enum(c_int) {
    kAUGroupParameterID_Volume = 7,
    kAUGroupParameterID_Sustain = 64,
    kAUGroupParameterID_Sostenuto = 66,
    kAUGroupParameterID_AllNotesOff = 123,
    kAUGroupParameterID_ModWheel = 1,
    kAUGroupParameterID_PitchBend = 224,
    kAUGroupParameterID_AllSoundOff = 120,
    kAUGroupParameterID_ResetAllControllers = 121,
    kAUGroupParameterID_Pan = 10,
    kAUGroupParameterID_Foot = 4,
    kAUGroupParameterID_ChannelPressure = 208,
    kAUGroupParameterID_KeyPressure = 160,
    kAUGroupParameterID_Expression = 11,
    kAUGroupParameterID_DataEntry = 6,
    kAUGroupParameterID_Volume_LSB = 39,
    kAUGroupParameterID_ModWheel_LSB = 33,
    kAUGroupParameterID_Pan_LSB = 42,
    kAUGroupParameterID_Foot_LSB = 36,
    kAUGroupParameterID_Expression_LSB = 43,
    kAUGroupParameterID_DataEntry_LSB = 38,
    kAUGroupParameterID_KeyPressure_FirstKey = 256,
    kAUGroupParameterID_KeyPressure_LastKey = 383,
    _,
};
pub const kPannerParam_Gain = @enumToInt(enum_unnamed_344.kPannerParam_Gain);
pub const kPannerParam_Azimuth = @enumToInt(enum_unnamed_344.kPannerParam_Azimuth);
pub const kPannerParam_Elevation = @enumToInt(enum_unnamed_344.kPannerParam_Elevation);
pub const kPannerParam_Distance = @enumToInt(enum_unnamed_344.kPannerParam_Distance);
pub const kPannerParam_CoordScale = @enumToInt(enum_unnamed_344.kPannerParam_CoordScale);
pub const kPannerParam_RefDistance = @enumToInt(enum_unnamed_344.kPannerParam_RefDistance);
const enum_unnamed_344 = extern enum(c_int) {
    kPannerParam_Gain = 0,
    kPannerParam_Azimuth = 1,
    kPannerParam_Elevation = 2,
    kPannerParam_Distance = 3,
    kPannerParam_CoordScale = 4,
    kPannerParam_RefDistance = 5,
    _,
};
pub const kSpatialMixerParam_Azimuth = @enumToInt(enum_unnamed_345.kSpatialMixerParam_Azimuth);
pub const kSpatialMixerParam_Elevation = @enumToInt(enum_unnamed_345.kSpatialMixerParam_Elevation);
pub const kSpatialMixerParam_Distance = @enumToInt(enum_unnamed_345.kSpatialMixerParam_Distance);
pub const kSpatialMixerParam_Gain = @enumToInt(enum_unnamed_345.kSpatialMixerParam_Gain);
pub const kSpatialMixerParam_PlaybackRate = @enumToInt(enum_unnamed_345.kSpatialMixerParam_PlaybackRate);
pub const kSpatialMixerParam_Enable = @enumToInt(enum_unnamed_345.kSpatialMixerParam_Enable);
pub const kSpatialMixerParam_MinGain = @enumToInt(enum_unnamed_345.kSpatialMixerParam_MinGain);
pub const kSpatialMixerParam_MaxGain = @enumToInt(enum_unnamed_345.kSpatialMixerParam_MaxGain);
pub const kSpatialMixerParam_ReverbBlend = @enumToInt(enum_unnamed_345.kSpatialMixerParam_ReverbBlend);
pub const kSpatialMixerParam_GlobalReverbGain = @enumToInt(enum_unnamed_345.kSpatialMixerParam_GlobalReverbGain);
pub const kSpatialMixerParam_OcclusionAttenuation = @enumToInt(enum_unnamed_345.kSpatialMixerParam_OcclusionAttenuation);
pub const kSpatialMixerParam_ObstructionAttenuation = @enumToInt(enum_unnamed_345.kSpatialMixerParam_ObstructionAttenuation);
const enum_unnamed_345 = extern enum(c_int) {
    kSpatialMixerParam_Azimuth = 0,
    kSpatialMixerParam_Elevation = 1,
    kSpatialMixerParam_Distance = 2,
    kSpatialMixerParam_Gain = 3,
    kSpatialMixerParam_PlaybackRate = 4,
    kSpatialMixerParam_Enable = 5,
    kSpatialMixerParam_MinGain = 6,
    kSpatialMixerParam_MaxGain = 7,
    kSpatialMixerParam_ReverbBlend = 8,
    kSpatialMixerParam_GlobalReverbGain = 9,
    kSpatialMixerParam_OcclusionAttenuation = 10,
    kSpatialMixerParam_ObstructionAttenuation = 11,
    _,
};
pub const kReverbParam_FilterFrequency = @enumToInt(enum_unnamed_346.kReverbParam_FilterFrequency);
pub const kReverbParam_FilterBandwidth = @enumToInt(enum_unnamed_346.kReverbParam_FilterBandwidth);
pub const kReverbParam_FilterGain = @enumToInt(enum_unnamed_346.kReverbParam_FilterGain);
pub const kReverbParam_FilterType = @enumToInt(enum_unnamed_346.kReverbParam_FilterType);
pub const kReverbParam_FilterEnable = @enumToInt(enum_unnamed_346.kReverbParam_FilterEnable);
const enum_unnamed_346 = extern enum(c_int) {
    kReverbParam_FilterFrequency = 14,
    kReverbParam_FilterBandwidth = 15,
    kReverbParam_FilterGain = 16,
    kReverbParam_FilterType = 17,
    kReverbParam_FilterEnable = 18,
    _,
};
pub const k3DMixerParam_Azimuth = @enumToInt(enum_unnamed_347.k3DMixerParam_Azimuth);
pub const k3DMixerParam_Elevation = @enumToInt(enum_unnamed_347.k3DMixerParam_Elevation);
pub const k3DMixerParam_Distance = @enumToInt(enum_unnamed_347.k3DMixerParam_Distance);
pub const k3DMixerParam_Gain = @enumToInt(enum_unnamed_347.k3DMixerParam_Gain);
pub const k3DMixerParam_PlaybackRate = @enumToInt(enum_unnamed_347.k3DMixerParam_PlaybackRate);
pub const k3DMixerParam_BusEnable = @enumToInt(enum_unnamed_347.k3DMixerParam_BusEnable);
pub const k3DMixerParam_MinGainInDecibels = @enumToInt(enum_unnamed_347.k3DMixerParam_MinGainInDecibels);
pub const k3DMixerParam_MaxGainInDecibels = @enumToInt(enum_unnamed_347.k3DMixerParam_MaxGainInDecibels);
pub const k3DMixerParam_DryWetReverbBlend = @enumToInt(enum_unnamed_347.k3DMixerParam_DryWetReverbBlend);
pub const k3DMixerParam_GlobalReverbGainInDecibels = @enumToInt(enum_unnamed_347.k3DMixerParam_GlobalReverbGainInDecibels);
pub const k3DMixerParam_OcclusionAttenuationInDecibels = @enumToInt(enum_unnamed_347.k3DMixerParam_OcclusionAttenuationInDecibels);
pub const k3DMixerParam_ObstructionAttenuationInDecibels = @enumToInt(enum_unnamed_347.k3DMixerParam_ObstructionAttenuationInDecibels);
pub const k3DMixerParam_ReverbBlend = @enumToInt(enum_unnamed_347.k3DMixerParam_ReverbBlend);
pub const k3DMixerParam_GlobalReverbGain = @enumToInt(enum_unnamed_347.k3DMixerParam_GlobalReverbGain);
pub const k3DMixerParam_OcclusionAttenuation = @enumToInt(enum_unnamed_347.k3DMixerParam_OcclusionAttenuation);
pub const k3DMixerParam_ObstructionAttenuation = @enumToInt(enum_unnamed_347.k3DMixerParam_ObstructionAttenuation);
pub const k3DMixerParam_MinGain = @enumToInt(enum_unnamed_347.k3DMixerParam_MinGain);
pub const k3DMixerParam_MaxGain = @enumToInt(enum_unnamed_347.k3DMixerParam_MaxGain);
pub const k3DMixerParam_PreAveragePower = @enumToInt(enum_unnamed_347.k3DMixerParam_PreAveragePower);
pub const k3DMixerParam_PrePeakHoldLevel = @enumToInt(enum_unnamed_347.k3DMixerParam_PrePeakHoldLevel);
pub const k3DMixerParam_PostAveragePower = @enumToInt(enum_unnamed_347.k3DMixerParam_PostAveragePower);
pub const k3DMixerParam_PostPeakHoldLevel = @enumToInt(enum_unnamed_347.k3DMixerParam_PostPeakHoldLevel);
const enum_unnamed_347 = extern enum(c_int) {
    k3DMixerParam_Azimuth = 0,
    k3DMixerParam_Elevation = 1,
    k3DMixerParam_Distance = 2,
    k3DMixerParam_Gain = 3,
    k3DMixerParam_PlaybackRate = 4,
    k3DMixerParam_BusEnable = 20,
    k3DMixerParam_MinGainInDecibels = 21,
    k3DMixerParam_MaxGainInDecibels = 22,
    k3DMixerParam_DryWetReverbBlend = 23,
    k3DMixerParam_GlobalReverbGainInDecibels = 24,
    k3DMixerParam_OcclusionAttenuationInDecibels = 25,
    k3DMixerParam_ObstructionAttenuationInDecibels = 26,
    k3DMixerParam_ReverbBlend = 5,
    k3DMixerParam_GlobalReverbGain = 6,
    k3DMixerParam_OcclusionAttenuation = 7,
    k3DMixerParam_ObstructionAttenuation = 8,
    k3DMixerParam_MinGain = 9,
    k3DMixerParam_MaxGain = 10,
    k3DMixerParam_PreAveragePower = 1000,
    k3DMixerParam_PrePeakHoldLevel = 2000,
    k3DMixerParam_PostAveragePower = 3000,
    k3DMixerParam_PostPeakHoldLevel = 4000,
    _,
};
pub const kMultiChannelMixerParam_Volume = @enumToInt(enum_unnamed_348.kMultiChannelMixerParam_Volume);
pub const kMultiChannelMixerParam_Enable = @enumToInt(enum_unnamed_348.kMultiChannelMixerParam_Enable);
pub const kMultiChannelMixerParam_Pan = @enumToInt(enum_unnamed_348.kMultiChannelMixerParam_Pan);
pub const kMultiChannelMixerParam_PreAveragePower = @enumToInt(enum_unnamed_348.kMultiChannelMixerParam_PreAveragePower);
pub const kMultiChannelMixerParam_PrePeakHoldLevel = @enumToInt(enum_unnamed_348.kMultiChannelMixerParam_PrePeakHoldLevel);
pub const kMultiChannelMixerParam_PostAveragePower = @enumToInt(enum_unnamed_348.kMultiChannelMixerParam_PostAveragePower);
pub const kMultiChannelMixerParam_PostPeakHoldLevel = @enumToInt(enum_unnamed_348.kMultiChannelMixerParam_PostPeakHoldLevel);
const enum_unnamed_348 = extern enum(c_int) {
    kMultiChannelMixerParam_Volume = 0,
    kMultiChannelMixerParam_Enable = 1,
    kMultiChannelMixerParam_Pan = 2,
    kMultiChannelMixerParam_PreAveragePower = 1000,
    kMultiChannelMixerParam_PrePeakHoldLevel = 2000,
    kMultiChannelMixerParam_PostAveragePower = 3000,
    kMultiChannelMixerParam_PostPeakHoldLevel = 4000,
    _,
};
pub const kMatrixMixerParam_Volume = @enumToInt(enum_unnamed_349.kMatrixMixerParam_Volume);
pub const kMatrixMixerParam_Enable = @enumToInt(enum_unnamed_349.kMatrixMixerParam_Enable);
pub const kMatrixMixerParam_PreAveragePower = @enumToInt(enum_unnamed_349.kMatrixMixerParam_PreAveragePower);
pub const kMatrixMixerParam_PrePeakHoldLevel = @enumToInt(enum_unnamed_349.kMatrixMixerParam_PrePeakHoldLevel);
pub const kMatrixMixerParam_PostAveragePower = @enumToInt(enum_unnamed_349.kMatrixMixerParam_PostAveragePower);
pub const kMatrixMixerParam_PostPeakHoldLevel = @enumToInt(enum_unnamed_349.kMatrixMixerParam_PostPeakHoldLevel);
pub const kMatrixMixerParam_PreAveragePowerLinear = @enumToInt(enum_unnamed_349.kMatrixMixerParam_PreAveragePowerLinear);
pub const kMatrixMixerParam_PrePeakHoldLevelLinear = @enumToInt(enum_unnamed_349.kMatrixMixerParam_PrePeakHoldLevelLinear);
pub const kMatrixMixerParam_PostAveragePowerLinear = @enumToInt(enum_unnamed_349.kMatrixMixerParam_PostAveragePowerLinear);
pub const kMatrixMixerParam_PostPeakHoldLevelLinear = @enumToInt(enum_unnamed_349.kMatrixMixerParam_PostPeakHoldLevelLinear);
const enum_unnamed_349 = extern enum(c_int) {
    kMatrixMixerParam_Volume = 0,
    kMatrixMixerParam_Enable = 1,
    kMatrixMixerParam_PreAveragePower = 1000,
    kMatrixMixerParam_PrePeakHoldLevel = 2000,
    kMatrixMixerParam_PostAveragePower = 3000,
    kMatrixMixerParam_PostPeakHoldLevel = 4000,
    kMatrixMixerParam_PreAveragePowerLinear = 5000,
    kMatrixMixerParam_PrePeakHoldLevelLinear = 6000,
    kMatrixMixerParam_PostAveragePowerLinear = 7000,
    kMatrixMixerParam_PostPeakHoldLevelLinear = 8000,
    _,
};
pub const kHALOutputParam_Volume = @enumToInt(enum_unnamed_350.kHALOutputParam_Volume);
const enum_unnamed_350 = extern enum(c_int) {
    kHALOutputParam_Volume = 14,
    _,
};
pub const kTimePitchParam_Rate = @enumToInt(enum_unnamed_351.kTimePitchParam_Rate);
pub const kTimePitchParam_Pitch = @enumToInt(enum_unnamed_351.kTimePitchParam_Pitch);
pub const kTimePitchParam_EffectBlend = @enumToInt(enum_unnamed_351.kTimePitchParam_EffectBlend);
const enum_unnamed_351 = extern enum(c_int) {
    kTimePitchParam_Rate = 0,
    kTimePitchParam_Pitch = 1,
    kTimePitchParam_EffectBlend = 2,
    _,
};
pub const kNewTimePitchParam_Rate = @enumToInt(enum_unnamed_352.kNewTimePitchParam_Rate);
pub const kNewTimePitchParam_Pitch = @enumToInt(enum_unnamed_352.kNewTimePitchParam_Pitch);
pub const kNewTimePitchParam_Overlap = @enumToInt(enum_unnamed_352.kNewTimePitchParam_Overlap);
pub const kNewTimePitchParam_EnablePeakLocking = @enumToInt(enum_unnamed_352.kNewTimePitchParam_EnablePeakLocking);
const enum_unnamed_352 = extern enum(c_int) {
    kNewTimePitchParam_Rate = 0,
    kNewTimePitchParam_Pitch = 1,
    kNewTimePitchParam_Overlap = 4,
    kNewTimePitchParam_EnablePeakLocking = 6,
    _,
};
pub const kAUSamplerParam_Gain = @enumToInt(enum_unnamed_353.kAUSamplerParam_Gain);
pub const kAUSamplerParam_CoarseTuning = @enumToInt(enum_unnamed_353.kAUSamplerParam_CoarseTuning);
pub const kAUSamplerParam_FineTuning = @enumToInt(enum_unnamed_353.kAUSamplerParam_FineTuning);
pub const kAUSamplerParam_Pan = @enumToInt(enum_unnamed_353.kAUSamplerParam_Pan);
const enum_unnamed_353 = extern enum(c_int) {
    kAUSamplerParam_Gain = 900,
    kAUSamplerParam_CoarseTuning = 901,
    kAUSamplerParam_FineTuning = 902,
    kAUSamplerParam_Pan = 903,
    _,
};
pub const kBandpassParam_CenterFrequency = @enumToInt(enum_unnamed_354.kBandpassParam_CenterFrequency);
pub const kBandpassParam_Bandwidth = @enumToInt(enum_unnamed_354.kBandpassParam_Bandwidth);
const enum_unnamed_354 = extern enum(c_int) {
    kBandpassParam_CenterFrequency = 0,
    kBandpassParam_Bandwidth = 1,
    _,
};
pub const kHipassParam_CutoffFrequency = @enumToInt(enum_unnamed_355.kHipassParam_CutoffFrequency);
pub const kHipassParam_Resonance = @enumToInt(enum_unnamed_355.kHipassParam_Resonance);
const enum_unnamed_355 = extern enum(c_int) {
    kHipassParam_CutoffFrequency = 0,
    kHipassParam_Resonance = 1,
    _,
};
pub const kLowPassParam_CutoffFrequency = @enumToInt(enum_unnamed_356.kLowPassParam_CutoffFrequency);
pub const kLowPassParam_Resonance = @enumToInt(enum_unnamed_356.kLowPassParam_Resonance);
const enum_unnamed_356 = extern enum(c_int) {
    kLowPassParam_CutoffFrequency = 0,
    kLowPassParam_Resonance = 1,
    _,
};
pub const kHighShelfParam_CutOffFrequency = @enumToInt(enum_unnamed_357.kHighShelfParam_CutOffFrequency);
pub const kHighShelfParam_Gain = @enumToInt(enum_unnamed_357.kHighShelfParam_Gain);
const enum_unnamed_357 = extern enum(c_int) {
    kHighShelfParam_CutOffFrequency = 0,
    kHighShelfParam_Gain = 1,
    _,
};
pub const kAULowShelfParam_CutoffFrequency = @enumToInt(enum_unnamed_358.kAULowShelfParam_CutoffFrequency);
pub const kAULowShelfParam_Gain = @enumToInt(enum_unnamed_358.kAULowShelfParam_Gain);
const enum_unnamed_358 = extern enum(c_int) {
    kAULowShelfParam_CutoffFrequency = 0,
    kAULowShelfParam_Gain = 1,
    _,
};
pub const kParametricEQParam_CenterFreq = @enumToInt(enum_unnamed_359.kParametricEQParam_CenterFreq);
pub const kParametricEQParam_Q = @enumToInt(enum_unnamed_359.kParametricEQParam_Q);
pub const kParametricEQParam_Gain = @enumToInt(enum_unnamed_359.kParametricEQParam_Gain);
const enum_unnamed_359 = extern enum(c_int) {
    kParametricEQParam_CenterFreq = 0,
    kParametricEQParam_Q = 1,
    kParametricEQParam_Gain = 2,
    _,
};
pub const kLimiterParam_AttackTime = @enumToInt(enum_unnamed_360.kLimiterParam_AttackTime);
pub const kLimiterParam_DecayTime = @enumToInt(enum_unnamed_360.kLimiterParam_DecayTime);
pub const kLimiterParam_PreGain = @enumToInt(enum_unnamed_360.kLimiterParam_PreGain);
const enum_unnamed_360 = extern enum(c_int) {
    kLimiterParam_AttackTime = 0,
    kLimiterParam_DecayTime = 1,
    kLimiterParam_PreGain = 2,
    _,
};
pub const kDynamicsProcessorParam_Threshold = @enumToInt(enum_unnamed_361.kDynamicsProcessorParam_Threshold);
pub const kDynamicsProcessorParam_HeadRoom = @enumToInt(enum_unnamed_361.kDynamicsProcessorParam_HeadRoom);
pub const kDynamicsProcessorParam_ExpansionRatio = @enumToInt(enum_unnamed_361.kDynamicsProcessorParam_ExpansionRatio);
pub const kDynamicsProcessorParam_ExpansionThreshold = @enumToInt(enum_unnamed_361.kDynamicsProcessorParam_ExpansionThreshold);
pub const kDynamicsProcessorParam_AttackTime = @enumToInt(enum_unnamed_361.kDynamicsProcessorParam_AttackTime);
pub const kDynamicsProcessorParam_ReleaseTime = @enumToInt(enum_unnamed_361.kDynamicsProcessorParam_ReleaseTime);
pub const kDynamicsProcessorParam_MasterGain = @enumToInt(enum_unnamed_361.kDynamicsProcessorParam_MasterGain);
pub const kDynamicsProcessorParam_CompressionAmount = @enumToInt(enum_unnamed_361.kDynamicsProcessorParam_CompressionAmount);
pub const kDynamicsProcessorParam_InputAmplitude = @enumToInt(enum_unnamed_361.kDynamicsProcessorParam_InputAmplitude);
pub const kDynamicsProcessorParam_OutputAmplitude = @enumToInt(enum_unnamed_361.kDynamicsProcessorParam_OutputAmplitude);
const enum_unnamed_361 = extern enum(c_int) {
    kDynamicsProcessorParam_Threshold = 0,
    kDynamicsProcessorParam_HeadRoom = 1,
    kDynamicsProcessorParam_ExpansionRatio = 2,
    kDynamicsProcessorParam_ExpansionThreshold = 3,
    kDynamicsProcessorParam_AttackTime = 4,
    kDynamicsProcessorParam_ReleaseTime = 5,
    kDynamicsProcessorParam_MasterGain = 6,
    kDynamicsProcessorParam_CompressionAmount = 1000,
    kDynamicsProcessorParam_InputAmplitude = 2000,
    kDynamicsProcessorParam_OutputAmplitude = 3000,
    _,
};
pub const kVarispeedParam_PlaybackRate = @enumToInt(enum_unnamed_362.kVarispeedParam_PlaybackRate);
pub const kVarispeedParam_PlaybackCents = @enumToInt(enum_unnamed_362.kVarispeedParam_PlaybackCents);
const enum_unnamed_362 = extern enum(c_int) {
    kVarispeedParam_PlaybackRate = 0,
    kVarispeedParam_PlaybackCents = 1,
    _,
};
pub const kDistortionParam_Delay = @enumToInt(enum_unnamed_363.kDistortionParam_Delay);
pub const kDistortionParam_Decay = @enumToInt(enum_unnamed_363.kDistortionParam_Decay);
pub const kDistortionParam_DelayMix = @enumToInt(enum_unnamed_363.kDistortionParam_DelayMix);
pub const kDistortionParam_Decimation = @enumToInt(enum_unnamed_363.kDistortionParam_Decimation);
pub const kDistortionParam_Rounding = @enumToInt(enum_unnamed_363.kDistortionParam_Rounding);
pub const kDistortionParam_DecimationMix = @enumToInt(enum_unnamed_363.kDistortionParam_DecimationMix);
pub const kDistortionParam_LinearTerm = @enumToInt(enum_unnamed_363.kDistortionParam_LinearTerm);
pub const kDistortionParam_SquaredTerm = @enumToInt(enum_unnamed_363.kDistortionParam_SquaredTerm);
pub const kDistortionParam_CubicTerm = @enumToInt(enum_unnamed_363.kDistortionParam_CubicTerm);
pub const kDistortionParam_PolynomialMix = @enumToInt(enum_unnamed_363.kDistortionParam_PolynomialMix);
pub const kDistortionParam_RingModFreq1 = @enumToInt(enum_unnamed_363.kDistortionParam_RingModFreq1);
pub const kDistortionParam_RingModFreq2 = @enumToInt(enum_unnamed_363.kDistortionParam_RingModFreq2);
pub const kDistortionParam_RingModBalance = @enumToInt(enum_unnamed_363.kDistortionParam_RingModBalance);
pub const kDistortionParam_RingModMix = @enumToInt(enum_unnamed_363.kDistortionParam_RingModMix);
pub const kDistortionParam_SoftClipGain = @enumToInt(enum_unnamed_363.kDistortionParam_SoftClipGain);
pub const kDistortionParam_FinalMix = @enumToInt(enum_unnamed_363.kDistortionParam_FinalMix);
const enum_unnamed_363 = extern enum(c_int) {
    kDistortionParam_Delay = 0,
    kDistortionParam_Decay = 1,
    kDistortionParam_DelayMix = 2,
    kDistortionParam_Decimation = 3,
    kDistortionParam_Rounding = 4,
    kDistortionParam_DecimationMix = 5,
    kDistortionParam_LinearTerm = 6,
    kDistortionParam_SquaredTerm = 7,
    kDistortionParam_CubicTerm = 8,
    kDistortionParam_PolynomialMix = 9,
    kDistortionParam_RingModFreq1 = 10,
    kDistortionParam_RingModFreq2 = 11,
    kDistortionParam_RingModBalance = 12,
    kDistortionParam_RingModMix = 13,
    kDistortionParam_SoftClipGain = 14,
    kDistortionParam_FinalMix = 15,
    _,
};
pub const kDelayParam_WetDryMix = @enumToInt(enum_unnamed_364.kDelayParam_WetDryMix);
pub const kDelayParam_DelayTime = @enumToInt(enum_unnamed_364.kDelayParam_DelayTime);
pub const kDelayParam_Feedback = @enumToInt(enum_unnamed_364.kDelayParam_Feedback);
pub const kDelayParam_LopassCutoff = @enumToInt(enum_unnamed_364.kDelayParam_LopassCutoff);
const enum_unnamed_364 = extern enum(c_int) {
    kDelayParam_WetDryMix = 0,
    kDelayParam_DelayTime = 1,
    kDelayParam_Feedback = 2,
    kDelayParam_LopassCutoff = 3,
    _,
};
pub const kAUNBandEQParam_GlobalGain = @enumToInt(enum_unnamed_365.kAUNBandEQParam_GlobalGain);
pub const kAUNBandEQParam_BypassBand = @enumToInt(enum_unnamed_365.kAUNBandEQParam_BypassBand);
pub const kAUNBandEQParam_FilterType = @enumToInt(enum_unnamed_365.kAUNBandEQParam_FilterType);
pub const kAUNBandEQParam_Frequency = @enumToInt(enum_unnamed_365.kAUNBandEQParam_Frequency);
pub const kAUNBandEQParam_Gain = @enumToInt(enum_unnamed_365.kAUNBandEQParam_Gain);
pub const kAUNBandEQParam_Bandwidth = @enumToInt(enum_unnamed_365.kAUNBandEQParam_Bandwidth);
const enum_unnamed_365 = extern enum(c_int) {
    kAUNBandEQParam_GlobalGain = 0,
    kAUNBandEQParam_BypassBand = 1000,
    kAUNBandEQParam_FilterType = 2000,
    kAUNBandEQParam_Frequency = 3000,
    kAUNBandEQParam_Gain = 4000,
    kAUNBandEQParam_Bandwidth = 5000,
    _,
};
pub const kAUNBandEQFilterType_Parametric = @enumToInt(enum_unnamed_366.kAUNBandEQFilterType_Parametric);
pub const kAUNBandEQFilterType_2ndOrderButterworthLowPass = @enumToInt(enum_unnamed_366.kAUNBandEQFilterType_2ndOrderButterworthLowPass);
pub const kAUNBandEQFilterType_2ndOrderButterworthHighPass = @enumToInt(enum_unnamed_366.kAUNBandEQFilterType_2ndOrderButterworthHighPass);
pub const kAUNBandEQFilterType_ResonantLowPass = @enumToInt(enum_unnamed_366.kAUNBandEQFilterType_ResonantLowPass);
pub const kAUNBandEQFilterType_ResonantHighPass = @enumToInt(enum_unnamed_366.kAUNBandEQFilterType_ResonantHighPass);
pub const kAUNBandEQFilterType_BandPass = @enumToInt(enum_unnamed_366.kAUNBandEQFilterType_BandPass);
pub const kAUNBandEQFilterType_BandStop = @enumToInt(enum_unnamed_366.kAUNBandEQFilterType_BandStop);
pub const kAUNBandEQFilterType_LowShelf = @enumToInt(enum_unnamed_366.kAUNBandEQFilterType_LowShelf);
pub const kAUNBandEQFilterType_HighShelf = @enumToInt(enum_unnamed_366.kAUNBandEQFilterType_HighShelf);
pub const kAUNBandEQFilterType_ResonantLowShelf = @enumToInt(enum_unnamed_366.kAUNBandEQFilterType_ResonantLowShelf);
pub const kAUNBandEQFilterType_ResonantHighShelf = @enumToInt(enum_unnamed_366.kAUNBandEQFilterType_ResonantHighShelf);
pub const kNumAUNBandEQFilterTypes = @enumToInt(enum_unnamed_366.kNumAUNBandEQFilterTypes);
const enum_unnamed_366 = extern enum(c_int) {
    kAUNBandEQFilterType_Parametric = 0,
    kAUNBandEQFilterType_2ndOrderButterworthLowPass = 1,
    kAUNBandEQFilterType_2ndOrderButterworthHighPass = 2,
    kAUNBandEQFilterType_ResonantLowPass = 3,
    kAUNBandEQFilterType_ResonantHighPass = 4,
    kAUNBandEQFilterType_BandPass = 5,
    kAUNBandEQFilterType_BandStop = 6,
    kAUNBandEQFilterType_LowShelf = 7,
    kAUNBandEQFilterType_HighShelf = 8,
    kAUNBandEQFilterType_ResonantLowShelf = 9,
    kAUNBandEQFilterType_ResonantHighShelf = 10,
    kNumAUNBandEQFilterTypes = 11,
    _,
};
pub const kRoundTripAACParam_Format = @enumToInt(enum_unnamed_367.kRoundTripAACParam_Format);
pub const kRoundTripAACParam_EncodingStrategy = @enumToInt(enum_unnamed_367.kRoundTripAACParam_EncodingStrategy);
pub const kRoundTripAACParam_RateOrQuality = @enumToInt(enum_unnamed_367.kRoundTripAACParam_RateOrQuality);
pub const kRoundTripAACParam_BitRate = @enumToInt(enum_unnamed_367.kRoundTripAACParam_BitRate);
pub const kRoundTripAACParam_Quality = @enumToInt(enum_unnamed_367.kRoundTripAACParam_Quality);
pub const kRoundTripAACParam_CompressedFormatSampleRate = @enumToInt(enum_unnamed_367.kRoundTripAACParam_CompressedFormatSampleRate);
const enum_unnamed_367 = extern enum(c_int) {
    kRoundTripAACParam_Format = 0,
    kRoundTripAACParam_EncodingStrategy = 1,
    kRoundTripAACParam_RateOrQuality = 2,
    kRoundTripAACParam_BitRate = 1,
    kRoundTripAACParam_Quality = 2,
    kRoundTripAACParam_CompressedFormatSampleRate = 3,
    _,
};
pub const kGraphicEQParam_NumberOfBands = @enumToInt(enum_unnamed_368.kGraphicEQParam_NumberOfBands);
const enum_unnamed_368 = extern enum(c_int) {
    kGraphicEQParam_NumberOfBands = 10000,
    _,
};
pub const kReverbParam_DryWetMix = @enumToInt(enum_unnamed_369.kReverbParam_DryWetMix);
pub const kReverbParam_SmallLargeMix = @enumToInt(enum_unnamed_369.kReverbParam_SmallLargeMix);
pub const kReverbParam_SmallSize = @enumToInt(enum_unnamed_369.kReverbParam_SmallSize);
pub const kReverbParam_LargeSize = @enumToInt(enum_unnamed_369.kReverbParam_LargeSize);
pub const kReverbParam_PreDelay = @enumToInt(enum_unnamed_369.kReverbParam_PreDelay);
pub const kReverbParam_LargeDelay = @enumToInt(enum_unnamed_369.kReverbParam_LargeDelay);
pub const kReverbParam_SmallDensity = @enumToInt(enum_unnamed_369.kReverbParam_SmallDensity);
pub const kReverbParam_LargeDensity = @enumToInt(enum_unnamed_369.kReverbParam_LargeDensity);
pub const kReverbParam_LargeDelayRange = @enumToInt(enum_unnamed_369.kReverbParam_LargeDelayRange);
pub const kReverbParam_SmallBrightness = @enumToInt(enum_unnamed_369.kReverbParam_SmallBrightness);
pub const kReverbParam_LargeBrightness = @enumToInt(enum_unnamed_369.kReverbParam_LargeBrightness);
pub const kReverbParam_SmallDelayRange = @enumToInt(enum_unnamed_369.kReverbParam_SmallDelayRange);
pub const kReverbParam_ModulationRate = @enumToInt(enum_unnamed_369.kReverbParam_ModulationRate);
pub const kReverbParam_ModulationDepth = @enumToInt(enum_unnamed_369.kReverbParam_ModulationDepth);
const enum_unnamed_369 = extern enum(c_int) {
    kReverbParam_DryWetMix = 0,
    kReverbParam_SmallLargeMix = 1,
    kReverbParam_SmallSize = 2,
    kReverbParam_LargeSize = 3,
    kReverbParam_PreDelay = 4,
    kReverbParam_LargeDelay = 5,
    kReverbParam_SmallDensity = 6,
    kReverbParam_LargeDensity = 7,
    kReverbParam_LargeDelayRange = 8,
    kReverbParam_SmallBrightness = 9,
    kReverbParam_LargeBrightness = 10,
    kReverbParam_SmallDelayRange = 11,
    kReverbParam_ModulationRate = 12,
    kReverbParam_ModulationDepth = 13,
    _,
};
pub const kMultibandCompressorParam_Pregain = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_Pregain);
pub const kMultibandCompressorParam_Postgain = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_Postgain);
pub const kMultibandCompressorParam_Crossover1 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_Crossover1);
pub const kMultibandCompressorParam_Crossover2 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_Crossover2);
pub const kMultibandCompressorParam_Crossover3 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_Crossover3);
pub const kMultibandCompressorParam_Threshold1 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_Threshold1);
pub const kMultibandCompressorParam_Threshold2 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_Threshold2);
pub const kMultibandCompressorParam_Threshold3 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_Threshold3);
pub const kMultibandCompressorParam_Threshold4 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_Threshold4);
pub const kMultibandCompressorParam_Headroom1 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_Headroom1);
pub const kMultibandCompressorParam_Headroom2 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_Headroom2);
pub const kMultibandCompressorParam_Headroom3 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_Headroom3);
pub const kMultibandCompressorParam_Headroom4 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_Headroom4);
pub const kMultibandCompressorParam_AttackTime = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_AttackTime);
pub const kMultibandCompressorParam_ReleaseTime = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_ReleaseTime);
pub const kMultibandCompressorParam_EQ1 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_EQ1);
pub const kMultibandCompressorParam_EQ2 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_EQ2);
pub const kMultibandCompressorParam_EQ3 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_EQ3);
pub const kMultibandCompressorParam_EQ4 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_EQ4);
pub const kMultibandCompressorParam_CompressionAmount1 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_CompressionAmount1);
pub const kMultibandCompressorParam_CompressionAmount2 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_CompressionAmount2);
pub const kMultibandCompressorParam_CompressionAmount3 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_CompressionAmount3);
pub const kMultibandCompressorParam_CompressionAmount4 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_CompressionAmount4);
pub const kMultibandCompressorParam_InputAmplitude1 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_InputAmplitude1);
pub const kMultibandCompressorParam_InputAmplitude2 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_InputAmplitude2);
pub const kMultibandCompressorParam_InputAmplitude3 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_InputAmplitude3);
pub const kMultibandCompressorParam_InputAmplitude4 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_InputAmplitude4);
pub const kMultibandCompressorParam_OutputAmplitude1 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_OutputAmplitude1);
pub const kMultibandCompressorParam_OutputAmplitude2 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_OutputAmplitude2);
pub const kMultibandCompressorParam_OutputAmplitude3 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_OutputAmplitude3);
pub const kMultibandCompressorParam_OutputAmplitude4 = @enumToInt(enum_unnamed_370.kMultibandCompressorParam_OutputAmplitude4);
const enum_unnamed_370 = extern enum(c_int) {
    kMultibandCompressorParam_Pregain = 0,
    kMultibandCompressorParam_Postgain = 1,
    kMultibandCompressorParam_Crossover1 = 2,
    kMultibandCompressorParam_Crossover2 = 3,
    kMultibandCompressorParam_Crossover3 = 4,
    kMultibandCompressorParam_Threshold1 = 5,
    kMultibandCompressorParam_Threshold2 = 6,
    kMultibandCompressorParam_Threshold3 = 7,
    kMultibandCompressorParam_Threshold4 = 8,
    kMultibandCompressorParam_Headroom1 = 9,
    kMultibandCompressorParam_Headroom2 = 10,
    kMultibandCompressorParam_Headroom3 = 11,
    kMultibandCompressorParam_Headroom4 = 12,
    kMultibandCompressorParam_AttackTime = 13,
    kMultibandCompressorParam_ReleaseTime = 14,
    kMultibandCompressorParam_EQ1 = 15,
    kMultibandCompressorParam_EQ2 = 16,
    kMultibandCompressorParam_EQ3 = 17,
    kMultibandCompressorParam_EQ4 = 18,
    kMultibandCompressorParam_CompressionAmount1 = 1000,
    kMultibandCompressorParam_CompressionAmount2 = 2000,
    kMultibandCompressorParam_CompressionAmount3 = 3000,
    kMultibandCompressorParam_CompressionAmount4 = 4000,
    kMultibandCompressorParam_InputAmplitude1 = 5000,
    kMultibandCompressorParam_InputAmplitude2 = 6000,
    kMultibandCompressorParam_InputAmplitude3 = 7000,
    kMultibandCompressorParam_InputAmplitude4 = 8000,
    kMultibandCompressorParam_OutputAmplitude1 = 9000,
    kMultibandCompressorParam_OutputAmplitude2 = 10000,
    kMultibandCompressorParam_OutputAmplitude3 = 11000,
    kMultibandCompressorParam_OutputAmplitude4 = 12000,
    _,
};
pub const kMultibandFilter_LowFilterType = @enumToInt(enum_unnamed_371.kMultibandFilter_LowFilterType);
pub const kMultibandFilter_LowFrequency = @enumToInt(enum_unnamed_371.kMultibandFilter_LowFrequency);
pub const kMultibandFilter_LowGain = @enumToInt(enum_unnamed_371.kMultibandFilter_LowGain);
pub const kMultibandFilter_CenterFreq1 = @enumToInt(enum_unnamed_371.kMultibandFilter_CenterFreq1);
pub const kMultibandFilter_CenterGain1 = @enumToInt(enum_unnamed_371.kMultibandFilter_CenterGain1);
pub const kMultibandFilter_Bandwidth1 = @enumToInt(enum_unnamed_371.kMultibandFilter_Bandwidth1);
pub const kMultibandFilter_CenterFreq2 = @enumToInt(enum_unnamed_371.kMultibandFilter_CenterFreq2);
pub const kMultibandFilter_CenterGain2 = @enumToInt(enum_unnamed_371.kMultibandFilter_CenterGain2);
pub const kMultibandFilter_Bandwidth2 = @enumToInt(enum_unnamed_371.kMultibandFilter_Bandwidth2);
pub const kMultibandFilter_CenterFreq3 = @enumToInt(enum_unnamed_371.kMultibandFilter_CenterFreq3);
pub const kMultibandFilter_CenterGain3 = @enumToInt(enum_unnamed_371.kMultibandFilter_CenterGain3);
pub const kMultibandFilter_Bandwidth3 = @enumToInt(enum_unnamed_371.kMultibandFilter_Bandwidth3);
pub const kMultibandFilter_HighFilterType = @enumToInt(enum_unnamed_371.kMultibandFilter_HighFilterType);
pub const kMultibandFilter_HighFrequency = @enumToInt(enum_unnamed_371.kMultibandFilter_HighFrequency);
pub const kMultibandFilter_HighGain = @enumToInt(enum_unnamed_371.kMultibandFilter_HighGain);
const enum_unnamed_371 = extern enum(c_int) {
    kMultibandFilter_LowFilterType = 0,
    kMultibandFilter_LowFrequency = 1,
    kMultibandFilter_LowGain = 2,
    kMultibandFilter_CenterFreq1 = 3,
    kMultibandFilter_CenterGain1 = 4,
    kMultibandFilter_Bandwidth1 = 5,
    kMultibandFilter_CenterFreq2 = 6,
    kMultibandFilter_CenterGain2 = 7,
    kMultibandFilter_Bandwidth2 = 8,
    kMultibandFilter_CenterFreq3 = 9,
    kMultibandFilter_CenterGain3 = 10,
    kMultibandFilter_Bandwidth3 = 11,
    kMultibandFilter_HighFilterType = 12,
    kMultibandFilter_HighFrequency = 13,
    kMultibandFilter_HighGain = 14,
    _,
};
pub const kRogerBeepParam_InGateThreshold = @enumToInt(enum_unnamed_372.kRogerBeepParam_InGateThreshold);
pub const kRogerBeepParam_InGateThresholdTime = @enumToInt(enum_unnamed_372.kRogerBeepParam_InGateThresholdTime);
pub const kRogerBeepParam_OutGateThreshold = @enumToInt(enum_unnamed_372.kRogerBeepParam_OutGateThreshold);
pub const kRogerBeepParam_OutGateThresholdTime = @enumToInt(enum_unnamed_372.kRogerBeepParam_OutGateThresholdTime);
pub const kRogerBeepParam_Sensitivity = @enumToInt(enum_unnamed_372.kRogerBeepParam_Sensitivity);
pub const kRogerBeepParam_RogerType = @enumToInt(enum_unnamed_372.kRogerBeepParam_RogerType);
pub const kRogerBeepParam_RogerGain = @enumToInt(enum_unnamed_372.kRogerBeepParam_RogerGain);
const enum_unnamed_372 = extern enum(c_int) {
    kRogerBeepParam_InGateThreshold = 0,
    kRogerBeepParam_InGateThresholdTime = 1,
    kRogerBeepParam_OutGateThreshold = 2,
    kRogerBeepParam_OutGateThresholdTime = 3,
    kRogerBeepParam_Sensitivity = 4,
    kRogerBeepParam_RogerType = 5,
    kRogerBeepParam_RogerGain = 6,
    _,
};
pub const kStereoMixerParam_Volume = @enumToInt(enum_unnamed_373.kStereoMixerParam_Volume);
pub const kStereoMixerParam_Pan = @enumToInt(enum_unnamed_373.kStereoMixerParam_Pan);
pub const kStereoMixerParam_PreAveragePower = @enumToInt(enum_unnamed_373.kStereoMixerParam_PreAveragePower);
pub const kStereoMixerParam_PrePeakHoldLevel = @enumToInt(enum_unnamed_373.kStereoMixerParam_PrePeakHoldLevel);
pub const kStereoMixerParam_PostAveragePower = @enumToInt(enum_unnamed_373.kStereoMixerParam_PostAveragePower);
pub const kStereoMixerParam_PostPeakHoldLevel = @enumToInt(enum_unnamed_373.kStereoMixerParam_PostPeakHoldLevel);
const enum_unnamed_373 = extern enum(c_int) {
    kStereoMixerParam_Volume = 0,
    kStereoMixerParam_Pan = 1,
    kStereoMixerParam_PreAveragePower = 1000,
    kStereoMixerParam_PrePeakHoldLevel = 2000,
    kStereoMixerParam_PostAveragePower = 3000,
    kStereoMixerParam_PostPeakHoldLevel = 4000,
    _,
};
pub const kAUNetReceiveParam_Status = @enumToInt(enum_unnamed_374.kAUNetReceiveParam_Status);
pub const kAUNetReceiveParam_NumParameters = @enumToInt(enum_unnamed_374.kAUNetReceiveParam_NumParameters);
const enum_unnamed_374 = extern enum(c_int) {
    kAUNetReceiveParam_Status = 0,
    kAUNetReceiveParam_NumParameters = 1,
    _,
};
pub const kAUNetSendParam_Status = @enumToInt(enum_unnamed_375.kAUNetSendParam_Status);
pub const kAUNetSendParam_NumParameters = @enumToInt(enum_unnamed_375.kAUNetSendParam_NumParameters);
const enum_unnamed_375 = extern enum(c_int) {
    kAUNetSendParam_Status = 0,
    kAUNetSendParam_NumParameters = 1,
    _,
};
pub const kAUNetStatus_NotConnected = @enumToInt(enum_unnamed_376.kAUNetStatus_NotConnected);
pub const kAUNetStatus_Connected = @enumToInt(enum_unnamed_376.kAUNetStatus_Connected);
pub const kAUNetStatus_Overflow = @enumToInt(enum_unnamed_376.kAUNetStatus_Overflow);
pub const kAUNetStatus_Underflow = @enumToInt(enum_unnamed_376.kAUNetStatus_Underflow);
pub const kAUNetStatus_Connecting = @enumToInt(enum_unnamed_376.kAUNetStatus_Connecting);
pub const kAUNetStatus_Listening = @enumToInt(enum_unnamed_376.kAUNetStatus_Listening);
const enum_unnamed_376 = extern enum(c_int) {
    kAUNetStatus_NotConnected = 0,
    kAUNetStatus_Connected = 1,
    kAUNetStatus_Overflow = 2,
    kAUNetStatus_Underflow = 3,
    kAUNetStatus_Connecting = 4,
    kAUNetStatus_Listening = 5,
    _,
};
pub const kMusicDeviceParam_Tuning = @enumToInt(enum_unnamed_377.kMusicDeviceParam_Tuning);
pub const kMusicDeviceParam_Volume = @enumToInt(enum_unnamed_377.kMusicDeviceParam_Volume);
pub const kMusicDeviceParam_ReverbVolume = @enumToInt(enum_unnamed_377.kMusicDeviceParam_ReverbVolume);
const enum_unnamed_377 = extern enum(c_int) {
    kMusicDeviceParam_Tuning = 0,
    kMusicDeviceParam_Volume = 1,
    kMusicDeviceParam_ReverbVolume = 2,
    _,
};
pub const kRandomParam_BoundA = @enumToInt(enum_unnamed_378.kRandomParam_BoundA);
pub const kRandomParam_BoundB = @enumToInt(enum_unnamed_378.kRandomParam_BoundB);
pub const kRandomParam_Curve = @enumToInt(enum_unnamed_378.kRandomParam_Curve);
const enum_unnamed_378 = extern enum(c_int) {
    kRandomParam_BoundA = 0,
    kRandomParam_BoundB = 1,
    kRandomParam_Curve = 2,
    _,
};
pub const kReverb2Param_DryWetMix = @enumToInt(enum_unnamed_379.kReverb2Param_DryWetMix);
pub const kReverb2Param_Gain = @enumToInt(enum_unnamed_379.kReverb2Param_Gain);
pub const kReverb2Param_MinDelayTime = @enumToInt(enum_unnamed_379.kReverb2Param_MinDelayTime);
pub const kReverb2Param_MaxDelayTime = @enumToInt(enum_unnamed_379.kReverb2Param_MaxDelayTime);
pub const kReverb2Param_DecayTimeAt0Hz = @enumToInt(enum_unnamed_379.kReverb2Param_DecayTimeAt0Hz);
pub const kReverb2Param_DecayTimeAtNyquist = @enumToInt(enum_unnamed_379.kReverb2Param_DecayTimeAtNyquist);
pub const kReverb2Param_RandomizeReflections = @enumToInt(enum_unnamed_379.kReverb2Param_RandomizeReflections);
const enum_unnamed_379 = extern enum(c_int) {
    kReverb2Param_DryWetMix = 0,
    kReverb2Param_Gain = 1,
    kReverb2Param_MinDelayTime = 2,
    kReverb2Param_MaxDelayTime = 3,
    kReverb2Param_DecayTimeAt0Hz = 4,
    kReverb2Param_DecayTimeAtNyquist = 5,
    kReverb2Param_RandomizeReflections = 6,
    _,
};
pub const MusicDeviceInstrumentID = UInt32;
pub const struct_MusicDeviceStdNoteParams = extern struct {
    argCount: UInt32,
    mPitch: Float32,
    mVelocity: Float32,
};
pub const MusicDeviceStdNoteParams = struct_MusicDeviceStdNoteParams;
pub const struct_NoteParamsControlValue = extern struct {
    mID: AudioUnitParameterID,
    mValue: AudioUnitParameterValue,
};
pub const NoteParamsControlValue = struct_NoteParamsControlValue;
pub const struct_MusicDeviceNoteParams = extern struct {
    argCount: UInt32,
    mPitch: Float32,
    mVelocity: Float32,
    mControls: [1]NoteParamsControlValue,
};
pub const MusicDeviceNoteParams = struct_MusicDeviceNoteParams;
pub const kMusicNoteEvent_UseGroupInstrument = @enumToInt(enum_unnamed_380.kMusicNoteEvent_UseGroupInstrument);
pub const kMusicNoteEvent_Unused = @enumToInt(enum_unnamed_380.kMusicNoteEvent_Unused);
const enum_unnamed_380 = extern enum(c_int) {
    kMusicNoteEvent_UseGroupInstrument = 4294967295,
    kMusicNoteEvent_Unused = 4294967295,
    _,
};
pub const MusicDeviceGroupID = UInt32;
pub const NoteInstanceID = UInt32;
pub const MusicDeviceComponent = AudioComponentInstance;
pub extern fn MusicDeviceMIDIEvent(inUnit: MusicDeviceComponent, inStatus: UInt32, inData1: UInt32, inData2: UInt32, inOffsetSampleFrame: UInt32) OSStatus;
pub extern fn MusicDeviceSysEx(inUnit: MusicDeviceComponent, inData: [*c]const UInt8, inLength: UInt32) OSStatus;
pub extern fn MusicDeviceStartNote(inUnit: MusicDeviceComponent, inInstrument: MusicDeviceInstrumentID, inGroupID: MusicDeviceGroupID, outNoteInstanceID: [*c]NoteInstanceID, inOffsetSampleFrame: UInt32, inParams: [*c]const MusicDeviceNoteParams) OSStatus;
pub extern fn MusicDeviceStopNote(inUnit: MusicDeviceComponent, inGroupID: MusicDeviceGroupID, inNoteInstanceID: NoteInstanceID, inOffsetSampleFrame: UInt32) OSStatus;
pub const kMusicDeviceRange = @enumToInt(enum_unnamed_381.kMusicDeviceRange);
pub const kMusicDeviceMIDIEventSelect = @enumToInt(enum_unnamed_381.kMusicDeviceMIDIEventSelect);
pub const kMusicDeviceSysExSelect = @enumToInt(enum_unnamed_381.kMusicDeviceSysExSelect);
pub const kMusicDevicePrepareInstrumentSelect = @enumToInt(enum_unnamed_381.kMusicDevicePrepareInstrumentSelect);
pub const kMusicDeviceReleaseInstrumentSelect = @enumToInt(enum_unnamed_381.kMusicDeviceReleaseInstrumentSelect);
pub const kMusicDeviceStartNoteSelect = @enumToInt(enum_unnamed_381.kMusicDeviceStartNoteSelect);
pub const kMusicDeviceStopNoteSelect = @enumToInt(enum_unnamed_381.kMusicDeviceStopNoteSelect);
const enum_unnamed_381 = extern enum(c_int) {
    kMusicDeviceRange = 256,
    kMusicDeviceMIDIEventSelect = 257,
    kMusicDeviceSysExSelect = 258,
    kMusicDevicePrepareInstrumentSelect = 259,
    kMusicDeviceReleaseInstrumentSelect = 260,
    kMusicDeviceStartNoteSelect = 261,
    kMusicDeviceStopNoteSelect = 262,
    _,
};
pub const MusicDeviceMIDIEventProc = ?fn (?*c_void, UInt32, UInt32, UInt32, UInt32) callconv(.C) OSStatus;
pub const MusicDeviceSysExProc = ?fn (?*c_void, [*c]const UInt8, UInt32) callconv(.C) OSStatus;
pub const MusicDeviceStartNoteProc = ?fn (?*c_void, MusicDeviceInstrumentID, MusicDeviceGroupID, [*c]NoteInstanceID, UInt32, [*c]const MusicDeviceNoteParams) callconv(.C) OSStatus;
pub const MusicDeviceStopNoteProc = ?fn (?*c_void, MusicDeviceGroupID, NoteInstanceID, UInt32) callconv(.C) OSStatus;
pub extern fn MusicDevicePrepareInstrument(inUnit: MusicDeviceComponent, inInstrument: MusicDeviceInstrumentID) OSStatus;
pub extern fn MusicDeviceReleaseInstrument(inUnit: MusicDeviceComponent, inInstrument: MusicDeviceInstrumentID) OSStatus;
pub const struct_OpaqueAUGraph = @OpaqueType();
pub const AUGraph = ?*struct_OpaqueAUGraph;
pub const AUNode = SInt32;
pub const kAUGraphErr_NodeNotFound = @enumToInt(enum_unnamed_382.kAUGraphErr_NodeNotFound);
pub const kAUGraphErr_InvalidConnection = @enumToInt(enum_unnamed_382.kAUGraphErr_InvalidConnection);
pub const kAUGraphErr_OutputNodeErr = @enumToInt(enum_unnamed_382.kAUGraphErr_OutputNodeErr);
pub const kAUGraphErr_CannotDoInCurrentContext = @enumToInt(enum_unnamed_382.kAUGraphErr_CannotDoInCurrentContext);
pub const kAUGraphErr_InvalidAudioUnit = @enumToInt(enum_unnamed_382.kAUGraphErr_InvalidAudioUnit);
const enum_unnamed_382 = extern enum(c_int) {
    kAUGraphErr_NodeNotFound = -10860,
    kAUGraphErr_InvalidConnection = -10861,
    kAUGraphErr_OutputNodeErr = -10862,
    kAUGraphErr_CannotDoInCurrentContext = -10863,
    kAUGraphErr_InvalidAudioUnit = -10864,
    _,
};
pub extern fn NewAUGraph(outGraph: [*c]AUGraph) OSStatus;
pub extern fn DisposeAUGraph(inGraph: AUGraph) OSStatus;
pub extern fn AUGraphAddNode(inGraph: AUGraph, inDescription: [*c]const AudioComponentDescription, outNode: [*c]AUNode) OSStatus;
pub extern fn AUGraphRemoveNode(inGraph: AUGraph, inNode: AUNode) OSStatus;
pub extern fn AUGraphGetNodeCount(inGraph: AUGraph, outNumberOfNodes: [*c]UInt32) OSStatus;
pub extern fn AUGraphGetIndNode(inGraph: AUGraph, inIndex: UInt32, outNode: [*c]AUNode) OSStatus;
pub extern fn AUGraphNodeInfo(inGraph: AUGraph, inNode: AUNode, outDescription: [*c]AudioComponentDescription, outAudioUnit: [*c]AudioUnit) OSStatus;
pub extern fn AUGraphNewNodeSubGraph(inGraph: AUGraph, outNode: [*c]AUNode) OSStatus;
pub extern fn AUGraphGetNodeInfoSubGraph(inGraph: AUGraph, inNode: AUNode, outSubGraph: [*c]AUGraph) OSStatus;
pub extern fn AUGraphIsNodeSubGraph(inGraph: AUGraph, inNode: AUNode, outFlag: [*c]Boolean) OSStatus;
pub const kAUNodeInteraction_Connection = @enumToInt(enum_unnamed_383.kAUNodeInteraction_Connection);
pub const kAUNodeInteraction_InputCallback = @enumToInt(enum_unnamed_383.kAUNodeInteraction_InputCallback);
const enum_unnamed_383 = extern enum(c_int) {
    kAUNodeInteraction_Connection = 1,
    kAUNodeInteraction_InputCallback = 2,
    _,
};
pub const struct_AudioUnitNodeConnection = extern struct {
    sourceNode: AUNode,
    sourceOutputNumber: UInt32,
    destNode: AUNode,
    destInputNumber: UInt32,
};
pub const AudioUnitNodeConnection = struct_AudioUnitNodeConnection;
pub const AUNodeConnection = struct_AudioUnitNodeConnection;
pub const struct_AUNodeRenderCallback = extern struct {
    destNode: AUNode,
    destInputNumber: AudioUnitElement,
    cback: AURenderCallbackStruct,
};
pub const AUNodeRenderCallback = struct_AUNodeRenderCallback;
const union_unnamed_384 = extern union {
    connection: AUNodeConnection,
    inputCallback: AUNodeRenderCallback,
};
pub const struct_AUNodeInteraction = extern struct {
    nodeInteractionType: UInt32,
    nodeInteraction: union_unnamed_384,
};
pub const AUNodeInteraction = struct_AUNodeInteraction;
pub extern fn AUGraphConnectNodeInput(inGraph: AUGraph, inSourceNode: AUNode, inSourceOutputNumber: UInt32, inDestNode: AUNode, inDestInputNumber: UInt32) OSStatus;
pub extern fn AUGraphSetNodeInputCallback(inGraph: AUGraph, inDestNode: AUNode, inDestInputNumber: UInt32, inInputCallback: [*c]const AURenderCallbackStruct) OSStatus;
pub extern fn AUGraphDisconnectNodeInput(inGraph: AUGraph, inDestNode: AUNode, inDestInputNumber: UInt32) OSStatus;
pub extern fn AUGraphClearConnections(inGraph: AUGraph) OSStatus;
pub extern fn AUGraphGetNumberOfInteractions(inGraph: AUGraph, outNumInteractions: [*c]UInt32) OSStatus;
pub extern fn AUGraphGetInteractionInfo(inGraph: AUGraph, inInteractionIndex: UInt32, outInteraction: [*c]AUNodeInteraction) OSStatus;
pub extern fn AUGraphCountNodeInteractions(inGraph: AUGraph, inNode: AUNode, outNumInteractions: [*c]UInt32) OSStatus;
pub extern fn AUGraphGetNodeInteractions(inGraph: AUGraph, inNode: AUNode, ioNumInteractions: [*c]UInt32, outInteractions: [*c]AUNodeInteraction) OSStatus;
pub extern fn AUGraphUpdate(inGraph: AUGraph, outIsUpdated: [*c]Boolean) OSStatus;
pub extern fn AUGraphOpen(inGraph: AUGraph) OSStatus;
pub extern fn AUGraphClose(inGraph: AUGraph) OSStatus;
pub extern fn AUGraphInitialize(inGraph: AUGraph) OSStatus;
pub extern fn AUGraphUninitialize(inGraph: AUGraph) OSStatus;
pub extern fn AUGraphStart(inGraph: AUGraph) OSStatus;
pub extern fn AUGraphStop(inGraph: AUGraph) OSStatus;
pub extern fn AUGraphIsOpen(inGraph: AUGraph, outIsOpen: [*c]Boolean) OSStatus;
pub extern fn AUGraphIsInitialized(inGraph: AUGraph, outIsInitialized: [*c]Boolean) OSStatus;
pub extern fn AUGraphIsRunning(inGraph: AUGraph, outIsRunning: [*c]Boolean) OSStatus;
pub extern fn AUGraphGetCPULoad(inGraph: AUGraph, outAverageCPULoad: [*c]Float32) OSStatus;
pub extern fn AUGraphGetMaxCPULoad(inGraph: AUGraph, outMaxLoad: [*c]Float32) OSStatus;
pub extern fn AUGraphAddRenderNotify(inGraph: AUGraph, inCallback: AURenderCallback, inRefCon: ?*c_void) OSStatus;
pub extern fn AUGraphRemoveRenderNotify(inGraph: AUGraph, inCallback: AURenderCallback, inRefCon: ?*c_void) OSStatus;
pub const struct_ComponentDescription = @OpaqueType();
pub extern fn AUGraphNewNode(inGraph: AUGraph, inDescription: ?*const struct_ComponentDescription, inClassDataSize: UInt32, inClassData: ?*const c_void, outNode: [*c]AUNode) OSStatus;
pub extern fn AUGraphGetNodeInfo(inGraph: AUGraph, inNode: AUNode, outDescription: ?*struct_ComponentDescription, outClassDataSize: [*c]UInt32, outClassData: [*c]?*c_void, outAudioUnit: [*c]AudioUnit) OSStatus;
pub extern fn AUGraphGetNumberOfConnections(inGraph: AUGraph, outNumConnections: [*c]UInt32) OSStatus;
pub extern fn AUGraphGetConnectionInfo(inGraph: AUGraph, inConnectionIndex: UInt32, outSourceNode: [*c]AUNode, outSourceOutputNumber: [*c]UInt32, outDestNode: [*c]AUNode, outDestInputNumber: [*c]UInt32) OSStatus;
pub extern fn AUGraphCountNodeConnections(inGraph: AUGraph, inNode: AUNode, outNumConnections: [*c]UInt32) OSStatus;
pub extern fn AUGraphGetNodeConnections(inGraph: AUGraph, inNode: AUNode, outConnections: [*c]AudioUnitNodeConnection, ioNumConnections: [*c]UInt32) OSStatus;
pub const struct_OpaqueAudioConverter = @OpaqueType();
pub const AudioConverterRef = ?*struct_OpaqueAudioConverter;
pub const AudioConverterPropertyID = UInt32;
pub const kAudioConverterPropertyMinimumInputBufferSize = @enumToInt(enum_unnamed_385.kAudioConverterPropertyMinimumInputBufferSize);
pub const kAudioConverterPropertyMinimumOutputBufferSize = @enumToInt(enum_unnamed_385.kAudioConverterPropertyMinimumOutputBufferSize);
pub const kAudioConverterPropertyMaximumInputPacketSize = @enumToInt(enum_unnamed_385.kAudioConverterPropertyMaximumInputPacketSize);
pub const kAudioConverterPropertyMaximumOutputPacketSize = @enumToInt(enum_unnamed_385.kAudioConverterPropertyMaximumOutputPacketSize);
pub const kAudioConverterPropertyCalculateInputBufferSize = @enumToInt(enum_unnamed_385.kAudioConverterPropertyCalculateInputBufferSize);
pub const kAudioConverterPropertyCalculateOutputBufferSize = @enumToInt(enum_unnamed_385.kAudioConverterPropertyCalculateOutputBufferSize);
pub const kAudioConverterPropertyInputCodecParameters = @enumToInt(enum_unnamed_385.kAudioConverterPropertyInputCodecParameters);
pub const kAudioConverterPropertyOutputCodecParameters = @enumToInt(enum_unnamed_385.kAudioConverterPropertyOutputCodecParameters);
pub const kAudioConverterSampleRateConverterComplexity = @enumToInt(enum_unnamed_385.kAudioConverterSampleRateConverterComplexity);
pub const kAudioConverterSampleRateConverterQuality = @enumToInt(enum_unnamed_385.kAudioConverterSampleRateConverterQuality);
pub const kAudioConverterSampleRateConverterInitialPhase = @enumToInt(enum_unnamed_385.kAudioConverterSampleRateConverterInitialPhase);
pub const kAudioConverterCodecQuality = @enumToInt(enum_unnamed_385.kAudioConverterCodecQuality);
pub const kAudioConverterPrimeMethod = @enumToInt(enum_unnamed_385.kAudioConverterPrimeMethod);
pub const kAudioConverterPrimeInfo = @enumToInt(enum_unnamed_385.kAudioConverterPrimeInfo);
pub const kAudioConverterChannelMap = @enumToInt(enum_unnamed_385.kAudioConverterChannelMap);
pub const kAudioConverterDecompressionMagicCookie = @enumToInt(enum_unnamed_385.kAudioConverterDecompressionMagicCookie);
pub const kAudioConverterCompressionMagicCookie = @enumToInt(enum_unnamed_385.kAudioConverterCompressionMagicCookie);
pub const kAudioConverterEncodeBitRate = @enumToInt(enum_unnamed_385.kAudioConverterEncodeBitRate);
pub const kAudioConverterEncodeAdjustableSampleRate = @enumToInt(enum_unnamed_385.kAudioConverterEncodeAdjustableSampleRate);
pub const kAudioConverterInputChannelLayout = @enumToInt(enum_unnamed_385.kAudioConverterInputChannelLayout);
pub const kAudioConverterOutputChannelLayout = @enumToInt(enum_unnamed_385.kAudioConverterOutputChannelLayout);
pub const kAudioConverterApplicableEncodeBitRates = @enumToInt(enum_unnamed_385.kAudioConverterApplicableEncodeBitRates);
pub const kAudioConverterAvailableEncodeBitRates = @enumToInt(enum_unnamed_385.kAudioConverterAvailableEncodeBitRates);
pub const kAudioConverterApplicableEncodeSampleRates = @enumToInt(enum_unnamed_385.kAudioConverterApplicableEncodeSampleRates);
pub const kAudioConverterAvailableEncodeSampleRates = @enumToInt(enum_unnamed_385.kAudioConverterAvailableEncodeSampleRates);
pub const kAudioConverterAvailableEncodeChannelLayoutTags = @enumToInt(enum_unnamed_385.kAudioConverterAvailableEncodeChannelLayoutTags);
pub const kAudioConverterCurrentOutputStreamDescription = @enumToInt(enum_unnamed_385.kAudioConverterCurrentOutputStreamDescription);
pub const kAudioConverterCurrentInputStreamDescription = @enumToInt(enum_unnamed_385.kAudioConverterCurrentInputStreamDescription);
pub const kAudioConverterPropertySettings = @enumToInt(enum_unnamed_385.kAudioConverterPropertySettings);
pub const kAudioConverterPropertyBitDepthHint = @enumToInt(enum_unnamed_385.kAudioConverterPropertyBitDepthHint);
pub const kAudioConverterPropertyFormatList = @enumToInt(enum_unnamed_385.kAudioConverterPropertyFormatList);
const enum_unnamed_385 = extern enum(c_int) {
    kAudioConverterPropertyMinimumInputBufferSize = 1835623027,
    kAudioConverterPropertyMinimumOutputBufferSize = 1836016243,
    kAudioConverterPropertyMaximumInputPacketSize = 2020175987,
    kAudioConverterPropertyMaximumOutputPacketSize = 2020569203,
    kAudioConverterPropertyCalculateInputBufferSize = 1667850867,
    kAudioConverterPropertyCalculateOutputBufferSize = 1668244083,
    kAudioConverterPropertyInputCodecParameters = 1768121456,
    kAudioConverterPropertyOutputCodecParameters = 1868784752,
    kAudioConverterSampleRateConverterComplexity = 1936876385,
    kAudioConverterSampleRateConverterQuality = 1936876401,
    kAudioConverterSampleRateConverterInitialPhase = 1936876400,
    kAudioConverterCodecQuality = 1667527029,
    kAudioConverterPrimeMethod = 1886547309,
    kAudioConverterPrimeInfo = 1886546285,
    kAudioConverterChannelMap = 1667788144,
    kAudioConverterDecompressionMagicCookie = 1684891491,
    kAudioConverterCompressionMagicCookie = 1668114275,
    kAudioConverterEncodeBitRate = 1651663220,
    kAudioConverterEncodeAdjustableSampleRate = 1634366322,
    kAudioConverterInputChannelLayout = 1768123424,
    kAudioConverterOutputChannelLayout = 1868786720,
    kAudioConverterApplicableEncodeBitRates = 1634034290,
    kAudioConverterAvailableEncodeBitRates = 1986355826,
    kAudioConverterApplicableEncodeSampleRates = 1634038642,
    kAudioConverterAvailableEncodeSampleRates = 1986360178,
    kAudioConverterAvailableEncodeChannelLayoutTags = 1634034540,
    kAudioConverterCurrentOutputStreamDescription = 1633906532,
    kAudioConverterCurrentInputStreamDescription = 1633904996,
    kAudioConverterPropertySettings = 1633906803,
    kAudioConverterPropertyBitDepthHint = 1633903204,
    kAudioConverterPropertyFormatList = 1718383476,
    _,
};
pub const kAudioConverterPropertyDithering = @enumToInt(enum_unnamed_386.kAudioConverterPropertyDithering);
pub const kAudioConverterPropertyDitherBitDepth = @enumToInt(enum_unnamed_386.kAudioConverterPropertyDitherBitDepth);
const enum_unnamed_386 = extern enum(c_int) {
    kAudioConverterPropertyDithering = 1684632680,
    kAudioConverterPropertyDitherBitDepth = 1684171124,
    _,
};
pub const kDitherAlgorithm_TPDF = @enumToInt(enum_unnamed_387.kDitherAlgorithm_TPDF);
pub const kDitherAlgorithm_NoiseShaping = @enumToInt(enum_unnamed_387.kDitherAlgorithm_NoiseShaping);
const enum_unnamed_387 = extern enum(c_int) {
    kDitherAlgorithm_TPDF = 1,
    kDitherAlgorithm_NoiseShaping = 2,
    _,
};
pub const kAudioConverterQuality_Max = @enumToInt(enum_unnamed_388.kAudioConverterQuality_Max);
pub const kAudioConverterQuality_High = @enumToInt(enum_unnamed_388.kAudioConverterQuality_High);
pub const kAudioConverterQuality_Medium = @enumToInt(enum_unnamed_388.kAudioConverterQuality_Medium);
pub const kAudioConverterQuality_Low = @enumToInt(enum_unnamed_388.kAudioConverterQuality_Low);
pub const kAudioConverterQuality_Min = @enumToInt(enum_unnamed_388.kAudioConverterQuality_Min);
const enum_unnamed_388 = extern enum(c_int) {
    kAudioConverterQuality_Max = 127,
    kAudioConverterQuality_High = 96,
    kAudioConverterQuality_Medium = 64,
    kAudioConverterQuality_Low = 32,
    kAudioConverterQuality_Min = 0,
    _,
};
pub const kAudioConverterSampleRateConverterComplexity_Linear = @enumToInt(enum_unnamed_389.kAudioConverterSampleRateConverterComplexity_Linear);
pub const kAudioConverterSampleRateConverterComplexity_Normal = @enumToInt(enum_unnamed_389.kAudioConverterSampleRateConverterComplexity_Normal);
pub const kAudioConverterSampleRateConverterComplexity_Mastering = @enumToInt(enum_unnamed_389.kAudioConverterSampleRateConverterComplexity_Mastering);
pub const kAudioConverterSampleRateConverterComplexity_MinimumPhase = @enumToInt(enum_unnamed_389.kAudioConverterSampleRateConverterComplexity_MinimumPhase);
const enum_unnamed_389 = extern enum(c_int) {
    kAudioConverterSampleRateConverterComplexity_Linear = 1818848869,
    kAudioConverterSampleRateConverterComplexity_Normal = 1852797549,
    kAudioConverterSampleRateConverterComplexity_Mastering = 1650553971,
    kAudioConverterSampleRateConverterComplexity_MinimumPhase = 1835626096,
    _,
};
pub const kConverterPrimeMethod_Pre = @enumToInt(enum_unnamed_390.kConverterPrimeMethod_Pre);
pub const kConverterPrimeMethod_Normal = @enumToInt(enum_unnamed_390.kConverterPrimeMethod_Normal);
pub const kConverterPrimeMethod_None = @enumToInt(enum_unnamed_390.kConverterPrimeMethod_None);
const enum_unnamed_390 = extern enum(c_int) {
    kConverterPrimeMethod_Pre = 0,
    kConverterPrimeMethod_Normal = 1,
    kConverterPrimeMethod_None = 2,
    _,
};
pub const struct_AudioConverterPrimeInfo = extern struct {
    leadingFrames: UInt32,
    trailingFrames: UInt32,
};
pub const AudioConverterPrimeInfo = struct_AudioConverterPrimeInfo;
pub const kAudioConverterErr_FormatNotSupported = @enumToInt(enum_unnamed_391.kAudioConverterErr_FormatNotSupported);
pub const kAudioConverterErr_OperationNotSupported = @enumToInt(enum_unnamed_391.kAudioConverterErr_OperationNotSupported);
pub const kAudioConverterErr_PropertyNotSupported = @enumToInt(enum_unnamed_391.kAudioConverterErr_PropertyNotSupported);
pub const kAudioConverterErr_InvalidInputSize = @enumToInt(enum_unnamed_391.kAudioConverterErr_InvalidInputSize);
pub const kAudioConverterErr_InvalidOutputSize = @enumToInt(enum_unnamed_391.kAudioConverterErr_InvalidOutputSize);
pub const kAudioConverterErr_UnspecifiedError = @enumToInt(enum_unnamed_391.kAudioConverterErr_UnspecifiedError);
pub const kAudioConverterErr_BadPropertySizeError = @enumToInt(enum_unnamed_391.kAudioConverterErr_BadPropertySizeError);
pub const kAudioConverterErr_RequiresPacketDescriptionsError = @enumToInt(enum_unnamed_391.kAudioConverterErr_RequiresPacketDescriptionsError);
pub const kAudioConverterErr_InputSampleRateOutOfRange = @enumToInt(enum_unnamed_391.kAudioConverterErr_InputSampleRateOutOfRange);
pub const kAudioConverterErr_OutputSampleRateOutOfRange = @enumToInt(enum_unnamed_391.kAudioConverterErr_OutputSampleRateOutOfRange);
const enum_unnamed_391 = extern enum(c_int) {
    kAudioConverterErr_FormatNotSupported = 1718449215,
    kAudioConverterErr_OperationNotSupported = 1869627199,
    kAudioConverterErr_PropertyNotSupported = 1886547824,
    kAudioConverterErr_InvalidInputSize = 1768846202,
    kAudioConverterErr_InvalidOutputSize = 1869902714,
    kAudioConverterErr_UnspecifiedError = 2003329396,
    kAudioConverterErr_BadPropertySizeError = 561211770,
    kAudioConverterErr_RequiresPacketDescriptionsError = 561015652,
    kAudioConverterErr_InputSampleRateOutOfRange = 560558962,
    kAudioConverterErr_OutputSampleRateOutOfRange = 560952178,
    _,
};
pub extern fn AudioConverterNew(inSourceFormat: [*c]const AudioStreamBasicDescription, inDestinationFormat: [*c]const AudioStreamBasicDescription, outAudioConverter: [*c]AudioConverterRef) OSStatus;
pub extern fn AudioConverterNewSpecific(inSourceFormat: [*c]const AudioStreamBasicDescription, inDestinationFormat: [*c]const AudioStreamBasicDescription, inNumberClassDescriptions: UInt32, inClassDescriptions: [*c]const AudioClassDescription, outAudioConverter: [*c]AudioConverterRef) OSStatus;
pub extern fn AudioConverterDispose(inAudioConverter: AudioConverterRef) OSStatus;
pub extern fn AudioConverterReset(inAudioConverter: AudioConverterRef) OSStatus;
pub extern fn AudioConverterGetPropertyInfo(inAudioConverter: AudioConverterRef, inPropertyID: AudioConverterPropertyID, outSize: [*c]UInt32, outWritable: [*c]Boolean) OSStatus;
pub extern fn AudioConverterGetProperty(inAudioConverter: AudioConverterRef, inPropertyID: AudioConverterPropertyID, ioPropertyDataSize: [*c]UInt32, outPropertyData: ?*c_void) OSStatus;
pub extern fn AudioConverterSetProperty(inAudioConverter: AudioConverterRef, inPropertyID: AudioConverterPropertyID, inPropertyDataSize: UInt32, inPropertyData: ?*const c_void) OSStatus;
pub extern fn AudioConverterConvertBuffer(inAudioConverter: AudioConverterRef, inInputDataSize: UInt32, inInputData: ?*const c_void, ioOutputDataSize: [*c]UInt32, outOutputData: ?*c_void) OSStatus;
pub const AudioConverterComplexInputDataProc = ?fn (AudioConverterRef, [*c]UInt32, [*c]AudioBufferList, [*c][*c]AudioStreamPacketDescription, ?*c_void) callconv(.C) OSStatus;
pub extern fn AudioConverterFillComplexBuffer(inAudioConverter: AudioConverterRef, inInputDataProc: AudioConverterComplexInputDataProc, inInputDataProcUserData: ?*c_void, ioOutputDataPacketSize: [*c]UInt32, outOutputData: [*c]AudioBufferList, outPacketDescription: [*c]AudioStreamPacketDescription) OSStatus;
pub extern fn AudioConverterConvertComplexBuffer(inAudioConverter: AudioConverterRef, inNumberPCMFrames: UInt32, inInputData: [*c]const AudioBufferList, outOutputData: [*c]AudioBufferList) OSStatus;
pub const kAudioConverterPropertyMaximumInputBufferSize = @enumToInt(enum_unnamed_392.kAudioConverterPropertyMaximumInputBufferSize);
pub const kAudioConverterSampleRateConverterAlgorithm = @enumToInt(enum_unnamed_392.kAudioConverterSampleRateConverterAlgorithm);
const enum_unnamed_392 = extern enum(c_int) {
    kAudioConverterPropertyMaximumInputBufferSize = 2020172403,
    kAudioConverterSampleRateConverterAlgorithm = 1936876393,
    _,
};
pub const AudioConverterInputDataProc = ?fn (AudioConverterRef, [*c]UInt32, [*c]?*c_void, ?*c_void) callconv(.C) OSStatus;
pub extern fn AudioConverterFillBuffer(inAudioConverter: AudioConverterRef, inInputDataProc: AudioConverterInputDataProc, inInputDataProcUserData: ?*c_void, ioOutputDataSize: [*c]UInt32, outOutputData: ?*c_void) OSStatus;
pub const AudioFileTypeID = UInt32;
pub const kAudioFileAIFFType = @enumToInt(enum_unnamed_393.kAudioFileAIFFType);
pub const kAudioFileAIFCType = @enumToInt(enum_unnamed_393.kAudioFileAIFCType);
pub const kAudioFileWAVEType = @enumToInt(enum_unnamed_393.kAudioFileWAVEType);
pub const kAudioFileRF64Type = @enumToInt(enum_unnamed_393.kAudioFileRF64Type);
pub const kAudioFileSoundDesigner2Type = @enumToInt(enum_unnamed_393.kAudioFileSoundDesigner2Type);
pub const kAudioFileNextType = @enumToInt(enum_unnamed_393.kAudioFileNextType);
pub const kAudioFileMP3Type = @enumToInt(enum_unnamed_393.kAudioFileMP3Type);
pub const kAudioFileMP2Type = @enumToInt(enum_unnamed_393.kAudioFileMP2Type);
pub const kAudioFileMP1Type = @enumToInt(enum_unnamed_393.kAudioFileMP1Type);
pub const kAudioFileAC3Type = @enumToInt(enum_unnamed_393.kAudioFileAC3Type);
pub const kAudioFileAAC_ADTSType = @enumToInt(enum_unnamed_393.kAudioFileAAC_ADTSType);
pub const kAudioFileMPEG4Type = @enumToInt(enum_unnamed_393.kAudioFileMPEG4Type);
pub const kAudioFileM4AType = @enumToInt(enum_unnamed_393.kAudioFileM4AType);
pub const kAudioFileM4BType = @enumToInt(enum_unnamed_393.kAudioFileM4BType);
pub const kAudioFileCAFType = @enumToInt(enum_unnamed_393.kAudioFileCAFType);
pub const kAudioFile3GPType = @enumToInt(enum_unnamed_393.kAudioFile3GPType);
pub const kAudioFile3GP2Type = @enumToInt(enum_unnamed_393.kAudioFile3GP2Type);
pub const kAudioFileAMRType = @enumToInt(enum_unnamed_393.kAudioFileAMRType);
pub const kAudioFileFLACType = @enumToInt(enum_unnamed_393.kAudioFileFLACType);
pub const kAudioFileLATMInLOASType = @enumToInt(enum_unnamed_393.kAudioFileLATMInLOASType);
const enum_unnamed_393 = extern enum(c_int) {
    kAudioFileAIFFType = 1095321158,
    kAudioFileAIFCType = 1095321155,
    kAudioFileWAVEType = 1463899717,
    kAudioFileRF64Type = 1380333108,
    kAudioFileSoundDesigner2Type = 1399075430,
    kAudioFileNextType = 1315264596,
    kAudioFileMP3Type = 1297106739,
    kAudioFileMP2Type = 1297106738,
    kAudioFileMP1Type = 1297106737,
    kAudioFileAC3Type = 1633889587,
    kAudioFileAAC_ADTSType = 1633973363,
    kAudioFileMPEG4Type = 1836069990,
    kAudioFileM4AType = 1832149350,
    kAudioFileM4BType = 1832149606,
    kAudioFileCAFType = 1667327590,
    kAudioFile3GPType = 862417008,
    kAudioFile3GP2Type = 862416946,
    kAudioFileAMRType = 1634562662,
    kAudioFileFLACType = 1718378851,
    kAudioFileLATMInLOASType = 1819238771,
    _,
};
pub const kAudioFileUnspecifiedError = @enumToInt(enum_unnamed_394.kAudioFileUnspecifiedError);
pub const kAudioFileUnsupportedFileTypeError = @enumToInt(enum_unnamed_394.kAudioFileUnsupportedFileTypeError);
pub const kAudioFileUnsupportedDataFormatError = @enumToInt(enum_unnamed_394.kAudioFileUnsupportedDataFormatError);
pub const kAudioFileUnsupportedPropertyError = @enumToInt(enum_unnamed_394.kAudioFileUnsupportedPropertyError);
pub const kAudioFileBadPropertySizeError = @enumToInt(enum_unnamed_394.kAudioFileBadPropertySizeError);
pub const kAudioFilePermissionsError = @enumToInt(enum_unnamed_394.kAudioFilePermissionsError);
pub const kAudioFileNotOptimizedError = @enumToInt(enum_unnamed_394.kAudioFileNotOptimizedError);
pub const kAudioFileInvalidChunkError = @enumToInt(enum_unnamed_394.kAudioFileInvalidChunkError);
pub const kAudioFileDoesNotAllow64BitDataSizeError = @enumToInt(enum_unnamed_394.kAudioFileDoesNotAllow64BitDataSizeError);
pub const kAudioFileInvalidPacketOffsetError = @enumToInt(enum_unnamed_394.kAudioFileInvalidPacketOffsetError);
pub const kAudioFileInvalidPacketDependencyError = @enumToInt(enum_unnamed_394.kAudioFileInvalidPacketDependencyError);
pub const kAudioFileInvalidFileError = @enumToInt(enum_unnamed_394.kAudioFileInvalidFileError);
pub const kAudioFileOperationNotSupportedError = @enumToInt(enum_unnamed_394.kAudioFileOperationNotSupportedError);
pub const kAudioFileNotOpenError = @enumToInt(enum_unnamed_394.kAudioFileNotOpenError);
pub const kAudioFileEndOfFileError = @enumToInt(enum_unnamed_394.kAudioFileEndOfFileError);
pub const kAudioFilePositionError = @enumToInt(enum_unnamed_394.kAudioFilePositionError);
pub const kAudioFileFileNotFoundError = @enumToInt(enum_unnamed_394.kAudioFileFileNotFoundError);
const enum_unnamed_394 = extern enum(c_int) {
    kAudioFileUnspecifiedError = 2003334207,
    kAudioFileUnsupportedFileTypeError = 1954115647,
    kAudioFileUnsupportedDataFormatError = 1718449215,
    kAudioFileUnsupportedPropertyError = 1886681407,
    kAudioFileBadPropertySizeError = 561211770,
    kAudioFilePermissionsError = 1886547263,
    kAudioFileNotOptimizedError = 1869640813,
    kAudioFileInvalidChunkError = 1667787583,
    kAudioFileDoesNotAllow64BitDataSizeError = 1868981823,
    kAudioFileInvalidPacketOffsetError = 1885563711,
    kAudioFileInvalidPacketDependencyError = 1684369471,
    kAudioFileInvalidFileError = 1685348671,
    kAudioFileOperationNotSupportedError = 1869627199,
    kAudioFileNotOpenError = -38,
    kAudioFileEndOfFileError = -39,
    kAudioFilePositionError = -40,
    kAudioFileFileNotFoundError = -43,
    _,
};
pub const AudioFileFlags = UInt32;
pub const kAudioFileFlags_EraseFile = @enumToInt(enum_unnamed_395.kAudioFileFlags_EraseFile);
pub const kAudioFileFlags_DontPageAlignAudioData = @enumToInt(enum_unnamed_395.kAudioFileFlags_DontPageAlignAudioData);
const enum_unnamed_395 = extern enum(c_int) {
    kAudioFileFlags_EraseFile = 1,
    kAudioFileFlags_DontPageAlignAudioData = 2,
    _,
};
pub const AudioFilePermissions = SInt8;
pub const kAudioFileReadPermission = @enumToInt(enum_unnamed_396.kAudioFileReadPermission);
pub const kAudioFileWritePermission = @enumToInt(enum_unnamed_396.kAudioFileWritePermission);
pub const kAudioFileReadWritePermission = @enumToInt(enum_unnamed_396.kAudioFileReadWritePermission);
const enum_unnamed_396 = extern enum(c_int) {
    kAudioFileReadPermission = 1,
    kAudioFileWritePermission = 2,
    kAudioFileReadWritePermission = 3,
    _,
};
pub const AudioFileID = ?*struct_OpaqueAudioFileID;
pub const AudioFilePropertyID = UInt32;
pub const kAudioFileLoopDirection_NoLooping = @enumToInt(enum_unnamed_397.kAudioFileLoopDirection_NoLooping);
pub const kAudioFileLoopDirection_Forward = @enumToInt(enum_unnamed_397.kAudioFileLoopDirection_Forward);
pub const kAudioFileLoopDirection_ForwardAndBackward = @enumToInt(enum_unnamed_397.kAudioFileLoopDirection_ForwardAndBackward);
pub const kAudioFileLoopDirection_Backward = @enumToInt(enum_unnamed_397.kAudioFileLoopDirection_Backward);
const enum_unnamed_397 = extern enum(c_int) {
    kAudioFileLoopDirection_NoLooping = 0,
    kAudioFileLoopDirection_Forward = 1,
    kAudioFileLoopDirection_ForwardAndBackward = 2,
    kAudioFileLoopDirection_Backward = 3,
    _,
};
pub const struct_AudioFile_SMPTE_Time = extern struct {
    mHours: SInt8,
    mMinutes: UInt8,
    mSeconds: UInt8,
    mFrames: UInt8,
    mSubFrameSampleOffset: UInt32,
};
pub const AudioFile_SMPTE_Time = struct_AudioFile_SMPTE_Time;
pub const kAudioFileMarkerType_Generic = @enumToInt(enum_unnamed_398.kAudioFileMarkerType_Generic);
const enum_unnamed_398 = extern enum(c_int) {
    kAudioFileMarkerType_Generic = 0,
    _,
};
pub const struct_AudioFileMarker = extern struct {
    mFramePosition: Float64,
    mName: CFStringRef,
    mMarkerID: SInt32,
    mSMPTETime: AudioFile_SMPTE_Time,
    mType: UInt32,
    mReserved: UInt16,
    mChannel: UInt16,
};
pub const AudioFileMarker = struct_AudioFileMarker;
pub const struct_AudioFileMarkerList = extern struct {
    mSMPTE_TimeType: UInt32,
    mNumberMarkers: UInt32,
    mMarkers: [1]AudioFileMarker,
};
pub const AudioFileMarkerList = struct_AudioFileMarkerList;
pub const NumBytesToNumAudioFileMarkers = @compileError("unable to translate function"); // /Users/hannes/Documents/zig-builds/zig-macos-x86_64-0.5.0+c522699f2/lib/zig/include/stddef.h:104:24: warning: TODO implement translation of stmt class OffsetOfExprClass
pub const NumAudioFileMarkersToNumBytes = @compileError("unable to translate function");
pub const AudioFileRegionFlags = UInt32;
pub const kAudioFileRegionFlag_LoopEnable = @enumToInt(enum_unnamed_399.kAudioFileRegionFlag_LoopEnable);
pub const kAudioFileRegionFlag_PlayForward = @enumToInt(enum_unnamed_399.kAudioFileRegionFlag_PlayForward);
pub const kAudioFileRegionFlag_PlayBackward = @enumToInt(enum_unnamed_399.kAudioFileRegionFlag_PlayBackward);
const enum_unnamed_399 = extern enum(c_int) {
    kAudioFileRegionFlag_LoopEnable = 1,
    kAudioFileRegionFlag_PlayForward = 2,
    kAudioFileRegionFlag_PlayBackward = 4,
    _,
};
pub const struct_AudioFileRegion = extern struct {
    mRegionID: UInt32,
    mName: CFStringRef,
    mFlags: AudioFileRegionFlags,
    mNumberMarkers: UInt32,
    mMarkers: [1]AudioFileMarker,
};
pub const AudioFileRegion = struct_AudioFileRegion;
pub const struct_AudioFileRegionList = extern struct {
    mSMPTE_TimeType: UInt32,
    mNumberRegions: UInt32,
    mRegions: [1]AudioFileRegion,
};
pub const AudioFileRegionList = struct_AudioFileRegionList;
pub const NextAudioFileRegion = @compileError("unable to translate function");
pub const struct_AudioFramePacketTranslation = extern struct {
    mFrame: SInt64,
    mPacket: SInt64,
    mFrameOffsetInPacket: UInt32,
};
pub const AudioFramePacketTranslation = struct_AudioFramePacketTranslation;
pub const AudioBytePacketTranslationFlags = UInt32;
pub const kBytePacketTranslationFlag_IsEstimate = @enumToInt(enum_unnamed_400.kBytePacketTranslationFlag_IsEstimate);
const enum_unnamed_400 = extern enum(c_int) {
    kBytePacketTranslationFlag_IsEstimate = 1,
    _,
};
pub const struct_AudioBytePacketTranslation = extern struct {
    mByte: SInt64,
    mPacket: SInt64,
    mByteOffsetInPacket: UInt32,
    mFlags: AudioBytePacketTranslationFlags,
};
pub const AudioBytePacketTranslation = struct_AudioBytePacketTranslation;
pub const struct_AudioFilePacketTableInfo = extern struct {
    mNumberValidFrames: SInt64,
    mPrimingFrames: SInt32,
    mRemainderFrames: SInt32,
};
pub const AudioFilePacketTableInfo = struct_AudioFilePacketTableInfo;
pub const struct_AudioPacketRangeByteCountTranslation = extern struct {
    mPacket: SInt64,
    mPacketCount: SInt64,
    mByteCountUpperBound: SInt64,
};
pub const AudioPacketRangeByteCountTranslation = struct_AudioPacketRangeByteCountTranslation;
pub const struct_AudioPacketRollDistanceTranslation = extern struct {
    mPacket: SInt64,
    mRollDistance: SInt64,
};
pub const AudioPacketRollDistanceTranslation = struct_AudioPacketRollDistanceTranslation;
pub const struct_AudioIndependentPacketTranslation = extern struct {
    mPacket: SInt64,
    mIndependentlyDecodablePacket: SInt64,
};
pub const AudioIndependentPacketTranslation = struct_AudioIndependentPacketTranslation;
pub const struct_AudioPacketDependencyInfoTranslation = extern struct {
    mPacket: SInt64,
    mIsIndependentlyDecodable: UInt32,
    mNumberPrerollPackets: UInt32,
};
pub const AudioPacketDependencyInfoTranslation = struct_AudioPacketDependencyInfoTranslation;
pub extern fn AudioFileCreateWithURL(inFileRef: CFURLRef, inFileType: AudioFileTypeID, inFormat: [*c]const AudioStreamBasicDescription, inFlags: AudioFileFlags, outAudioFile: [*c]AudioFileID) OSStatus;
pub extern fn AudioFileOpenURL(inFileRef: CFURLRef, inPermissions: AudioFilePermissions, inFileTypeHint: AudioFileTypeID, outAudioFile: [*c]AudioFileID) OSStatus;
pub const AudioFile_ReadProc = ?fn (?*c_void, SInt64, UInt32, ?*c_void, [*c]UInt32) callconv(.C) OSStatus;
pub const AudioFile_WriteProc = ?fn (?*c_void, SInt64, UInt32, ?*const c_void, [*c]UInt32) callconv(.C) OSStatus;
pub const AudioFile_GetSizeProc = ?fn (?*c_void) callconv(.C) SInt64;
pub const AudioFile_SetSizeProc = ?fn (?*c_void, SInt64) callconv(.C) OSStatus;
pub extern fn AudioFileInitializeWithCallbacks(inClientData: ?*c_void, inReadFunc: AudioFile_ReadProc, inWriteFunc: AudioFile_WriteProc, inGetSizeFunc: AudioFile_GetSizeProc, inSetSizeFunc: AudioFile_SetSizeProc, inFileType: AudioFileTypeID, inFormat: [*c]const AudioStreamBasicDescription, inFlags: AudioFileFlags, outAudioFile: [*c]AudioFileID) OSStatus;
pub extern fn AudioFileOpenWithCallbacks(inClientData: ?*c_void, inReadFunc: AudioFile_ReadProc, inWriteFunc: AudioFile_WriteProc, inGetSizeFunc: AudioFile_GetSizeProc, inSetSizeFunc: AudioFile_SetSizeProc, inFileTypeHint: AudioFileTypeID, outAudioFile: [*c]AudioFileID) OSStatus;
pub extern fn AudioFileClose(inAudioFile: AudioFileID) OSStatus;
pub extern fn AudioFileOptimize(inAudioFile: AudioFileID) OSStatus;
pub extern fn AudioFileReadBytes(inAudioFile: AudioFileID, inUseCache: Boolean, inStartingByte: SInt64, ioNumBytes: [*c]UInt32, outBuffer: ?*c_void) OSStatus;
pub extern fn AudioFileWriteBytes(inAudioFile: AudioFileID, inUseCache: Boolean, inStartingByte: SInt64, ioNumBytes: [*c]UInt32, inBuffer: ?*const c_void) OSStatus;
pub extern fn AudioFileReadPacketData(inAudioFile: AudioFileID, inUseCache: Boolean, ioNumBytes: [*c]UInt32, outPacketDescriptions: [*c]AudioStreamPacketDescription, inStartingPacket: SInt64, ioNumPackets: [*c]UInt32, outBuffer: ?*c_void) OSStatus;
pub extern fn AudioFileReadPackets(inAudioFile: AudioFileID, inUseCache: Boolean, outNumBytes: [*c]UInt32, outPacketDescriptions: [*c]AudioStreamPacketDescription, inStartingPacket: SInt64, ioNumPackets: [*c]UInt32, outBuffer: ?*c_void) OSStatus;
pub extern fn AudioFileWritePackets(inAudioFile: AudioFileID, inUseCache: Boolean, inNumBytes: UInt32, inPacketDescriptions: [*c]const AudioStreamPacketDescription, inStartingPacket: SInt64, ioNumPackets: [*c]UInt32, inBuffer: ?*const c_void) OSStatus;
pub extern fn AudioFileCountUserData(inAudioFile: AudioFileID, inUserDataID: UInt32, outNumberItems: [*c]UInt32) OSStatus;
pub extern fn AudioFileGetUserDataSize(inAudioFile: AudioFileID, inUserDataID: UInt32, inIndex: UInt32, outUserDataSize: [*c]UInt32) OSStatus;
pub extern fn AudioFileGetUserData(inAudioFile: AudioFileID, inUserDataID: UInt32, inIndex: UInt32, ioUserDataSize: [*c]UInt32, outUserData: ?*c_void) OSStatus;
pub extern fn AudioFileSetUserData(inAudioFile: AudioFileID, inUserDataID: UInt32, inIndex: UInt32, inUserDataSize: UInt32, inUserData: ?*const c_void) OSStatus;
pub extern fn AudioFileRemoveUserData(inAudioFile: AudioFileID, inUserDataID: UInt32, inIndex: UInt32) OSStatus;
pub const kAudioFilePropertyFileFormat = @enumToInt(enum_unnamed_401.kAudioFilePropertyFileFormat);
pub const kAudioFilePropertyDataFormat = @enumToInt(enum_unnamed_401.kAudioFilePropertyDataFormat);
pub const kAudioFilePropertyIsOptimized = @enumToInt(enum_unnamed_401.kAudioFilePropertyIsOptimized);
pub const kAudioFilePropertyMagicCookieData = @enumToInt(enum_unnamed_401.kAudioFilePropertyMagicCookieData);
pub const kAudioFilePropertyAudioDataByteCount = @enumToInt(enum_unnamed_401.kAudioFilePropertyAudioDataByteCount);
pub const kAudioFilePropertyAudioDataPacketCount = @enumToInt(enum_unnamed_401.kAudioFilePropertyAudioDataPacketCount);
pub const kAudioFilePropertyMaximumPacketSize = @enumToInt(enum_unnamed_401.kAudioFilePropertyMaximumPacketSize);
pub const kAudioFilePropertyDataOffset = @enumToInt(enum_unnamed_401.kAudioFilePropertyDataOffset);
pub const kAudioFilePropertyChannelLayout = @enumToInt(enum_unnamed_401.kAudioFilePropertyChannelLayout);
pub const kAudioFilePropertyDeferSizeUpdates = @enumToInt(enum_unnamed_401.kAudioFilePropertyDeferSizeUpdates);
pub const kAudioFilePropertyDataFormatName = @enumToInt(enum_unnamed_401.kAudioFilePropertyDataFormatName);
pub const kAudioFilePropertyMarkerList = @enumToInt(enum_unnamed_401.kAudioFilePropertyMarkerList);
pub const kAudioFilePropertyRegionList = @enumToInt(enum_unnamed_401.kAudioFilePropertyRegionList);
pub const kAudioFilePropertyPacketToFrame = @enumToInt(enum_unnamed_401.kAudioFilePropertyPacketToFrame);
pub const kAudioFilePropertyFrameToPacket = @enumToInt(enum_unnamed_401.kAudioFilePropertyFrameToPacket);
pub const kAudioFilePropertyRestrictsRandomAccess = @enumToInt(enum_unnamed_401.kAudioFilePropertyRestrictsRandomAccess);
pub const kAudioFilePropertyPacketToRollDistance = @enumToInt(enum_unnamed_401.kAudioFilePropertyPacketToRollDistance);
pub const kAudioFilePropertyPreviousIndependentPacket = @enumToInt(enum_unnamed_401.kAudioFilePropertyPreviousIndependentPacket);
pub const kAudioFilePropertyNextIndependentPacket = @enumToInt(enum_unnamed_401.kAudioFilePropertyNextIndependentPacket);
pub const kAudioFilePropertyPacketToDependencyInfo = @enumToInt(enum_unnamed_401.kAudioFilePropertyPacketToDependencyInfo);
pub const kAudioFilePropertyPacketToByte = @enumToInt(enum_unnamed_401.kAudioFilePropertyPacketToByte);
pub const kAudioFilePropertyByteToPacket = @enumToInt(enum_unnamed_401.kAudioFilePropertyByteToPacket);
pub const kAudioFilePropertyChunkIDs = @enumToInt(enum_unnamed_401.kAudioFilePropertyChunkIDs);
pub const kAudioFilePropertyInfoDictionary = @enumToInt(enum_unnamed_401.kAudioFilePropertyInfoDictionary);
pub const kAudioFilePropertyPacketTableInfo = @enumToInt(enum_unnamed_401.kAudioFilePropertyPacketTableInfo);
pub const kAudioFilePropertyFormatList = @enumToInt(enum_unnamed_401.kAudioFilePropertyFormatList);
pub const kAudioFilePropertyPacketSizeUpperBound = @enumToInt(enum_unnamed_401.kAudioFilePropertyPacketSizeUpperBound);
pub const kAudioFilePropertyPacketRangeByteCountUpperBound = @enumToInt(enum_unnamed_401.kAudioFilePropertyPacketRangeByteCountUpperBound);
pub const kAudioFilePropertyReserveDuration = @enumToInt(enum_unnamed_401.kAudioFilePropertyReserveDuration);
pub const kAudioFilePropertyEstimatedDuration = @enumToInt(enum_unnamed_401.kAudioFilePropertyEstimatedDuration);
pub const kAudioFilePropertyBitRate = @enumToInt(enum_unnamed_401.kAudioFilePropertyBitRate);
pub const kAudioFilePropertyID3Tag = @enumToInt(enum_unnamed_401.kAudioFilePropertyID3Tag);
pub const kAudioFilePropertySourceBitDepth = @enumToInt(enum_unnamed_401.kAudioFilePropertySourceBitDepth);
pub const kAudioFilePropertyAlbumArtwork = @enumToInt(enum_unnamed_401.kAudioFilePropertyAlbumArtwork);
pub const kAudioFilePropertyAudioTrackCount = @enumToInt(enum_unnamed_401.kAudioFilePropertyAudioTrackCount);
pub const kAudioFilePropertyUseAudioTrack = @enumToInt(enum_unnamed_401.kAudioFilePropertyUseAudioTrack);
const enum_unnamed_401 = extern enum(c_int) {
    kAudioFilePropertyFileFormat = 1717988724,
    kAudioFilePropertyDataFormat = 1684434292,
    kAudioFilePropertyIsOptimized = 1869640813,
    kAudioFilePropertyMagicCookieData = 1835493731,
    kAudioFilePropertyAudioDataByteCount = 1650683508,
    kAudioFilePropertyAudioDataPacketCount = 1885564532,
    kAudioFilePropertyMaximumPacketSize = 1886616165,
    kAudioFilePropertyDataOffset = 1685022310,
    kAudioFilePropertyChannelLayout = 1668112752,
    kAudioFilePropertyDeferSizeUpdates = 1685289589,
    kAudioFilePropertyDataFormatName = 1718512997,
    kAudioFilePropertyMarkerList = 1835756659,
    kAudioFilePropertyRegionList = 1919380595,
    kAudioFilePropertyPacketToFrame = 1886086770,
    kAudioFilePropertyFrameToPacket = 1718775915,
    kAudioFilePropertyRestrictsRandomAccess = 1920098672,
    kAudioFilePropertyPacketToRollDistance = 1886089836,
    kAudioFilePropertyPreviousIndependentPacket = 1885957732,
    kAudioFilePropertyNextIndependentPacket = 1852403300,
    kAudioFilePropertyPacketToDependencyInfo = 1886086256,
    kAudioFilePropertyPacketToByte = 1886085753,
    kAudioFilePropertyByteToPacket = 1652125803,
    kAudioFilePropertyChunkIDs = 1667787108,
    kAudioFilePropertyInfoDictionary = 1768842863,
    kAudioFilePropertyPacketTableInfo = 1886283375,
    kAudioFilePropertyFormatList = 1718383476,
    kAudioFilePropertyPacketSizeUpperBound = 1886090594,
    kAudioFilePropertyPacketRangeByteCountUpperBound = 1886549346,
    kAudioFilePropertyReserveDuration = 1920168566,
    kAudioFilePropertyEstimatedDuration = 1701082482,
    kAudioFilePropertyBitRate = 1651663220,
    kAudioFilePropertyID3Tag = 1768174452,
    kAudioFilePropertySourceBitDepth = 1935832164,
    kAudioFilePropertyAlbumArtwork = 1633776244,
    kAudioFilePropertyAudioTrackCount = 1635017588,
    kAudioFilePropertyUseAudioTrack = 1969321067,
    _,
};
pub extern fn AudioFileGetPropertyInfo(inAudioFile: AudioFileID, inPropertyID: AudioFilePropertyID, outDataSize: [*c]UInt32, isWritable: [*c]UInt32) OSStatus;
pub extern fn AudioFileGetProperty(inAudioFile: AudioFileID, inPropertyID: AudioFilePropertyID, ioDataSize: [*c]UInt32, outPropertyData: ?*c_void) OSStatus;
pub extern fn AudioFileSetProperty(inAudioFile: AudioFileID, inPropertyID: AudioFilePropertyID, inDataSize: UInt32, inPropertyData: ?*const c_void) OSStatus;
pub const kAudioFileGlobalInfo_ReadableTypes = @enumToInt(enum_unnamed_402.kAudioFileGlobalInfo_ReadableTypes);
pub const kAudioFileGlobalInfo_WritableTypes = @enumToInt(enum_unnamed_402.kAudioFileGlobalInfo_WritableTypes);
pub const kAudioFileGlobalInfo_FileTypeName = @enumToInt(enum_unnamed_402.kAudioFileGlobalInfo_FileTypeName);
pub const kAudioFileGlobalInfo_AvailableStreamDescriptionsForFormat = @enumToInt(enum_unnamed_402.kAudioFileGlobalInfo_AvailableStreamDescriptionsForFormat);
pub const kAudioFileGlobalInfo_AvailableFormatIDs = @enumToInt(enum_unnamed_402.kAudioFileGlobalInfo_AvailableFormatIDs);
pub const kAudioFileGlobalInfo_AllExtensions = @enumToInt(enum_unnamed_402.kAudioFileGlobalInfo_AllExtensions);
pub const kAudioFileGlobalInfo_AllHFSTypeCodes = @enumToInt(enum_unnamed_402.kAudioFileGlobalInfo_AllHFSTypeCodes);
pub const kAudioFileGlobalInfo_AllUTIs = @enumToInt(enum_unnamed_402.kAudioFileGlobalInfo_AllUTIs);
pub const kAudioFileGlobalInfo_AllMIMETypes = @enumToInt(enum_unnamed_402.kAudioFileGlobalInfo_AllMIMETypes);
pub const kAudioFileGlobalInfo_ExtensionsForType = @enumToInt(enum_unnamed_402.kAudioFileGlobalInfo_ExtensionsForType);
pub const kAudioFileGlobalInfo_HFSTypeCodesForType = @enumToInt(enum_unnamed_402.kAudioFileGlobalInfo_HFSTypeCodesForType);
pub const kAudioFileGlobalInfo_UTIsForType = @enumToInt(enum_unnamed_402.kAudioFileGlobalInfo_UTIsForType);
pub const kAudioFileGlobalInfo_MIMETypesForType = @enumToInt(enum_unnamed_402.kAudioFileGlobalInfo_MIMETypesForType);
pub const kAudioFileGlobalInfo_TypesForMIMEType = @enumToInt(enum_unnamed_402.kAudioFileGlobalInfo_TypesForMIMEType);
pub const kAudioFileGlobalInfo_TypesForUTI = @enumToInt(enum_unnamed_402.kAudioFileGlobalInfo_TypesForUTI);
pub const kAudioFileGlobalInfo_TypesForHFSTypeCode = @enumToInt(enum_unnamed_402.kAudioFileGlobalInfo_TypesForHFSTypeCode);
pub const kAudioFileGlobalInfo_TypesForExtension = @enumToInt(enum_unnamed_402.kAudioFileGlobalInfo_TypesForExtension);
const enum_unnamed_402 = extern enum(c_int) {
    kAudioFileGlobalInfo_ReadableTypes = 1634103910,
    kAudioFileGlobalInfo_WritableTypes = 1634105190,
    kAudioFileGlobalInfo_FileTypeName = 1718906477,
    kAudioFileGlobalInfo_AvailableStreamDescriptionsForFormat = 1935960420,
    kAudioFileGlobalInfo_AvailableFormatIDs = 1718446436,
    kAudioFileGlobalInfo_AllExtensions = 1634498676,
    kAudioFileGlobalInfo_AllHFSTypeCodes = 1634231923,
    kAudioFileGlobalInfo_AllUTIs = 1635087465,
    kAudioFileGlobalInfo_AllMIMETypes = 1634560365,
    kAudioFileGlobalInfo_ExtensionsForType = 1717926004,
    kAudioFileGlobalInfo_HFSTypeCodesForType = 1718118003,
    kAudioFileGlobalInfo_UTIsForType = 1718973545,
    kAudioFileGlobalInfo_MIMETypesForType = 1718446445,
    kAudioFileGlobalInfo_TypesForMIMEType = 1953327469,
    kAudioFileGlobalInfo_TypesForUTI = 1953854569,
    kAudioFileGlobalInfo_TypesForHFSTypeCode = 1952999027,
    kAudioFileGlobalInfo_TypesForExtension = 1952807028,
    _,
};
pub const struct_AudioFileTypeAndFormatID = extern struct {
    mFileType: AudioFileTypeID,
    mFormatID: UInt32,
};
pub const AudioFileTypeAndFormatID = struct_AudioFileTypeAndFormatID;
pub extern fn AudioFileGetGlobalInfoSize(inPropertyID: AudioFilePropertyID, inSpecifierSize: UInt32, inSpecifier: ?*c_void, outDataSize: [*c]UInt32) OSStatus;
pub extern fn AudioFileGetGlobalInfo(inPropertyID: AudioFilePropertyID, inSpecifierSize: UInt32, inSpecifier: ?*c_void, ioDataSize: [*c]UInt32, outPropertyData: ?*c_void) OSStatus;
pub extern fn AudioFileCreate(inParentRef: ?*const struct_FSRef, inFileName: CFStringRef, inFileType: AudioFileTypeID, inFormat: [*c]const AudioStreamBasicDescription, inFlags: AudioFileFlags, outNewFileRef: ?*struct_FSRef, outAudioFile: [*c]AudioFileID) OSStatus;
pub extern fn AudioFileInitialize(inFileRef: ?*const struct_FSRef, inFileType: AudioFileTypeID, inFormat: [*c]const AudioStreamBasicDescription, inFlags: AudioFileFlags, outAudioFile: [*c]AudioFileID) OSStatus;
pub extern fn AudioFileOpen(inFileRef: ?*const struct_FSRef, inPermissions: AudioFilePermissions, inFileTypeHint: AudioFileTypeID, outAudioFile: [*c]AudioFileID) OSStatus;
pub const AudioFileStreamPropertyFlags = UInt32;
pub const kAudioFileStreamPropertyFlag_PropertyIsCached = @enumToInt(enum_unnamed_403.kAudioFileStreamPropertyFlag_PropertyIsCached);
pub const kAudioFileStreamPropertyFlag_CacheProperty = @enumToInt(enum_unnamed_403.kAudioFileStreamPropertyFlag_CacheProperty);
const enum_unnamed_403 = extern enum(c_int) {
    kAudioFileStreamPropertyFlag_PropertyIsCached = 1,
    kAudioFileStreamPropertyFlag_CacheProperty = 2,
    _,
};
pub const AudioFileStreamParseFlags = UInt32;
pub const kAudioFileStreamParseFlag_Discontinuity = @enumToInt(enum_unnamed_404.kAudioFileStreamParseFlag_Discontinuity);
const enum_unnamed_404 = extern enum(c_int) {
    kAudioFileStreamParseFlag_Discontinuity = 1,
    _,
};
pub const AudioFileStreamSeekFlags = UInt32;
pub const kAudioFileStreamSeekFlag_OffsetIsEstimated = @enumToInt(enum_unnamed_405.kAudioFileStreamSeekFlag_OffsetIsEstimated);
const enum_unnamed_405 = extern enum(c_int) {
    kAudioFileStreamSeekFlag_OffsetIsEstimated = 1,
    _,
};
pub const AudioFileStreamPropertyID = UInt32;
pub const struct_OpaqueAudioFileStreamID = @OpaqueType();
pub const AudioFileStreamID = ?*struct_OpaqueAudioFileStreamID;
pub const AudioFileStream_PropertyListenerProc = ?fn (?*c_void, AudioFileStreamID, AudioFileStreamPropertyID, [*c]AudioFileStreamPropertyFlags) callconv(.C) void;
pub const AudioFileStream_PacketsProc = ?fn (?*c_void, UInt32, UInt32, ?*const c_void, [*c]AudioStreamPacketDescription) callconv(.C) void;
pub const kAudioFileStreamError_UnsupportedFileType = @enumToInt(enum_unnamed_406.kAudioFileStreamError_UnsupportedFileType);
pub const kAudioFileStreamError_UnsupportedDataFormat = @enumToInt(enum_unnamed_406.kAudioFileStreamError_UnsupportedDataFormat);
pub const kAudioFileStreamError_UnsupportedProperty = @enumToInt(enum_unnamed_406.kAudioFileStreamError_UnsupportedProperty);
pub const kAudioFileStreamError_BadPropertySize = @enumToInt(enum_unnamed_406.kAudioFileStreamError_BadPropertySize);
pub const kAudioFileStreamError_NotOptimized = @enumToInt(enum_unnamed_406.kAudioFileStreamError_NotOptimized);
pub const kAudioFileStreamError_InvalidPacketOffset = @enumToInt(enum_unnamed_406.kAudioFileStreamError_InvalidPacketOffset);
pub const kAudioFileStreamError_InvalidFile = @enumToInt(enum_unnamed_406.kAudioFileStreamError_InvalidFile);
pub const kAudioFileStreamError_ValueUnknown = @enumToInt(enum_unnamed_406.kAudioFileStreamError_ValueUnknown);
pub const kAudioFileStreamError_DataUnavailable = @enumToInt(enum_unnamed_406.kAudioFileStreamError_DataUnavailable);
pub const kAudioFileStreamError_IllegalOperation = @enumToInt(enum_unnamed_406.kAudioFileStreamError_IllegalOperation);
pub const kAudioFileStreamError_UnspecifiedError = @enumToInt(enum_unnamed_406.kAudioFileStreamError_UnspecifiedError);
pub const kAudioFileStreamError_DiscontinuityCantRecover = @enumToInt(enum_unnamed_406.kAudioFileStreamError_DiscontinuityCantRecover);
const enum_unnamed_406 = extern enum(c_int) {
    kAudioFileStreamError_UnsupportedFileType = 1954115647,
    kAudioFileStreamError_UnsupportedDataFormat = 1718449215,
    kAudioFileStreamError_UnsupportedProperty = 1886681407,
    kAudioFileStreamError_BadPropertySize = 561211770,
    kAudioFileStreamError_NotOptimized = 1869640813,
    kAudioFileStreamError_InvalidPacketOffset = 1885563711,
    kAudioFileStreamError_InvalidFile = 1685348671,
    kAudioFileStreamError_ValueUnknown = 1970170687,
    kAudioFileStreamError_DataUnavailable = 1836020325,
    kAudioFileStreamError_IllegalOperation = 1852797029,
    kAudioFileStreamError_UnspecifiedError = 2003334207,
    kAudioFileStreamError_DiscontinuityCantRecover = 1685283617,
    _,
};
pub const kAudioFileStreamProperty_ReadyToProducePackets = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_ReadyToProducePackets);
pub const kAudioFileStreamProperty_FileFormat = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_FileFormat);
pub const kAudioFileStreamProperty_DataFormat = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_DataFormat);
pub const kAudioFileStreamProperty_FormatList = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_FormatList);
pub const kAudioFileStreamProperty_MagicCookieData = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_MagicCookieData);
pub const kAudioFileStreamProperty_AudioDataByteCount = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_AudioDataByteCount);
pub const kAudioFileStreamProperty_AudioDataPacketCount = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_AudioDataPacketCount);
pub const kAudioFileStreamProperty_MaximumPacketSize = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_MaximumPacketSize);
pub const kAudioFileStreamProperty_DataOffset = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_DataOffset);
pub const kAudioFileStreamProperty_ChannelLayout = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_ChannelLayout);
pub const kAudioFileStreamProperty_PacketToFrame = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_PacketToFrame);
pub const kAudioFileStreamProperty_FrameToPacket = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_FrameToPacket);
pub const kAudioFileStreamProperty_RestrictsRandomAccess = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_RestrictsRandomAccess);
pub const kAudioFileStreamProperty_PacketToRollDistance = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_PacketToRollDistance);
pub const kAudioFileStreamProperty_PreviousIndependentPacket = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_PreviousIndependentPacket);
pub const kAudioFileStreamProperty_NextIndependentPacket = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_NextIndependentPacket);
pub const kAudioFileStreamProperty_PacketToDependencyInfo = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_PacketToDependencyInfo);
pub const kAudioFileStreamProperty_PacketToByte = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_PacketToByte);
pub const kAudioFileStreamProperty_ByteToPacket = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_ByteToPacket);
pub const kAudioFileStreamProperty_PacketTableInfo = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_PacketTableInfo);
pub const kAudioFileStreamProperty_PacketSizeUpperBound = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_PacketSizeUpperBound);
pub const kAudioFileStreamProperty_AverageBytesPerPacket = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_AverageBytesPerPacket);
pub const kAudioFileStreamProperty_BitRate = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_BitRate);
pub const kAudioFileStreamProperty_InfoDictionary = @enumToInt(enum_unnamed_407.kAudioFileStreamProperty_InfoDictionary);
const enum_unnamed_407 = extern enum(c_int) {
    kAudioFileStreamProperty_ReadyToProducePackets = 1919247481,
    kAudioFileStreamProperty_FileFormat = 1717988724,
    kAudioFileStreamProperty_DataFormat = 1684434292,
    kAudioFileStreamProperty_FormatList = 1718383476,
    kAudioFileStreamProperty_MagicCookieData = 1835493731,
    kAudioFileStreamProperty_AudioDataByteCount = 1650683508,
    kAudioFileStreamProperty_AudioDataPacketCount = 1885564532,
    kAudioFileStreamProperty_MaximumPacketSize = 1886616165,
    kAudioFileStreamProperty_DataOffset = 1685022310,
    kAudioFileStreamProperty_ChannelLayout = 1668112752,
    kAudioFileStreamProperty_PacketToFrame = 1886086770,
    kAudioFileStreamProperty_FrameToPacket = 1718775915,
    kAudioFileStreamProperty_RestrictsRandomAccess = 1920098672,
    kAudioFileStreamProperty_PacketToRollDistance = 1886089836,
    kAudioFileStreamProperty_PreviousIndependentPacket = 1885957732,
    kAudioFileStreamProperty_NextIndependentPacket = 1852403300,
    kAudioFileStreamProperty_PacketToDependencyInfo = 1886086256,
    kAudioFileStreamProperty_PacketToByte = 1886085753,
    kAudioFileStreamProperty_ByteToPacket = 1652125803,
    kAudioFileStreamProperty_PacketTableInfo = 1886283375,
    kAudioFileStreamProperty_PacketSizeUpperBound = 1886090594,
    kAudioFileStreamProperty_AverageBytesPerPacket = 1633841264,
    kAudioFileStreamProperty_BitRate = 1651663220,
    kAudioFileStreamProperty_InfoDictionary = 1768842863,
    _,
};
pub extern fn AudioFileStreamOpen(inClientData: ?*c_void, inPropertyListenerProc: AudioFileStream_PropertyListenerProc, inPacketsProc: AudioFileStream_PacketsProc, inFileTypeHint: AudioFileTypeID, outAudioFileStream: [*c]AudioFileStreamID) OSStatus;
pub extern fn AudioFileStreamParseBytes(inAudioFileStream: AudioFileStreamID, inDataByteSize: UInt32, inData: ?*const c_void, inFlags: AudioFileStreamParseFlags) OSStatus;
pub extern fn AudioFileStreamSeek(inAudioFileStream: AudioFileStreamID, inPacketOffset: SInt64, outDataByteOffset: [*c]SInt64, ioFlags: [*c]AudioFileStreamSeekFlags) OSStatus;
pub extern fn AudioFileStreamGetPropertyInfo(inAudioFileStream: AudioFileStreamID, inPropertyID: AudioFileStreamPropertyID, outPropertyDataSize: [*c]UInt32, outWritable: [*c]Boolean) OSStatus;
pub extern fn AudioFileStreamGetProperty(inAudioFileStream: AudioFileStreamID, inPropertyID: AudioFileStreamPropertyID, ioPropertyDataSize: [*c]UInt32, outPropertyData: ?*c_void) OSStatus;
pub extern fn AudioFileStreamSetProperty(inAudioFileStream: AudioFileStreamID, inPropertyID: AudioFileStreamPropertyID, inPropertyDataSize: UInt32, inPropertyData: ?*const c_void) OSStatus;
pub extern fn AudioFileStreamClose(inAudioFileStream: AudioFileStreamID) OSStatus;
pub const AudioFormatPropertyID = UInt32;
pub const AudioPanningMode = UInt32;
pub const kPanningMode_SoundField = @enumToInt(enum_unnamed_408.kPanningMode_SoundField);
pub const kPanningMode_VectorBasedPanning = @enumToInt(enum_unnamed_408.kPanningMode_VectorBasedPanning);
const enum_unnamed_408 = extern enum(c_int) {
    kPanningMode_SoundField = 3,
    kPanningMode_VectorBasedPanning = 4,
    _,
};
pub const struct_AudioPanningInfo = extern struct {
    mPanningMode: AudioPanningMode,
    mCoordinateFlags: UInt32,
    mCoordinates: [3]Float32,
    mGainScale: Float32,
    mOutputChannelMap: [*c]const AudioChannelLayout,
};
pub const AudioPanningInfo = struct_AudioPanningInfo;
pub const AudioBalanceFadeType = UInt32;
pub const kAudioBalanceFadeType_MaxUnityGain = @enumToInt(enum_unnamed_409.kAudioBalanceFadeType_MaxUnityGain);
pub const kAudioBalanceFadeType_EqualPower = @enumToInt(enum_unnamed_409.kAudioBalanceFadeType_EqualPower);
const enum_unnamed_409 = extern enum(c_int) {
    kAudioBalanceFadeType_MaxUnityGain = 0,
    kAudioBalanceFadeType_EqualPower = 1,
    _,
};
pub const struct_AudioBalanceFade = extern struct {
    mLeftRightBalance: Float32,
    mBackFrontFade: Float32,
    mType: AudioBalanceFadeType,
    mChannelLayout: [*c]const AudioChannelLayout,
};
pub const AudioBalanceFade = struct_AudioBalanceFade;
pub const struct_AudioFormatInfo = extern struct {
    mASBD: AudioStreamBasicDescription,
    mMagicCookie: ?*const c_void,
    mMagicCookieSize: UInt32,
};
pub const AudioFormatInfo = struct_AudioFormatInfo;
pub const struct_ExtendedAudioFormatInfo = extern struct {
    mASBD: AudioStreamBasicDescription,
    mMagicCookie: ?*const c_void,
    mMagicCookieSize: UInt32,
    mClassDescription: AudioClassDescription,
};
pub const ExtendedAudioFormatInfo = struct_ExtendedAudioFormatInfo;
pub const kAudioFormatProperty_FormatInfo = @enumToInt(enum_unnamed_410.kAudioFormatProperty_FormatInfo);
pub const kAudioFormatProperty_FormatName = @enumToInt(enum_unnamed_410.kAudioFormatProperty_FormatName);
pub const kAudioFormatProperty_EncodeFormatIDs = @enumToInt(enum_unnamed_410.kAudioFormatProperty_EncodeFormatIDs);
pub const kAudioFormatProperty_DecodeFormatIDs = @enumToInt(enum_unnamed_410.kAudioFormatProperty_DecodeFormatIDs);
pub const kAudioFormatProperty_FormatList = @enumToInt(enum_unnamed_410.kAudioFormatProperty_FormatList);
pub const kAudioFormatProperty_ASBDFromESDS = @enumToInt(enum_unnamed_410.kAudioFormatProperty_ASBDFromESDS);
pub const kAudioFormatProperty_ChannelLayoutFromESDS = @enumToInt(enum_unnamed_410.kAudioFormatProperty_ChannelLayoutFromESDS);
pub const kAudioFormatProperty_OutputFormatList = @enumToInt(enum_unnamed_410.kAudioFormatProperty_OutputFormatList);
pub const kAudioFormatProperty_FirstPlayableFormatFromList = @enumToInt(enum_unnamed_410.kAudioFormatProperty_FirstPlayableFormatFromList);
pub const kAudioFormatProperty_FormatIsVBR = @enumToInt(enum_unnamed_410.kAudioFormatProperty_FormatIsVBR);
pub const kAudioFormatProperty_FormatIsExternallyFramed = @enumToInt(enum_unnamed_410.kAudioFormatProperty_FormatIsExternallyFramed);
pub const kAudioFormatProperty_FormatEmploysDependentPackets = @enumToInt(enum_unnamed_410.kAudioFormatProperty_FormatEmploysDependentPackets);
pub const kAudioFormatProperty_FormatIsEncrypted = @enumToInt(enum_unnamed_410.kAudioFormatProperty_FormatIsEncrypted);
pub const kAudioFormatProperty_Encoders = @enumToInt(enum_unnamed_410.kAudioFormatProperty_Encoders);
pub const kAudioFormatProperty_Decoders = @enumToInt(enum_unnamed_410.kAudioFormatProperty_Decoders);
pub const kAudioFormatProperty_AvailableEncodeBitRates = @enumToInt(enum_unnamed_410.kAudioFormatProperty_AvailableEncodeBitRates);
pub const kAudioFormatProperty_AvailableEncodeSampleRates = @enumToInt(enum_unnamed_410.kAudioFormatProperty_AvailableEncodeSampleRates);
pub const kAudioFormatProperty_AvailableEncodeChannelLayoutTags = @enumToInt(enum_unnamed_410.kAudioFormatProperty_AvailableEncodeChannelLayoutTags);
pub const kAudioFormatProperty_AvailableEncodeNumberChannels = @enumToInt(enum_unnamed_410.kAudioFormatProperty_AvailableEncodeNumberChannels);
pub const kAudioFormatProperty_ASBDFromMPEGPacket = @enumToInt(enum_unnamed_410.kAudioFormatProperty_ASBDFromMPEGPacket);
pub const kAudioFormatProperty_BitmapForLayoutTag = @enumToInt(enum_unnamed_410.kAudioFormatProperty_BitmapForLayoutTag);
pub const kAudioFormatProperty_MatrixMixMap = @enumToInt(enum_unnamed_410.kAudioFormatProperty_MatrixMixMap);
pub const kAudioFormatProperty_ChannelMap = @enumToInt(enum_unnamed_410.kAudioFormatProperty_ChannelMap);
pub const kAudioFormatProperty_NumberOfChannelsForLayout = @enumToInt(enum_unnamed_410.kAudioFormatProperty_NumberOfChannelsForLayout);
pub const kAudioFormatProperty_AreChannelLayoutsEquivalent = @enumToInt(enum_unnamed_410.kAudioFormatProperty_AreChannelLayoutsEquivalent);
pub const kAudioFormatProperty_ChannelLayoutHash = @enumToInt(enum_unnamed_410.kAudioFormatProperty_ChannelLayoutHash);
pub const kAudioFormatProperty_ValidateChannelLayout = @enumToInt(enum_unnamed_410.kAudioFormatProperty_ValidateChannelLayout);
pub const kAudioFormatProperty_ChannelLayoutForTag = @enumToInt(enum_unnamed_410.kAudioFormatProperty_ChannelLayoutForTag);
pub const kAudioFormatProperty_TagForChannelLayout = @enumToInt(enum_unnamed_410.kAudioFormatProperty_TagForChannelLayout);
pub const kAudioFormatProperty_ChannelLayoutName = @enumToInt(enum_unnamed_410.kAudioFormatProperty_ChannelLayoutName);
pub const kAudioFormatProperty_ChannelLayoutSimpleName = @enumToInt(enum_unnamed_410.kAudioFormatProperty_ChannelLayoutSimpleName);
pub const kAudioFormatProperty_ChannelLayoutForBitmap = @enumToInt(enum_unnamed_410.kAudioFormatProperty_ChannelLayoutForBitmap);
pub const kAudioFormatProperty_ChannelName = @enumToInt(enum_unnamed_410.kAudioFormatProperty_ChannelName);
pub const kAudioFormatProperty_ChannelShortName = @enumToInt(enum_unnamed_410.kAudioFormatProperty_ChannelShortName);
pub const kAudioFormatProperty_TagsForNumberOfChannels = @enumToInt(enum_unnamed_410.kAudioFormatProperty_TagsForNumberOfChannels);
pub const kAudioFormatProperty_PanningMatrix = @enumToInt(enum_unnamed_410.kAudioFormatProperty_PanningMatrix);
pub const kAudioFormatProperty_BalanceFade = @enumToInt(enum_unnamed_410.kAudioFormatProperty_BalanceFade);
pub const kAudioFormatProperty_ID3TagSize = @enumToInt(enum_unnamed_410.kAudioFormatProperty_ID3TagSize);
pub const kAudioFormatProperty_ID3TagToDictionary = @enumToInt(enum_unnamed_410.kAudioFormatProperty_ID3TagToDictionary);
const enum_unnamed_410 = extern enum(c_int) {
    kAudioFormatProperty_FormatInfo = 1718449257,
    kAudioFormatProperty_FormatName = 1718509933,
    kAudioFormatProperty_EncodeFormatIDs = 1633906534,
    kAudioFormatProperty_DecodeFormatIDs = 1633904998,
    kAudioFormatProperty_FormatList = 1718383476,
    kAudioFormatProperty_ASBDFromESDS = 1702064996,
    kAudioFormatProperty_ChannelLayoutFromESDS = 1702060908,
    kAudioFormatProperty_OutputFormatList = 1868983411,
    kAudioFormatProperty_FirstPlayableFormatFromList = 1718642284,
    kAudioFormatProperty_FormatIsVBR = 1719034482,
    kAudioFormatProperty_FormatIsExternallyFramed = 1717925990,
    kAudioFormatProperty_FormatEmploysDependentPackets = 1717855600,
    kAudioFormatProperty_FormatIsEncrypted = 1668446576,
    kAudioFormatProperty_Encoders = 1635149166,
    kAudioFormatProperty_Decoders = 1635148901,
    kAudioFormatProperty_AvailableEncodeBitRates = 1634034290,
    kAudioFormatProperty_AvailableEncodeSampleRates = 1634038642,
    kAudioFormatProperty_AvailableEncodeChannelLayoutTags = 1634034540,
    kAudioFormatProperty_AvailableEncodeNumberChannels = 1635151459,
    kAudioFormatProperty_ASBDFromMPEGPacket = 1633971568,
    kAudioFormatProperty_BitmapForLayoutTag = 1651340391,
    kAudioFormatProperty_MatrixMixMap = 1835884912,
    kAudioFormatProperty_ChannelMap = 1667788144,
    kAudioFormatProperty_NumberOfChannelsForLayout = 1852008557,
    kAudioFormatProperty_AreChannelLayoutsEquivalent = 1667786097,
    kAudioFormatProperty_ChannelLayoutHash = 1667786849,
    kAudioFormatProperty_ValidateChannelLayout = 1986093932,
    kAudioFormatProperty_ChannelLayoutForTag = 1668116588,
    kAudioFormatProperty_TagForChannelLayout = 1668116596,
    kAudioFormatProperty_ChannelLayoutName = 1819242093,
    kAudioFormatProperty_ChannelLayoutSimpleName = 1819504237,
    kAudioFormatProperty_ChannelLayoutForBitmap = 1668116578,
    kAudioFormatProperty_ChannelName = 1668178285,
    kAudioFormatProperty_ChannelShortName = 1668509293,
    kAudioFormatProperty_TagsForNumberOfChannels = 1952540515,
    kAudioFormatProperty_PanningMatrix = 1885433453,
    kAudioFormatProperty_BalanceFade = 1650551910,
    kAudioFormatProperty_ID3TagSize = 1768174451,
    kAudioFormatProperty_ID3TagToDictionary = 1768174436,
    _,
};
pub extern fn AudioFormatGetPropertyInfo(inPropertyID: AudioFormatPropertyID, inSpecifierSize: UInt32, inSpecifier: ?*const c_void, outPropertyDataSize: [*c]UInt32) OSStatus;
pub extern fn AudioFormatGetProperty(inPropertyID: AudioFormatPropertyID, inSpecifierSize: UInt32, inSpecifier: ?*const c_void, ioPropertyDataSize: [*c]UInt32, outPropertyData: ?*c_void) OSStatus;
pub const kAudioFormatUnspecifiedError = @enumToInt(enum_unnamed_411.kAudioFormatUnspecifiedError);
pub const kAudioFormatUnsupportedPropertyError = @enumToInt(enum_unnamed_411.kAudioFormatUnsupportedPropertyError);
pub const kAudioFormatBadPropertySizeError = @enumToInt(enum_unnamed_411.kAudioFormatBadPropertySizeError);
pub const kAudioFormatBadSpecifierSizeError = @enumToInt(enum_unnamed_411.kAudioFormatBadSpecifierSizeError);
pub const kAudioFormatUnsupportedDataFormatError = @enumToInt(enum_unnamed_411.kAudioFormatUnsupportedDataFormatError);
pub const kAudioFormatUnknownFormatError = @enumToInt(enum_unnamed_411.kAudioFormatUnknownFormatError);
const enum_unnamed_411 = extern enum(c_int) {
    kAudioFormatUnspecifiedError = 2003329396,
    kAudioFormatUnsupportedPropertyError = 1886547824,
    kAudioFormatBadPropertySizeError = 561211770,
    kAudioFormatBadSpecifierSizeError = 561213539,
    kAudioFormatUnsupportedDataFormatError = 1718449215,
    kAudioFormatUnknownFormatError = 560360820,
    _,
};
pub const AudioQueuePropertyID = UInt32;
pub const AudioQueueParameterID = UInt32;
pub const AudioQueueParameterValue = Float32;
pub const struct_OpaqueAudioQueue = @OpaqueType();
pub const AudioQueueRef = ?*struct_OpaqueAudioQueue;
pub const struct_OpaqueAudioQueueTimeline = @OpaqueType();
pub const AudioQueueTimelineRef = ?*struct_OpaqueAudioQueueTimeline;
pub const kAudioQueueErr_InvalidBuffer = @enumToInt(enum_unnamed_412.kAudioQueueErr_InvalidBuffer);
pub const kAudioQueueErr_BufferEmpty = @enumToInt(enum_unnamed_412.kAudioQueueErr_BufferEmpty);
pub const kAudioQueueErr_DisposalPending = @enumToInt(enum_unnamed_412.kAudioQueueErr_DisposalPending);
pub const kAudioQueueErr_InvalidProperty = @enumToInt(enum_unnamed_412.kAudioQueueErr_InvalidProperty);
pub const kAudioQueueErr_InvalidPropertySize = @enumToInt(enum_unnamed_412.kAudioQueueErr_InvalidPropertySize);
pub const kAudioQueueErr_InvalidParameter = @enumToInt(enum_unnamed_412.kAudioQueueErr_InvalidParameter);
pub const kAudioQueueErr_CannotStart = @enumToInt(enum_unnamed_412.kAudioQueueErr_CannotStart);
pub const kAudioQueueErr_InvalidDevice = @enumToInt(enum_unnamed_412.kAudioQueueErr_InvalidDevice);
pub const kAudioQueueErr_BufferInQueue = @enumToInt(enum_unnamed_412.kAudioQueueErr_BufferInQueue);
pub const kAudioQueueErr_InvalidRunState = @enumToInt(enum_unnamed_412.kAudioQueueErr_InvalidRunState);
pub const kAudioQueueErr_InvalidQueueType = @enumToInt(enum_unnamed_412.kAudioQueueErr_InvalidQueueType);
pub const kAudioQueueErr_Permissions = @enumToInt(enum_unnamed_412.kAudioQueueErr_Permissions);
pub const kAudioQueueErr_InvalidPropertyValue = @enumToInt(enum_unnamed_412.kAudioQueueErr_InvalidPropertyValue);
pub const kAudioQueueErr_PrimeTimedOut = @enumToInt(enum_unnamed_412.kAudioQueueErr_PrimeTimedOut);
pub const kAudioQueueErr_CodecNotFound = @enumToInt(enum_unnamed_412.kAudioQueueErr_CodecNotFound);
pub const kAudioQueueErr_InvalidCodecAccess = @enumToInt(enum_unnamed_412.kAudioQueueErr_InvalidCodecAccess);
pub const kAudioQueueErr_QueueInvalidated = @enumToInt(enum_unnamed_412.kAudioQueueErr_QueueInvalidated);
pub const kAudioQueueErr_TooManyTaps = @enumToInt(enum_unnamed_412.kAudioQueueErr_TooManyTaps);
pub const kAudioQueueErr_InvalidTapContext = @enumToInt(enum_unnamed_412.kAudioQueueErr_InvalidTapContext);
pub const kAudioQueueErr_RecordUnderrun = @enumToInt(enum_unnamed_412.kAudioQueueErr_RecordUnderrun);
pub const kAudioQueueErr_InvalidTapType = @enumToInt(enum_unnamed_412.kAudioQueueErr_InvalidTapType);
pub const kAudioQueueErr_BufferEnqueuedTwice = @enumToInt(enum_unnamed_412.kAudioQueueErr_BufferEnqueuedTwice);
pub const kAudioQueueErr_CannotStartYet = @enumToInt(enum_unnamed_412.kAudioQueueErr_CannotStartYet);
pub const kAudioQueueErr_EnqueueDuringReset = @enumToInt(enum_unnamed_412.kAudioQueueErr_EnqueueDuringReset);
pub const kAudioQueueErr_InvalidOfflineMode = @enumToInt(enum_unnamed_412.kAudioQueueErr_InvalidOfflineMode);
const enum_unnamed_412 = extern enum(c_int) {
    kAudioQueueErr_InvalidBuffer = -66687,
    kAudioQueueErr_BufferEmpty = -66686,
    kAudioQueueErr_DisposalPending = -66685,
    kAudioQueueErr_InvalidProperty = -66684,
    kAudioQueueErr_InvalidPropertySize = -66683,
    kAudioQueueErr_InvalidParameter = -66682,
    kAudioQueueErr_CannotStart = -66681,
    kAudioQueueErr_InvalidDevice = -66680,
    kAudioQueueErr_BufferInQueue = -66679,
    kAudioQueueErr_InvalidRunState = -66678,
    kAudioQueueErr_InvalidQueueType = -66677,
    kAudioQueueErr_Permissions = -66676,
    kAudioQueueErr_InvalidPropertyValue = -66675,
    kAudioQueueErr_PrimeTimedOut = -66674,
    kAudioQueueErr_CodecNotFound = -66673,
    kAudioQueueErr_InvalidCodecAccess = -66672,
    kAudioQueueErr_QueueInvalidated = -66671,
    kAudioQueueErr_TooManyTaps = -66670,
    kAudioQueueErr_InvalidTapContext = -66669,
    kAudioQueueErr_RecordUnderrun = -66668,
    kAudioQueueErr_InvalidTapType = -66667,
    kAudioQueueErr_BufferEnqueuedTwice = -66666,
    kAudioQueueErr_CannotStartYet = -66665,
    kAudioQueueErr_EnqueueDuringReset = -66632,
    kAudioQueueErr_InvalidOfflineMode = -66626,
    _,
};
pub const kAudioQueueProperty_IsRunning = @enumToInt(enum_unnamed_413.kAudioQueueProperty_IsRunning);
pub const kAudioQueueDeviceProperty_SampleRate = @enumToInt(enum_unnamed_413.kAudioQueueDeviceProperty_SampleRate);
pub const kAudioQueueDeviceProperty_NumberChannels = @enumToInt(enum_unnamed_413.kAudioQueueDeviceProperty_NumberChannels);
pub const kAudioQueueProperty_CurrentDevice = @enumToInt(enum_unnamed_413.kAudioQueueProperty_CurrentDevice);
pub const kAudioQueueProperty_MagicCookie = @enumToInt(enum_unnamed_413.kAudioQueueProperty_MagicCookie);
pub const kAudioQueueProperty_MaximumOutputPacketSize = @enumToInt(enum_unnamed_413.kAudioQueueProperty_MaximumOutputPacketSize);
pub const kAudioQueueProperty_StreamDescription = @enumToInt(enum_unnamed_413.kAudioQueueProperty_StreamDescription);
pub const kAudioQueueProperty_ChannelLayout = @enumToInt(enum_unnamed_413.kAudioQueueProperty_ChannelLayout);
pub const kAudioQueueProperty_EnableLevelMetering = @enumToInt(enum_unnamed_413.kAudioQueueProperty_EnableLevelMetering);
pub const kAudioQueueProperty_CurrentLevelMeter = @enumToInt(enum_unnamed_413.kAudioQueueProperty_CurrentLevelMeter);
pub const kAudioQueueProperty_CurrentLevelMeterDB = @enumToInt(enum_unnamed_413.kAudioQueueProperty_CurrentLevelMeterDB);
pub const kAudioQueueProperty_DecodeBufferSizeFrames = @enumToInt(enum_unnamed_413.kAudioQueueProperty_DecodeBufferSizeFrames);
pub const kAudioQueueProperty_ConverterError = @enumToInt(enum_unnamed_413.kAudioQueueProperty_ConverterError);
pub const kAudioQueueProperty_EnableTimePitch = @enumToInt(enum_unnamed_413.kAudioQueueProperty_EnableTimePitch);
pub const kAudioQueueProperty_TimePitchAlgorithm = @enumToInt(enum_unnamed_413.kAudioQueueProperty_TimePitchAlgorithm);
pub const kAudioQueueProperty_TimePitchBypass = @enumToInt(enum_unnamed_413.kAudioQueueProperty_TimePitchBypass);
const enum_unnamed_413 = extern enum(c_int) {
    kAudioQueueProperty_IsRunning = 1634824814,
    kAudioQueueDeviceProperty_SampleRate = 1634825074,
    kAudioQueueDeviceProperty_NumberChannels = 1634821219,
    kAudioQueueProperty_CurrentDevice = 1634820964,
    kAudioQueueProperty_MagicCookie = 1634823523,
    kAudioQueueProperty_MaximumOutputPacketSize = 2020569203,
    kAudioQueueProperty_StreamDescription = 1634821748,
    kAudioQueueProperty_ChannelLayout = 1634820972,
    kAudioQueueProperty_EnableLevelMetering = 1634823525,
    kAudioQueueProperty_CurrentLevelMeter = 1634823542,
    kAudioQueueProperty_CurrentLevelMeterDB = 1634823524,
    kAudioQueueProperty_DecodeBufferSizeFrames = 1684234854,
    kAudioQueueProperty_ConverterError = 1902343781,
    kAudioQueueProperty_EnableTimePitch = 1902081136,
    kAudioQueueProperty_TimePitchAlgorithm = 1903456353,
    kAudioQueueProperty_TimePitchBypass = 1903456354,
    _,
};
pub const kAudioQueueTimePitchAlgorithm_Spectral = @enumToInt(enum_unnamed_414.kAudioQueueTimePitchAlgorithm_Spectral);
pub const kAudioQueueTimePitchAlgorithm_TimeDomain = @enumToInt(enum_unnamed_414.kAudioQueueTimePitchAlgorithm_TimeDomain);
pub const kAudioQueueTimePitchAlgorithm_Varispeed = @enumToInt(enum_unnamed_414.kAudioQueueTimePitchAlgorithm_Varispeed);
const enum_unnamed_414 = extern enum(c_int) {
    kAudioQueueTimePitchAlgorithm_Spectral = 1936745827,
    kAudioQueueTimePitchAlgorithm_TimeDomain = 1953064047,
    kAudioQueueTimePitchAlgorithm_Varispeed = 1987276900,
    _,
};
pub const kAudioQueueProperty_ChannelAssignments = @enumToInt(enum_unnamed_415.kAudioQueueProperty_ChannelAssignments);
const enum_unnamed_415 = extern enum(c_int) {
    kAudioQueueProperty_ChannelAssignments = 1634820961,
    _,
};
pub const kAudioQueueParam_Volume = @enumToInt(enum_unnamed_416.kAudioQueueParam_Volume);
pub const kAudioQueueParam_PlayRate = @enumToInt(enum_unnamed_416.kAudioQueueParam_PlayRate);
pub const kAudioQueueParam_Pitch = @enumToInt(enum_unnamed_416.kAudioQueueParam_Pitch);
pub const kAudioQueueParam_VolumeRampTime = @enumToInt(enum_unnamed_416.kAudioQueueParam_VolumeRampTime);
pub const kAudioQueueParam_Pan = @enumToInt(enum_unnamed_416.kAudioQueueParam_Pan);
const enum_unnamed_416 = extern enum(c_int) {
    kAudioQueueParam_Volume = 1,
    kAudioQueueParam_PlayRate = 2,
    kAudioQueueParam_Pitch = 3,
    kAudioQueueParam_VolumeRampTime = 4,
    kAudioQueueParam_Pan = 13,
    _,
};
pub const AudioQueueProcessingTapFlags = UInt32;
pub const kAudioQueueProcessingTap_PreEffects = @enumToInt(enum_unnamed_417.kAudioQueueProcessingTap_PreEffects);
pub const kAudioQueueProcessingTap_PostEffects = @enumToInt(enum_unnamed_417.kAudioQueueProcessingTap_PostEffects);
pub const kAudioQueueProcessingTap_Siphon = @enumToInt(enum_unnamed_417.kAudioQueueProcessingTap_Siphon);
pub const kAudioQueueProcessingTap_StartOfStream = @enumToInt(enum_unnamed_417.kAudioQueueProcessingTap_StartOfStream);
pub const kAudioQueueProcessingTap_EndOfStream = @enumToInt(enum_unnamed_417.kAudioQueueProcessingTap_EndOfStream);
const enum_unnamed_417 = extern enum(c_int) {
    kAudioQueueProcessingTap_PreEffects = 1,
    kAudioQueueProcessingTap_PostEffects = 2,
    kAudioQueueProcessingTap_Siphon = 4,
    kAudioQueueProcessingTap_StartOfStream = 256,
    kAudioQueueProcessingTap_EndOfStream = 512,
    _,
};
pub const struct_AudioQueueBuffer = extern struct {
    mAudioDataBytesCapacity: UInt32,
    mAudioData: ?*c_void,
    mAudioDataByteSize: UInt32,
    mUserData: ?*c_void,
    mPacketDescriptionCapacity: UInt32,
    mPacketDescriptions: [*c]AudioStreamPacketDescription,
    mPacketDescriptionCount: UInt32,
};
pub const AudioQueueBuffer = struct_AudioQueueBuffer;
pub const AudioQueueBufferRef = [*c]AudioQueueBuffer;
pub const struct_AudioQueueParameterEvent = extern struct {
    mID: AudioQueueParameterID,
    mValue: AudioQueueParameterValue,
};
pub const AudioQueueParameterEvent = struct_AudioQueueParameterEvent;
pub const struct_AudioQueueLevelMeterState = extern struct {
    mAveragePower: Float32,
    mPeakPower: Float32,
};
pub const AudioQueueLevelMeterState = struct_AudioQueueLevelMeterState;
pub const struct_OpaqueAudioQueueProcessingTap = @OpaqueType();
pub const AudioQueueProcessingTapRef = ?*struct_OpaqueAudioQueueProcessingTap;
pub const struct_AudioQueueChannelAssignment = extern struct {
    mDeviceUID: CFStringRef,
    mChannelNumber: UInt32,
};
pub const AudioQueueChannelAssignment = struct_AudioQueueChannelAssignment;
pub const AudioQueueOutputCallbackBlock = @compileError("unable to resolve typedef child type"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/AudioToolbox.framework/Headers/AudioQueue.h:637:16: warning: unsupported type: 'BlockPointer'
pub const AudioQueueInputCallbackBlock = @compileError("unable to resolve typedef child type");
pub const AudioQueueOutputCallback = ?fn (?*c_void, AudioQueueRef, AudioQueueBufferRef) callconv(.C) void;
pub const AudioQueueInputCallback = ?fn (?*c_void, AudioQueueRef, AudioQueueBufferRef, [*c]const AudioTimeStamp, UInt32, [*c]const AudioStreamPacketDescription) callconv(.C) void;
pub const AudioQueuePropertyListenerProc = ?fn (?*c_void, AudioQueueRef, AudioQueuePropertyID) callconv(.C) void;
pub const AudioQueueProcessingTapCallback = ?fn (?*c_void, AudioQueueProcessingTapRef, UInt32, [*c]AudioTimeStamp, [*c]AudioQueueProcessingTapFlags, [*c]UInt32, [*c]AudioBufferList) callconv(.C) void;
pub extern fn AudioQueueNewOutput(inFormat: [*c]const AudioStreamBasicDescription, inCallbackProc: AudioQueueOutputCallback, inUserData: ?*c_void, inCallbackRunLoop: CFRunLoopRef, inCallbackRunLoopMode: CFStringRef, inFlags: UInt32, outAQ: [*c]AudioQueueRef) OSStatus;
pub extern fn AudioQueueNewInput(inFormat: [*c]const AudioStreamBasicDescription, inCallbackProc: AudioQueueInputCallback, inUserData: ?*c_void, inCallbackRunLoop: CFRunLoopRef, inCallbackRunLoopMode: CFStringRef, inFlags: UInt32, outAQ: [*c]AudioQueueRef) OSStatus;
pub extern fn AudioQueueNewOutputWithDispatchQueue(outAQ: [*c]AudioQueueRef, inFormat: [*c]const AudioStreamBasicDescription, inFlags: UInt32, inCallbackDispatchQueue: dispatch_queue_t, inCallbackBlock: AudioQueueOutputCallbackBlock) OSStatus;
pub extern fn AudioQueueNewInputWithDispatchQueue(outAQ: [*c]AudioQueueRef, inFormat: [*c]const AudioStreamBasicDescription, inFlags: UInt32, inCallbackDispatchQueue: dispatch_queue_t, inCallbackBlock: AudioQueueInputCallbackBlock) OSStatus;
pub extern fn AudioQueueDispose(inAQ: AudioQueueRef, inImmediate: Boolean) OSStatus;
pub extern fn AudioQueueAllocateBuffer(inAQ: AudioQueueRef, inBufferByteSize: UInt32, outBuffer: [*c]AudioQueueBufferRef) OSStatus;
pub extern fn AudioQueueAllocateBufferWithPacketDescriptions(inAQ: AudioQueueRef, inBufferByteSize: UInt32, inNumberPacketDescriptions: UInt32, outBuffer: [*c]AudioQueueBufferRef) OSStatus;
pub extern fn AudioQueueFreeBuffer(inAQ: AudioQueueRef, inBuffer: AudioQueueBufferRef) OSStatus;
pub extern fn AudioQueueEnqueueBuffer(inAQ: AudioQueueRef, inBuffer: AudioQueueBufferRef, inNumPacketDescs: UInt32, inPacketDescs: [*c]const AudioStreamPacketDescription) OSStatus;
pub extern fn AudioQueueEnqueueBufferWithParameters(inAQ: AudioQueueRef, inBuffer: AudioQueueBufferRef, inNumPacketDescs: UInt32, inPacketDescs: [*c]const AudioStreamPacketDescription, inTrimFramesAtStart: UInt32, inTrimFramesAtEnd: UInt32, inNumParamValues: UInt32, inParamValues: [*c]const AudioQueueParameterEvent, inStartTime: [*c]const AudioTimeStamp, outActualStartTime: [*c]AudioTimeStamp) OSStatus;
pub extern fn AudioQueueStart(inAQ: AudioQueueRef, inStartTime: [*c]const AudioTimeStamp) OSStatus;
pub extern fn AudioQueuePrime(inAQ: AudioQueueRef, inNumberOfFramesToPrepare: UInt32, outNumberOfFramesPrepared: [*c]UInt32) OSStatus;
pub extern fn AudioQueueStop(inAQ: AudioQueueRef, inImmediate: Boolean) OSStatus;
pub extern fn AudioQueuePause(inAQ: AudioQueueRef) OSStatus;
pub extern fn AudioQueueFlush(inAQ: AudioQueueRef) OSStatus;
pub extern fn AudioQueueReset(inAQ: AudioQueueRef) OSStatus;
pub extern fn AudioQueueGetParameter(inAQ: AudioQueueRef, inParamID: AudioQueueParameterID, outValue: [*c]AudioQueueParameterValue) OSStatus;
pub extern fn AudioQueueSetParameter(inAQ: AudioQueueRef, inParamID: AudioQueueParameterID, inValue: AudioQueueParameterValue) OSStatus;
pub extern fn AudioQueueGetProperty(inAQ: AudioQueueRef, inID: AudioQueuePropertyID, outData: ?*c_void, ioDataSize: [*c]UInt32) OSStatus;
pub extern fn AudioQueueSetProperty(inAQ: AudioQueueRef, inID: AudioQueuePropertyID, inData: ?*const c_void, inDataSize: UInt32) OSStatus;
pub extern fn AudioQueueGetPropertySize(inAQ: AudioQueueRef, inID: AudioQueuePropertyID, outDataSize: [*c]UInt32) OSStatus;
pub extern fn AudioQueueAddPropertyListener(inAQ: AudioQueueRef, inID: AudioQueuePropertyID, inProc: AudioQueuePropertyListenerProc, inUserData: ?*c_void) OSStatus;
pub extern fn AudioQueueRemovePropertyListener(inAQ: AudioQueueRef, inID: AudioQueuePropertyID, inProc: AudioQueuePropertyListenerProc, inUserData: ?*c_void) OSStatus;
pub extern fn AudioQueueCreateTimeline(inAQ: AudioQueueRef, outTimeline: [*c]AudioQueueTimelineRef) OSStatus;
pub extern fn AudioQueueDisposeTimeline(inAQ: AudioQueueRef, inTimeline: AudioQueueTimelineRef) OSStatus;
pub extern fn AudioQueueGetCurrentTime(inAQ: AudioQueueRef, inTimeline: AudioQueueTimelineRef, outTimeStamp: [*c]AudioTimeStamp, outTimelineDiscontinuity: [*c]Boolean) OSStatus;
pub extern fn AudioQueueDeviceGetCurrentTime(inAQ: AudioQueueRef, outTimeStamp: [*c]AudioTimeStamp) OSStatus;
pub extern fn AudioQueueDeviceTranslateTime(inAQ: AudioQueueRef, inTime: [*c]const AudioTimeStamp, outTime: [*c]AudioTimeStamp) OSStatus;
pub extern fn AudioQueueDeviceGetNearestStartTime(inAQ: AudioQueueRef, ioRequestedStartTime: [*c]AudioTimeStamp, inFlags: UInt32) OSStatus;
pub extern fn AudioQueueSetOfflineRenderFormat(inAQ: AudioQueueRef, inFormat: [*c]const AudioStreamBasicDescription, inLayout: [*c]const AudioChannelLayout) OSStatus;
pub extern fn AudioQueueOfflineRender(inAQ: AudioQueueRef, inTimestamp: [*c]const AudioTimeStamp, ioBuffer: AudioQueueBufferRef, inNumberFrames: UInt32) OSStatus;
pub extern fn AudioQueueProcessingTapNew(inAQ: AudioQueueRef, inCallback: AudioQueueProcessingTapCallback, inClientData: ?*c_void, inFlags: AudioQueueProcessingTapFlags, outMaxFrames: [*c]UInt32, outProcessingFormat: [*c]AudioStreamBasicDescription, outAQTap: [*c]AudioQueueProcessingTapRef) OSStatus;
pub extern fn AudioQueueProcessingTapDispose(inAQTap: AudioQueueProcessingTapRef) OSStatus;
pub extern fn AudioQueueProcessingTapGetSourceAudio(inAQTap: AudioQueueProcessingTapRef, inNumberFrames: UInt32, ioTimeStamp: [*c]AudioTimeStamp, outFlags: [*c]AudioQueueProcessingTapFlags, outNumberFrames: [*c]UInt32, ioData: [*c]AudioBufferList) OSStatus;
pub extern fn AudioQueueProcessingTapGetQueueTime(inAQTap: AudioQueueProcessingTapRef, outQueueSampleTime: [*c]Float64, outQueueFrameCount: [*c]UInt32) OSStatus;
pub const kAudioHardwareServiceProperty_ServiceRestarted = @enumToInt(enum_unnamed_418.kAudioHardwareServiceProperty_ServiceRestarted);
pub const kAudioHardwareServiceDeviceProperty_VirtualMasterVolume = @enumToInt(enum_unnamed_418.kAudioHardwareServiceDeviceProperty_VirtualMasterVolume);
pub const kAudioHardwareServiceDeviceProperty_VirtualMasterBalance = @enumToInt(enum_unnamed_418.kAudioHardwareServiceDeviceProperty_VirtualMasterBalance);
const enum_unnamed_418 = extern enum(c_int) {
    kAudioHardwareServiceProperty_ServiceRestarted = 1936880500,
    kAudioHardwareServiceDeviceProperty_VirtualMasterVolume = 1986885219,
    kAudioHardwareServiceDeviceProperty_VirtualMasterBalance = 1986880099,
    _,
};
pub extern fn AudioHardwareServiceHasProperty(inObjectID: AudioObjectID, inAddress: [*c]const AudioObjectPropertyAddress) Boolean;
pub extern fn AudioHardwareServiceIsPropertySettable(inObjectID: AudioObjectID, inAddress: [*c]const AudioObjectPropertyAddress, outIsSettable: [*c]Boolean) OSStatus;
pub extern fn AudioHardwareServiceGetPropertyDataSize(inObjectID: AudioObjectID, inAddress: [*c]const AudioObjectPropertyAddress, inQualifierDataSize: UInt32, inQualifierData: ?*const c_void, outDataSize: [*c]UInt32) OSStatus;
pub extern fn AudioHardwareServiceGetPropertyData(inObjectID: AudioObjectID, inAddress: [*c]const AudioObjectPropertyAddress, inQualifierDataSize: UInt32, inQualifierData: ?*const c_void, ioDataSize: [*c]UInt32, outData: ?*c_void) OSStatus;
pub extern fn AudioHardwareServiceSetPropertyData(inObjectID: AudioObjectID, inAddress: [*c]const AudioObjectPropertyAddress, inQualifierDataSize: UInt32, inQualifierData: ?*const c_void, inDataSize: UInt32, inData: ?*const c_void) OSStatus;
pub extern fn AudioHardwareServiceAddPropertyListener(inObjectID: AudioObjectID, inAddress: [*c]const AudioObjectPropertyAddress, inListener: AudioObjectPropertyListenerProc, inClientData: ?*c_void) OSStatus;
pub extern fn AudioHardwareServiceRemovePropertyListener(inObjectID: AudioObjectID, inAddress: [*c]const AudioObjectPropertyAddress, inListener: AudioObjectPropertyListenerProc, inClientData: ?*c_void) OSStatus;
pub const kAudioServicesNoError = @enumToInt(enum_unnamed_419.kAudioServicesNoError);
pub const kAudioServicesUnsupportedPropertyError = @enumToInt(enum_unnamed_419.kAudioServicesUnsupportedPropertyError);
pub const kAudioServicesBadPropertySizeError = @enumToInt(enum_unnamed_419.kAudioServicesBadPropertySizeError);
pub const kAudioServicesBadSpecifierSizeError = @enumToInt(enum_unnamed_419.kAudioServicesBadSpecifierSizeError);
pub const kAudioServicesSystemSoundUnspecifiedError = @enumToInt(enum_unnamed_419.kAudioServicesSystemSoundUnspecifiedError);
pub const kAudioServicesSystemSoundClientTimedOutError = @enumToInt(enum_unnamed_419.kAudioServicesSystemSoundClientTimedOutError);
pub const kAudioServicesSystemSoundExceededMaximumDurationError = @enumToInt(enum_unnamed_419.kAudioServicesSystemSoundExceededMaximumDurationError);
const enum_unnamed_419 = extern enum(c_int) {
    kAudioServicesNoError = 0,
    kAudioServicesUnsupportedPropertyError = 1886681407,
    kAudioServicesBadPropertySizeError = 561211770,
    kAudioServicesBadSpecifierSizeError = 561213539,
    kAudioServicesSystemSoundUnspecifiedError = -1500,
    kAudioServicesSystemSoundClientTimedOutError = -1501,
    kAudioServicesSystemSoundExceededMaximumDurationError = -1502,
    _,
};
pub const SystemSoundID = UInt32;
pub const AudioServicesPropertyID = UInt32;
pub const AudioServicesSystemSoundCompletionProc = ?fn (SystemSoundID, ?*c_void) callconv(.C) void;
pub const kSystemSoundID_UserPreferredAlert = @enumToInt(enum_unnamed_420.kSystemSoundID_UserPreferredAlert);
pub const kSystemSoundID_FlashScreen = @enumToInt(enum_unnamed_420.kSystemSoundID_FlashScreen);
pub const kUserPreferredAlert = @enumToInt(enum_unnamed_420.kUserPreferredAlert);
const enum_unnamed_420 = extern enum(c_int) {
    kSystemSoundID_UserPreferredAlert = 4096,
    kSystemSoundID_FlashScreen = 4094,
    kUserPreferredAlert = 4096,
    _,
};
pub const kSystemSoundID_Vibrate = @enumToInt(enum_unnamed_421.kSystemSoundID_Vibrate);
const enum_unnamed_421 = extern enum(c_int) {
    kSystemSoundID_Vibrate = 4095,
    _,
};
pub const kAudioServicesPropertyIsUISound = @enumToInt(enum_unnamed_422.kAudioServicesPropertyIsUISound);
pub const kAudioServicesPropertyCompletePlaybackIfAppDies = @enumToInt(enum_unnamed_422.kAudioServicesPropertyCompletePlaybackIfAppDies);
const enum_unnamed_422 = extern enum(c_int) {
    kAudioServicesPropertyIsUISound = 1769174377,
    kAudioServicesPropertyCompletePlaybackIfAppDies = 1768318057,
    _,
};
pub extern fn AudioServicesCreateSystemSoundID(inFileURL: CFURLRef, outSystemSoundID: [*c]SystemSoundID) OSStatus;
pub extern fn AudioServicesDisposeSystemSoundID(inSystemSoundID: SystemSoundID) OSStatus; // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/AudioToolbox.framework/Headers/AudioServices.h:212:1: warning: unsupported type: 'BlockPointer'
pub const AudioServicesPlayAlertSoundWithCompletion = @compileError("unable to resolve prototype of function"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/AudioToolbox.framework/Headers/AudioServices.h:229:1: warning: unsupported type: 'BlockPointer'
pub const AudioServicesPlaySystemSoundWithCompletion = @compileError("unable to resolve prototype of function");
pub extern fn AudioServicesGetPropertyInfo(inPropertyID: AudioServicesPropertyID, inSpecifierSize: UInt32, inSpecifier: ?*const c_void, outPropertyDataSize: [*c]UInt32, outWritable: [*c]Boolean) OSStatus;
pub extern fn AudioServicesGetProperty(inPropertyID: AudioServicesPropertyID, inSpecifierSize: UInt32, inSpecifier: ?*const c_void, ioPropertyDataSize: [*c]UInt32, outPropertyData: ?*c_void) OSStatus;
pub extern fn AudioServicesSetProperty(inPropertyID: AudioServicesPropertyID, inSpecifierSize: UInt32, inSpecifier: ?*const c_void, inPropertyDataSize: UInt32, inPropertyData: ?*const c_void) OSStatus;
pub extern fn AudioServicesPlayAlertSound(inSystemSoundID: SystemSoundID) void;
pub extern fn AudioServicesPlaySystemSound(inSystemSoundID: SystemSoundID) void;
pub extern fn AudioServicesAddSystemSoundCompletion(inSystemSoundID: SystemSoundID, inRunLoop: CFRunLoopRef, inRunLoopMode: CFStringRef, inCompletionRoutine: AudioServicesSystemSoundCompletionProc, inClientData: ?*c_void) OSStatus;
pub extern fn AudioServicesRemoveSystemSoundCompletion(inSystemSoundID: SystemSoundID) void;
pub const kCAF_FileType = @enumToInt(enum_unnamed_423.kCAF_FileType);
pub const kCAF_FileVersion_Initial = @enumToInt(enum_unnamed_423.kCAF_FileVersion_Initial);
const enum_unnamed_423 = extern enum(c_int) {
    kCAF_FileType = 1667327590,
    kCAF_FileVersion_Initial = 1,
    _,
};
pub const kCAF_StreamDescriptionChunkID = @enumToInt(enum_unnamed_424.kCAF_StreamDescriptionChunkID);
pub const kCAF_AudioDataChunkID = @enumToInt(enum_unnamed_424.kCAF_AudioDataChunkID);
pub const kCAF_ChannelLayoutChunkID = @enumToInt(enum_unnamed_424.kCAF_ChannelLayoutChunkID);
pub const kCAF_FillerChunkID = @enumToInt(enum_unnamed_424.kCAF_FillerChunkID);
pub const kCAF_MarkerChunkID = @enumToInt(enum_unnamed_424.kCAF_MarkerChunkID);
pub const kCAF_RegionChunkID = @enumToInt(enum_unnamed_424.kCAF_RegionChunkID);
pub const kCAF_InstrumentChunkID = @enumToInt(enum_unnamed_424.kCAF_InstrumentChunkID);
pub const kCAF_MagicCookieID = @enumToInt(enum_unnamed_424.kCAF_MagicCookieID);
pub const kCAF_InfoStringsChunkID = @enumToInt(enum_unnamed_424.kCAF_InfoStringsChunkID);
pub const kCAF_EditCommentsChunkID = @enumToInt(enum_unnamed_424.kCAF_EditCommentsChunkID);
pub const kCAF_PacketTableChunkID = @enumToInt(enum_unnamed_424.kCAF_PacketTableChunkID);
pub const kCAF_StringsChunkID = @enumToInt(enum_unnamed_424.kCAF_StringsChunkID);
pub const kCAF_UUIDChunkID = @enumToInt(enum_unnamed_424.kCAF_UUIDChunkID);
pub const kCAF_PeakChunkID = @enumToInt(enum_unnamed_424.kCAF_PeakChunkID);
pub const kCAF_OverviewChunkID = @enumToInt(enum_unnamed_424.kCAF_OverviewChunkID);
pub const kCAF_MIDIChunkID = @enumToInt(enum_unnamed_424.kCAF_MIDIChunkID);
pub const kCAF_UMIDChunkID = @enumToInt(enum_unnamed_424.kCAF_UMIDChunkID);
pub const kCAF_FormatListID = @enumToInt(enum_unnamed_424.kCAF_FormatListID);
pub const kCAF_iXMLChunkID = @enumToInt(enum_unnamed_424.kCAF_iXMLChunkID);
const enum_unnamed_424 = extern enum(c_int) {
    kCAF_StreamDescriptionChunkID = 1684370275,
    kCAF_AudioDataChunkID = 1684108385,
    kCAF_ChannelLayoutChunkID = 1667785070,
    kCAF_FillerChunkID = 1718773093,
    kCAF_MarkerChunkID = 1835102827,
    kCAF_RegionChunkID = 1919248238,
    kCAF_InstrumentChunkID = 1768846196,
    kCAF_MagicCookieID = 1802857321,
    kCAF_InfoStringsChunkID = 1768842863,
    kCAF_EditCommentsChunkID = 1701077876,
    kCAF_PacketTableChunkID = 1885432692,
    kCAF_StringsChunkID = 1937011303,
    kCAF_UUIDChunkID = 1970628964,
    kCAF_PeakChunkID = 1885692267,
    kCAF_OverviewChunkID = 1870034551,
    kCAF_MIDIChunkID = 1835623529,
    kCAF_UMIDChunkID = 1970104676,
    kCAF_FormatListID = 1818522467,
    kCAF_iXMLChunkID = 1767394636,
    _,
};
pub const struct_CAFFileHeader = packed struct {
    mFileType: UInt32,
    mFileVersion: UInt16,
    mFileFlags: UInt16,
};
pub const CAFFileHeader = struct_CAFFileHeader;
pub const struct_CAFChunkHeader = packed struct {
    mChunkType: UInt32,
    mChunkSize: SInt64,
};
pub const CAFChunkHeader = struct_CAFChunkHeader;
pub const struct_CAF_UUID_ChunkHeader = packed struct {
    mHeader: CAFChunkHeader,
    mUUID: [16]UInt8,
};
pub const CAF_UUID_ChunkHeader = struct_CAF_UUID_ChunkHeader;
pub const CAFFormatFlags = UInt32;
pub const kCAFLinearPCMFormatFlagIsFloat = @enumToInt(enum_unnamed_425.kCAFLinearPCMFormatFlagIsFloat);
pub const kCAFLinearPCMFormatFlagIsLittleEndian = @enumToInt(enum_unnamed_425.kCAFLinearPCMFormatFlagIsLittleEndian);
const enum_unnamed_425 = extern enum(c_int) {
    kCAFLinearPCMFormatFlagIsFloat = 1,
    kCAFLinearPCMFormatFlagIsLittleEndian = 2,
    _,
};
pub const struct_CAFAudioDescription = packed struct {
    mSampleRate: Float64,
    mFormatID: UInt32,
    mFormatFlags: CAFFormatFlags,
    mBytesPerPacket: UInt32,
    mFramesPerPacket: UInt32,
    mChannelsPerFrame: UInt32,
    mBitsPerChannel: UInt32,
};
pub const CAFAudioDescription = struct_CAFAudioDescription;
pub const struct_CAFAudioFormatListItem = packed struct {
    mFormat: CAFAudioDescription,
    mChannelLayoutTag: UInt32,
};
pub const struct_CAFPacketTableHeader = packed struct {
    mNumberPackets: SInt64,
    mNumberValidFrames: SInt64,
    mPrimingFrames: SInt32,
    mRemainderFrames: SInt32,
    mPacketDescriptions: [1]UInt8,
};
pub const CAFPacketTableHeader = struct_CAFPacketTableHeader;
pub const struct_CAFDataChunk = packed struct {
    mEditCount: UInt32,
    mData: [1]UInt8,
};
pub const CAFDataChunk = struct_CAFDataChunk;
pub const kCAFMarkerType_Generic = @enumToInt(enum_unnamed_426.kCAFMarkerType_Generic);
pub const kCAFMarkerType_ProgramStart = @enumToInt(enum_unnamed_426.kCAFMarkerType_ProgramStart);
pub const kCAFMarkerType_ProgramEnd = @enumToInt(enum_unnamed_426.kCAFMarkerType_ProgramEnd);
pub const kCAFMarkerType_TrackStart = @enumToInt(enum_unnamed_426.kCAFMarkerType_TrackStart);
pub const kCAFMarkerType_TrackEnd = @enumToInt(enum_unnamed_426.kCAFMarkerType_TrackEnd);
pub const kCAFMarkerType_Index = @enumToInt(enum_unnamed_426.kCAFMarkerType_Index);
pub const kCAFMarkerType_RegionStart = @enumToInt(enum_unnamed_426.kCAFMarkerType_RegionStart);
pub const kCAFMarkerType_RegionEnd = @enumToInt(enum_unnamed_426.kCAFMarkerType_RegionEnd);
pub const kCAFMarkerType_RegionSyncPoint = @enumToInt(enum_unnamed_426.kCAFMarkerType_RegionSyncPoint);
pub const kCAFMarkerType_SelectionStart = @enumToInt(enum_unnamed_426.kCAFMarkerType_SelectionStart);
pub const kCAFMarkerType_SelectionEnd = @enumToInt(enum_unnamed_426.kCAFMarkerType_SelectionEnd);
pub const kCAFMarkerType_EditSourceBegin = @enumToInt(enum_unnamed_426.kCAFMarkerType_EditSourceBegin);
pub const kCAFMarkerType_EditSourceEnd = @enumToInt(enum_unnamed_426.kCAFMarkerType_EditSourceEnd);
pub const kCAFMarkerType_EditDestinationBegin = @enumToInt(enum_unnamed_426.kCAFMarkerType_EditDestinationBegin);
pub const kCAFMarkerType_EditDestinationEnd = @enumToInt(enum_unnamed_426.kCAFMarkerType_EditDestinationEnd);
pub const kCAFMarkerType_SustainLoopStart = @enumToInt(enum_unnamed_426.kCAFMarkerType_SustainLoopStart);
pub const kCAFMarkerType_SustainLoopEnd = @enumToInt(enum_unnamed_426.kCAFMarkerType_SustainLoopEnd);
pub const kCAFMarkerType_ReleaseLoopStart = @enumToInt(enum_unnamed_426.kCAFMarkerType_ReleaseLoopStart);
pub const kCAFMarkerType_ReleaseLoopEnd = @enumToInt(enum_unnamed_426.kCAFMarkerType_ReleaseLoopEnd);
pub const kCAFMarkerType_SavedPlayPosition = @enumToInt(enum_unnamed_426.kCAFMarkerType_SavedPlayPosition);
pub const kCAFMarkerType_Tempo = @enumToInt(enum_unnamed_426.kCAFMarkerType_Tempo);
pub const kCAFMarkerType_TimeSignature = @enumToInt(enum_unnamed_426.kCAFMarkerType_TimeSignature);
pub const kCAFMarkerType_KeySignature = @enumToInt(enum_unnamed_426.kCAFMarkerType_KeySignature);
const enum_unnamed_426 = extern enum(c_int) {
    kCAFMarkerType_Generic = 0,
    kCAFMarkerType_ProgramStart = 1885496679,
    kCAFMarkerType_ProgramEnd = 1885695588,
    kCAFMarkerType_TrackStart = 1952605543,
    kCAFMarkerType_TrackEnd = 1952804452,
    kCAFMarkerType_Index = 1768842360,
    kCAFMarkerType_RegionStart = 1919051111,
    kCAFMarkerType_RegionEnd = 1919250020,
    kCAFMarkerType_RegionSyncPoint = 1920170339,
    kCAFMarkerType_SelectionStart = 1935828327,
    kCAFMarkerType_SelectionEnd = 1936027236,
    kCAFMarkerType_EditSourceBegin = 1667392871,
    kCAFMarkerType_EditSourceEnd = 1667591780,
    kCAFMarkerType_EditDestinationBegin = 1684170087,
    kCAFMarkerType_EditDestinationEnd = 1684368996,
    kCAFMarkerType_SustainLoopStart = 1936482919,
    kCAFMarkerType_SustainLoopEnd = 1936483694,
    kCAFMarkerType_ReleaseLoopStart = 1919705703,
    kCAFMarkerType_ReleaseLoopEnd = 1919706478,
    kCAFMarkerType_SavedPlayPosition = 1936747641,
    kCAFMarkerType_Tempo = 1953329263,
    kCAFMarkerType_TimeSignature = 1953720679,
    kCAFMarkerType_KeySignature = 1802725735,
    _,
};
pub const kCAF_SMPTE_TimeTypeNone = @enumToInt(enum_unnamed_427.kCAF_SMPTE_TimeTypeNone);
pub const kCAF_SMPTE_TimeType24 = @enumToInt(enum_unnamed_427.kCAF_SMPTE_TimeType24);
pub const kCAF_SMPTE_TimeType25 = @enumToInt(enum_unnamed_427.kCAF_SMPTE_TimeType25);
pub const kCAF_SMPTE_TimeType30Drop = @enumToInt(enum_unnamed_427.kCAF_SMPTE_TimeType30Drop);
pub const kCAF_SMPTE_TimeType30 = @enumToInt(enum_unnamed_427.kCAF_SMPTE_TimeType30);
pub const kCAF_SMPTE_TimeType2997 = @enumToInt(enum_unnamed_427.kCAF_SMPTE_TimeType2997);
pub const kCAF_SMPTE_TimeType2997Drop = @enumToInt(enum_unnamed_427.kCAF_SMPTE_TimeType2997Drop);
pub const kCAF_SMPTE_TimeType60 = @enumToInt(enum_unnamed_427.kCAF_SMPTE_TimeType60);
pub const kCAF_SMPTE_TimeType5994 = @enumToInt(enum_unnamed_427.kCAF_SMPTE_TimeType5994);
pub const kCAF_SMPTE_TimeType60Drop = @enumToInt(enum_unnamed_427.kCAF_SMPTE_TimeType60Drop);
pub const kCAF_SMPTE_TimeType5994Drop = @enumToInt(enum_unnamed_427.kCAF_SMPTE_TimeType5994Drop);
pub const kCAF_SMPTE_TimeType50 = @enumToInt(enum_unnamed_427.kCAF_SMPTE_TimeType50);
pub const kCAF_SMPTE_TimeType2398 = @enumToInt(enum_unnamed_427.kCAF_SMPTE_TimeType2398);
const enum_unnamed_427 = extern enum(c_int) {
    kCAF_SMPTE_TimeTypeNone = 0,
    kCAF_SMPTE_TimeType24 = 1,
    kCAF_SMPTE_TimeType25 = 2,
    kCAF_SMPTE_TimeType30Drop = 3,
    kCAF_SMPTE_TimeType30 = 4,
    kCAF_SMPTE_TimeType2997 = 5,
    kCAF_SMPTE_TimeType2997Drop = 6,
    kCAF_SMPTE_TimeType60 = 7,
    kCAF_SMPTE_TimeType5994 = 8,
    kCAF_SMPTE_TimeType60Drop = 9,
    kCAF_SMPTE_TimeType5994Drop = 10,
    kCAF_SMPTE_TimeType50 = 11,
    kCAF_SMPTE_TimeType2398 = 12,
    _,
};
pub const struct_CAF_SMPTE_Time = packed struct {
    mHours: SInt8,
    mMinutes: SInt8,
    mSeconds: SInt8,
    mFrames: SInt8,
    mSubFrameSampleOffset: UInt32,
};
pub const CAF_SMPTE_Time = struct_CAF_SMPTE_Time;
pub const struct_CAFMarker = packed struct {
    mType: UInt32,
    mFramePosition: Float64,
    mMarkerID: UInt32,
    mSMPTETime: CAF_SMPTE_Time,
    mChannel: UInt32,
};
pub const CAFMarker = struct_CAFMarker;
pub const struct_CAFMarkerChunk = packed struct {
    mSMPTE_TimeType: UInt32,
    mNumberMarkers: UInt32,
    mMarkers: [1]CAFMarker,
};
pub const CAFMarkerChunk = struct_CAFMarkerChunk;
pub const CAFRegionFlags = UInt32;
pub const kCAFRegionFlag_LoopEnable = @enumToInt(enum_unnamed_428.kCAFRegionFlag_LoopEnable);
pub const kCAFRegionFlag_PlayForward = @enumToInt(enum_unnamed_428.kCAFRegionFlag_PlayForward);
pub const kCAFRegionFlag_PlayBackward = @enumToInt(enum_unnamed_428.kCAFRegionFlag_PlayBackward);
const enum_unnamed_428 = extern enum(c_int) {
    kCAFRegionFlag_LoopEnable = 1,
    kCAFRegionFlag_PlayForward = 2,
    kCAFRegionFlag_PlayBackward = 4,
    _,
};
pub const struct_CAFRegion = packed struct {
    mRegionID: UInt32,
    mFlags: CAFRegionFlags,
    mNumberMarkers: UInt32,
    mMarkers: [1]CAFMarker,
};
pub const CAFRegion = struct_CAFRegion;
pub const struct_CAFRegionChunk = packed struct {
    mSMPTE_TimeType: UInt32,
    mNumberRegions: UInt32,
    mRegions: [1]CAFRegion,
};
pub const CAFRegionChunk = struct_CAFRegionChunk;
pub const struct_CAFInstrumentChunk = packed struct {
    mBaseNote: Float32,
    mMIDILowNote: UInt8,
    mMIDIHighNote: UInt8,
    mMIDILowVelocity: UInt8,
    mMIDIHighVelocity: UInt8,
    mdBGain: Float32,
    mStartRegionID: UInt32,
    mSustainRegionID: UInt32,
    mReleaseRegionID: UInt32,
    mInstrumentID: UInt32,
};
pub const CAFInstrumentChunk = struct_CAFInstrumentChunk;
pub const struct_CAFStringID = packed struct {
    mStringID: UInt32,
    mStringStartByteOffset: SInt64,
};
pub const CAFStringID = struct_CAFStringID;
pub const struct_CAFStrings = packed struct {
    mNumEntries: UInt32,
    mStringsIDs: [1]CAFStringID,
};
pub const CAFStrings = struct_CAFStrings;
pub const struct_CAFInfoStrings = packed struct {
    mNumEntries: UInt32,
};
pub const CAFInfoStrings = struct_CAFInfoStrings;
pub const struct_CAFPositionPeak = packed struct {
    mValue: Float32,
    mFrameNumber: UInt64,
};
pub const CAFPositionPeak = struct_CAFPositionPeak;
pub const struct_CAFPeakChunk = packed struct {
    mEditCount: UInt32,
    mPeaks: [1]CAFPositionPeak,
};
pub const CAFPeakChunk = struct_CAFPeakChunk;
pub const struct_CAFOverviewSample = packed struct {
    mMinValue: SInt16,
    mMaxValue: SInt16,
};
pub const CAFOverviewSample = struct_CAFOverviewSample;
pub const struct_CAFOverviewChunk = packed struct {
    mEditCount: UInt32,
    mNumFramesPerOVWSample: UInt32,
    mData: [1]CAFOverviewSample,
};
pub const CAFOverviewChunk = struct_CAFOverviewChunk;
pub const struct_CAFUMIDChunk = packed struct {
    mBytes: [64]UInt8,
};
pub const CAFUMIDChunk = struct_CAFUMIDChunk;
pub extern fn CAShow(inObject: ?*c_void) void;
pub extern fn CAShowFile(inObject: ?*c_void, inFile: [*c]FILE) void;
pub const struct_OpaqueExtAudioFile = @OpaqueType();
pub const ExtAudioFileRef = ?*struct_OpaqueExtAudioFile;
pub const ExtAudioFilePropertyID = UInt32;
pub const kExtAudioFileProperty_FileDataFormat = @enumToInt(enum_unnamed_429.kExtAudioFileProperty_FileDataFormat);
pub const kExtAudioFileProperty_FileChannelLayout = @enumToInt(enum_unnamed_429.kExtAudioFileProperty_FileChannelLayout);
pub const kExtAudioFileProperty_ClientDataFormat = @enumToInt(enum_unnamed_429.kExtAudioFileProperty_ClientDataFormat);
pub const kExtAudioFileProperty_ClientChannelLayout = @enumToInt(enum_unnamed_429.kExtAudioFileProperty_ClientChannelLayout);
pub const kExtAudioFileProperty_CodecManufacturer = @enumToInt(enum_unnamed_429.kExtAudioFileProperty_CodecManufacturer);
pub const kExtAudioFileProperty_AudioConverter = @enumToInt(enum_unnamed_429.kExtAudioFileProperty_AudioConverter);
pub const kExtAudioFileProperty_AudioFile = @enumToInt(enum_unnamed_429.kExtAudioFileProperty_AudioFile);
pub const kExtAudioFileProperty_FileMaxPacketSize = @enumToInt(enum_unnamed_429.kExtAudioFileProperty_FileMaxPacketSize);
pub const kExtAudioFileProperty_ClientMaxPacketSize = @enumToInt(enum_unnamed_429.kExtAudioFileProperty_ClientMaxPacketSize);
pub const kExtAudioFileProperty_FileLengthFrames = @enumToInt(enum_unnamed_429.kExtAudioFileProperty_FileLengthFrames);
pub const kExtAudioFileProperty_ConverterConfig = @enumToInt(enum_unnamed_429.kExtAudioFileProperty_ConverterConfig);
pub const kExtAudioFileProperty_IOBufferSizeBytes = @enumToInt(enum_unnamed_429.kExtAudioFileProperty_IOBufferSizeBytes);
pub const kExtAudioFileProperty_IOBuffer = @enumToInt(enum_unnamed_429.kExtAudioFileProperty_IOBuffer);
pub const kExtAudioFileProperty_PacketTable = @enumToInt(enum_unnamed_429.kExtAudioFileProperty_PacketTable);
const enum_unnamed_429 = extern enum(c_int) {
    kExtAudioFileProperty_FileDataFormat = 1717988724,
    kExtAudioFileProperty_FileChannelLayout = 1717791855,
    kExtAudioFileProperty_ClientDataFormat = 1667657076,
    kExtAudioFileProperty_ClientChannelLayout = 1667460207,
    kExtAudioFileProperty_CodecManufacturer = 1668112750,
    kExtAudioFileProperty_AudioConverter = 1633906294,
    kExtAudioFileProperty_AudioFile = 1634101612,
    kExtAudioFileProperty_FileMaxPacketSize = 1718448243,
    kExtAudioFileProperty_ClientMaxPacketSize = 1668116595,
    kExtAudioFileProperty_FileLengthFrames = 593916525,
    kExtAudioFileProperty_ConverterConfig = 1633903462,
    kExtAudioFileProperty_IOBufferSizeBytes = 1768907379,
    kExtAudioFileProperty_IOBuffer = 1768907366,
    kExtAudioFileProperty_PacketTable = 2020635753,
    _,
};
pub const kExtAudioFileError_InvalidProperty = @enumToInt(enum_unnamed_430.kExtAudioFileError_InvalidProperty);
pub const kExtAudioFileError_InvalidPropertySize = @enumToInt(enum_unnamed_430.kExtAudioFileError_InvalidPropertySize);
pub const kExtAudioFileError_NonPCMClientFormat = @enumToInt(enum_unnamed_430.kExtAudioFileError_NonPCMClientFormat);
pub const kExtAudioFileError_InvalidChannelMap = @enumToInt(enum_unnamed_430.kExtAudioFileError_InvalidChannelMap);
pub const kExtAudioFileError_InvalidOperationOrder = @enumToInt(enum_unnamed_430.kExtAudioFileError_InvalidOperationOrder);
pub const kExtAudioFileError_InvalidDataFormat = @enumToInt(enum_unnamed_430.kExtAudioFileError_InvalidDataFormat);
pub const kExtAudioFileError_MaxPacketSizeUnknown = @enumToInt(enum_unnamed_430.kExtAudioFileError_MaxPacketSizeUnknown);
pub const kExtAudioFileError_InvalidSeek = @enumToInt(enum_unnamed_430.kExtAudioFileError_InvalidSeek);
pub const kExtAudioFileError_AsyncWriteTooLarge = @enumToInt(enum_unnamed_430.kExtAudioFileError_AsyncWriteTooLarge);
pub const kExtAudioFileError_AsyncWriteBufferOverflow = @enumToInt(enum_unnamed_430.kExtAudioFileError_AsyncWriteBufferOverflow);
const enum_unnamed_430 = extern enum(c_int) {
    kExtAudioFileError_InvalidProperty = -66561,
    kExtAudioFileError_InvalidPropertySize = -66562,
    kExtAudioFileError_NonPCMClientFormat = -66563,
    kExtAudioFileError_InvalidChannelMap = -66564,
    kExtAudioFileError_InvalidOperationOrder = -66565,
    kExtAudioFileError_InvalidDataFormat = -66566,
    kExtAudioFileError_MaxPacketSizeUnknown = -66567,
    kExtAudioFileError_InvalidSeek = -66568,
    kExtAudioFileError_AsyncWriteTooLarge = -66569,
    kExtAudioFileError_AsyncWriteBufferOverflow = -66570,
    _,
};
pub extern fn ExtAudioFileOpenURL(inURL: CFURLRef, outExtAudioFile: [*c]ExtAudioFileRef) OSStatus;
pub extern fn ExtAudioFileWrapAudioFileID(inFileID: AudioFileID, inForWriting: Boolean, outExtAudioFile: [*c]ExtAudioFileRef) OSStatus;
pub extern fn ExtAudioFileCreateWithURL(inURL: CFURLRef, inFileType: AudioFileTypeID, inStreamDesc: [*c]const AudioStreamBasicDescription, inChannelLayout: [*c]const AudioChannelLayout, inFlags: UInt32, outExtAudioFile: [*c]ExtAudioFileRef) OSStatus;
pub extern fn ExtAudioFileOpen(inFSRef: ?*const struct_FSRef, outExtAudioFile: [*c]ExtAudioFileRef) OSStatus;
pub extern fn ExtAudioFileCreateNew(inParentDir: ?*const struct_FSRef, inFileName: CFStringRef, inFileType: AudioFileTypeID, inStreamDesc: [*c]const AudioStreamBasicDescription, inChannelLayout: [*c]const AudioChannelLayout, outExtAudioFile: [*c]ExtAudioFileRef) OSStatus;
pub extern fn ExtAudioFileDispose(inExtAudioFile: ExtAudioFileRef) OSStatus;
pub extern fn ExtAudioFileRead(inExtAudioFile: ExtAudioFileRef, ioNumberFrames: [*c]UInt32, ioData: [*c]AudioBufferList) OSStatus;
pub extern fn ExtAudioFileWrite(inExtAudioFile: ExtAudioFileRef, inNumberFrames: UInt32, ioData: [*c]const AudioBufferList) OSStatus;
pub extern fn ExtAudioFileWriteAsync(inExtAudioFile: ExtAudioFileRef, inNumberFrames: UInt32, ioData: [*c]const AudioBufferList) OSStatus;
pub extern fn ExtAudioFileSeek(inExtAudioFile: ExtAudioFileRef, inFrameOffset: SInt64) OSStatus;
pub extern fn ExtAudioFileTell(inExtAudioFile: ExtAudioFileRef, outFrameOffset: [*c]SInt64) OSStatus;
pub extern fn ExtAudioFileGetPropertyInfo(inExtAudioFile: ExtAudioFileRef, inPropertyID: ExtAudioFilePropertyID, outSize: [*c]UInt32, outWritable: [*c]Boolean) OSStatus;
pub extern fn ExtAudioFileGetProperty(inExtAudioFile: ExtAudioFileRef, inPropertyID: ExtAudioFilePropertyID, ioPropertyDataSize: [*c]UInt32, outPropertyData: ?*c_void) OSStatus;
pub extern fn ExtAudioFileSetProperty(inExtAudioFile: ExtAudioFileRef, inPropertyID: ExtAudioFilePropertyID, inPropertyDataSize: UInt32, inPropertyData: ?*const c_void) OSStatus;
pub const kMIDIInvalidClient = @enumToInt(enum_unnamed_431.kMIDIInvalidClient);
pub const kMIDIInvalidPort = @enumToInt(enum_unnamed_431.kMIDIInvalidPort);
pub const kMIDIWrongEndpointType = @enumToInt(enum_unnamed_431.kMIDIWrongEndpointType);
pub const kMIDINoConnection = @enumToInt(enum_unnamed_431.kMIDINoConnection);
pub const kMIDIUnknownEndpoint = @enumToInt(enum_unnamed_431.kMIDIUnknownEndpoint);
pub const kMIDIUnknownProperty = @enumToInt(enum_unnamed_431.kMIDIUnknownProperty);
pub const kMIDIWrongPropertyType = @enumToInt(enum_unnamed_431.kMIDIWrongPropertyType);
pub const kMIDINoCurrentSetup = @enumToInt(enum_unnamed_431.kMIDINoCurrentSetup);
pub const kMIDIMessageSendErr = @enumToInt(enum_unnamed_431.kMIDIMessageSendErr);
pub const kMIDIServerStartErr = @enumToInt(enum_unnamed_431.kMIDIServerStartErr);
pub const kMIDISetupFormatErr = @enumToInt(enum_unnamed_431.kMIDISetupFormatErr);
pub const kMIDIWrongThread = @enumToInt(enum_unnamed_431.kMIDIWrongThread);
pub const kMIDIObjectNotFound = @enumToInt(enum_unnamed_431.kMIDIObjectNotFound);
pub const kMIDIIDNotUnique = @enumToInt(enum_unnamed_431.kMIDIIDNotUnique);
pub const kMIDINotPermitted = @enumToInt(enum_unnamed_431.kMIDINotPermitted);
pub const kMIDIUnknownError = @enumToInt(enum_unnamed_431.kMIDIUnknownError);
const enum_unnamed_431 = extern enum(c_int) {
    kMIDIInvalidClient = -10830,
    kMIDIInvalidPort = -10831,
    kMIDIWrongEndpointType = -10832,
    kMIDINoConnection = -10833,
    kMIDIUnknownEndpoint = -10834,
    kMIDIUnknownProperty = -10835,
    kMIDIWrongPropertyType = -10836,
    kMIDINoCurrentSetup = -10837,
    kMIDIMessageSendErr = -10838,
    kMIDIServerStartErr = -10839,
    kMIDISetupFormatErr = -10840,
    kMIDIWrongThread = -10841,
    kMIDIObjectNotFound = -10842,
    kMIDIIDNotUnique = -10843,
    kMIDINotPermitted = -10844,
    kMIDIUnknownError = -10845,
    _,
};
pub const MIDIObjectRef = UInt32;
pub const MIDIClientRef = MIDIObjectRef;
pub const MIDIPortRef = MIDIObjectRef;
pub const MIDIDeviceRef = MIDIObjectRef;
pub const MIDIEntityRef = MIDIObjectRef;
pub const MIDIEndpointRef = MIDIObjectRef;
pub const MIDITimeStamp = UInt64;
pub const MIDIObjectType = SInt32;
pub const kMIDIObjectType_Other = @enumToInt(enum_unnamed_432.kMIDIObjectType_Other);
pub const kMIDIObjectType_Device = @enumToInt(enum_unnamed_432.kMIDIObjectType_Device);
pub const kMIDIObjectType_Entity = @enumToInt(enum_unnamed_432.kMIDIObjectType_Entity);
pub const kMIDIObjectType_Source = @enumToInt(enum_unnamed_432.kMIDIObjectType_Source);
pub const kMIDIObjectType_Destination = @enumToInt(enum_unnamed_432.kMIDIObjectType_Destination);
pub const kMIDIObjectType_ExternalDevice = @enumToInt(enum_unnamed_432.kMIDIObjectType_ExternalDevice);
pub const kMIDIObjectType_ExternalEntity = @enumToInt(enum_unnamed_432.kMIDIObjectType_ExternalEntity);
pub const kMIDIObjectType_ExternalSource = @enumToInt(enum_unnamed_432.kMIDIObjectType_ExternalSource);
pub const kMIDIObjectType_ExternalDestination = @enumToInt(enum_unnamed_432.kMIDIObjectType_ExternalDestination);
const enum_unnamed_432 = extern enum(c_int) {
    kMIDIObjectType_Other = -1,
    kMIDIObjectType_Device = 0,
    kMIDIObjectType_Entity = 1,
    kMIDIObjectType_Source = 2,
    kMIDIObjectType_Destination = 3,
    kMIDIObjectType_ExternalDevice = 16,
    kMIDIObjectType_ExternalEntity = 17,
    kMIDIObjectType_ExternalSource = 18,
    kMIDIObjectType_ExternalDestination = 19,
    _,
};
pub const kMIDIObjectType_ExternalMask: MIDIObjectType = @bitCast(MIDIObjectType, @as(c_int, 16));
pub const MIDIUniqueID = SInt32;
pub const kMIDIInvalidUniqueID = @enumToInt(enum_unnamed_433.kMIDIInvalidUniqueID);
const enum_unnamed_433 = extern enum(c_int) {
    kMIDIInvalidUniqueID = 0,
    _,
};
pub const MIDIPacketList = struct_MIDIPacketList;
pub const struct_MIDISysexSendRequest = extern struct {
    destination: MIDIEndpointRef,
    data: [*c]const Byte,
    bytesToSend: UInt32,
    complete: Boolean,
    reserved: [3]Byte,
    completionProc: MIDICompletionProc,
    completionRefCon: ?*c_void,
};
pub const MIDISysexSendRequest = struct_MIDISysexSendRequest;
pub const struct_MIDINotification = extern struct {
    messageID: MIDINotificationMessageID,
    messageSize: UInt32,
};
pub const MIDINotification = struct_MIDINotification;
pub const MIDINotifyProc = ?fn ([*c]const MIDINotification, ?*c_void) callconv(.C) void;
pub const MIDINotifyBlock = @compileError("unable to resolve typedef child type");
pub const MIDIReadProc = ?fn ([*c]const MIDIPacketList, ?*c_void, ?*c_void) callconv(.C) void;
pub const MIDIReadBlock = @compileError("unable to resolve typedef child type");
pub const MIDICompletionProc = ?fn ([*c]MIDISysexSendRequest) callconv(.C) void;
pub const struct_MIDIPacket = extern struct {
    timeStamp: MIDITimeStamp,
    length: UInt16,
    data: [256]Byte,
};
pub const MIDIPacket = struct_MIDIPacket;
pub const MIDINotificationMessageID = SInt32;
pub const kMIDIMsgSetupChanged = @enumToInt(enum_unnamed_434.kMIDIMsgSetupChanged);
pub const kMIDIMsgObjectAdded = @enumToInt(enum_unnamed_434.kMIDIMsgObjectAdded);
pub const kMIDIMsgObjectRemoved = @enumToInt(enum_unnamed_434.kMIDIMsgObjectRemoved);
pub const kMIDIMsgPropertyChanged = @enumToInt(enum_unnamed_434.kMIDIMsgPropertyChanged);
pub const kMIDIMsgThruConnectionsChanged = @enumToInt(enum_unnamed_434.kMIDIMsgThruConnectionsChanged);
pub const kMIDIMsgSerialPortOwnerChanged = @enumToInt(enum_unnamed_434.kMIDIMsgSerialPortOwnerChanged);
pub const kMIDIMsgIOError = @enumToInt(enum_unnamed_434.kMIDIMsgIOError);
const enum_unnamed_434 = extern enum(c_int) {
    kMIDIMsgSetupChanged = 1,
    kMIDIMsgObjectAdded = 2,
    kMIDIMsgObjectRemoved = 3,
    kMIDIMsgPropertyChanged = 4,
    kMIDIMsgThruConnectionsChanged = 5,
    kMIDIMsgSerialPortOwnerChanged = 6,
    kMIDIMsgIOError = 7,
    _,
};
pub const struct_MIDIObjectAddRemoveNotification = extern struct {
    messageID: MIDINotificationMessageID,
    messageSize: UInt32,
    parent: MIDIObjectRef,
    parentType: MIDIObjectType,
    child: MIDIObjectRef,
    childType: MIDIObjectType,
};
pub const MIDIObjectAddRemoveNotification = struct_MIDIObjectAddRemoveNotification;
pub const struct_MIDIObjectPropertyChangeNotification = extern struct {
    messageID: MIDINotificationMessageID,
    messageSize: UInt32,
    object: MIDIObjectRef,
    objectType: MIDIObjectType,
    propertyName: CFStringRef,
};
pub const MIDIObjectPropertyChangeNotification = struct_MIDIObjectPropertyChangeNotification;
pub const struct_MIDIIOErrorNotification = extern struct {
    messageID: MIDINotificationMessageID,
    messageSize: UInt32,
    driverDevice: MIDIDeviceRef,
    errorCode: OSStatus,
};
pub const MIDIIOErrorNotification = struct_MIDIIOErrorNotification;
pub extern const kMIDIPropertyName: CFStringRef;
pub extern const kMIDIPropertyManufacturer: CFStringRef;
pub extern const kMIDIPropertyModel: CFStringRef;
pub extern const kMIDIPropertyUniqueID: CFStringRef;
pub extern const kMIDIPropertyDeviceID: CFStringRef;
pub extern const kMIDIPropertyReceiveChannels: CFStringRef;
pub extern const kMIDIPropertyTransmitChannels: CFStringRef;
pub extern const kMIDIPropertyMaxSysExSpeed: CFStringRef;
pub extern const kMIDIPropertyAdvanceScheduleTimeMuSec: CFStringRef;
pub extern const kMIDIPropertyIsEmbeddedEntity: CFStringRef;
pub extern const kMIDIPropertyIsBroadcast: CFStringRef;
pub extern const kMIDIPropertySingleRealtimeEntity: CFStringRef;
pub extern const kMIDIPropertyConnectionUniqueID: CFStringRef;
pub extern const kMIDIPropertyOffline: CFStringRef;
pub extern const kMIDIPropertyPrivate: CFStringRef;
pub extern const kMIDIPropertyDriverOwner: CFStringRef;
pub extern const kMIDIPropertyFactoryPatchNameFile: CFStringRef;
pub extern const kMIDIPropertyUserPatchNameFile: CFStringRef;
pub extern const kMIDIPropertyNameConfiguration: CFStringRef;
pub extern const kMIDIPropertyNameConfigurationDictionary: CFStringRef;
pub extern const kMIDIPropertyImage: CFStringRef;
pub extern const kMIDIPropertyDriverVersion: CFStringRef;
pub extern const kMIDIPropertySupportsGeneralMIDI: CFStringRef;
pub extern const kMIDIPropertySupportsMMC: CFStringRef;
pub extern const kMIDIPropertyCanRoute: CFStringRef;
pub extern const kMIDIPropertyReceivesClock: CFStringRef;
pub extern const kMIDIPropertyReceivesMTC: CFStringRef;
pub extern const kMIDIPropertyReceivesNotes: CFStringRef;
pub extern const kMIDIPropertyReceivesProgramChanges: CFStringRef;
pub extern const kMIDIPropertyReceivesBankSelectMSB: CFStringRef;
pub extern const kMIDIPropertyReceivesBankSelectLSB: CFStringRef;
pub extern const kMIDIPropertyTransmitsClock: CFStringRef;
pub extern const kMIDIPropertyTransmitsMTC: CFStringRef;
pub extern const kMIDIPropertyTransmitsNotes: CFStringRef;
pub extern const kMIDIPropertyTransmitsProgramChanges: CFStringRef;
pub extern const kMIDIPropertyTransmitsBankSelectMSB: CFStringRef;
pub extern const kMIDIPropertyTransmitsBankSelectLSB: CFStringRef;
pub extern const kMIDIPropertyPanDisruptsStereo: CFStringRef;
pub extern const kMIDIPropertyIsSampler: CFStringRef;
pub extern const kMIDIPropertyIsDrumMachine: CFStringRef;
pub extern const kMIDIPropertyIsMixer: CFStringRef;
pub extern const kMIDIPropertyIsEffectUnit: CFStringRef;
pub extern const kMIDIPropertyMaxReceiveChannels: CFStringRef;
pub extern const kMIDIPropertyMaxTransmitChannels: CFStringRef;
pub extern const kMIDIPropertyDriverDeviceEditorApp: CFStringRef;
pub extern const kMIDIPropertySupportsShowControl: CFStringRef;
pub extern const kMIDIPropertyDisplayName: CFStringRef;
pub extern fn MIDIClientCreate(name: CFStringRef, notifyProc: MIDINotifyProc, notifyRefCon: ?*c_void, outClient: [*c]MIDIClientRef) OSStatus;
pub extern fn MIDIClientCreateWithBlock(name: CFStringRef, outClient: [*c]MIDIClientRef, notifyBlock: MIDINotifyBlock) OSStatus;
pub extern fn MIDIClientDispose(client: MIDIClientRef) OSStatus;
pub extern fn MIDIInputPortCreate(client: MIDIClientRef, portName: CFStringRef, readProc: MIDIReadProc, refCon: ?*c_void, outPort: [*c]MIDIPortRef) OSStatus;
pub extern fn MIDIInputPortCreateWithBlock(client: MIDIClientRef, portName: CFStringRef, outPort: [*c]MIDIPortRef, readBlock: MIDIReadBlock) OSStatus;
pub extern fn MIDIOutputPortCreate(client: MIDIClientRef, portName: CFStringRef, outPort: [*c]MIDIPortRef) OSStatus;
pub extern fn MIDIPortDispose(port: MIDIPortRef) OSStatus;
pub extern fn MIDIPortConnectSource(port: MIDIPortRef, source: MIDIEndpointRef, connRefCon: ?*c_void) OSStatus;
pub extern fn MIDIPortDisconnectSource(port: MIDIPortRef, source: MIDIEndpointRef) OSStatus;
pub extern fn MIDIGetNumberOfDevices() ItemCount;
pub extern fn MIDIGetDevice(deviceIndex0: ItemCount) MIDIDeviceRef;
pub extern fn MIDIDeviceGetNumberOfEntities(device: MIDIDeviceRef) ItemCount;
pub extern fn MIDIDeviceGetEntity(device: MIDIDeviceRef, entityIndex0: ItemCount) MIDIEntityRef;
pub extern fn MIDIEntityGetNumberOfSources(entity: MIDIEntityRef) ItemCount;
pub extern fn MIDIEntityGetSource(entity: MIDIEntityRef, sourceIndex0: ItemCount) MIDIEndpointRef;
pub extern fn MIDIEntityGetNumberOfDestinations(entity: MIDIEntityRef) ItemCount;
pub extern fn MIDIEntityGetDestination(entity: MIDIEntityRef, destIndex0: ItemCount) MIDIEndpointRef;
pub extern fn MIDIEntityGetDevice(inEntity: MIDIEntityRef, outDevice: [*c]MIDIDeviceRef) OSStatus;
pub extern fn MIDIGetNumberOfSources() ItemCount;
pub extern fn MIDIGetSource(sourceIndex0: ItemCount) MIDIEndpointRef;
pub extern fn MIDIGetNumberOfDestinations() ItemCount;
pub extern fn MIDIGetDestination(destIndex0: ItemCount) MIDIEndpointRef;
pub extern fn MIDIEndpointGetEntity(inEndpoint: MIDIEndpointRef, outEntity: [*c]MIDIEntityRef) OSStatus;
pub extern fn MIDIDestinationCreate(client: MIDIClientRef, name: CFStringRef, readProc: MIDIReadProc, refCon: ?*c_void, outDest: [*c]MIDIEndpointRef) OSStatus;
pub extern fn MIDIDestinationCreateWithBlock(client: MIDIClientRef, name: CFStringRef, outDest: [*c]MIDIEndpointRef, readBlock: MIDIReadBlock) OSStatus;
pub extern fn MIDISourceCreate(client: MIDIClientRef, name: CFStringRef, outSrc: [*c]MIDIEndpointRef) OSStatus;
pub extern fn MIDIEndpointDispose(endpt: MIDIEndpointRef) OSStatus;
pub extern fn MIDIGetNumberOfExternalDevices() ItemCount;
pub extern fn MIDIGetExternalDevice(deviceIndex0: ItemCount) MIDIDeviceRef;
pub extern fn MIDIObjectGetIntegerProperty(obj: MIDIObjectRef, propertyID: CFStringRef, outValue: [*c]SInt32) OSStatus;
pub extern fn MIDIObjectSetIntegerProperty(obj: MIDIObjectRef, propertyID: CFStringRef, value: SInt32) OSStatus;
pub extern fn MIDIObjectGetStringProperty(obj: MIDIObjectRef, propertyID: CFStringRef, str: [*c]CFStringRef) OSStatus;
pub extern fn MIDIObjectSetStringProperty(obj: MIDIObjectRef, propertyID: CFStringRef, str: CFStringRef) OSStatus;
pub extern fn MIDIObjectGetDataProperty(obj: MIDIObjectRef, propertyID: CFStringRef, outData: [*c]CFDataRef) OSStatus;
pub extern fn MIDIObjectSetDataProperty(obj: MIDIObjectRef, propertyID: CFStringRef, data: CFDataRef) OSStatus;
pub extern fn MIDIObjectGetDictionaryProperty(obj: MIDIObjectRef, propertyID: CFStringRef, outDict: [*c]CFDictionaryRef) OSStatus;
pub extern fn MIDIObjectSetDictionaryProperty(obj: MIDIObjectRef, propertyID: CFStringRef, dict: CFDictionaryRef) OSStatus;
pub extern fn MIDIObjectGetProperties(obj: MIDIObjectRef, outProperties: [*c]CFPropertyListRef, deep: Boolean) OSStatus;
pub extern fn MIDIObjectRemoveProperty(obj: MIDIObjectRef, propertyID: CFStringRef) OSStatus;
pub extern fn MIDIObjectFindByUniqueID(inUniqueID: MIDIUniqueID, outObject: [*c]MIDIObjectRef, outObjectType: [*c]MIDIObjectType) OSStatus;
pub extern fn MIDISend(port: MIDIPortRef, dest: MIDIEndpointRef, pktlist: [*c]const MIDIPacketList) OSStatus;
pub extern fn MIDISendSysex(request: [*c]MIDISysexSendRequest) OSStatus;
pub extern fn MIDIReceived(src: MIDIEndpointRef, pktlist: [*c]const MIDIPacketList) OSStatus;
pub extern fn MIDIFlushOutput(dest: MIDIEndpointRef) OSStatus;
pub extern fn MIDIRestart() OSStatus;
pub fn MIDIPacketNext(arg_pkt: [*c]const MIDIPacket) callconv(.C) [*c]MIDIPacket {
    var pkt = arg_pkt;
    return @intToPtr([*c]MIDIPacket, @ptrToInt(&pkt.*.data[pkt.*.length]));
}
pub extern fn MIDIPacketListInit(pktlist: [*c]MIDIPacketList) [*c]MIDIPacket;
pub extern fn MIDIPacketListAdd(pktlist: [*c]MIDIPacketList, listSize: ByteCount, curPacket: [*c]MIDIPacket, time: MIDITimeStamp, nData: ByteCount, data: [*c]const Byte) [*c]MIDIPacket;
pub const kMusicEventType_NULL = @enumToInt(enum_unnamed_435.kMusicEventType_NULL);
pub const kMusicEventType_ExtendedNote = @enumToInt(enum_unnamed_435.kMusicEventType_ExtendedNote);
pub const kMusicEventType_ExtendedTempo = @enumToInt(enum_unnamed_435.kMusicEventType_ExtendedTempo);
pub const kMusicEventType_User = @enumToInt(enum_unnamed_435.kMusicEventType_User);
pub const kMusicEventType_Meta = @enumToInt(enum_unnamed_435.kMusicEventType_Meta);
pub const kMusicEventType_MIDINoteMessage = @enumToInt(enum_unnamed_435.kMusicEventType_MIDINoteMessage);
pub const kMusicEventType_MIDIChannelMessage = @enumToInt(enum_unnamed_435.kMusicEventType_MIDIChannelMessage);
pub const kMusicEventType_MIDIRawData = @enumToInt(enum_unnamed_435.kMusicEventType_MIDIRawData);
pub const kMusicEventType_Parameter = @enumToInt(enum_unnamed_435.kMusicEventType_Parameter);
pub const kMusicEventType_AUPreset = @enumToInt(enum_unnamed_435.kMusicEventType_AUPreset);
const enum_unnamed_435 = extern enum(c_int) {
    kMusicEventType_NULL = 0,
    kMusicEventType_ExtendedNote = 1,
    kMusicEventType_ExtendedTempo = 3,
    kMusicEventType_User = 4,
    kMusicEventType_Meta = 5,
    kMusicEventType_MIDINoteMessage = 6,
    kMusicEventType_MIDIChannelMessage = 7,
    kMusicEventType_MIDIRawData = 8,
    kMusicEventType_Parameter = 9,
    kMusicEventType_AUPreset = 10,
    _,
};
pub const MusicEventType = UInt32;
pub const MusicSequenceLoadFlags = UInt32;
pub const kMusicSequenceLoadSMF_PreserveTracks = @enumToInt(enum_unnamed_436.kMusicSequenceLoadSMF_PreserveTracks);
pub const kMusicSequenceLoadSMF_ChannelsToTracks = @enumToInt(enum_unnamed_436.kMusicSequenceLoadSMF_ChannelsToTracks);
const enum_unnamed_436 = extern enum(c_int) {
    kMusicSequenceLoadSMF_PreserveTracks = 0,
    kMusicSequenceLoadSMF_ChannelsToTracks = 1,
    _,
};
pub const MusicSequenceType = UInt32;
pub const kMusicSequenceType_Beats = @enumToInt(enum_unnamed_437.kMusicSequenceType_Beats);
pub const kMusicSequenceType_Seconds = @enumToInt(enum_unnamed_437.kMusicSequenceType_Seconds);
pub const kMusicSequenceType_Samples = @enumToInt(enum_unnamed_437.kMusicSequenceType_Samples);
const enum_unnamed_437 = extern enum(c_int) {
    kMusicSequenceType_Beats = 1650811252,
    kMusicSequenceType_Seconds = 1936024435,
    kMusicSequenceType_Samples = 1935764848,
    _,
};
pub const MusicSequenceFileTypeID = UInt32;
pub const kMusicSequenceFile_AnyType = @enumToInt(enum_unnamed_438.kMusicSequenceFile_AnyType);
pub const kMusicSequenceFile_MIDIType = @enumToInt(enum_unnamed_438.kMusicSequenceFile_MIDIType);
pub const kMusicSequenceFile_iMelodyType = @enumToInt(enum_unnamed_438.kMusicSequenceFile_iMelodyType);
const enum_unnamed_438 = extern enum(c_int) {
    kMusicSequenceFile_AnyType = 0,
    kMusicSequenceFile_MIDIType = 1835623529,
    kMusicSequenceFile_iMelodyType = 1768777068,
    _,
};
pub const MusicSequenceFileFlags = UInt32;
pub const kMusicSequenceFileFlags_Default = @enumToInt(enum_unnamed_439.kMusicSequenceFileFlags_Default);
pub const kMusicSequenceFileFlags_EraseFile = @enumToInt(enum_unnamed_439.kMusicSequenceFileFlags_EraseFile);
const enum_unnamed_439 = extern enum(c_int) {
    kMusicSequenceFileFlags_Default = 0,
    kMusicSequenceFileFlags_EraseFile = 1,
    _,
};
pub const MusicTimeStamp = Float64;
pub const struct_MIDINoteMessage = extern struct {
    channel: UInt8,
    note: UInt8,
    velocity: UInt8,
    releaseVelocity: UInt8,
    duration: Float32,
};
pub const MIDINoteMessage = struct_MIDINoteMessage;
pub const struct_MIDIChannelMessage = extern struct {
    status: UInt8,
    data1: UInt8,
    data2: UInt8,
    reserved: UInt8,
};
pub const MIDIChannelMessage = struct_MIDIChannelMessage;
pub const struct_MIDIRawData = extern struct {
    length: UInt32,
    data: [1]UInt8,
};
pub const MIDIRawData = struct_MIDIRawData;
pub const struct_MIDIMetaEvent = extern struct {
    metaEventType: UInt8,
    unused1: UInt8,
    unused2: UInt8,
    unused3: UInt8,
    dataLength: UInt32,
    data: [1]UInt8,
};
pub const MIDIMetaEvent = struct_MIDIMetaEvent;
pub const struct_MusicEventUserData = extern struct {
    length: UInt32,
    data: [1]UInt8,
};
pub const MusicEventUserData = struct_MusicEventUserData;
pub const struct_ExtendedNoteOnEvent = extern struct {
    instrumentID: MusicDeviceInstrumentID,
    groupID: MusicDeviceGroupID,
    duration: Float32,
    extendedParams: MusicDeviceNoteParams,
};
pub const ExtendedNoteOnEvent = struct_ExtendedNoteOnEvent;
pub const struct_ParameterEvent = extern struct {
    parameterID: AudioUnitParameterID,
    scope: AudioUnitScope,
    element: AudioUnitElement,
    value: AudioUnitParameterValue,
};
pub const ParameterEvent = struct_ParameterEvent;
pub const struct_ExtendedTempoEvent = extern struct {
    bpm: Float64,
};
pub const ExtendedTempoEvent = struct_ExtendedTempoEvent;
pub const struct_AUPresetEvent = extern struct {
    scope: AudioUnitScope,
    element: AudioUnitElement,
    preset: CFPropertyListRef,
};
pub const AUPresetEvent = struct_AUPresetEvent;
pub const struct_CABarBeatTime = extern struct {
    bar: SInt32,
    beat: UInt16,
    subbeat: UInt16,
    subbeatDivisor: UInt16,
    reserved: UInt16,
};
pub const CABarBeatTime = struct_CABarBeatTime;
pub const struct_OpaqueMusicPlayer = @OpaqueType();
pub const MusicPlayer = ?*struct_OpaqueMusicPlayer;
pub const struct_OpaqueMusicSequence = @OpaqueType();
pub const MusicSequence = ?*struct_OpaqueMusicSequence;
pub const struct_OpaqueMusicTrack = @OpaqueType();
pub const MusicTrack = ?*struct_OpaqueMusicTrack;
pub const struct_OpaqueMusicEventIterator = @OpaqueType();
pub const MusicEventIterator = ?*struct_OpaqueMusicEventIterator;
pub const MusicSequenceUserCallback = ?fn (?*c_void, MusicSequence, MusicTrack, MusicTimeStamp, [*c]const MusicEventUserData, MusicTimeStamp, MusicTimeStamp) callconv(.C) void;
pub const kAudioToolboxErr_InvalidSequenceType = @enumToInt(enum_unnamed_440.kAudioToolboxErr_InvalidSequenceType);
pub const kAudioToolboxErr_TrackIndexError = @enumToInt(enum_unnamed_440.kAudioToolboxErr_TrackIndexError);
pub const kAudioToolboxErr_TrackNotFound = @enumToInt(enum_unnamed_440.kAudioToolboxErr_TrackNotFound);
pub const kAudioToolboxErr_EndOfTrack = @enumToInt(enum_unnamed_440.kAudioToolboxErr_EndOfTrack);
pub const kAudioToolboxErr_StartOfTrack = @enumToInt(enum_unnamed_440.kAudioToolboxErr_StartOfTrack);
pub const kAudioToolboxErr_IllegalTrackDestination = @enumToInt(enum_unnamed_440.kAudioToolboxErr_IllegalTrackDestination);
pub const kAudioToolboxErr_NoSequence = @enumToInt(enum_unnamed_440.kAudioToolboxErr_NoSequence);
pub const kAudioToolboxErr_InvalidEventType = @enumToInt(enum_unnamed_440.kAudioToolboxErr_InvalidEventType);
pub const kAudioToolboxErr_InvalidPlayerState = @enumToInt(enum_unnamed_440.kAudioToolboxErr_InvalidPlayerState);
pub const kAudioToolboxErr_CannotDoInCurrentContext = @enumToInt(enum_unnamed_440.kAudioToolboxErr_CannotDoInCurrentContext);
pub const kAudioToolboxError_NoTrackDestination = @enumToInt(enum_unnamed_440.kAudioToolboxError_NoTrackDestination);
const enum_unnamed_440 = extern enum(c_int) {
    kAudioToolboxErr_InvalidSequenceType = -10846,
    kAudioToolboxErr_TrackIndexError = -10859,
    kAudioToolboxErr_TrackNotFound = -10858,
    kAudioToolboxErr_EndOfTrack = -10857,
    kAudioToolboxErr_StartOfTrack = -10856,
    kAudioToolboxErr_IllegalTrackDestination = -10855,
    kAudioToolboxErr_NoSequence = -10854,
    kAudioToolboxErr_InvalidEventType = -10853,
    kAudioToolboxErr_InvalidPlayerState = -10852,
    kAudioToolboxErr_CannotDoInCurrentContext = -10863,
    kAudioToolboxError_NoTrackDestination = -66720,
    _,
};
pub const kSequenceTrackProperty_LoopInfo = @enumToInt(enum_unnamed_441.kSequenceTrackProperty_LoopInfo);
pub const kSequenceTrackProperty_OffsetTime = @enumToInt(enum_unnamed_441.kSequenceTrackProperty_OffsetTime);
pub const kSequenceTrackProperty_MuteStatus = @enumToInt(enum_unnamed_441.kSequenceTrackProperty_MuteStatus);
pub const kSequenceTrackProperty_SoloStatus = @enumToInt(enum_unnamed_441.kSequenceTrackProperty_SoloStatus);
pub const kSequenceTrackProperty_AutomatedParameters = @enumToInt(enum_unnamed_441.kSequenceTrackProperty_AutomatedParameters);
pub const kSequenceTrackProperty_TrackLength = @enumToInt(enum_unnamed_441.kSequenceTrackProperty_TrackLength);
pub const kSequenceTrackProperty_TimeResolution = @enumToInt(enum_unnamed_441.kSequenceTrackProperty_TimeResolution);
const enum_unnamed_441 = extern enum(c_int) {
    kSequenceTrackProperty_LoopInfo = 0,
    kSequenceTrackProperty_OffsetTime = 1,
    kSequenceTrackProperty_MuteStatus = 2,
    kSequenceTrackProperty_SoloStatus = 3,
    kSequenceTrackProperty_AutomatedParameters = 4,
    kSequenceTrackProperty_TrackLength = 5,
    kSequenceTrackProperty_TimeResolution = 6,
    _,
};
pub const struct_MusicTrackLoopInfo = extern struct {
    loopDuration: MusicTimeStamp,
    numberOfLoops: SInt32,
};
pub const MusicTrackLoopInfo = struct_MusicTrackLoopInfo;
pub extern fn NewMusicPlayer(outPlayer: [*c]MusicPlayer) OSStatus;
pub extern fn DisposeMusicPlayer(inPlayer: MusicPlayer) OSStatus;
pub extern fn MusicPlayerSetSequence(inPlayer: MusicPlayer, inSequence: MusicSequence) OSStatus;
pub extern fn MusicPlayerGetSequence(inPlayer: MusicPlayer, outSequence: [*c]MusicSequence) OSStatus;
pub extern fn MusicPlayerSetTime(inPlayer: MusicPlayer, inTime: MusicTimeStamp) OSStatus;
pub extern fn MusicPlayerGetTime(inPlayer: MusicPlayer, outTime: [*c]MusicTimeStamp) OSStatus;
pub extern fn MusicPlayerGetHostTimeForBeats(inPlayer: MusicPlayer, inBeats: MusicTimeStamp, outHostTime: [*c]UInt64) OSStatus;
pub extern fn MusicPlayerGetBeatsForHostTime(inPlayer: MusicPlayer, inHostTime: UInt64, outBeats: [*c]MusicTimeStamp) OSStatus;
pub extern fn MusicPlayerPreroll(inPlayer: MusicPlayer) OSStatus;
pub extern fn MusicPlayerStart(inPlayer: MusicPlayer) OSStatus;
pub extern fn MusicPlayerStop(inPlayer: MusicPlayer) OSStatus;
pub extern fn MusicPlayerIsPlaying(inPlayer: MusicPlayer, outIsPlaying: [*c]Boolean) OSStatus;
pub extern fn MusicPlayerSetPlayRateScalar(inPlayer: MusicPlayer, inScaleRate: Float64) OSStatus;
pub extern fn MusicPlayerGetPlayRateScalar(inPlayer: MusicPlayer, outScaleRate: [*c]Float64) OSStatus;
pub extern fn NewMusicSequence(outSequence: [*c]MusicSequence) OSStatus;
pub extern fn DisposeMusicSequence(inSequence: MusicSequence) OSStatus;
pub extern fn MusicSequenceNewTrack(inSequence: MusicSequence, outTrack: [*c]MusicTrack) OSStatus;
pub extern fn MusicSequenceDisposeTrack(inSequence: MusicSequence, inTrack: MusicTrack) OSStatus;
pub extern fn MusicSequenceGetTrackCount(inSequence: MusicSequence, outNumberOfTracks: [*c]UInt32) OSStatus;
pub extern fn MusicSequenceGetIndTrack(inSequence: MusicSequence, inTrackIndex: UInt32, outTrack: [*c]MusicTrack) OSStatus;
pub extern fn MusicSequenceGetTrackIndex(inSequence: MusicSequence, inTrack: MusicTrack, outTrackIndex: [*c]UInt32) OSStatus;
pub extern fn MusicSequenceGetTempoTrack(inSequence: MusicSequence, outTrack: [*c]MusicTrack) OSStatus;
pub extern fn MusicSequenceSetAUGraph(inSequence: MusicSequence, inGraph: AUGraph) OSStatus;
pub extern fn MusicSequenceGetAUGraph(inSequence: MusicSequence, outGraph: [*c]AUGraph) OSStatus;
pub extern fn MusicSequenceSetMIDIEndpoint(inSequence: MusicSequence, inEndpoint: MIDIEndpointRef) OSStatus;
pub extern fn MusicSequenceSetSequenceType(inSequence: MusicSequence, inType: MusicSequenceType) OSStatus;
pub extern fn MusicSequenceGetSequenceType(inSequence: MusicSequence, outType: [*c]MusicSequenceType) OSStatus;
pub extern fn MusicSequenceFileLoad(inSequence: MusicSequence, inFileRef: CFURLRef, inFileTypeHint: MusicSequenceFileTypeID, inFlags: MusicSequenceLoadFlags) OSStatus;
pub extern fn MusicSequenceFileLoadData(inSequence: MusicSequence, inData: CFDataRef, inFileTypeHint: MusicSequenceFileTypeID, inFlags: MusicSequenceLoadFlags) OSStatus;
pub fn MusicSequenceSetSMPTEResolution(arg_fps: SignedByte, arg_ticks: Byte) callconv(.C) SInt16 {
    var fps = arg_fps;
    var ticks = arg_ticks;
    var res8: SInt8 = @bitCast(SInt8, @truncate(i8, if (@bitCast(c_int, @as(c_int, fps)) < @as(c_int, 0)) @bitCast(c_int, @as(c_int, fps)) else -@bitCast(c_int, @as(c_int, fps))));
    var res: SInt16 = @bitCast(SInt16, @truncate(c_short, (@bitCast(c_int, @as(c_int, res8)) << @intCast(@import("std").math.Log2Int(c_int), 8))));
    res += @bitCast(c_int, @as(c_uint, ticks));
    return res;
}
pub fn MusicSequenceGetSMPTEResolution(arg_inRes: SInt16, arg_fps: [*c]SignedByte, arg_ticks: [*c]Byte) callconv(.C) void {
    var inRes = arg_inRes;
    var fps = arg_fps;
    var ticks = arg_ticks;
    fps.?.* = @bitCast(SignedByte, @truncate(i8, ((@as(c_int, 65280) & @bitCast(c_int, @as(c_int, inRes))) >> @intCast(@import("std").math.Log2Int(c_int), 8))));
    ticks.?.* = @bitCast(Byte, @truncate(i8, (@as(c_int, 127) & @bitCast(c_int, @as(c_int, inRes)))));
}
pub extern fn MusicSequenceFileCreate(inSequence: MusicSequence, inFileRef: CFURLRef, inFileType: MusicSequenceFileTypeID, inFlags: MusicSequenceFileFlags, inResolution: SInt16) OSStatus;
pub extern fn MusicSequenceFileCreateData(inSequence: MusicSequence, inFileType: MusicSequenceFileTypeID, inFlags: MusicSequenceFileFlags, inResolution: SInt16, outData: [*c]CFDataRef) OSStatus;
pub extern fn MusicSequenceReverse(inSequence: MusicSequence) OSStatus;
pub extern fn MusicSequenceGetSecondsForBeats(inSequence: MusicSequence, inBeats: MusicTimeStamp, outSeconds: [*c]Float64) OSStatus;
pub extern fn MusicSequenceGetBeatsForSeconds(inSequence: MusicSequence, inSeconds: Float64, outBeats: [*c]MusicTimeStamp) OSStatus;
pub extern fn MusicSequenceSetUserCallback(inSequence: MusicSequence, inCallback: MusicSequenceUserCallback, inClientData: ?*c_void) OSStatus;
pub extern fn MusicSequenceBeatsToBarBeatTime(inSequence: MusicSequence, inBeats: MusicTimeStamp, inSubbeatDivisor: UInt32, outBarBeatTime: [*c]CABarBeatTime) OSStatus;
pub extern fn MusicSequenceBarBeatTimeToBeats(inSequence: MusicSequence, inBarBeatTime: [*c]const CABarBeatTime, outBeats: [*c]MusicTimeStamp) OSStatus;
pub extern fn MusicSequenceGetInfoDictionary(inSequence: MusicSequence) CFDictionaryRef;
pub extern fn MusicTrackGetSequence(inTrack: MusicTrack, outSequence: [*c]MusicSequence) OSStatus;
pub extern fn MusicTrackSetDestNode(inTrack: MusicTrack, inNode: AUNode) OSStatus;
pub extern fn MusicTrackSetDestMIDIEndpoint(inTrack: MusicTrack, inEndpoint: MIDIEndpointRef) OSStatus;
pub extern fn MusicTrackGetDestNode(inTrack: MusicTrack, outNode: [*c]AUNode) OSStatus;
pub extern fn MusicTrackGetDestMIDIEndpoint(inTrack: MusicTrack, outEndpoint: [*c]MIDIEndpointRef) OSStatus;
pub extern fn MusicTrackSetProperty(inTrack: MusicTrack, inPropertyID: UInt32, inData: ?*c_void, inLength: UInt32) OSStatus;
pub extern fn MusicTrackGetProperty(inTrack: MusicTrack, inPropertyID: UInt32, outData: ?*c_void, ioLength: [*c]UInt32) OSStatus;
pub extern fn MusicTrackMoveEvents(inTrack: MusicTrack, inStartTime: MusicTimeStamp, inEndTime: MusicTimeStamp, inMoveTime: MusicTimeStamp) OSStatus;
pub extern fn MusicTrackClear(inTrack: MusicTrack, inStartTime: MusicTimeStamp, inEndTime: MusicTimeStamp) OSStatus;
pub extern fn MusicTrackCut(inTrack: MusicTrack, inStartTime: MusicTimeStamp, inEndTime: MusicTimeStamp) OSStatus;
pub extern fn MusicTrackCopyInsert(inSourceTrack: MusicTrack, inSourceStartTime: MusicTimeStamp, inSourceEndTime: MusicTimeStamp, inDestTrack: MusicTrack, inDestInsertTime: MusicTimeStamp) OSStatus;
pub extern fn MusicTrackMerge(inSourceTrack: MusicTrack, inSourceStartTime: MusicTimeStamp, inSourceEndTime: MusicTimeStamp, inDestTrack: MusicTrack, inDestInsertTime: MusicTimeStamp) OSStatus;
pub extern fn MusicTrackNewMIDINoteEvent(inTrack: MusicTrack, inTimeStamp: MusicTimeStamp, inMessage: [*c]const MIDINoteMessage) OSStatus;
pub extern fn MusicTrackNewMIDIChannelEvent(inTrack: MusicTrack, inTimeStamp: MusicTimeStamp, inMessage: [*c]const MIDIChannelMessage) OSStatus;
pub extern fn MusicTrackNewMIDIRawDataEvent(inTrack: MusicTrack, inTimeStamp: MusicTimeStamp, inRawData: [*c]const MIDIRawData) OSStatus;
pub extern fn MusicTrackNewExtendedNoteEvent(inTrack: MusicTrack, inTimeStamp: MusicTimeStamp, inInfo: [*c]const ExtendedNoteOnEvent) OSStatus;
pub extern fn MusicTrackNewParameterEvent(inTrack: MusicTrack, inTimeStamp: MusicTimeStamp, inInfo: [*c]const ParameterEvent) OSStatus;
pub extern fn MusicTrackNewExtendedTempoEvent(inTrack: MusicTrack, inTimeStamp: MusicTimeStamp, inBPM: Float64) OSStatus;
pub extern fn MusicTrackNewMetaEvent(inTrack: MusicTrack, inTimeStamp: MusicTimeStamp, inMetaEvent: [*c]const MIDIMetaEvent) OSStatus;
pub extern fn MusicTrackNewUserEvent(inTrack: MusicTrack, inTimeStamp: MusicTimeStamp, inUserData: [*c]const MusicEventUserData) OSStatus;
pub extern fn MusicTrackNewAUPresetEvent(inTrack: MusicTrack, inTimeStamp: MusicTimeStamp, inPresetEvent: [*c]const AUPresetEvent) OSStatus;
pub extern fn NewMusicEventIterator(inTrack: MusicTrack, outIterator: [*c]MusicEventIterator) OSStatus;
pub extern fn DisposeMusicEventIterator(inIterator: MusicEventIterator) OSStatus;
pub extern fn MusicEventIteratorSeek(inIterator: MusicEventIterator, inTimeStamp: MusicTimeStamp) OSStatus;
pub extern fn MusicEventIteratorNextEvent(inIterator: MusicEventIterator) OSStatus;
pub extern fn MusicEventIteratorPreviousEvent(inIterator: MusicEventIterator) OSStatus;
pub extern fn MusicEventIteratorGetEventInfo(inIterator: MusicEventIterator, outTimeStamp: [*c]MusicTimeStamp, outEventType: [*c]MusicEventType, outEventData: [*c]?*const c_void, outEventDataSize: [*c]UInt32) OSStatus;
pub extern fn MusicEventIteratorSetEventInfo(inIterator: MusicEventIterator, inEventType: MusicEventType, inEventData: ?*const c_void) OSStatus;
pub extern fn MusicEventIteratorSetEventTime(inIterator: MusicEventIterator, inTimeStamp: MusicTimeStamp) OSStatus;
pub extern fn MusicEventIteratorDeleteEvent(inIterator: MusicEventIterator) OSStatus;
pub extern fn MusicEventIteratorHasPreviousEvent(inIterator: MusicEventIterator, outHasPrevEvent: [*c]Boolean) OSStatus;
pub extern fn MusicEventIteratorHasNextEvent(inIterator: MusicEventIterator, outHasNextEvent: [*c]Boolean) OSStatus;
pub extern fn MusicEventIteratorHasCurrentEvent(inIterator: MusicEventIterator, outHasCurEvent: [*c]Boolean) OSStatus;
pub extern fn MusicSequenceLoadSMFWithFlags(inSequence: MusicSequence, inFileRef: ?*const struct_FSRef, inFlags: MusicSequenceLoadFlags) OSStatus;
pub extern fn MusicSequenceLoadSMFDataWithFlags(inSequence: MusicSequence, inData: CFDataRef, inFlags: MusicSequenceLoadFlags) OSStatus;
pub extern fn MusicSequenceSaveMIDIFile(inSequence: MusicSequence, inParentDirectory: ?*const struct_FSRef, inFileName: CFStringRef, inResolution: UInt16, inFlags: UInt32) OSStatus;
pub extern fn MusicSequenceSaveSMFData(inSequence: MusicSequence, outData: [*c]CFDataRef, inResolution: UInt16) OSStatus;
pub extern fn NewMusicTrackFrom(inSourceTrack: MusicTrack, inSourceStartTime: MusicTimeStamp, inSourceEndTime: MusicTimeStamp, outNewTrack: [*c]MusicTrack) OSStatus;
pub const kMusicEventType_ExtendedControl = @enumToInt(enum_unnamed_442.kMusicEventType_ExtendedControl);
const enum_unnamed_442 = extern enum(c_int) {
    kMusicEventType_ExtendedControl = 2,
    _,
};
pub const struct_ExtendedControlEvent = extern struct {
    groupID: MusicDeviceGroupID,
    controlID: AudioUnitParameterID,
    value: AudioUnitParameterValue,
};
pub const ExtendedControlEvent = struct_ExtendedControlEvent;
pub extern fn MusicTrackNewExtendedControlEvent(inTrack: MusicTrack, inTimeStamp: MusicTimeStamp, inInfo: [*c]const ExtendedControlEvent) OSStatus;
pub const AudioFileComponent = AudioComponentInstance;
pub const AudioFileComponentPropertyID = UInt32;
pub extern fn AudioFileComponentCreateURL(inComponent: AudioFileComponent, inFileRef: CFURLRef, inFormat: [*c]const AudioStreamBasicDescription, inFlags: UInt32) OSStatus;
pub extern fn AudioFileComponentOpenURL(inComponent: AudioFileComponent, inFileRef: CFURLRef, inPermissions: SInt8, inFileDescriptor: c_int) OSStatus;
pub extern fn AudioFileComponentOpenWithCallbacks(inComponent: AudioFileComponent, inClientData: ?*c_void, inReadFunc: AudioFile_ReadProc, inWriteFunc: AudioFile_WriteProc, inGetSizeFunc: AudioFile_GetSizeProc, inSetSizeFunc: AudioFile_SetSizeProc) OSStatus;
pub extern fn AudioFileComponentInitializeWithCallbacks(inComponent: AudioFileComponent, inClientData: ?*c_void, inReadFunc: AudioFile_ReadProc, inWriteFunc: AudioFile_WriteProc, inGetSizeFunc: AudioFile_GetSizeProc, inSetSizeFunc: AudioFile_SetSizeProc, inFileType: UInt32, inFormat: [*c]const AudioStreamBasicDescription, inFlags: UInt32) OSStatus;
pub extern fn AudioFileComponentCloseFile(inComponent: AudioFileComponent) OSStatus;
pub extern fn AudioFileComponentOptimize(inComponent: AudioFileComponent) OSStatus;
pub extern fn AudioFileComponentReadBytes(inComponent: AudioFileComponent, inUseCache: Boolean, inStartingByte: SInt64, ioNumBytes: [*c]UInt32, outBuffer: ?*c_void) OSStatus;
pub extern fn AudioFileComponentWriteBytes(inComponent: AudioFileComponent, inUseCache: Boolean, inStartingByte: SInt64, ioNumBytes: [*c]UInt32, inBuffer: ?*const c_void) OSStatus;
pub extern fn AudioFileComponentReadPackets(inComponent: AudioFileComponent, inUseCache: Boolean, outNumBytes: [*c]UInt32, outPacketDescriptions: [*c]AudioStreamPacketDescription, inStartingPacket: SInt64, ioNumPackets: [*c]UInt32, outBuffer: ?*c_void) OSStatus;
pub extern fn AudioFileComponentReadPacketData(inComponent: AudioFileComponent, inUseCache: Boolean, ioNumBytes: [*c]UInt32, outPacketDescriptions: [*c]AudioStreamPacketDescription, inStartingPacket: SInt64, ioNumPackets: [*c]UInt32, outBuffer: ?*c_void) OSStatus;
pub extern fn AudioFileComponentWritePackets(inComponent: AudioFileComponent, inUseCache: Boolean, inNumBytes: UInt32, inPacketDescriptions: [*c]const AudioStreamPacketDescription, inStartingPacket: SInt64, ioNumPackets: [*c]UInt32, inBuffer: ?*const c_void) OSStatus;
pub extern fn AudioFileComponentGetPropertyInfo(inComponent: AudioFileComponent, inPropertyID: AudioFileComponentPropertyID, outPropertySize: [*c]UInt32, outWritable: [*c]UInt32) OSStatus;
pub extern fn AudioFileComponentGetProperty(inComponent: AudioFileComponent, inPropertyID: AudioFileComponentPropertyID, ioPropertyDataSize: [*c]UInt32, outPropertyData: ?*c_void) OSStatus;
pub extern fn AudioFileComponentSetProperty(inComponent: AudioFileComponent, inPropertyID: AudioFileComponentPropertyID, inPropertyDataSize: UInt32, inPropertyData: ?*const c_void) OSStatus;
pub extern fn AudioFileComponentCountUserData(inComponent: AudioFileComponent, inUserDataID: UInt32, outNumberItems: [*c]UInt32) OSStatus;
pub extern fn AudioFileComponentGetUserDataSize(inComponent: AudioFileComponent, inUserDataID: UInt32, inIndex: UInt32, outUserDataSize: [*c]UInt32) OSStatus;
pub extern fn AudioFileComponentGetUserData(inComponent: AudioFileComponent, inUserDataID: UInt32, inIndex: UInt32, ioUserDataSize: [*c]UInt32, outUserData: ?*c_void) OSStatus;
pub extern fn AudioFileComponentSetUserData(inComponent: AudioFileComponent, inUserDataID: UInt32, inIndex: UInt32, inUserDataSize: UInt32, inUserData: ?*const c_void) OSStatus;
pub extern fn AudioFileComponentRemoveUserData(inComponent: AudioFileComponent, inUserDataID: UInt32, inIndex: UInt32) OSStatus;
pub extern fn AudioFileComponentExtensionIsThisFormat(inComponent: AudioFileComponent, inExtension: CFStringRef, outResult: [*c]UInt32) OSStatus;
pub extern fn AudioFileComponentFileDataIsThisFormat(inComponent: AudioFileComponent, inDataByteSize: UInt32, inData: ?*const c_void, outResult: [*c]UInt32) OSStatus;
pub extern fn AudioFileComponentFileIsThisFormat(inComponent: AudioFileComponent, inFileRefNum: SInt16, outResult: [*c]UInt32) OSStatus;
pub extern fn AudioFileComponentDataIsThisFormat(inComponent: AudioFileComponent, inClientData: ?*c_void, inReadFunc: AudioFile_ReadProc, inWriteFunc: AudioFile_WriteProc, inGetSizeFunc: AudioFile_GetSizeProc, inSetSizeFunc: AudioFile_SetSizeProc, outResult: [*c]UInt32) OSStatus;
pub extern fn AudioFileComponentGetGlobalInfoSize(inComponent: AudioFileComponent, inPropertyID: AudioFileComponentPropertyID, inSpecifierSize: UInt32, inSpecifier: ?*const c_void, outPropertySize: [*c]UInt32) OSStatus;
pub extern fn AudioFileComponentGetGlobalInfo(inComponent: AudioFileComponent, inPropertyID: AudioFileComponentPropertyID, inSpecifierSize: UInt32, inSpecifier: ?*const c_void, ioPropertyDataSize: [*c]UInt32, outPropertyData: ?*c_void) OSStatus;
pub const kAudioFileComponent_CanRead = @enumToInt(enum_unnamed_443.kAudioFileComponent_CanRead);
pub const kAudioFileComponent_CanWrite = @enumToInt(enum_unnamed_443.kAudioFileComponent_CanWrite);
pub const kAudioFileComponent_FileTypeName = @enumToInt(enum_unnamed_443.kAudioFileComponent_FileTypeName);
pub const kAudioFileComponent_UTIsForType = @enumToInt(enum_unnamed_443.kAudioFileComponent_UTIsForType);
pub const kAudioFileComponent_MIMETypesForType = @enumToInt(enum_unnamed_443.kAudioFileComponent_MIMETypesForType);
pub const kAudioFileComponent_ExtensionsForType = @enumToInt(enum_unnamed_443.kAudioFileComponent_ExtensionsForType);
pub const kAudioFileComponent_AvailableFormatIDs = @enumToInt(enum_unnamed_443.kAudioFileComponent_AvailableFormatIDs);
pub const kAudioFileComponent_AvailableStreamDescriptionsForFormat = @enumToInt(enum_unnamed_443.kAudioFileComponent_AvailableStreamDescriptionsForFormat);
pub const kAudioFileComponent_FastDispatchTable = @enumToInt(enum_unnamed_443.kAudioFileComponent_FastDispatchTable);
pub const kAudioFileComponent_HFSTypeCodesForType = @enumToInt(enum_unnamed_443.kAudioFileComponent_HFSTypeCodesForType);
const enum_unnamed_443 = extern enum(c_int) {
    kAudioFileComponent_CanRead = 1668182628,
    kAudioFileComponent_CanWrite = 1668183922,
    kAudioFileComponent_FileTypeName = 1718906477,
    kAudioFileComponent_UTIsForType = 1718973545,
    kAudioFileComponent_MIMETypesForType = 1718446445,
    kAudioFileComponent_ExtensionsForType = 1717926004,
    kAudioFileComponent_AvailableFormatIDs = 1718446436,
    kAudioFileComponent_AvailableStreamDescriptionsForFormat = 1935960420,
    kAudioFileComponent_FastDispatchTable = 1717855860,
    kAudioFileComponent_HFSTypeCodesForType = 1718118003,
    _,
};
pub const kAudioFileCreateSelect = @enumToInt(enum_unnamed_444.kAudioFileCreateSelect);
pub const kAudioFileOpenSelect = @enumToInt(enum_unnamed_444.kAudioFileOpenSelect);
pub const kAudioFileInitializeSelect = @enumToInt(enum_unnamed_444.kAudioFileInitializeSelect);
pub const kAudioFileOpenWithCallbacksSelect = @enumToInt(enum_unnamed_444.kAudioFileOpenWithCallbacksSelect);
pub const kAudioFileInitializeWithCallbacksSelect = @enumToInt(enum_unnamed_444.kAudioFileInitializeWithCallbacksSelect);
pub const kAudioFileCloseSelect = @enumToInt(enum_unnamed_444.kAudioFileCloseSelect);
pub const kAudioFileOptimizeSelect = @enumToInt(enum_unnamed_444.kAudioFileOptimizeSelect);
pub const kAudioFileReadBytesSelect = @enumToInt(enum_unnamed_444.kAudioFileReadBytesSelect);
pub const kAudioFileWriteBytesSelect = @enumToInt(enum_unnamed_444.kAudioFileWriteBytesSelect);
pub const kAudioFileReadPacketsSelect = @enumToInt(enum_unnamed_444.kAudioFileReadPacketsSelect);
pub const kAudioFileWritePacketsSelect = @enumToInt(enum_unnamed_444.kAudioFileWritePacketsSelect);
pub const kAudioFileGetPropertyInfoSelect = @enumToInt(enum_unnamed_444.kAudioFileGetPropertyInfoSelect);
pub const kAudioFileGetPropertySelect = @enumToInt(enum_unnamed_444.kAudioFileGetPropertySelect);
pub const kAudioFileSetPropertySelect = @enumToInt(enum_unnamed_444.kAudioFileSetPropertySelect);
pub const kAudioFileExtensionIsThisFormatSelect = @enumToInt(enum_unnamed_444.kAudioFileExtensionIsThisFormatSelect);
pub const kAudioFileFileIsThisFormatSelect = @enumToInt(enum_unnamed_444.kAudioFileFileIsThisFormatSelect);
pub const kAudioFileDataIsThisFormatSelect = @enumToInt(enum_unnamed_444.kAudioFileDataIsThisFormatSelect);
pub const kAudioFileGetGlobalInfoSizeSelect = @enumToInt(enum_unnamed_444.kAudioFileGetGlobalInfoSizeSelect);
pub const kAudioFileGetGlobalInfoSelect = @enumToInt(enum_unnamed_444.kAudioFileGetGlobalInfoSelect);
pub const kAudioFileCountUserDataSelect = @enumToInt(enum_unnamed_444.kAudioFileCountUserDataSelect);
pub const kAudioFileGetUserDataSizeSelect = @enumToInt(enum_unnamed_444.kAudioFileGetUserDataSizeSelect);
pub const kAudioFileGetUserDataSelect = @enumToInt(enum_unnamed_444.kAudioFileGetUserDataSelect);
pub const kAudioFileSetUserDataSelect = @enumToInt(enum_unnamed_444.kAudioFileSetUserDataSelect);
pub const kAudioFileRemoveUserDataSelect = @enumToInt(enum_unnamed_444.kAudioFileRemoveUserDataSelect);
pub const kAudioFileCreateURLSelect = @enumToInt(enum_unnamed_444.kAudioFileCreateURLSelect);
pub const kAudioFileOpenURLSelect = @enumToInt(enum_unnamed_444.kAudioFileOpenURLSelect);
pub const kAudioFileFileDataIsThisFormatSelect = @enumToInt(enum_unnamed_444.kAudioFileFileDataIsThisFormatSelect);
pub const kAudioFileReadPacketDataSelect = @enumToInt(enum_unnamed_444.kAudioFileReadPacketDataSelect);
const enum_unnamed_444 = extern enum(c_int) {
    kAudioFileCreateSelect = 1,
    kAudioFileOpenSelect = 2,
    kAudioFileInitializeSelect = 3,
    kAudioFileOpenWithCallbacksSelect = 4,
    kAudioFileInitializeWithCallbacksSelect = 5,
    kAudioFileCloseSelect = 6,
    kAudioFileOptimizeSelect = 7,
    kAudioFileReadBytesSelect = 8,
    kAudioFileWriteBytesSelect = 9,
    kAudioFileReadPacketsSelect = 10,
    kAudioFileWritePacketsSelect = 11,
    kAudioFileGetPropertyInfoSelect = 12,
    kAudioFileGetPropertySelect = 13,
    kAudioFileSetPropertySelect = 14,
    kAudioFileExtensionIsThisFormatSelect = 15,
    kAudioFileFileIsThisFormatSelect = 16,
    kAudioFileDataIsThisFormatSelect = 17,
    kAudioFileGetGlobalInfoSizeSelect = 18,
    kAudioFileGetGlobalInfoSelect = 19,
    kAudioFileCountUserDataSelect = 20,
    kAudioFileGetUserDataSizeSelect = 21,
    kAudioFileGetUserDataSelect = 22,
    kAudioFileSetUserDataSelect = 23,
    kAudioFileRemoveUserDataSelect = 24,
    kAudioFileCreateURLSelect = 25,
    kAudioFileOpenURLSelect = 26,
    kAudioFileFileDataIsThisFormatSelect = 27,
    kAudioFileReadPacketDataSelect = 28,
    _,
};
pub const ReadBytesFDF = ?fn (?*c_void, Boolean, SInt64, [*c]UInt32, ?*c_void) callconv(.C) OSStatus;
pub const WriteBytesFDF = ?fn (?*c_void, Boolean, SInt64, [*c]UInt32, ?*const c_void) callconv(.C) OSStatus;
pub const ReadPacketsFDF = ?fn (?*c_void, Boolean, [*c]UInt32, [*c]AudioStreamPacketDescription, SInt64, [*c]UInt32, ?*c_void) callconv(.C) OSStatus;
pub const ReadPacketDataFDF = ?fn (?*c_void, Boolean, [*c]UInt32, [*c]AudioStreamPacketDescription, SInt64, [*c]UInt32, ?*c_void) callconv(.C) OSStatus;
pub const WritePacketsFDF = ?fn (?*c_void, Boolean, UInt32, [*c]const AudioStreamPacketDescription, SInt64, [*c]UInt32, ?*const c_void) callconv(.C) OSStatus;
pub const GetPropertyInfoFDF = ?fn (?*c_void, AudioFilePropertyID, [*c]UInt32, [*c]UInt32) callconv(.C) OSStatus;
pub const GetPropertyFDF = ?fn (?*c_void, AudioFilePropertyID, [*c]UInt32, ?*c_void) callconv(.C) OSStatus;
pub const SetPropertyFDF = ?fn (?*c_void, AudioFilePropertyID, UInt32, ?*const c_void) callconv(.C) OSStatus;
pub const CountUserDataFDF = ?fn (?*c_void, UInt32, [*c]UInt32) callconv(.C) OSStatus;
pub const GetUserDataSizeFDF = ?fn (?*c_void, UInt32, UInt32, [*c]UInt32) callconv(.C) OSStatus;
pub const GetUserDataFDF = ?fn (?*c_void, UInt32, UInt32, [*c]UInt32, ?*c_void) callconv(.C) OSStatus;
pub const SetUserDataFDF = ?fn (?*c_void, UInt32, UInt32, UInt32, ?*const c_void) callconv(.C) OSStatus;
pub const struct_AudioFileFDFTable = extern struct {
    mComponentStorage: ?*c_void,
    mReadBytesFDF: ReadBytesFDF,
    mWriteBytesFDF: WriteBytesFDF,
    mReadPacketsFDF: ReadPacketsFDF,
    mWritePacketsFDF: WritePacketsFDF,
    mGetPropertyInfoFDF: GetPropertyInfoFDF,
    mGetPropertyFDF: GetPropertyFDF,
    mSetPropertyFDF: SetPropertyFDF,
    mCountUserDataFDF: CountUserDataFDF,
    mGetUserDataSizeFDF: GetUserDataSizeFDF,
    mGetUserDataFDF: GetUserDataFDF,
    mSetUserDataFDF: SetUserDataFDF,
};
pub const AudioFileFDFTable = struct_AudioFileFDFTable;
pub const struct_AudioFileFDFTableExtended = extern struct {
    mComponentStorage: ?*c_void,
    mReadBytesFDF: ReadBytesFDF,
    mWriteBytesFDF: WriteBytesFDF,
    mReadPacketsFDF: ReadPacketsFDF,
    mWritePacketsFDF: WritePacketsFDF,
    mGetPropertyInfoFDF: GetPropertyInfoFDF,
    mGetPropertyFDF: GetPropertyFDF,
    mSetPropertyFDF: SetPropertyFDF,
    mCountUserDataFDF: CountUserDataFDF,
    mGetUserDataSizeFDF: GetUserDataSizeFDF,
    mGetUserDataFDF: GetUserDataFDF,
    mSetUserDataFDF: SetUserDataFDF,
    mReadPacketDataFDF: ReadPacketDataFDF,
};
pub const AudioFileFDFTableExtended = struct_AudioFileFDFTableExtended;
pub extern fn AudioFileComponentCreate(inComponent: AudioFileComponent, inParentRef: ?*const struct_FSRef, inFileName: CFStringRef, inFormat: [*c]const AudioStreamBasicDescription, inFlags: UInt32, outNewFileRef: ?*struct_FSRef) OSStatus;
pub extern fn AudioFileComponentInitialize(inComponent: AudioFileComponent, inFileRef: ?*const struct_FSRef, inFormat: [*c]const AudioStreamBasicDescription, inFlags: UInt32) OSStatus;
pub extern fn AudioFileComponentOpenFile(inComponent: AudioFileComponent, inFileRef: ?*const struct_FSRef, inPermissions: SInt8, inRefNum: SInt16) OSStatus;
pub const AudioFileComponentCreateURLProc = ?fn (?*c_void, CFURLRef, [*c]const AudioStreamBasicDescription, UInt32) callconv(.C) OSStatus;
pub const AudioFileComponentOpenURLProc = ?fn (?*c_void, CFURLRef, SInt8, c_int) callconv(.C) OSStatus;
pub const AudioFileComponentOpenWithCallbacksProc = ?fn (?*c_void, ?*c_void, AudioFile_ReadProc, AudioFile_WriteProc, AudioFile_GetSizeProc, AudioFile_SetSizeProc) callconv(.C) OSStatus;
pub const AudioFileComponentInitializeWithCallbacksProc = ?fn (?*c_void, ?*c_void, AudioFile_ReadProc, AudioFile_WriteProc, AudioFile_GetSizeProc, AudioFile_SetSizeProc, UInt32, [*c]const AudioStreamBasicDescription, UInt32) callconv(.C) OSStatus;
pub const AudioFileComponentCloseProc = ?fn (?*c_void) callconv(.C) OSStatus;
pub const AudioFileComponentOptimizeProc = ?fn (?*c_void) callconv(.C) OSStatus;
pub const AudioFileComponentReadBytesProc = ?fn (?*c_void, Boolean, SInt64, [*c]UInt32, ?*c_void) callconv(.C) OSStatus;
pub const AudioFileComponentWriteBytesProc = ?fn (?*c_void, Boolean, SInt64, [*c]UInt32, ?*const c_void) callconv(.C) OSStatus;
pub const AudioFileComponentReadPacketsProc = ?fn (?*c_void, Boolean, [*c]UInt32, [*c]AudioStreamPacketDescription, SInt64, [*c]UInt32, ?*c_void) callconv(.C) OSStatus;
pub const AudioFileComponentReadPacketDataProc = ?fn (?*c_void, Boolean, [*c]UInt32, [*c]AudioStreamPacketDescription, SInt64, [*c]UInt32, ?*c_void) callconv(.C) OSStatus;
pub const AudioFileComponentWritePacketsProc = ?fn (?*c_void, Boolean, UInt32, [*c]const AudioStreamPacketDescription, SInt64, [*c]UInt32, ?*const c_void) callconv(.C) OSStatus;
pub const AudioFileComponentGetPropertyInfoProc = ?fn (?*c_void, AudioFileComponentPropertyID, [*c]UInt32, [*c]UInt32) callconv(.C) OSStatus;
pub const AudioFileComponentGetPropertyProc = ?fn (?*c_void, AudioFileComponentPropertyID, [*c]UInt32, ?*c_void) callconv(.C) OSStatus;
pub const AudioFileComponentSetPropertyProc = ?fn (?*c_void, AudioFileComponentPropertyID, UInt32, ?*const c_void) callconv(.C) OSStatus;
pub const AudioFileComponentCountUserDataProc = ?fn (?*c_void, UInt32, [*c]UInt32) callconv(.C) OSStatus;
pub const AudioFileComponentGetUserDataSizeProc = ?fn (?*c_void, UInt32, UInt32, [*c]UInt32) callconv(.C) OSStatus;
pub const AudioFileComponentGetUserDataProc = ?fn (?*c_void, UInt32, UInt32, [*c]UInt32, ?*c_void) callconv(.C) OSStatus;
pub const AudioFileComponentSetUserDataProc = ?fn (?*c_void, UInt32, UInt32, UInt32, ?*const c_void) callconv(.C) OSStatus;
pub const AudioFileComponentRemoveUserDataProc = ?fn (?*c_void, UInt32, UInt32) callconv(.C) OSStatus;
pub const AudioFileComponentExtensionIsThisFormatProc = ?fn (?*c_void, CFStringRef, [*c]UInt32) callconv(.C) OSStatus;
pub const AudioFileComponentFileDataIsThisFormatProc = ?fn (?*c_void, UInt32, ?*const c_void, [*c]UInt32) callconv(.C) OSStatus;
pub const AudioFileComponentGetGlobalInfoSizeProc = ?fn (?*c_void, AudioFileComponentPropertyID, UInt32, ?*const c_void, [*c]UInt32) callconv(.C) OSStatus;
pub const AudioFileComponentGetGlobalInfoProc = ?fn (?*c_void, AudioFileComponentPropertyID, UInt32, ?*const c_void, [*c]UInt32, ?*c_void) callconv(.C) OSStatus;
pub const kAUParameterListener_AnyParameter = @enumToInt(enum_unnamed_445.kAUParameterListener_AnyParameter);
const enum_unnamed_445 = extern enum(c_int) {
    kAUParameterListener_AnyParameter = 4294967295,
    _,
};
pub const AudioUnitEventType = UInt32;
pub const kAudioUnitEvent_ParameterValueChange = @enumToInt(enum_unnamed_446.kAudioUnitEvent_ParameterValueChange);
pub const kAudioUnitEvent_BeginParameterChangeGesture = @enumToInt(enum_unnamed_446.kAudioUnitEvent_BeginParameterChangeGesture);
pub const kAudioUnitEvent_EndParameterChangeGesture = @enumToInt(enum_unnamed_446.kAudioUnitEvent_EndParameterChangeGesture);
pub const kAudioUnitEvent_PropertyChange = @enumToInt(enum_unnamed_446.kAudioUnitEvent_PropertyChange);
const enum_unnamed_446 = extern enum(c_int) {
    kAudioUnitEvent_ParameterValueChange = 0,
    kAudioUnitEvent_BeginParameterChangeGesture = 1,
    kAudioUnitEvent_EndParameterChangeGesture = 2,
    kAudioUnitEvent_PropertyChange = 3,
    _,
};
pub const struct_AUListenerBase = @OpaqueType();
pub const AUParameterListenerRef = ?*struct_AUListenerBase;
pub const AUEventListenerRef = AUParameterListenerRef;
const union_unnamed_447 = extern union {
    mParameter: AudioUnitParameter,
    mProperty: AudioUnitProperty,
};
pub const struct_AudioUnitEvent = extern struct {
    mEventType: AudioUnitEventType,
    mArgument: union_unnamed_447,
};
pub const AudioUnitEvent = struct_AudioUnitEvent;
pub const AUParameterListenerBlock = @compileError("unable to resolve typedef child type"); // /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/AudioToolbox.framework/Headers/AudioUnitUtilities.h:142:16: warning: unsupported type: 'BlockPointer'
pub const AUEventListenerBlock = @compileError("unable to resolve typedef child type");
pub const AUParameterListenerProc = ?fn (?*c_void, ?*c_void, [*c]const AudioUnitParameter, AudioUnitParameterValue) callconv(.C) void;
pub const AUEventListenerProc = ?fn (?*c_void, ?*c_void, [*c]const AudioUnitEvent, UInt64, AudioUnitParameterValue) callconv(.C) void;
pub extern fn AUListenerCreateWithDispatchQueue(outListener: [*c]AUParameterListenerRef, inNotificationInterval: Float32, inDispatchQueue: dispatch_queue_t, inBlock: AUParameterListenerBlock) OSStatus;
pub extern fn AUListenerCreate(inProc: AUParameterListenerProc, inUserData: ?*c_void, inRunLoop: CFRunLoopRef, inRunLoopMode: CFStringRef, inNotificationInterval: Float32, outListener: [*c]AUParameterListenerRef) OSStatus;
pub extern fn AUListenerDispose(inListener: AUParameterListenerRef) OSStatus;
pub extern fn AUListenerAddParameter(inListener: AUParameterListenerRef, inObject: ?*c_void, inParameter: [*c]const AudioUnitParameter) OSStatus;
pub extern fn AUListenerRemoveParameter(inListener: AUParameterListenerRef, inObject: ?*c_void, inParameter: [*c]const AudioUnitParameter) OSStatus;
pub extern fn AUParameterSet(inSendingListener: AUParameterListenerRef, inSendingObject: ?*c_void, inParameter: [*c]const AudioUnitParameter, inValue: AudioUnitParameterValue, inBufferOffsetInFrames: UInt32) OSStatus;
pub extern fn AUParameterListenerNotify(inSendingListener: AUParameterListenerRef, inSendingObject: ?*c_void, inParameter: [*c]const AudioUnitParameter) OSStatus;
pub extern fn AUEventListenerCreateWithDispatchQueue(outListener: [*c]AUEventListenerRef, inNotificationInterval: Float32, inValueChangeGranularity: Float32, inDispatchQueue: dispatch_queue_t, inBlock: AUEventListenerBlock) OSStatus;
pub extern fn AUEventListenerCreate(inProc: AUEventListenerProc, inUserData: ?*c_void, inRunLoop: CFRunLoopRef, inRunLoopMode: CFStringRef, inNotificationInterval: Float32, inValueChangeGranularity: Float32, outListener: [*c]AUEventListenerRef) OSStatus;
pub extern fn AUEventListenerAddEventType(inListener: AUEventListenerRef, inObject: ?*c_void, inEvent: [*c]const AudioUnitEvent) OSStatus;
pub extern fn AUEventListenerRemoveEventType(inListener: AUEventListenerRef, inObject: ?*c_void, inEvent: [*c]const AudioUnitEvent) OSStatus;
pub extern fn AUEventListenerNotify(inSendingListener: AUEventListenerRef, inSendingObject: ?*c_void, inEvent: [*c]const AudioUnitEvent) OSStatus;
pub extern fn AUParameterValueFromLinear(inLinearValue: Float32, inParameter: [*c]const AudioUnitParameter) AudioUnitParameterValue;
pub extern fn AUParameterValueToLinear(inParameterValue: AudioUnitParameterValue, inParameter: [*c]const AudioUnitParameter) Float32;
pub extern fn AUParameterFormatValue(inParameterValue: Float64, inParameter: [*c]const AudioUnitParameter, inTextBuffer: [*c]u8, inDigits: UInt32) [*c]u8;
pub const CAClockPropertyID = UInt32;
pub const kCAClockProperty_InternalTimebase = @enumToInt(enum_unnamed_448.kCAClockProperty_InternalTimebase);
pub const kCAClockProperty_TimebaseSource = @enumToInt(enum_unnamed_448.kCAClockProperty_TimebaseSource);
pub const kCAClockProperty_SyncMode = @enumToInt(enum_unnamed_448.kCAClockProperty_SyncMode);
pub const kCAClockProperty_SyncSource = @enumToInt(enum_unnamed_448.kCAClockProperty_SyncSource);
pub const kCAClockProperty_SMPTEFormat = @enumToInt(enum_unnamed_448.kCAClockProperty_SMPTEFormat);
pub const kCAClockProperty_SMPTEOffset = @enumToInt(enum_unnamed_448.kCAClockProperty_SMPTEOffset);
pub const kCAClockProperty_MIDIClockDestinations = @enumToInt(enum_unnamed_448.kCAClockProperty_MIDIClockDestinations);
pub const kCAClockProperty_MTCDestinations = @enumToInt(enum_unnamed_448.kCAClockProperty_MTCDestinations);
pub const kCAClockProperty_MTCFreewheelTime = @enumToInt(enum_unnamed_448.kCAClockProperty_MTCFreewheelTime);
pub const kCAClockProperty_TempoMap = @enumToInt(enum_unnamed_448.kCAClockProperty_TempoMap);
pub const kCAClockProperty_MeterTrack = @enumToInt(enum_unnamed_448.kCAClockProperty_MeterTrack);
pub const kCAClockProperty_Name = @enumToInt(enum_unnamed_448.kCAClockProperty_Name);
pub const kCAClockProperty_SendMIDISPP = @enumToInt(enum_unnamed_448.kCAClockProperty_SendMIDISPP);
const enum_unnamed_448 = extern enum(c_int) {
    kCAClockProperty_InternalTimebase = 1768846434,
    kCAClockProperty_TimebaseSource = 1769235059,
    kCAClockProperty_SyncMode = 1937337965,
    kCAClockProperty_SyncSource = 1937337971,
    kCAClockProperty_SMPTEFormat = 1936552038,
    kCAClockProperty_SMPTEOffset = 1936552047,
    kCAClockProperty_MIDIClockDestinations = 1835164516,
    kCAClockProperty_MTCDestinations = 1836344164,
    kCAClockProperty_MTCFreewheelTime = 1836344951,
    kCAClockProperty_TempoMap = 1953329263,
    kCAClockProperty_MeterTrack = 1835365490,
    kCAClockProperty_Name = 1851878757,
    kCAClockProperty_SendMIDISPP = 1836281968,
    _,
};
pub const CAClockTimebase = UInt32;
pub const kCAClockTimebase_HostTime = @enumToInt(enum_unnamed_449.kCAClockTimebase_HostTime);
pub const kCAClockTimebase_AudioDevice = @enumToInt(enum_unnamed_449.kCAClockTimebase_AudioDevice);
pub const kCAClockTimebase_AudioOutputUnit = @enumToInt(enum_unnamed_449.kCAClockTimebase_AudioOutputUnit);
const enum_unnamed_449 = extern enum(c_int) {
    kCAClockTimebase_HostTime = 1752134516,
    kCAClockTimebase_AudioDevice = 1635083369,
    kCAClockTimebase_AudioOutputUnit = 1635086197,
    _,
};
pub const CAClockSyncMode = UInt32;
pub const kCAClockSyncMode_Internal = @enumToInt(enum_unnamed_450.kCAClockSyncMode_Internal);
pub const kCAClockSyncMode_MIDIClockTransport = @enumToInt(enum_unnamed_450.kCAClockSyncMode_MIDIClockTransport);
pub const kCAClockSyncMode_MTCTransport = @enumToInt(enum_unnamed_450.kCAClockSyncMode_MTCTransport);
const enum_unnamed_450 = extern enum(c_int) {
    kCAClockSyncMode_Internal = 1768846450,
    kCAClockSyncMode_MIDIClockTransport = 1835232363,
    kCAClockSyncMode_MTCTransport = 1835889763,
    _,
};
pub const CAClockSMPTEFormat = SMPTETimeType;
pub const CAClockMessage = UInt32;
pub const kCAClockMessage_StartTimeSet = @enumToInt(enum_unnamed_451.kCAClockMessage_StartTimeSet);
pub const kCAClockMessage_Started = @enumToInt(enum_unnamed_451.kCAClockMessage_Started);
pub const kCAClockMessage_Stopped = @enumToInt(enum_unnamed_451.kCAClockMessage_Stopped);
pub const kCAClockMessage_Armed = @enumToInt(enum_unnamed_451.kCAClockMessage_Armed);
pub const kCAClockMessage_Disarmed = @enumToInt(enum_unnamed_451.kCAClockMessage_Disarmed);
pub const kCAClockMessage_PropertyChanged = @enumToInt(enum_unnamed_451.kCAClockMessage_PropertyChanged);
pub const kCAClockMessage_WrongSMPTEFormat = @enumToInt(enum_unnamed_451.kCAClockMessage_WrongSMPTEFormat);
const enum_unnamed_451 = extern enum(c_int) {
    kCAClockMessage_StartTimeSet = 1937009005,
    kCAClockMessage_Started = 1937011316,
    kCAClockMessage_Stopped = 1937010544,
    kCAClockMessage_Armed = 1634889060,
    kCAClockMessage_Disarmed = 1684107885,
    kCAClockMessage_PropertyChanged = 1885562983,
    kCAClockMessage_WrongSMPTEFormat = 1064529264,
    _,
};
pub const CAClockTimeFormat = UInt32;
pub const kCAClockTimeFormat_HostTime = @enumToInt(enum_unnamed_452.kCAClockTimeFormat_HostTime);
pub const kCAClockTimeFormat_Samples = @enumToInt(enum_unnamed_452.kCAClockTimeFormat_Samples);
pub const kCAClockTimeFormat_Beats = @enumToInt(enum_unnamed_452.kCAClockTimeFormat_Beats);
pub const kCAClockTimeFormat_Seconds = @enumToInt(enum_unnamed_452.kCAClockTimeFormat_Seconds);
pub const kCAClockTimeFormat_SMPTESeconds = @enumToInt(enum_unnamed_452.kCAClockTimeFormat_SMPTESeconds);
pub const kCAClockTimeFormat_SMPTETime = @enumToInt(enum_unnamed_452.kCAClockTimeFormat_SMPTETime);
pub const kCAClockTimeFormat_AbsoluteSeconds = @enumToInt(enum_unnamed_452.kCAClockTimeFormat_AbsoluteSeconds);
const enum_unnamed_452 = extern enum(c_int) {
    kCAClockTimeFormat_HostTime = 1752134516,
    kCAClockTimeFormat_Samples = 1935764848,
    kCAClockTimeFormat_Beats = 1650811252,
    kCAClockTimeFormat_Seconds = 1936024435,
    kCAClockTimeFormat_SMPTESeconds = 1936552051,
    kCAClockTimeFormat_SMPTETime = 1936552052,
    kCAClockTimeFormat_AbsoluteSeconds = 1634952547,
    _,
};
pub const kCAClock_UnknownPropertyError = @enumToInt(enum_unnamed_453.kCAClock_UnknownPropertyError);
pub const kCAClock_InvalidPropertySizeError = @enumToInt(enum_unnamed_453.kCAClock_InvalidPropertySizeError);
pub const kCAClock_InvalidTimeFormatError = @enumToInt(enum_unnamed_453.kCAClock_InvalidTimeFormatError);
pub const kCAClock_InvalidSyncModeError = @enumToInt(enum_unnamed_453.kCAClock_InvalidSyncModeError);
pub const kCAClock_InvalidSyncSourceError = @enumToInt(enum_unnamed_453.kCAClock_InvalidSyncSourceError);
pub const kCAClock_InvalidTimebaseError = @enumToInt(enum_unnamed_453.kCAClock_InvalidTimebaseError);
pub const kCAClock_InvalidTimebaseSourceError = @enumToInt(enum_unnamed_453.kCAClock_InvalidTimebaseSourceError);
pub const kCAClock_InvalidSMPTEFormatError = @enumToInt(enum_unnamed_453.kCAClock_InvalidSMPTEFormatError);
pub const kCAClock_InvalidSMPTEOffsetError = @enumToInt(enum_unnamed_453.kCAClock_InvalidSMPTEOffsetError);
pub const kCAClock_InvalidUnitError = @enumToInt(enum_unnamed_453.kCAClock_InvalidUnitError);
pub const kCAClock_InvalidPlayRateError = @enumToInt(enum_unnamed_453.kCAClock_InvalidPlayRateError);
pub const kCAClock_CannotSetTimeError = @enumToInt(enum_unnamed_453.kCAClock_CannotSetTimeError);
const enum_unnamed_453 = extern enum(c_int) {
    kCAClock_UnknownPropertyError = -66816,
    kCAClock_InvalidPropertySizeError = -66815,
    kCAClock_InvalidTimeFormatError = -66814,
    kCAClock_InvalidSyncModeError = -66813,
    kCAClock_InvalidSyncSourceError = -66812,
    kCAClock_InvalidTimebaseError = -66811,
    kCAClock_InvalidTimebaseSourceError = -66810,
    kCAClock_InvalidSMPTEFormatError = -66809,
    kCAClock_InvalidSMPTEOffsetError = -66808,
    kCAClock_InvalidUnitError = -66807,
    kCAClock_InvalidPlayRateError = -66806,
    kCAClock_CannotSetTimeError = -66805,
    _,
};
pub const struct_OpaqueCAClock = @OpaqueType();
pub const CAClockRef = ?*struct_OpaqueCAClock;
pub const CAClockBeats = Float64;
pub const CAClockTempo = Float64;
pub const CAClockSamples = Float64;
pub const CAClockSeconds = Float64;
pub const CAClockListenerProc = ?fn (?*c_void, CAClockMessage, ?*const c_void) callconv(.C) void;
const union_unnamed_454 = extern union {
    hostTime: UInt64,
    samples: CAClockSamples,
    beats: CAClockBeats,
    seconds: CAClockSeconds,
    smpte: SMPTETime,
};
pub const struct_CAClockTime = extern struct {
    format: CAClockTimeFormat,
    reserved: UInt32,
    time: union_unnamed_454,
};
pub const CAClockTime = struct_CAClockTime;
pub const struct_CATempoMapEntry = extern struct {
    beats: CAClockBeats,
    tempoBPM: CAClockTempo,
};
pub const CATempoMapEntry = struct_CATempoMapEntry;
pub const struct_CAMeterTrackEntry = extern struct {
    beats: CAClockBeats,
    meterNumer: UInt16,
    meterDenom: UInt16,
};
pub const CAMeterTrackEntry = struct_CAMeterTrackEntry;
pub extern fn CAClockNew(inReservedFlags: UInt32, outCAClock: [*c]CAClockRef) OSStatus;
pub extern fn CAClockDispose(inCAClock: CAClockRef) OSStatus;
pub extern fn CAClockGetPropertyInfo(inCAClock: CAClockRef, inPropertyID: CAClockPropertyID, outSize: [*c]UInt32, outWritable: [*c]Boolean) OSStatus;
pub extern fn CAClockGetProperty(inCAClock: CAClockRef, inPropertyID: CAClockPropertyID, ioPropertyDataSize: [*c]UInt32, outPropertyData: ?*c_void) OSStatus;
pub extern fn CAClockSetProperty(inCAClock: CAClockRef, inPropertyID: CAClockPropertyID, inPropertyDataSize: UInt32, inPropertyData: ?*const c_void) OSStatus;
pub extern fn CAClockAddListener(inCAClock: CAClockRef, inListenerProc: CAClockListenerProc, inUserData: ?*c_void) OSStatus;
pub extern fn CAClockRemoveListener(inCAClock: CAClockRef, inListenerProc: CAClockListenerProc, inUserData: ?*c_void) OSStatus;
pub extern fn CAClockSetCurrentTime(inCAClock: CAClockRef, inTime: [*c]const CAClockTime) OSStatus;
pub extern fn CAClockGetCurrentTime(inCAClock: CAClockRef, inTimeFormat: CAClockTimeFormat, outTime: [*c]CAClockTime) OSStatus;
pub extern fn CAClockGetStartTime(inCAClock: CAClockRef, inTimeFormat: CAClockTimeFormat, outTime: [*c]CAClockTime) OSStatus;
pub extern fn CAClockTranslateTime(inCAClock: CAClockRef, inTime: [*c]const CAClockTime, inOutputTimeFormat: CAClockTimeFormat, outTime: [*c]CAClockTime) OSStatus;
pub extern fn CAClockStart(inCAClock: CAClockRef) OSStatus;
pub extern fn CAClockStop(inCAClock: CAClockRef) OSStatus;
pub extern fn CAClockArm(inCAClock: CAClockRef) OSStatus;
pub extern fn CAClockDisarm(inCAClock: CAClockRef) OSStatus;
pub extern fn CAClockSetPlayRate(inCAClock: CAClockRef, inPlayRate: Float64) OSStatus;
pub extern fn CAClockGetPlayRate(inCAClock: CAClockRef, outPlayRate: [*c]Float64) OSStatus;
pub extern fn CAClockGetCurrentTempo(inCAClock: CAClockRef, outTempo: [*c]CAClockTempo, outTimestamp: [*c]CAClockTime) OSStatus;
pub extern fn CAClockSetCurrentTempo(inCAClock: CAClockRef, inTempo: CAClockTempo, inTimestamp: [*c]const CAClockTime) OSStatus;
pub extern fn CAClockSecondsToSMPTETime(inCAClock: CAClockRef, inSeconds: CAClockSeconds, inSubframeDivisor: UInt16, outSMPTETime: [*c]SMPTETime) OSStatus;
pub extern fn CAClockSMPTETimeToSeconds(inCAClock: CAClockRef, inSMPTETime: [*c]const SMPTETime, outSeconds: [*c]CAClockSeconds) OSStatus;
pub extern fn CAClockBeatsToBarBeatTime(inCAClock: CAClockRef, inBeats: CAClockBeats, inSubbeatDivisor: UInt16, outBarBeatTime: [*c]CABarBeatTime) OSStatus;
pub extern fn CAClockBarBeatTimeToBeats(inCAClock: CAClockRef, inBarBeatTime: [*c]const CABarBeatTime, outBeats: [*c]CAClockBeats) OSStatus;
pub extern fn CAClockParseMIDI(inCAClock: CAClockRef, inMIDIPacketList: [*c]const struct_MIDIPacketList) OSStatus;
pub extern fn GetNameFromSoundBank(inSoundBankRef: ?*const struct_FSRef, outName: [*c]CFStringRef) OSStatus;
pub extern fn CopyNameFromSoundBank(inURL: CFURLRef, outName: [*c]CFStringRef) OSStatus;
pub extern fn CopyInstrumentInfoFromSoundBank(inURL: CFURLRef, outInstrumentInfo: [*c]CFArrayRef) OSStatus;
pub const __INTMAX_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __UINTMAX_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __PTRDIFF_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __INTPTR_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __SIZE_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __CHAR16_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __CHAR32_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __UINTPTR_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __INT8_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __INT64_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __UINT8_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __UINT16_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __UINT32_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __UINT64_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __INT_LEAST8_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __UINT_LEAST8_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __UINT_LEAST16_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __UINT_LEAST32_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __INT_LEAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __UINT_LEAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __INT_FAST8_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __UINT_FAST8_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __UINT_FAST16_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __UINT_FAST32_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __INT_FAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __UINT_FAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_1_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_1_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_7 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_7_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_8 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_8_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_9 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_9_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_NA = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_NA_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_1_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_13 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_7 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_7_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_8 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_8_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_9 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_9_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_NA = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_NA_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_1_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_13 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_7 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_7_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_8 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_8_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_9 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_9_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_NA = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_NA_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_1_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_13 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_8 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_8_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_9 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_9_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_NA = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_NA_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEPRECATED__MAC_10_7 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_1_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_5 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_5_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_8 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_8_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_9 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_9_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_NA = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_NA_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_1_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_13 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_6 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_6_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_8 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_8_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_9 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_9_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_NA = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_NA_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_1_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_13_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_7 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_7_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_8 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_8_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_9 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_9_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_NA = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_NA_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_1_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_13 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_8 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_8_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_9 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_9_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_NA = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_NA_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_1_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_13 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_14 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_9 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_9_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_NA = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_NA_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_0 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_0_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_1_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_13 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_7 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_7_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_8 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_8_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_9 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_9_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_13_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_NA = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_NA_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_1_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_NA = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_NA_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_10_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_10_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_1_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_NA = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_NA_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_1_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_NA = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_NA_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_1_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_NA = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_NA_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_1_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_NA = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_NA_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_11_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_11_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_1_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_NA = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_NA_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_3 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_3_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_1_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_NA = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_NA_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_1_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_NA = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_NA_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_NA = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_NA_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_10_12_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_10_12_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_NA = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_NA_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_1 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_1_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_2 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_2_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_4_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_14 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_NA = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_NA_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_13 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_13_4 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_14 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_14_DEP__MAC_10_14 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __AVAILABILITY_INTERNAL__MAC_10_15 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __API_AVAILABLE_PLATFORM_macos = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_AVAILABLE_PLATFORM_macosx = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_AVAILABLE_PLATFORM_ios = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_AVAILABLE_PLATFORM_watchos = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_AVAILABLE_PLATFORM_tvos = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_AVAILABLE_PLATFORM_macCatalyst = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_AVAILABLE_PLATFORM_uikitformac = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_AVAILABLE_PLATFORM_driverkit = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_A = @compileError("macro tokenizing failed: unexpected character '#'");
pub const __API_AVAILABLE2 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_AVAILABLE3 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_AVAILABLE4 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_AVAILABLE5 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_AVAILABLE6 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_AVAILABLE7 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_AVAILABLE_GET_MACRO = @compileError("unable to translate C expr: expected identifier");
pub const __API_RANGE_STRINGIFY2 = @compileError("macro tokenizing failed: unexpected character '#'");
pub const __API_A_BEGIN = @compileError("macro tokenizing failed: unexpected character '#'");
pub const __API_AVAILABLE_BEGIN2 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_AVAILABLE_BEGIN3 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_AVAILABLE_BEGIN4 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_AVAILABLE_BEGIN5 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_AVAILABLE_BEGIN6 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_AVAILABLE_BEGIN7 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_AVAILABLE_BEGIN_GET_MACRO = @compileError("unable to translate C expr: expected identifier");
pub const __API_DEPRECATED_PLATFORM_macos = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_DEPRECATED_PLATFORM_macosx = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_DEPRECATED_PLATFORM_ios = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_DEPRECATED_PLATFORM_watchos = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_DEPRECATED_PLATFORM_tvos = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_DEPRECATED_PLATFORM_macCatalyst = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_DEPRECATED_PLATFORM_uikitformac = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_DEPRECATED_PLATFORM_driverkit = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_D = @compileError("macro tokenizing failed: unexpected character '#'");
pub const __API_DEPRECATED_MSG3 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_MSG4 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_MSG5 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_MSG6 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_MSG7 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_MSG8 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_MSG_GET_MACRO = @compileError("unable to translate C expr: expected identifier");
pub const __API_D_BEGIN = @compileError("macro tokenizing failed: unexpected character '#'");
pub const __API_DEPRECATED_BEGIN_MSG3 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_BEGIN_MSG4 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_BEGIN_MSG5 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_BEGIN_MSG6 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_BEGIN_MSG7 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_BEGIN_MSG8 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_BEGIN_MSG_GET_MACRO = @compileError("unable to translate C expr: expected identifier");
pub const __API_R = @compileError("macro tokenizing failed: unexpected character '#'");
pub const __API_DEPRECATED_REP3 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_REP4 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_REP5 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_REP6 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_REP7 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_REP8 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_REP_GET_MACRO = @compileError("unable to translate C expr: expected identifier");
pub const __API_R_BEGIN = @compileError("macro tokenizing failed: unexpected character '#'");
pub const __API_DEPRECATED_BEGIN_REP3 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_BEGIN_REP4 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_BEGIN_REP5 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_BEGIN_REP6 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_BEGIN_REP7 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_BEGIN_REP8 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_DEPRECATED_BEGIN_REP_GET_MACRO = @compileError("unable to translate C expr: expected identifier");
pub const __API_UNAVAILABLE_PLATFORM_macos = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_UNAVAILABLE_PLATFORM_macosx = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_UNAVAILABLE_PLATFORM_ios = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_UNAVAILABLE_PLATFORM_watchos = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_UNAVAILABLE_PLATFORM_tvos = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_UNAVAILABLE_PLATFORM_macCatalyst = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_UNAVAILABLE_PLATFORM_uikitformac = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_UNAVAILABLE_PLATFORM_driverkit = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __API_U = @compileError("macro tokenizing failed: unexpected character '#'");
pub const __API_UNAVAILABLE2 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_UNAVAILABLE3 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_UNAVAILABLE4 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_UNAVAILABLE5 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_UNAVAILABLE6 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_UNAVAILABLE7 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_UNAVAILABLE_GET_MACRO = @compileError("unable to translate C expr: expected identifier");
pub const __API_U_BEGIN = @compileError("macro tokenizing failed: unexpected character '#'");
pub const __API_UNAVAILABLE_BEGIN2 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_UNAVAILABLE_BEGIN3 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_UNAVAILABLE_BEGIN4 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_UNAVAILABLE_BEGIN5 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_UNAVAILABLE_BEGIN6 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_UNAVAILABLE_BEGIN7 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_UNAVAILABLE_BEGIN_GET_MACRO = @compileError("unable to translate C expr: expected identifier");
pub const __swift_compiler_version_at_least = @compileError("unable to translate C expr: expected identifier");
pub const __SPI_AVAILABLE = @compileError("unable to translate C expr: expected identifier");
pub const __OSX_AVAILABLE_STARTING = @compileError("macro tokenizing failed: unexpected character '#'");
pub const __OSX_AVAILABLE_BUT_DEPRECATED = @compileError("macro tokenizing failed: unexpected character '#'");
pub const __OSX_AVAILABLE_BUT_DEPRECATED_MSG = @compileError("macro tokenizing failed: unexpected character '#'");
pub const __OS_AVAILABILITY_MSG = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __OS_EXTENSION_UNAVAILABLE = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __OSX_AVAILABLE = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __OSX_DEPRECATED = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __IOS_AVAILABLE = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __IOS_DEPRECATED = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __TVOS_AVAILABLE = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __TVOS_DEPRECATED = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __WATCHOS_AVAILABLE = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __WATCHOS_DEPRECATED = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __API_AVAILABLE = @compileError("unable to translate C expr: expected identifier");
pub const __API_AVAILABLE_BEGIN = @compileError("unable to translate C expr: expected identifier");
pub const __API_DEPRECATED = @compileError("unable to translate C expr: expected identifier");
pub const __API_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected identifier");
pub const __API_DEPRECATED_BEGIN = @compileError("unable to translate C expr: expected identifier");
pub const __API_DEPRECATED_WITH_REPLACEMENT_BEGIN = @compileError("unable to translate C expr: expected identifier");
pub const __API_UNAVAILABLE = @compileError("unable to translate C expr: expected identifier");
pub const __API_UNAVAILABLE_BEGIN = @compileError("unable to translate C expr: expected identifier");
pub const __SPI_DEPRECATED = @compileError("unable to translate C expr: expected identifier");
pub const __SPI_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected identifier");
pub const API_AVAILABLE = @compileError("unable to translate C expr: expected identifier");
pub const API_AVAILABLE_BEGIN = @compileError("unable to translate C expr: expected identifier");
pub const API_DEPRECATED = @compileError("unable to translate C expr: expected identifier");
pub const API_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected identifier");
pub const API_DEPRECATED_BEGIN = @compileError("unable to translate C expr: expected identifier");
pub const API_DEPRECATED_WITH_REPLACEMENT_BEGIN = @compileError("unable to translate C expr: expected identifier");
pub const API_UNAVAILABLE = @compileError("unable to translate C expr: expected identifier");
pub const API_UNAVAILABLE_BEGIN = @compileError("unable to translate C expr: expected identifier");
pub const SPI_AVAILABLE = @compileError("unable to translate C expr: expected identifier");
pub const SPI_DEPRECATED = @compileError("unable to translate C expr: expected identifier");
pub const SPI_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected identifier");
pub const CF_AVAILABLE = @compileError("unable to translate C expr: expected ',' or ')'");
pub const CF_AVAILABLE_MAC = @compileError("unable to translate C expr: expected ',' or ')'");
pub const CF_DEPRECATED = @compileError("unable to translate C expr: expected identifier");
pub const CF_DEPRECATED_MAC = @compileError("unable to translate C expr: expected identifier");
pub const CF_DEPRECATED_IOS = @compileError("unable to translate C expr: expected identifier");
pub const CF_ENUM_DEPRECATED = @compileError("unable to translate C expr: expected identifier");
pub const CF_ENUM_DEPRECATED_MAC = @compileError("unable to translate C expr: expected identifier");
pub const CF_ENUM_DEPRECATED_IOS = @compileError("unable to translate C expr: expected identifier");
pub const __CF_OPTIONS_ATTRIBUTES = @compileError("unable to translate C expr: unexpected token Id.Comma");
pub const __CF_ENUM_GET_MACRO = @compileError("unable to translate C expr: expected identifier");
pub const __CF_NAMED_ENUM = @compileError("macro tokenizing failed: unexpected character ';'");
pub const CF_CLOSED_ENUM = @compileError("macro tokenizing failed: unexpected character ';'");
pub const CF_OPTIONS = @compileError("macro tokenizing failed: unexpected character ';'");
pub const CF_ENUM = @compileError("unable to translate C expr: expected identifier");
pub const __CF_ERROR_ENUM_GET_MACRO = @compileError("unable to translate C expr: expected identifier");
pub const CF_ERROR_ENUM = @compileError("unable to translate C expr: expected identifier");
pub const CF_SWIFT_UNAVAILABLE = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __CONCAT = @compileError("macro tokenizing failed: unexpected character '#'");
pub const __STRING = @compileError("macro tokenizing failed: unexpected character '#'");
pub const __kpi_deprecated = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __swift_unavailable = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __abortlike = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __header_always_inline = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __unreachable_ok_push = @compileError("macro tokenizing failed: expected whitespace");
pub const __IDSTRING = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __FBSDID = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DEQUALIFY = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __alloc_size = @compileError("unable to translate C expr: expected identifier");
pub const __DARWIN_ALIAS = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __DARWIN_ALIAS_C = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __DARWIN_ALIAS_I = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __DARWIN_NOCANCEL = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __DARWIN_INODE64 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __DARWIN_1050 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __DARWIN_1050ALIAS = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __DARWIN_1050ALIAS_C = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __DARWIN_1050ALIAS_I = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __DARWIN_1050INODE64 = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __DARWIN_EXTSN = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __DARWIN_EXTSN_C = @compileError("unable to translate C expr: expected ',' or ')'");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_0 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_1 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_2 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_0 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_1 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_2 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_0 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_1 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_2 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_3 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_5_0 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_5_1 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_6_0 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_6_1 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_7_0 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_7_1 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_0 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_1 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_2 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_3 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_4 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_0 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_1 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_2 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_3 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_0 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_1 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_2 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_3 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_0 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_1 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_2 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_3 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_4 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_0 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_1 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_2 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_3 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_4 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_0 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_1 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_2 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING_MAC___MAC_10_15_1 = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_ALIAS_STARTING = @compileError("macro tokenizing failed: unexpected character '#'");
pub const __POSIX_C_DEPRECATED = @compileError("macro tokenizing failed: unexpected character '#'");
pub const __compiler_barrier = @compileError("unable to translate C expr: expected identifier");
pub const __enum_decl = @compileError("unable to translate C expr: expected identifier");
pub const __enum_closed_decl = @compileError("unable to translate C expr: expected identifier");
pub const __options_decl = @compileError("unable to translate C expr: expected identifier");
pub const __options_closed_decl = @compileError("unable to translate C expr: expected identifier");
pub const INT64_C = @compileError("macro tokenizing failed: unexpected character '#'");
pub const UINT32_C = @compileError("macro tokenizing failed: unexpected character '#'");
pub const UINT64_C = @compileError("macro tokenizing failed: unexpected character '#'");
pub const INTMAX_C = @compileError("macro tokenizing failed: unexpected character '#'");
pub const UINTMAX_C = @compileError("macro tokenizing failed: unexpected character '#'");
pub const Block_copy = @compileError("unable to translate C expr: expected identifier");
pub const Block_release = @compileError("unable to translate C expr: expected identifier");
pub const EXTERN_API = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const EXTERN_API_C = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const EXTERN_API_STDCALL = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const EXTERN_API_C_STDCALL = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const PRAGMA_ALIGN_SUPPORTED = @compileError("unable to translate C expr: unexpected token Id.Dot");
pub const GENERATINGPOWERPC = @compileError("unable to translate C expr: unexpected token Id.Dot");
pub const GENERATING68K = @compileError("unable to translate C expr: unexpected token Id.Dot");
pub const GENERATING68881 = @compileError("unable to translate C expr: unexpected token Id.Dot");
pub const GENERATINGCFM = @compileError("unable to translate C expr: unexpected token Id.Dot");
pub const CFMSYSTEMCALLS = @compileError("unable to translate C expr: unexpected token Id.Dot");
pub const ONEWORDINLINE = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const TWOWORDINLINE = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const THREEWORDINLINE = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const FOURWORDINLINE = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const FIVEWORDINLINE = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const SIXWORDINLINE = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const SEVENWORDINLINE = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const EIGHTWORDINLINE = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const NINEWORDINLINE = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const TENWORDINLINE = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const ELEVENWORDINLINE = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const TWELVEWORDINLINE = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __DARWIN_OS_INLINE = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __DARWIN_OSSwapInt16 = @compileError("unable to translate C expr: expected ':'");
pub const __DARWIN_OSSwapInt32 = @compileError("unable to translate C expr: expected ':'");
pub const __DARWIN_OSSwapInt64 = @compileError("unable to translate C expr: expected ':'");
pub const NTOHL = @compileError("unable to translate C expr: unexpected token Id.Assign");
pub const NTOHS = @compileError("unable to translate C expr: unexpected token Id.Assign");
pub const NTOHLL = @compileError("unable to translate C expr: unexpected token Id.Assign");
pub const HTONL = @compileError("unable to translate C expr: unexpected token Id.Assign");
pub const HTONS = @compileError("unable to translate C expr: unexpected token Id.Assign");
pub const HTONLL = @compileError("unable to translate C expr: unexpected token Id.Assign");
pub const __DARWIN_howmany = @compileError("macro tokenizing failed: unexpected character '%'");
pub const __DARWIN_FD_SET = @compileError("macro tokenizing failed: unexpected character '{'");
pub const __DARWIN_FD_CLR = @compileError("macro tokenizing failed: unexpected character '{'");
pub const StrLength = @compileError("unable to translate C expr: expected ')''");
pub const CF_INLINE = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const CF_SWIFT_NAME = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const TestAudioFormatNativeEndian = @compileError("unable to translate C expr: unexpected token Id.Eq");
pub const assert = @compileError("macro tokenizing failed: unexpected character '#'");
pub const errno = @compileError("unable to translate C expr: unexpected token Id.RParen");
pub const FLT_ROUNDS = @compileError("unable to translate C expr: unexpected token Id.RParen");
pub const HUGE_VAL = @compileError("unable to translate C expr: unexpected token Id.RParen");
pub const HUGE_VALF = @compileError("unable to translate C expr: unexpected token Id.RParen");
pub const HUGE_VALL = @compileError("unable to translate C expr: unexpected token Id.RParen");
pub const math_errhandling = @compileError("unable to translate C expr: unexpected token Id.RParen");
pub const fpclassify = @compileError("unable to translate C expr: unexpected token Id.Eq");
pub const isnormal = @compileError("unable to translate C expr: unexpected token Id.Eq");
pub const isfinite = @compileError("unable to translate C expr: unexpected token Id.Eq");
pub const isinf = @compileError("unable to translate C expr: unexpected token Id.Eq");
pub const isnan = @compileError("unable to translate C expr: unexpected token Id.Eq");
pub const signbit = @compileError("unable to translate C expr: unexpected token Id.Eq");
pub const MAXFLOAT = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const SIG_DFL = @compileError("unable to translate C expr: unexpected token Id.RParen");
pub const SIG_IGN = @compileError("unable to translate C expr: unexpected token Id.RParen");
pub const SIG_HOLD = @compileError("unable to translate C expr: unexpected token Id.RParen");
pub const SIG_ERR = @compileError("unable to translate C expr: unexpected token Id.RParen");
pub const _STRUCT_X86_THREAD_STATE32 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_FP_CONTROL = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_FP_STATUS = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_MMST_REG = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_XMM_REG = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_YMM_REG = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_ZMM_REG = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_OPMASK_REG = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_X86_FLOAT_STATE32 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_X86_AVX_STATE32 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_X86_AVX512_STATE32 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_X86_EXCEPTION_STATE32 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_X86_DEBUG_STATE32 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_X86_PAGEIN_STATE = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_X86_THREAD_STATE64 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_X86_THREAD_FULL_STATE64 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_X86_FLOAT_STATE64 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_X86_AVX_STATE64 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_X86_AVX512_STATE64 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_X86_EXCEPTION_STATE64 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_X86_DEBUG_STATE64 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_X86_CPMU_STATE64 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_MCONTEXT32 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_MCONTEXT_AVX32 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_MCONTEXT_AVX512_32 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_MCONTEXT64 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_MCONTEXT64_FULL = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_MCONTEXT_AVX64 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_MCONTEXT_AVX64_FULL = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_MCONTEXT_AVX512_64 = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_MCONTEXT_AVX512_64_FULL = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_SIGALTSTACK = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const _STRUCT_UCONTEXT = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __sgetc = @compileError("unable to translate C expr: unexpected token Id.Decrement");
pub const __sfeof = @compileError("unable to translate C expr: unexpected token Id.Ne");
pub const __sferror = @compileError("unable to translate C expr: unexpected token Id.Ne");
pub const __sclearerr = @compileError("unable to translate C expr: unexpected token Id.Assign");
pub const __darwin_obsz = @compileError("unable to translate C expr: expected ',' or ')'");
pub const _STRUCT_TIMEVAL = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const WIFCONTINUED = @compileError("unable to translate C expr: unexpected token Id.Eq");
pub const WIFSTOPPED = @compileError("unable to translate C expr: unexpected token Id.Eq");
pub const WIFEXITED = @compileError("unable to translate C expr: unexpected token Id.Eq");
pub const WIFSIGNALED = @compileError("unable to translate C expr: unexpected token Id.Ne");
pub const _STRUCT_TIMESPEC = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const __CLOCK_AVAILABILITY = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const PRId8 = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const PRIi8 = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const PRIo8 = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const PRIu8 = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const PRIx8 = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const PRIX8 = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const PRId64 = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const PRIi64 = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const PRIo64 = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const PRIu64 = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const PRIx64 = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const PRIX64 = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const PRIdMAX = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const PRIiMAX = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const PRIoMAX = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const PRIuMAX = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const PRIxMAX = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const PRIXMAX = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const SCNd8 = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const SCNi8 = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const SCNo8 = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const SCNu8 = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const SCNx8 = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const SCNd64 = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const SCNi64 = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const SCNo64 = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const SCNu64 = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const SCNx64 = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const SCNdMAX = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const SCNiMAX = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const SCNoMAX = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const SCNuMAX = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const SCNxMAX = @compileError("unable to translate C expr: unexpected token Id.StrLit");
pub const OS_INLINE = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const CF_CALENDAR_ENUM_DEPRECATED = @compileError("unable to translate C expr: expected identifier");
pub const CF_CALENDAR_DEPRECATED = @compileError("unable to translate C expr: expected identifier");
pub const CFSTR = @compileError("unable to translate C expr: expected ',' or ')'");
pub const MACH_PORT_VALID = @compileError("unable to translate C expr: unexpected token Id.Ne");
pub const MACH_PORT_LIMITS_INFO_COUNT = @compileError("unable to translate C expr: expected ')''");
pub const MACH_PORT_RECEIVE_STATUS_COUNT = @compileError("unable to translate C expr: expected ')''");
pub const MACH_PORT_INFO_EXT_COUNT = @compileError("unable to translate C expr: expected ')''");
pub const OS_EXPORT = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const OS_ENUM = @compileError("macro tokenizing failed: unexpected character '{'");
pub const OS_CLOSED_ENUM = @compileError("macro tokenizing failed: unexpected character '{'");
pub const OS_OPTIONS = @compileError("macro tokenizing failed: unexpected character '{'");
pub const OS_CLOSED_OPTIONS = @compileError("macro tokenizing failed: unexpected character '{'");
pub const OS_SWIFT_UNAVAILABLE = @compileError("unable to translate C expr: expected ',' or ')'");
pub const OS_SWIFT_NAME = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const __OS_STRINGIFY = @compileError("macro tokenizing failed: unexpected character '#'");
pub const __OS_CONCAT = @compileError("macro tokenizing failed: unexpected character '#'");
pub const os_prevent_tail_call_optimization = @compileError("unable to translate C expr: expected identifier");
pub const os_compiler_barrier = @compileError("unable to translate C expr: expected identifier");
pub const OS_OBJECT_DECL_CLASS = @compileError("macro tokenizing failed: unexpected character '#'");
pub const DISPATCH_LINUX_UNAVAILABLE = @compileError("unable to translate C expr: expected identifier");
pub const DISPATCH_FREEBSD_UNAVAILABLE = @compileError("unable to translate C expr: expected identifier");
pub const DISPATCH_ALIAS_V2 = @compileError("macro tokenizing failed: unexpected character '#'");
pub const DISPATCH_EXPORT = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const DISPATCH_INLINE = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const dispatch_compiler_barrier = @compileError("unable to translate C expr: expected identifier");
pub const DISPATCH_ENUM = @compileError("macro tokenizing failed: unexpected character '{'");
pub const DISPATCH_OPTIONS = @compileError("macro tokenizing failed: unexpected character '{'");
pub const DISPATCH_ENUM_API_AVAILABLE = @compileError("unable to translate C expr: expected identifier");
pub const DISPATCH_ENUM_API_DEPRECATED = @compileError("unable to translate C expr: expected identifier");
pub const DISPATCH_ENUM_API_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected identifier");
pub const DISPATCH_SWIFT_UNAVAILABLE = @compileError("unable to translate C expr: expected ',' or ')'");
pub const DISPATCH_SWIFT3_UNAVAILABLE = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const DISPATCH_SWIFT_NAME = @compileError("unable to translate C expr: unexpected token Id.Eof");
pub const time_value_add_usec = @compileError("macro tokenizing failed: unexpected character '{'");
pub const time_value_add = @compileError("macro tokenizing failed: unexpected character '{'");
pub const CMP_MACH_TIMESPEC = @compileError("unable to translate C expr: expected ':'");
pub const ADD_MACH_TIMESPEC = @compileError("macro tokenizing failed: unexpected character '{'");
pub const SUB_MACH_TIMESPEC = @compileError("macro tokenizing failed: unexpected character '{'");
pub const BAD_ALRMTYPE = @compileError("unable to translate C expr: unexpected token Id.Ne");
pub const __QOS_ENUM = @compileError("macro tokenizing failed: unexpected character '{'");
pub const __QOS_CLASS_AVAILABLE = @compileError("unable to translate C expr: expected identifier");
pub const DISPATCH_DECL = @compileError("macro tokenizing failed: unexpected character '#'");
pub const DISPATCH_DECL_SUBCLASS = @compileError("macro tokenizing failed: unexpected character '#'");
pub const DISPATCH_SOURCE_DECL = @compileError("macro tokenizing failed: unexpected character ';'");
pub const DISPATCH_SOURCE_TYPE_DECL = @compileError("macro tokenizing failed: unexpected character '#'");
pub const MACH_MSGH_BITS_HAS_REMOTE = @compileError("unable to translate C expr: unexpected token Id.Ne");
pub const MACH_MSGH_BITS_HAS_LOCAL = @compileError("unable to translate C expr: unexpected token Id.Ne");
pub const MACH_MSGH_BITS_HAS_VOUCHER = @compileError("unable to translate C expr: unexpected token Id.Ne");
pub const MACH_MSGH_BITS_IS_COMPLEX = @compileError("unable to translate C expr: unexpected token Id.Ne");
pub const MACH_MSGH_BITS_RAISED_IMPORTANCE = @compileError("unable to translate C expr: unexpected token Id.Ne");
pub const MACH_MSGH_BITS_HOLDS_IMPORTANCE_ASSERTION = @compileError("unable to translate C expr: unexpected token Id.Ne");
pub const MACH_MSG_SIZE_NULL = @compileError("unable to translate C expr: unexpected token Id.NumLitInt");
pub const MACH_MSG_PRIORITY_UNSPECIFIED = @compileError("unable to translate C expr: unexpected token Id.NumLitInt");
pub const MACH_MSG_BODY_NULL = @compileError("unable to translate C expr: unexpected token Id.NumLitInt");
pub const MACH_MSG_DESCRIPTOR_NULL = @compileError("unable to translate C expr: unexpected token Id.NumLitInt");
pub const MACH_MSG_NULL = @compileError("unable to translate C expr: unexpected token Id.NumLitInt");
pub const KERNEL_SECURITY_TOKEN_VALUE = @compileError("macro tokenizing failed: unexpected character '{'");
pub const KERNEL_AUDIT_TOKEN_VALUE = @compileError("macro tokenizing failed: unexpected character '{'");
pub const REQUESTED_TRAILER_SIZE_NATIVE = @compileError("unable to translate C expr: unexpected token Id.Eq");
pub const DISPATCH_SOURCE_TYPE_DATA_ADD = @compileError("unable to translate C expr: unexpected token Id.Ampersand");
pub const DISPATCH_SOURCE_TYPE_DATA_OR = @compileError("unable to translate C expr: unexpected token Id.Ampersand");
pub const DISPATCH_SOURCE_TYPE_DATA_REPLACE = @compileError("unable to translate C expr: unexpected token Id.Ampersand");
pub const DISPATCH_SOURCE_TYPE_MACH_SEND = @compileError("unable to translate C expr: unexpected token Id.Ampersand");
pub const DISPATCH_SOURCE_TYPE_MACH_RECV = @compileError("unable to translate C expr: unexpected token Id.Ampersand");
pub const DISPATCH_SOURCE_TYPE_MEMORYPRESSURE = @compileError("unable to translate C expr: unexpected token Id.Ampersand");
pub const DISPATCH_SOURCE_TYPE_PROC = @compileError("unable to translate C expr: unexpected token Id.Ampersand");
pub const DISPATCH_SOURCE_TYPE_READ = @compileError("unable to translate C expr: unexpected token Id.Ampersand");
pub const DISPATCH_SOURCE_TYPE_SIGNAL = @compileError("unable to translate C expr: unexpected token Id.Ampersand");
pub const DISPATCH_SOURCE_TYPE_TIMER = @compileError("unable to translate C expr: unexpected token Id.Ampersand");
pub const DISPATCH_SOURCE_TYPE_VNODE = @compileError("unable to translate C expr: unexpected token Id.Ampersand");
pub const DISPATCH_SOURCE_TYPE_WRITE = @compileError("unable to translate C expr: unexpected token Id.Ampersand");
pub const DISPATCH_DATA_DESTRUCTOR_TYPE_DECL = @compileError("macro tokenizing failed: unexpected character '#'");
pub const CFCopyLocalizedString = @compileError("unable to translate C expr: unexpected token Id.RParen");
pub const CFCopyLocalizedStringFromTable = @compileError("unable to translate C expr: unexpected token Id.RParen");
pub const KAUTH_ACL_SIZE = @compileError("unable to translate C expr: expected ',' or ')'");
pub const KAUTH_FILESEC_SIZE = @compileError("unable to translate C expr: expected ',' or ')'");
pub const KAUTH_FILESEC_COPYSIZE = @compileError("unable to translate C expr: unexpected token Id.Eq");
pub const KAUTH_FILESEC_COUNT = @compileError("unable to translate C expr: unexpected token Id.Slash");
pub const KAUTH_FILESEC_VALID = @compileError("macro tokenizing failed: unexpected character '%'");
pub const kCFFileSecurityRemoveACL = @compileError("unable to translate C expr: unexpected token Id.Identifier");
pub const AudioUnitDisplayTypeIsLogarithmic = @compileError("unable to translate C expr: unexpected token Id.Eq");
pub const AudioUnitDisplayTypeIsSquareRoot = @compileError("unable to translate C expr: unexpected token Id.Eq");
pub const AudioUnitDisplayTypeIsSquared = @compileError("unable to translate C expr: unexpected token Id.Eq");
pub const AudioUnitDisplayTypeIsCubed = @compileError("unable to translate C expr: unexpected token Id.Eq");
pub const AudioUnitDisplayTypeIsCubeRoot = @compileError("unable to translate C expr: unexpected token Id.Eq");
pub const AudioUnitDisplayTypeIsExponential = @compileError("unable to translate C expr: unexpected token Id.Eq");
pub const __SIZEOF_WCHAR_T__ = 4;
pub const _SC_SEM_NSEMS_MAX = 49;
pub const VM_LIB64_SHR_TEXT = if (@typeId(@TypeOf(@as(c_ulonglong, 0x00007FFF80000000))) == .Pointer) @ptrCast(user_addr_t, @as(c_ulonglong, 0x00007FFF80000000)) else if (@typeId(@TypeOf(@as(c_ulonglong, 0x00007FFF80000000))) == .Int) @intToPtr(user_addr_t, @as(c_ulonglong, 0x00007FFF80000000)) else @as(user_addr_t, @as(c_ulonglong, 0x00007FFF80000000));
pub const _SC_PAGE_SIZE = _SC_PAGESIZE;
pub const _POSIX_TRACE_SYS_MAX = 8;
pub const _POSIX_PRIORITY_SCHEDULING = -1;
pub const _SC_THREAD_SPORADIC_SERVER = 92;
pub const __SSE4_2__ = 1;
pub const _XBS5_LP64_OFF64 = __LP64_OFF64;
pub const _POSIX_OPEN_MAX = 20;
pub const _SC_V6_ILP32_OFFBIG = 104;
pub const SCNxLEAST32 = SCNx32;
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const KERN_SEMAPHORE_DESTROYED = 42;
pub const MACH_MSG_TRAILER_FORMAT_0_SIZE = sizeof(mach_msg_format_0_trailer_t);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_4_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_12_4, __IPHONE_COMPAT_VERSION);
pub const TARGET_OS_UIKITFORMAC = 0;
pub const __STDC_UTF_16__ = 1;
pub const MACH_MSG_GUARD_FLAGS_IMMOVABLE_RECEIVE = 0x0001;
pub inline fn OS_COMPILER_CAN_ASSUME(expr: var) @TypeOf(__builtin_assume(expr)) {
    return __builtin_assume(expr);
}
pub const _POSIX2_LOCALEDEF = @as(c_long, 200112);
pub const MACH_PORT_QLIMIT_LARGE = 1024;
pub const EINVAL = 22;
pub const __MAC_10_2 = 1020;
pub const F_RDLCK = 1;
pub const DBL_EPSILON = __DBL_EPSILON__;
pub const ESRCH = 3;
pub const CF_IMPLICIT_BRIDGING_ENABLED = _Pragma("clang arc_cf_code_audited begin");
pub const __API_UNAVAILABLE_END = _Pragma("clang attribute pop");
pub const __INT_LEAST32_MAX__ = 2147483647;
pub const __INT_FAST16_FMTd__ = "hd";
pub const kAUPresetNameKey = "name";
pub inline fn __DARWIN_OSSwapConstInt16(x: var) @TypeOf(if (@typeId(@TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint16_t, x) else @as(__uint16_t, x) & 0xff00 >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint16_t, x) else @as(__uint16_t, x) & 0x00ff << 8)) == .Pointer) @ptrCast(__uint16_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint16_t, x) else @as(__uint16_t, x) & 0xff00 >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint16_t, x) else @as(__uint16_t, x) & 0x00ff << 8) else if (@typeId(@TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint16_t, x) else @as(__uint16_t, x) & 0xff00 >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint16_t, x) else @as(__uint16_t, x) & 0x00ff << 8)) == .Int) @intToPtr(__uint16_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint16_t, x) else @as(__uint16_t, x) & 0xff00 >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint16_t, x) else @as(__uint16_t, x) & 0x00ff << 8) else @as(__uint16_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint16_t, x) else @as(__uint16_t, x) & 0xff00 >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint16_t, x) else @as(__uint16_t, x) & 0x00ff << 8)) {
    return if (@typeId(@TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint16_t, x) else @as(__uint16_t, x) & 0xff00 >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint16_t, x) else @as(__uint16_t, x) & 0x00ff << 8)) == .Pointer) @ptrCast(__uint16_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint16_t, x) else @as(__uint16_t, x) & 0xff00 >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint16_t, x) else @as(__uint16_t, x) & 0x00ff << 8) else if (@typeId(@TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint16_t, x) else @as(__uint16_t, x) & 0xff00 >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint16_t, x) else @as(__uint16_t, x) & 0x00ff << 8)) == .Int) @intToPtr(__uint16_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint16_t, x) else @as(__uint16_t, x) & 0xff00 >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint16_t, x) else @as(__uint16_t, x) & 0x00ff << 8) else @as(__uint16_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint16_t, x) else @as(__uint16_t, x) & 0xff00 >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint16_t, x) else @as(__uint16_t, x) & 0x00ff << 8);
}
pub const _SC_STREAM_MAX = 26;
pub const _SC_THREAD_PROCESS_SHARED = 90;
pub inline fn OSSwapHostToLittleInt32(x: var) @TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint32_t, x) else @as(uint32_t, x)) {
    return if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint32_t, x) else @as(uint32_t, x);
}
pub inline fn __API_DEPRECATED_BEGIN_REP2(rep: var, a: var) @TypeOf(__API_R_BEGIN(rep, a)) {
    return __API_R_BEGIN(rep, a);
}
pub const MACH_MSG_TYPE_LAST = 22;
pub inline fn DISPATCH_GLOBAL_OBJECT(type_1: var, object: var) @TypeOf(type_1 & object) {
    return type_1 & object;
}
pub const TYPE_EXTENDED = 0;
pub const SS_ONSTACK = 0x0001;
pub const kCFCoreFoundationVersionNumber10_4_10 = 368.28;
pub const _CTYPE_U = @as(c_long, 0x00008000);
pub const __DBL_HAS_DENORM__ = 1;
pub const ENOTRECOVERABLE = 104;
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __COREFOUNDATION_CFPREFERENCES__ = 1;
pub const __UINT_FAST16_FMTu__ = "hu";
pub const SCNxPTR = "lx";
pub const FLT_MANT_DIG = __FLT_MANT_DIG__;
pub const ESPIPE = 29;
pub const F_SINGLE_WRITER = 76;
pub const __COREFOUNDATION_CFBINARYHEAP__ = 1;
pub const WCHAR_MAX = __WCHAR_MAX__;
pub inline fn OSSwapHostToLittleConstInt64(x: var) @TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint64_t, x) else @as(uint64_t, x)) {
    return if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint64_t, x) else @as(uint64_t, x);
}
pub const PRId32 = "d";
pub const ENOSPC = 28;
pub const EMSGSIZE = 40;
pub const MACH_SEND_PROPAGATE_QOS = 0x00200000;
pub const EXIT_SUCCESS = 0;
pub const kCFCoreFoundationVersionNumber10_6_6 = 550.42;
pub const MACH_SEND_NOTIFY = 0x00000080;
pub const _CS_DARWIN_USER_TEMP_DIR = 65537;
pub const MACH_RCV_GUARDED_DESC = 0x00001000;
pub const F_FINDSIGS = 78;
pub inline fn round_msg(x: var) @TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(mach_msg_size_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(mach_msg_size_t, x) else @as(mach_msg_size_t, x) + sizeof(natural_t) - 1 & ~sizeof(natural_t) - 1) {
    return if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(mach_msg_size_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(mach_msg_size_t, x) else @as(mach_msg_size_t, x) + sizeof(natural_t) - 1 & ~sizeof(natural_t) - 1;
}
pub const _SC_TIMEOUTS = 95;
pub const KAUTH_VNODE_LINKTARGET = @as(c_uint, 1) << 25;
pub const __OPENCL_MEMORY_SCOPE_DEVICE = 2;
pub inline fn MACH_RCV_TRAILER_ELEMENTS(x: var) @TypeOf(x & 0xf << 24) {
    return x & 0xf << 24;
}
pub const O_RDONLY = 0x0000;
pub const OS_ASSUME_NONNULL_BEGIN = _Pragma("clang assume_nonnull begin");
pub const MACH_MSG_TYPE_MOVE_RECEIVE = 16;
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_4_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_4, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DBL_DIG = __DBL_DIG__;
pub inline fn FD_ISSET(n: var, p: var) @TypeOf(__DARWIN_FD_ISSET(n, p)) {
    return __DARWIN_FD_ISSET(n, p);
}
pub const __UINTMAX_C_SUFFIX__ = UL;
pub const __TVOS_PROHIBITED = __OS_AVAILABILITY(tvos, unavailable);
pub const __VERSION__ = "Clang 9.0.1 (https://github.com/llvm/llvm-project.git 432bf48c08da748e2542cf40e3ab9aee53a744b0)";
pub const __TVOS_13_1 = 130100;
pub const __DBL_HAS_INFINITY__ = 1;
pub const F_ALLOCATEALL = 0x00000004;
pub const _POSIX_LOGIN_NAME_MAX = 9;
pub const DISPATCH_SENTINEL = __attribute__(__sentinel__);
pub inline fn isless(x: var, y: var) @TypeOf(__builtin_isless(x, y)) {
    return __builtin_isless(x, y);
}
pub const _SC_RAW_SOCKETS = 119;
pub const _POSIX_THREADS = @as(c_long, 200112);
pub const __WATCHOS_UNAVAILABLE = __OS_AVAILABILITY(watchos, unavailable);
pub const DISPATCH_QUEUE_SERIAL_INACTIVE = dispatch_queue_attr_make_initially_inactive(DISPATCH_QUEUE_SERIAL);
pub const KERN_INVALID_RIGHT = 17;
pub const EPROGMISMATCH = 75;
pub const MACH_RCV_TRAILER_CTX = 4;
pub const FP_NORMAL = 4;
pub inline fn islessequal(x: var, y: var) @TypeOf(__builtin_islessequal(x, y)) {
    return __builtin_islessequal(x, y);
}
pub const __pic__ = 2;
pub const MACH_MSG_PORT_DESCRIPTOR = 0;
pub const __COREFOUNDATION_CFCALENDAR__ = 1;
pub const DISPATCH_VNODE_RENAME = 0x20;
pub const EOF = -1;
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR = @as(c_ulonglong, 0x08) << 56;
pub const __ADX__ = 1;
pub const _SC_2_PBS_MESSAGE = 63;
pub const RLIMIT_WAKEUPS_MONITOR = 0x1;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 6;
pub const CLK_TCK = __DARWIN_CLK_TCK;
pub inline fn __API_AVAILABLE_BEGIN1(a: var) @TypeOf(__API_A_BEGIN(a)) {
    return __API_A_BEGIN(a);
}
pub const __DARWIN_CTYPE_TOP_inline = __header_inline;
pub const DISPATCH_TIME_FOREVER = ~@as(c_ulonglong, 0);
pub const _POSIX_V6_ILP32_OFFBIG = __ILP32_OFFBIG;
pub const kCFCoreFoundationVersionNumber10_2_5 = 263.50;
pub const __TVOS_13_0 = 130000;
pub const _SC_2_PBS_TRACK = 64;
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _POSIX_MAX_INPUT = 255;
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const OS_WARN_RESULT_NEEDS_RELEASE = OS_WARN_RESULT;
pub const _POSIX_TRACE_EVENT_FILTER = -1;
pub const SCNxFAST8 = SCNx8;
pub const MAC_OS_X_VERSION_10_11_2 = 101102;
pub const LDBL_HAS_SUBNORM = 1;
pub const __LDBL_MAX__ = @as(f64, 1.18973149535723176502e+4932);
pub const TARGET_API_MAC_CARBON = 1;
pub const LC_MESSAGES = 6;
pub const O_EXLOCK = 0x0020;
pub const __AVAILABILITY_INTERNAL__MAC_NA = __attribute__(availability(macosx, unavailable));
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const KERN_MEMORY_RESTART_COPY = 25;
pub const kCFCoreFoundationVersionNumber10_5_7 = 476.18;
pub const __COREFOUNDATION_CFDATEFORMATTER__ = 1;
pub const MACH_PORT_DNREQUESTS_SIZE = 3;
pub const _V6_LPBIG_OFFBIG = __LPBIG_OFFBIG;
pub const kAudioSubDeviceNameKey = "name";
pub const MACH_PORT_RIGHT_RECEIVE = if (@typeId(@TypeOf(1)) == .Pointer) @ptrCast(mach_port_right_t, 1) else if (@typeId(@TypeOf(1)) == .Int) @intToPtr(mach_port_right_t, 1) else @as(mach_port_right_t, 1);
pub const MACH_MSGH_BITS_DENAP = MACH_MSGH_BITS_RAISEIMP;
pub const __UINT16_FMTX__ = "hX";
pub const MACH_PORT_TEMPOWNER = 4;
pub inline fn machine_ptob(x: var) @TypeOf(i386_ptob(x)) {
    return i386_ptob(x);
}
pub const LLONG_MAX = @as(c_longlong, 0x7fffffffffffffff);
pub const OS_MALLOC = __attribute__(__malloc__);
pub const CHAR_MAX = 127;
pub const KAUTH_FILESEC_NOACL = if (@typeId(@TypeOf(-1)) == .Pointer) @ptrCast(u_int32_t, -1) else if (@typeId(@TypeOf(-1)) == .Int) @intToPtr(u_int32_t, -1) else @as(u_int32_t, -1);
pub const EPERM = 1;
pub const KERN_POLICY_STATIC = 51;
pub const kCFCoreFoundationVersionNumber10_11_2 = 1256.14;
pub inline fn __AVAILABILITY_INTERNAL__MAC_NA_DEP__MAC_NA_MSG(_msg: var) @TypeOf(__attribute__(availability(macosx, unavailable))) {
    return __attribute__(availability(macosx, unavailable));
}
pub const SCNuFAST64 = SCNu64;
pub const __SSE2__ = 1;
pub const __COREFOUNDATION_CFMESSAGEPORT__ = 1;
pub const _XOPEN_VERSION = 600;
pub inline fn makedev(x: var, y: var) @TypeOf(if (@typeId(@TypeOf(x << 24 | y)) == .Pointer) @ptrCast(dev_t, x << 24 | y) else if (@typeId(@TypeOf(x << 24 | y)) == .Int) @intToPtr(dev_t, x << 24 | y) else @as(dev_t, x << 24 | y)) {
    return if (@typeId(@TypeOf(x << 24 | y)) == .Pointer) @ptrCast(dev_t, x << 24 | y) else if (@typeId(@TypeOf(x << 24 | y)) == .Int) @intToPtr(dev_t, x << 24 | y) else @as(dev_t, x << 24 | y);
}
pub const KAUTH_VNODE_WRITE_EXTATTRIBUTES = @as(c_uint, 1) << 10;
pub const kAudioSettings_TopLevelKey = "name";
pub const FP_NAN = 1;
pub const X_TLOSS = 1.41484755040568800000e+16;
pub const __DARWIN_CLK_TCK = 100;
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const KAUTH_VNODE_CHANGE_OWNER = KAUTH_VNODE_TAKE_OWNERSHIP;
pub const KAUTH_ACE_GENERIC_READ = 1 << 24;
pub const __FSGSBASE__ = 1;
pub const __DYNAMIC__ = 1;
pub const PAGE_SHIFT = I386_PGSHIFT;
pub const MACH_SEND_NO_GRANT_DEST = 0x10000016;
pub const KAUTH_ACE_SUCCESS = 1 << 9;
pub const DBL_MAX_EXP = __DBL_MAX_EXP__;
pub const MACH_RCV_IN_PROGRESS_TIMED = 0x10004011;
pub const SIGTSTP = 18;
pub const S_IRUSR = 0o0000400;
pub const MACH_MSG_TYPE_PORT_SEND = MACH_MSG_TYPE_MOVE_SEND;
pub const _SC_MONOTONIC_CLOCK = 74;
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_4, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const RLIM_SAVED_CUR = RLIM_INFINITY;
pub const O_CREAT = 0x0200;
pub const __cold = __attribute__(__cold__);
pub const _CS_XBS5_LP64_OFF64_CFLAGS = 28;
pub const POLL_ERR = 4;
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __INT8_FMTd__ = "hhd";
pub inline fn OSReadBigInt16(base: var, byteOffset: var) @TypeOf(OSReadSwapInt16(base, byteOffset)) {
    return OSReadSwapInt16(base, byteOffset);
}
pub const _POSIX_V7_ILP32_OFFBIG = __ILP32_OFFBIG;
pub const __DBL_HAS_QUIET_NAN__ = 1;
pub const __WATCHOS_4_1 = 40100;
pub const __clang_minor__ = 0;
pub const __LDBL_DECIMAL_DIG__ = 21;
pub const __WCHAR_TYPE__ = int;
pub const _SC_AIO_LISTIO_MAX = 42;
pub const _STRUCT_MCONTEXT = _STRUCT_MCONTEXT64;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 32;
pub const kAudioAggregateDeviceMasterSubDeviceKey = "master";
pub const _SC_REGEXP = 77;
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const MACH_RCV_SYNC_WAIT = 0x00004000;
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const kCFCoreFoundationVersionNumber10_0_3 = 196.50;
pub const kCFCoreFoundationVersionNumber10_3_9 = 299.35;
pub const L_tmpnam = 1024;
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_1(x: var) @TypeOf(x) {
    return x;
}
pub const VM_MAX_USER_PAGE_ADDRESS = if (@typeId(@TypeOf(@as(c_ulonglong, 0x00007FFFFFFFF000))) == .Pointer) @ptrCast(user_addr_t, @as(c_ulonglong, 0x00007FFFFFFFF000)) else if (@typeId(@TypeOf(@as(c_ulonglong, 0x00007FFFFFFFF000))) == .Int) @intToPtr(user_addr_t, @as(c_ulonglong, 0x00007FFFFFFFF000)) else @as(user_addr_t, @as(c_ulonglong, 0x00007FFFFFFFF000));
pub const F_ALLOCATECONTIG = 0x00000002;
pub const kInstrumentInfoKey_Name = "name";
pub const SIGFPE = 8;
pub const PRIO_DARWIN_THREAD = 3;
pub const __INT64_C_SUFFIX__ = LL;
pub const kCFCoreFoundationVersionNumber10_1_1 = 226.00;
pub const _SC_2_PBS_ACCOUNTING = 60;
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = 2;
pub const PRIdFAST8 = PRId8;
pub const kAudioSubDeviceOutputChannelsKey = "channels-out";
pub const RLIM_NLIMITS = 9;
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_4, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub inline fn OSSwapLittleToHostConstInt32(x: var) @TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint32_t, x) else @as(uint32_t, x)) {
    return if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint32_t, x) else @as(uint32_t, x);
}
pub const EMFILE = 24;
pub const PRIO_USER = 2;
pub inline fn __P(protos: var) @TypeOf(protos) {
    return protos;
}
pub inline fn __RCSID(s: var) @TypeOf(__IDSTRING(rcsid, s)) {
    return __IDSTRING(rcsid, s);
}
pub const MACH_RCV_TOO_LARGE = 0x10004004;
pub const FUNCTION_DECLSPEC = 0;
pub const __COREFOUNDATION_CFTIMEZONE__ = 1;
pub const _SC_2_FORT_DEV = 21;
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub inline fn ntohll(x: var) @TypeOf(__DARWIN_OSSwapInt64(x)) {
    return __DARWIN_OSSwapInt64(x);
}
pub const M_SQRT1_2 = 0.707106781186547524400844362104849039;
pub const KAUTH_ACE_PERMIT = 1;
pub const __IPHONE_8_1 = 80100;
pub const QOS_MIN_RELATIVE_PRIORITY = -15;
pub const PRIdLEAST32 = PRId32;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS = 10;
pub const TRAP_TRACE = 2;
pub const kAudioEndPointNameKey = "name";
pub const _XBS5_LPBIG_OFFBIG = __LPBIG_OFFBIG;
pub const PAGE_MAX_MASK = PAGE_MASK;
pub const __STDC_UTF_32__ = 1;
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __MAC_10_4 = 1040;
pub const SA_USERSPACE_MASK = SA_ONSTACK | SA_RESTART | SA_RESETHAND | SA_NOCLDSTOP | SA_NODEFER | SA_NOCLDWAIT | SA_SIGINFO;
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const UINT32_MAX = @as(c_uint, 4294967295);
pub const __DISPATCH_OPTIONS_ATTR = __attribute__(__flag_enum__);
pub const __DBL_DIG__ = 15;
pub const MPO_STRICT = 0x20;
pub const __DARWIN_C_ANSI = @as(c_long, 0o010000);
pub const KERN_RIGHT_EXISTS = 21;
pub inline fn howmany(x: var, y: var) @TypeOf(__DARWIN_howmany(x, y)) {
    return __DARWIN_howmany(x, y);
}
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const PRIxLEAST8 = PRIx8;
pub const __INT32_FMTd__ = "d";
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const TYPE_LONGDOUBLE_IS_DOUBLE = 0;
pub const KAUTH_EXTLOOKUP_VALID_UGUID = 1 << 1;
pub const __WATCHOS_4_2 = 40200;
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub inline fn dispatch_assert_queue_not_debug(q: var) @TypeOf(dispatch_assert_queue_not(q)) {
    return dispatch_assert_queue_not(q);
}
pub inline fn OSReadBigInt(x: var, y: var) @TypeOf(OSReadBigInt32(x, y)) {
    return OSReadBigInt32(x, y);
}
pub const MACH_RCV_INVALID_REPLY = 0x10004012;
pub const __FLT_DIG__ = 6;
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const kCFCoreFoundationVersionNumber10_4_2 = 368.11;
pub const __USER_LABEL_PREFIX__ = _;
pub const __UINT_FAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __DARWIN_ACL_LIST_DIRECTORY = __DARWIN_ACL_READ_DATA;
pub const INT_LEAST64_MAX = INT64_MAX;
pub const __INT32_TYPE__ = int;
pub const EACCES = 13;
pub const _WEXT_OK = 1 << 18;
pub const KAUTH_EXTLOOKUP_INPROG = 100;
pub const kCFCoreFoundationVersionNumber10_10 = 1151.16;
pub const _PC_MIN_HOLE_SIZE = 27;
pub const __PTHREAD_ONCE_SIZE__ = 8;
pub const SIGSTOP = 17;
pub const __AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION = __attribute__(availability(ios, unavailable));
pub const MAC_OS_X_VERSION_10_15 = 101500;
pub const __PTHREAD_RWLOCKATTR_SIZE__ = 16;
pub inline fn isunordered(x: var, y: var) @TypeOf(__builtin_isunordered(x, y)) {
    return __builtin_isunordered(x, y);
}
pub const CF_CONSUMED = __attribute__(cf_consumed);
pub const MACH_MSG_OVERWRITE = 3;
pub const __PTHREAD_MUTEXATTR_SIZE__ = 8;
pub const __API_TO_BE_DEPRECATED = 100000;
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_11_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const MAC_OS_X_VERSION_10_10 = 101000;
pub const _PC_SYMLINK_MAX = 24;
pub inline fn OSSwapInt16(x: var) @TypeOf(__DARWIN_OSSwapInt16(x)) {
    return __DARWIN_OSSwapInt16(x);
}
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_1_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA = @as(c_ulonglong, 0x10) << 56;
pub const MAC_OS_X_VERSION_10_14 = 101400;
pub const __SSE_MATH__ = 1;
pub const FNONBLOCK = O_NONBLOCK;
pub inline fn KAUTH_ACL_COPYSIZE(p: var) @TypeOf(KAUTH_ACL_SIZE(p.*.acl_entrycount)) {
    return KAUTH_ACL_SIZE(p.*.acl_entrycount);
}
pub const AUDIO_UNIT_VERSION = 1070;
pub const _POSIX_SEM_VALUE_MAX = 32767;
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub inline fn _WSTATUS(x: var) @TypeOf(_W_INT(x) & 0o0177) {
    return _W_INT(x) & 0o0177;
}
pub const _POSIX_THREAD_SAFE_FUNCTIONS = @as(c_long, 200112);
pub const SIGCHLD = 20;
pub const __IPHONE_3_0 = 30000;
pub const RLIMIT_RSS = RLIMIT_AS;
pub const __INT16_TYPE__ = short;
pub const __PCLMUL__ = 1;
pub const RUSAGE_SELF = 0;
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_COMPAT_VERSION);
pub const F_FULLFSYNC = 51;
pub const DBL_MAX = __DBL_MAX__;
pub const _POSIX_MEMLOCK_RANGE = -1;
pub inline fn __AVAILABILITY_INTERNAL_DEPRECATED_MSG(_msg: var) @TypeOf(__attribute__(deprecated(_msg))) {
    return __attribute__(deprecated(_msg));
}
pub const MIXEDMODE_CALLS_ARE_FUNCTIONS = 1;
pub const _CHOWN_OK = 1 << 21;
pub const __UINTPTR_FMTo__ = "lo";
pub const __INT32_MAX__ = 2147483647;
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __INTPTR_FMTd__ = "ld";
pub inline fn va_arg(ap: var, type_1: var) @TypeOf(__builtin_va_arg(ap, type_1)) {
    return __builtin_va_arg(ap, type_1);
}
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const F_GLOBAL_NOCACHE = 55;
pub const SIGUSR2 = 31;
pub const _POSIX_SYMLINK_MAX = 255;
pub const MACH_VM_MAX_ADDRESS = if (@typeId(@TypeOf(VM_MAX_PAGE_ADDRESS)) == .Pointer) @ptrCast(mach_vm_offset_t, VM_MAX_PAGE_ADDRESS) else if (@typeId(@TypeOf(VM_MAX_PAGE_ADDRESS)) == .Int) @intToPtr(mach_vm_offset_t, VM_MAX_PAGE_ADDRESS) else @as(mach_vm_offset_t, VM_MAX_PAGE_ADDRESS);
pub const MACH_MSG_TYPE_MAKE_SEND_ONCE = 21;
pub const DISPATCH_NONNULL5 = __attribute__(__nonnull__(5));
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _POSIX_V7_ILP32_OFF32 = __ILP32_OFF32;
pub const MPO_DENAP_RECEIVER = 0x40;
pub const MPG_STRICT = 0x01;
pub const __COREFOUNDATION_CFPROPERTYLIST__ = 1;
pub const KERN_MEMORY_DATA_MOVED = 24;
pub const F_PEOFPOSMODE = 3;
pub const CF_NO_TAIL_CALL = __attribute__(not_tail_called);
pub const __INT_FAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __UINTPTR_MAX__ = @as(c_ulong, 18446744073709551615);
pub const __UINT_FAST32_FMTx__ = "x";
pub const __PTRDIFF_FMTd__ = "ld";
pub const PRIO_PGRP = 1;
pub const IOV_MAX = 1024;
pub const SA_RESETHAND = 0x0004;
pub const KERN_RETURN_MAX = 0x100;
pub inline fn UINT8_C(v: var) @TypeOf(v) {
    return v;
}
pub const ENOPOLICY = 103;
pub const MACH_PORT_STATUS_FLAG_TEMPOWNER = 0x01;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = 0;
pub const RLIMIT_CPU_USAGE_MONITOR = 0x2;
pub const CF_EXPORT = @"extern";
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub inline fn ntohs(x: var) @TypeOf(__DARWIN_OSSwapInt16(x)) {
    return __DARWIN_OSSwapInt16(x);
}
pub const L_ctermid = 1024;
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_14_4_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_14_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const KAUTH_ACL_NO_INHERIT = 1 << 17;
pub const _PC_MAX_INPUT = 3;
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_4, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _SC_THREAD_KEYS_MAX = 86;
pub inline fn sigmask(m: var) @TypeOf(1 << m - 1) {
    return 1 << m - 1;
}
pub const _SC_CPUTIME = 68;
pub const EDEADLK = 11;
pub const KERN_LOCK_UNSTABLE = 39;
pub const __SIZEOF_DOUBLE__ = 8;
pub const DISPATCH_DATA_DESTRUCTOR_FREE = _dispatch_data_destructor_free;
pub const CALL_NOT_IN_CARBON = 0;
pub inline fn OSSwapHostToLittleInt(x: var) @TypeOf(OSSwapHostToLittleInt32(x)) {
    return OSSwapHostToLittleInt32(x);
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_11_3(x: var) @TypeOf(x) {
    return x;
}
pub const __PTHREAD_CONDATTR_SIZE__ = 8;
pub const VM_LIB64_SHR_DATA = if (@typeId(@TypeOf(@as(c_ulonglong, 0x00007FFF60000000))) == .Pointer) @ptrCast(user_addr_t, @as(c_ulonglong, 0x00007FFF60000000)) else if (@typeId(@TypeOf(@as(c_ulonglong, 0x00007FFF60000000))) == .Int) @intToPtr(user_addr_t, @as(c_ulonglong, 0x00007FFF60000000)) else @as(user_addr_t, @as(c_ulonglong, 0x00007FFF60000000));
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const PRIXFAST8 = PRIX8;
pub const __UINT64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const MACH_RCV_OVERWRITE = 0x00000000;
pub const ENOTSUP = 45;
pub const CF_RETURNS_RETAINED = __attribute__(cf_returns_retained);
pub const _PC_SYNC_IO = 25;
pub inline fn __SWIFT_UNAVAILABLE_MSG(_msg: var) @TypeOf(__OS_AVAILABILITY_MSG(swift, unavailable, _msg)) {
    return __OS_AVAILABILITY_MSG(swift, unavailable, _msg);
}
pub const PASS_MAX = 128;
pub const MACH_RCV_MSG = 0x00000002;
pub const __DARWIN_WCHAR_MAX = __WCHAR_MAX__;
pub const __UINT_FAST16_MAX__ = 65535;
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __APPLE__ = 1;
pub const MAC_OS_X_VERSION_10_12_2 = 101202;
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const ALLOW_OBSOLETE_CARBON_OSUTILS = 0;
pub const EDQUOT = 69;
pub const RUSAGE_INFO_V3 = 3;
pub const kAFInfoDictionary_Artist = "artist";
pub const __DARWIN_ACL_EXTENDED_DENY = 2;
pub const DISPATCH_UNAVAILABLE = __attribute__(__unavailable__);
pub const __DARWIN_ACL_ADD_SUBDIRECTORY = __DARWIN_ACL_APPEND_DATA;
pub const __OS_OPTIONS_ATTR = __attribute__(flag_enum);
pub const __DBL_MIN_10_EXP__ = -307;
pub const _CTYPE_G = @as(c_long, 0x00000800);
pub const SCNuFAST8 = SCNu8;
pub const MACH_MSGH_KIND_NORMAL = 0x00000000;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 13;
pub const MACH_PORT_RECEIVE_STATUS = 2;
pub const __COREFOUNDATION_CFSTRING__ = 1;
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const LINE_MAX = 2048;
pub const O_SHLOCK = 0x0010;
pub const __ORDER_PDP_ENDIAN__ = 3412;
pub const __PTRDIFF_FMTi__ = "li";
pub const __DBL_MAX_10_EXP__ = 308;
pub const stdout = __stdoutp;
pub const _POSIX_TRACE_NAME_MAX = 8;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 2;
pub const __SIZEOF_LONG__ = 8;
pub const KERN_INSUFFICIENT_BUFFER_SIZE = 52;
pub inline fn __DECONST(type_1: var, @"var": var) @TypeOf(__CAST_AWAY_QUALIFIER(@"var", @"const", type_1)) {
    return __CAST_AWAY_QUALIFIER(@"var", @"const", type_1);
}
pub const FLT_EPSILON = __FLT_EPSILON__;
pub const ENOTEMPTY = 66;
pub const RLIMIT_NOFILE = 8;
pub const SCNdFAST16 = SCNd16;
pub const __SRW = 0x0010;
pub const KAUTH_ACE_INHERIT_CONTROL_FLAGS = KAUTH_ACE_FILE_INHERIT | KAUTH_ACE_DIRECTORY_INHERIT | KAUTH_ACE_LIMIT_INHERIT | KAUTH_ACE_ONLY_INHERIT;
pub const __IPHONE_COMPAT_VERSION = __IPHONE_NA;
pub const __ILP32_OFFBIG = -1;
pub const SEEK_DATA = 4;
pub const PRIX16 = "hX";
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _SC_SEM_VALUE_MAX = 50;
pub const MACH_SEND_INTERRUPTED = 0x10000007;
pub const FP_FAST_FMA = 1;
pub const _POSIX_RE_DUP_MAX = _POSIX2_RE_DUP_MAX;
pub const _SC_NPROCESSORS_CONF = 57;
pub const MACH_PORT_STATUS_FLAG_NO_GRANT = 0x80;
pub const DISPATCH_QUEUE_CONCURRENT_INACTIVE = dispatch_queue_attr_make_initially_inactive(DISPATCH_QUEUE_CONCURRENT);
pub const __SOFF = 0x1000;
pub const _POSIX_TRACE_INHERIT = -1;
pub const UINT_FAST64_MAX = UINT64_MAX;
pub const WUNTRACED = 0x00000002;
pub inline fn WSTOPSIG(x: var) @TypeOf(_W_INT(x) >> 8) {
    return _W_INT(x) >> 8;
}
pub const _SC_MEMLOCK = 30;
pub const NL_LANGMAX = 14;
pub const MACH_PORT_NULL = 0;
pub const SHRT_MAX = 32767;
pub const MACH_RCV_PORT_CHANGED = 0x10004006;
pub const O_NDELAY = O_NONBLOCK;
pub inline fn CF_DEPRECATED_IPHONE(_iosIntro: var, _iosDep: var) @TypeOf(CF_DEPRECATED_IOS(_iosIntro, _iosDep)) {
    return CF_DEPRECATED_IOS(_iosIntro, _iosDep);
}
pub inline fn MACH_MSG_TYPE_PORT_ANY_RIGHT(x: var) @TypeOf(x >= MACH_MSG_TYPE_MOVE_RECEIVE and x <= MACH_MSG_TYPE_MOVE_SEND_ONCE) {
    return x >= MACH_MSG_TYPE_MOVE_RECEIVE and x <= MACH_MSG_TYPE_MOVE_SEND_ONCE;
}
pub inline fn MACH_RCV_TRAILER_TYPE(x: var) @TypeOf(x & 0xf << 28) {
    return x & 0xf << 28;
}
pub const __DARWIN_ACL_ENTRY_INHERITED = 1 << 4;
pub const __INTMAX_C_SUFFIX__ = L;
pub const OS_TRANSPARENT_UNION = __attribute__(__transparent_union__);
pub const DISPATCH_DATA_DESTRUCTOR_DEFAULT = NULL;
pub const _PC_PRIO_IO = 19;
pub const __TVOS_9_2 = 90200;
pub const _CTYPE_SWM = @as(c_long, 0xe0000000);
pub const kAFInfoDictionary_TimeSignature = "time signature";
pub const MAC_OS_X_VERSION_10_11_4 = 101104;
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const NSIG = __DARWIN_NSIG;
pub const SCNoLEAST64 = SCNo64;
pub const kCFCoreFoundationVersionNumber10_5_8 = 476.19;
pub const _POSIX_ADVISORY_INFO = -1;
pub const FFSYNC = O_FSYNC;
pub const NSEC_PER_USEC = @as(c_ulonglong, 1000);
pub const ECONNABORTED = 53;
pub const WINT_MIN = INT32_MIN;
pub const DISPATCH_PROC_EXIT = 0x80000000;
pub const KAUTH_EXTLOOKUP_WANT_SUPGRPS = 1 << 20;
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const __IPHONE_5_1 = 50100;
pub const __AVAILABILITY_INTERNAL__IPHONE_NA__IPHONE_NA = __attribute__(availability(ios, unavailable));
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const FP_ILOGB0 = -2147483647 - 1;
pub const O_APPEND = 0x0008;
pub const __UINTPTR_FMTu__ = "lu";
pub const MACH_MSG_GUARD_FLAGS_MASK = 0x0003;
pub const MACH_PORT_DENAP_RECEIVER = 6;
pub const SA_SIGINFO = 0x0040;
pub const KAUTH_ACE_INHERITED = 1 << 4;
pub const _POSIX_MONOTONIC_CLOCK = -1;
pub const UINTPTR_MAX = @as(c_ulong, 18446744073709551615);
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 27;
pub const __UINT16_FMTx__ = "hx";
pub const _RUNE_MAGIC_A = "RuneMagA";
pub const _POSIX_SEMAPHORES = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS = -1;
pub const __WATCHOS_1_0 = 10000;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 25;
pub const _POSIX2_C_BIND = @as(c_long, 200112);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const SIGEMT = 7;
pub const _POSIX_MAX_CANON = 255;
pub const _POSIX_MQ_PRIO_MAX = 32;
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTX__ = "lX";
pub const _SC_SHELL = 78;
pub const WAKEMON_SET_DEFAULTS = 0x08;
pub inline fn OSSwapHostToLittleConstInt32(x: var) @TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint32_t, x) else @as(uint32_t, x)) {
    return if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint32_t, x) else @as(uint32_t, x);
}
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const F_SETFL = 4;
pub const kAudioSettings_Version = "version";
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_1_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_12_1, __IPHONE_COMPAT_VERSION);
pub const _POSIX_SS_REPL_MAX = 4;
pub const PATH_MAX = 1024;
pub const SSIZE_MAX = LONG_MAX;
pub const KERN_INVALID_ARGUMENT = 4;
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const MACH_PORT_TYPE_ALL_RIGHTS = MACH_PORT_TYPE_PORT_OR_DEAD | MACH_PORT_TYPE_PORT_SET;
pub const PRIO_DARWIN_PROCESS = 4;
pub const __SRD = 0x0004;
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const E2BIG = 7;
pub const _I386_SIGNAL_H_ = 1;
pub const _PC_MAX_CANON = 2;
pub const __UINTPTR_WIDTH__ = 64;
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AT_SYMLINK_NOFOLLOW = 0x0020;
pub const AT_REMOVEDIR = 0x0080;
pub const INTMAX_MIN = -INTMAX_MAX - 1;
pub const kCFCoreFoundationVersionNumber10_1_3 = 227.20;
pub inline fn OS_STRINGIFY(s: var) @TypeOf(__OS_STRINGIFY(s)) {
    return __OS_STRINGIFY(s);
}
pub inline fn OSSwapLittleToHostInt16(x: var) @TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint16_t, x) else @as(uint16_t, x)) {
    return if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint16_t, x) else @as(uint16_t, x);
}
pub const CPF_OVERWRITE = 0x0001;
pub const MAC_OS_X_VERSION_10_10_3 = 101003;
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_4, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _SC_GETPW_R_SIZE_MAX = 71;
pub const VM_USRSTACK64 = if (@typeId(@TypeOf(@as(c_ulonglong, 0x00007FFEEFC00000))) == .Pointer) @ptrCast(user_addr_t, @as(c_ulonglong, 0x00007FFEEFC00000)) else if (@typeId(@TypeOf(@as(c_ulonglong, 0x00007FFEEFC00000))) == .Int) @intToPtr(user_addr_t, @as(c_ulonglong, 0x00007FFEEFC00000)) else @as(user_addr_t, @as(c_ulonglong, 0x00007FFEEFC00000));
pub inline fn OSSwapInt32(x: var) @TypeOf(__DARWIN_OSSwapInt32(x)) {
    return __DARWIN_OSSwapInt32(x);
}
pub const IOPOL_TYPE_VFS_ATIME_UPDATES = 2;
pub const __dead2 = __attribute__(__noreturn__);
pub const TYPE_LONGLONG = 1;
pub const ALRMTYPE = 0xff;
pub const __ATOMIC_RELAXED = 0;
pub const KAUTH_UID_NONE = if (@typeId(@TypeOf(0 - 100)) == .Pointer) @ptrCast(~uid_t, 0 - 100) else if (@typeId(@TypeOf(0 - 100)) == .Int) @intToPtr(~uid_t, 0 - 100) else @as(~uid_t, 0 - 100);
pub const __COREFOUNDATION_CFMACHPORT__ = 1;
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_4, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const kCFCoreFoundationVersionNumber10_6_3 = 550.19;
pub const _RLIMIT_POSIX_FLAG = 0x1000;
pub const F_LOCK = 1;
pub const __COREFOUNDATION_CFBASE__ = 1;
pub const S_IEXEC = S_IXUSR;
pub const LDBL_MAX_10_EXP = __LDBL_MAX_10_EXP__;
pub const KAUTH_EXTLOOKUP_FAILURE = 2;
pub const __UINT64_C_SUFFIX__ = ULL;
pub const __DBL_MAX__ = 1.7976931348623157e+308;
pub const UID_MAX = @as(c_uint, 2147483647);
pub const __COREFOUNDATION_CFUUID__ = 1;
pub const KERN_INVALID_VALUE = 18;
pub const _FILESEC_REMOVE_ACL = if (@typeId(@TypeOf(1)) == .Pointer) @ptrCast([*c]void, 1) else if (@typeId(@TypeOf(1)) == .Int) @intToPtr([*c]void, 1) else @as([*c]void, 1);
pub const __DBL_DECIMAL_DIG__ = 17;
pub const __COREFOUNDATION_CFSET__ = 1;
pub const CLOCK_UPTIME_RAW = _CLOCK_UPTIME_RAW;
pub const PRIxPTR = "lx";
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __MAC_10_5 = 1050;
pub const kCFCoreFoundationVersionNumber10_8_2 = 744.12;
pub const TARGET_API_MAC_OSX = 1;
pub const SV_RESETHAND = SA_RESETHAND;
pub const O_ASYNC = 0x0040;
pub const EALREADY = 37;
pub const KAUTH_EXTLOOKUP_WANT_GRNAM = 1 << 18;
pub const CHILD_MAX = 266;
pub const LONG_BIT = 64;
pub const MACH_RCV_INTERRUPT = 0x00000400;
pub const kAudioComponentConfigurationInfo_ValidationResult = "ValidationResult";
pub const kCFCoreFoundationVersionNumber10_10_3 = 1153.18;
pub const DISPATCH_TIMER_STRICT = 0x1;
pub const SCNoLEAST8 = SCNo8;
pub const MACH_MSG_STRICT_REPLY = 0x00000200;
pub const w_retcode = w_T.w_Retcode;
pub const __COREFOUNDATION_CFERROR__ = 1;
pub const M_E = 2.71828182845904523536028747135266250;
pub const WAKEMON_MAKE_FATAL = 0x10;
pub const __DBL_MIN__ = 2.2250738585072014e-308;
pub const O_CLOEXEC = 0x1000000;
pub const MACH_PORT_STATUS_FLAG_TASKPTR = 0x20;
pub const TARGET_CPU_ARM = 0;
pub const kCFCoreFoundationVersionNumber10_6_5 = 550.42;
pub const M_PI_4 = 0.785398163397448309615660845819875721;
pub const ENETRESET = 52;
pub const MACH_SEND_SYNC_BOOTSTRAP_CHECKIN = 0x00800000;
pub const __DARWIN_ACL_ENTRY_FILE_INHERIT = 1 << 5;
pub const __XSAVEOPT__ = 1;
pub const __API_AVAILABLE_END = _Pragma("clang attribute pop");
pub const __UINTMAX_FMTX__ = "lX";
pub const X_OK = 1 << 0;
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const EQFULL = 106;
pub const __AVX2__ = 1;
pub const KERN_NOT_SUPPORTED = 46;
pub const __XNU_PRIVATE_EXTERN = __attribute__(visibility("hidden"));
pub const PAGE_SIZE = I386_PGBYTES;
pub const USEC_PER_SEC = @as(c_ulonglong, 1000000);
pub inline fn OSSwapHostToBigInt32(x: var) @TypeOf(OSSwapInt32(x)) {
    return OSSwapInt32(x);
}
pub inline fn islessgreater(x: var, y: var) @TypeOf(__builtin_islessgreater(x, y)) {
    return __builtin_islessgreater(x, y);
}
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __PTHREAD_RWLOCK_SIZE__ = 192;
pub const KAUTH_VNODE_CHECKIMMUTABLE = @as(c_uint, 1) << 26;
pub const _SC_ADVISORY_INFO = 65;
pub const BUS_ADRERR = 2;
pub const MAC_OS_X_VERSION_10_15_1 = 101501;
pub const SCNoPTR = "lo";
pub const DISPATCH_WARN_RESULT = __attribute__(__warn_unused_result__);
pub const M_2_SQRTPI = 1.12837916709551257389615890312154517;
pub const kCFCoreFoundationVersionNumber10_4_6_Intel = 368.26;
pub const MACH_PORT_RIGHT_LABELH = if (@typeId(@TypeOf(5)) == .Pointer) @ptrCast(mach_port_right_t, 5) else if (@typeId(@TypeOf(5)) == .Int) @intToPtr(mach_port_right_t, 5) else @as(mach_port_right_t, 5);
pub const _POSIX_SAVED_IDS = @as(c_long, 200112);
pub const kCFCoreFoundationVersionNumber10_4_11 = 368.31;
pub const MACH_PORT_TYPE_SEND_RIGHTS = MACH_PORT_TYPE_SEND | MACH_PORT_TYPE_SEND_ONCE;
pub const SIGEV_THREAD = 3;
pub const PRIuLEAST64 = PRIu64;
pub const _XOPEN_ENH_I18N = 1;
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __ATOMIC_ACQ_REL = 4;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE = 1;
pub const FP_PREC_53B = 2;
pub inline fn CF_EXTENSION_UNAVAILABLE(_msg: var) @TypeOf(__OS_EXTENSION_UNAVAILABLE(_msg)) {
    return __OS_EXTENSION_UNAVAILABLE(_msg);
}
pub const F_FLUSH_DATA = 40;
pub const SA_ONSTACK = 0x0001;
pub const MACH_RCV_SYNC_PEEK = 0x00008000;
pub const FP_INFINITE = 2;
pub const PRIiFAST8 = PRIi8;
pub const PRAGMA_ENUM_PACK = 0;
pub const PRIoPTR = "lo";
pub const MACH_SEND_SYNC_USE_THRPRI = MACH_SEND_PROPAGATE_QOS;
pub const DISPATCH_QUEUE_CONCURRENT = DISPATCH_GLOBAL_OBJECT(dispatch_queue_attr_t, _dispatch_queue_attr_concurrent);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const MACH_SEND_INVALID_DATA = 0x10000002;
pub const UINT_FAST16_MAX = UINT16_MAX;
pub const LDBL_TRUE_MIN = __LDBL_DENORM_MIN__;
pub const KAUTH_VNODE_READ_EXTATTRIBUTES = @as(c_uint, 1) << 9;
pub inline fn __PROJECT_VERSION(s: var) @TypeOf(__IDSTRING(project_version, s)) {
    return __IDSTRING(project_version, s);
}
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const MINSIGSTKSZ = 32768;
pub const __SMBF = 0x0080;
pub const KERN_OPERATION_TIMED_OUT = 49;
pub const _XOPEN_IOV_MAX = 16;
pub const PRIoFAST32 = PRIo32;
pub const RLIM_SAVED_MAX = RLIM_INFINITY;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY = 1;
pub const KERN_UREFS_OVERFLOW = 19;
pub const __LDBL_MIN__ = @as(f64, 3.36210314311209350626e-4932);
pub const __UINTMAX_MAX__ = @as(c_ulong, 18446744073709551615);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _SC_PRIORITY_SCHEDULING = 35;
pub const CLD_NOOP = 0;
pub const __COREFOUNDATION_CFNOTIFICATIONCENTER__ = 1;
pub const F_GETNOSIGPIPE = 74;
pub const UNAVAILABLE_ATTRIBUTE = __attribute__(unavailable);
pub const _POSIX_THREAD_SPORADIC_SERVER = -1;
pub inline fn DEFINE_API_C(_type: var) @TypeOf(_type) {
    return _type;
}
pub const MACH_PORT_DEAD = if (@typeId(@TypeOf(~0)) == .Pointer) @ptrCast(mach_port_name_t, ~0) else if (@typeId(@TypeOf(~0)) == .Int) @intToPtr(mach_port_name_t, ~0) else @as(mach_port_name_t, ~0);
pub const _SC_THREAD_ATTR_STACKSIZE = 83;
pub const kAudioUnitConfigurationInfo_ChannelConfigurations = "ChannelConfigurations";
pub const __DARWIN_ACL_APPEND_DATA = 1 << 5;
pub const MAC_OS_X_VERSION_10_9 = 1090;
pub const IOPOL_DEFAULT = 0;
pub const __FLT_HAS_DENORM__ = 1;
pub const IOPOL_UTILITY = 4;
pub const __COREFOUNDATION_CFSTRINGENCODINGEXT__ = 1;
pub inline fn CALLBACK_API_C_STDCALL(_type: var, _name: var) @TypeOf(_type(_name.*)) {
    return _type(_name.*);
}
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const INTMAX_MAX = INTMAX_C(9223372036854775807);
pub const MACH_SEND_MSG = 0x00000001;
pub const INT_LEAST16_MIN = INT16_MIN;
pub const _RMFILE_OK = 1 << 14;
pub const SIGPIPE = 13;
pub const OS_WEAK = __attribute__(__weak__);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_2_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_12_2, __IPHONE_COMPAT_VERSION);
pub const __MAC_10_13_2 = 101302;
pub const IOPOL_SCOPE_THREAD = 1;
pub const DISPATCH_TIME_NOW = @as(c_ulonglong, 0);
pub inline fn __COPYRIGHT(s: var) @TypeOf(__IDSTRING(copyright, s)) {
    return __IDSTRING(copyright, s);
}
pub const __DARWIN_ACL_READ_SECURITY = 1 << 11;
pub const MAX_CANON = 1024;
pub const _POSIX2_PBS = -1;
pub const KAUTH_ENDIAN_HOST = 0x00000001;
pub const MACH_MSGH_BITS_CIRCULAR = @as(c_uint, 0x10000000);
pub const INTERAPP_AUDIO_DEPRECATED = API_DEPRECATED("Inter-App Audio API is deprecated in favor of Audio Units", ios(7.0, 13.0), watchos(2.0, 6.0), tvos(9.0, 13.0));
pub const EXIT_FAILURE = 1;
pub const M_SQRT2 = 1.41421356237309504880168872420969808;
pub const KAUTH_EXTLOOKUP_VALID_GSID = 1 << 5;
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_12_1(x: var) @TypeOf(x) {
    return x;
}
pub const kAFInfoDictionary_SubTitle = "subtitle";
pub const __IPHONE_3_2 = 30200;
pub const MACH_SEND_INVALID_TRAILER = 0x10000011;
pub const OS_OVERLOADABLE = __attribute__(__overloadable__);
pub const __UINT_FAST64_FMTx__ = "llx";
pub const kCFCoreFoundationVersionNumber10_7_2 = 635.15;
pub const ENOTBLK = 15;
pub const ILL_NOOP = 0;
pub const INTPTR_MAX = @as(c_long, 9223372036854775807);
pub const _POSIX2_FORT_DEV = -1;
pub const __UINT_LEAST8_MAX__ = 255;
pub const KAUTH_EXTLOOKUP_FATAL = 3;
pub const MACH_PORT_STATUS_FLAG_STRICT_GUARD = 0x04;
pub const __MAC_10_12_1 = 101201;
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const SIGILL = 4;
pub const _SC_EXPR_NEST_MAX = 14;
pub const INT_FAST64_MIN = INT64_MIN;
pub const _POSIX_VERSION = @as(c_long, 200112);
pub const DISPATCH_PROC_FORK = 0x40000000;
pub const __DARWIN_ACL_EXECUTE = 1 << 3;
pub const MACH_PORT_QLIMIT_DEFAULT = MACH_PORT_QLIMIT_BASIC;
pub const __UINT_LEAST16_MAX__ = 65535;
pub const M_LN10 = 2.30258509299404568401799145468436421;
pub const _SC_SPORADIC_SERVER = 81;
pub const _CTYPE_SW3 = @as(c_long, 0xc0000000);
pub const CF_NOESCAPE = __attribute__(noescape);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_13_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_13, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const MACH_RCV_TIMED_OUT = 0x10004003;
pub const MACH_RCV_TRAILER_MASK = 0xf << 24;
pub inline fn __AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION_DEP__IPHONE_COMPAT_VERSION_MSG(_msg: var) @TypeOf(__attribute__(availability(ios, unavailable))) {
    return __attribute__(availability(ios, unavailable));
}
pub const WEXITED = 0x00000004;
pub inline fn CFCopyLocalizedStringFromTableInBundle(key: var, tbl: var, bundle: var, comment: var) @TypeOf(CFBundleCopyLocalizedString(bundle, key, key, tbl)) {
    return CFBundleCopyLocalizedString(bundle, key, key, tbl);
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_5(x: var) @TypeOf(x) {
    return x;
}
pub const AT_FDONLY = 0x0400;
pub const __DBL_MAX_EXP__ = 1024;
pub const _SC_MEMORY_PROTECTION = 32;
pub const SV_NODEFER = SA_NODEFER;
pub const _SC_XBS5_ILP32_OFFBIG = 123;
pub const _SC_CLOCK_SELECTION = 67;
pub const PRAGMA_ENUM_ALWAYSINT = 0;
pub const S_IROTH = 0o0000004;
pub const F_SETNOSIGPIPE = 73;
pub const __ORDER_LITTLE_ENDIAN__ = 1234;
pub const CLOCK_MONOTONIC_RAW = _CLOCK_MONOTONIC_RAW;
pub const _RPERM_OK = 1 << 19;
pub const _POSIX_NAME_MAX = 14;
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const SCNuLEAST16 = SCNu16;
pub const __UINT_FAST32_MAX__ = @as(c_uint, 4294967295);
pub const __MAC_10_15 = 101500;
pub const API_DEPRECATED_END = _Pragma("clang attribute pop");
pub const _POSIX_SYMLOOP_MAX = 8;
pub const MACH_RCV_INTERRUPTED = 0x10004005;
pub const MACH_MSG_VM_SPACE = 0x00001000;
pub const __COREFOUNDATION_CFPLUGIN__ = 1;
pub const I386_LPGMASK = I386_LPGBYTES - 1;
pub const NAME_MAX = 255;
pub const EQUIV_CLASS_MAX = 2;
pub const O_WRONLY = 0x0001;
pub inline fn OSWriteBigInt64(base: var, byteOffset: var, data: var) @TypeOf(OSWriteSwapInt64(base, byteOffset, data)) {
    return OSWriteSwapInt64(base, byteOffset, data);
}
pub const FLT_MAX = __FLT_MAX__;
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const EPROCUNAVAIL = 76;
pub const kAudioEndPointDeviceUIDKey = "uid";
pub inline fn OSReadBigInt64(base: var, byteOffset: var) @TypeOf(OSReadSwapInt64(base, byteOffset)) {
    return OSReadSwapInt64(base, byteOffset);
}
pub const _POSIX2_VERSION = @as(c_long, 200112);
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_1(x: var) @TypeOf(x) {
    return x;
}
pub const kCFCoreFoundationVersionNumber10_3 = 299.00;
pub const __PTHREAD_ATTR_SIZE__ = 56;
pub const __IPHONE_10_0 = 100000;
pub const KAUTH_ENDIAN_DISK = 0x00000002;
pub const kAudioSettings_CurrentValue = "current value";
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT = @as(c_ulonglong, 0x02) << 56;
pub const MACH_SEND_KERNEL = 0x00400000;
pub const NBBY = __DARWIN_NBBY;
pub const __COREFOUNDATION_CFATTRIBUTEDSTRING__ = 1;
pub const _POSIX_V7_LP64_OFF64 = __LP64_OFF64;
pub inline fn MACH_MSGH_BITS_REMOTE(bits: var) @TypeOf(bits & MACH_MSGH_BITS_REMOTE_MASK) {
    return bits & MACH_MSGH_BITS_REMOTE_MASK;
}
pub const _FORTIFY_SOURCE = 2;
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _SC_COLL_WEIGHTS_MAX = 13;
pub const OS_ALWAYS_INLINE = __attribute__(__always_inline__);
pub inline fn UINT16_C(v: var) @TypeOf(v) {
    return v;
}
pub inline fn offsetof(t: var, d: var) @TypeOf(__builtin_offsetof(t, d)) {
    return __builtin_offsetof(t, d);
}
pub const _SC_2_PBS_LOCATE = 62;
pub const __AVAILABILITY_INTERNAL_WEAK_IMPORT = __attribute__(weak_import);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const kAudioSubDeviceDriftCompensationKey = "drift";
pub const _POSIX_THREAD_PROCESS_SHARED = @as(c_long, 200112);
pub const OS_NORETURN = __attribute__(__noreturn__);
pub const DISPATCH_SWIFT3_OVERLAY = 0;
pub const __COREFOUNDATION_CFUSERNOTIFICATION__ = 1;
pub const PRAGMA_ENUM_OPTIONS = 0;
pub const DISPATCH_QUEUE_PRIORITY_HIGH = 2;
pub const ESOCKTNOSUPPORT = 44;
pub const COREFOUNDATION_CFPLUGINCOM_SEPARATE = 1;
pub const F_OK = 0;
pub const ACCESSX_MAX_DESCRIPTORS = 100;
pub const F_CHECK_LV = 98;
pub const __UINT_FAST8_MAX__ = 255;
pub const __SIZEOF_SIZE_T__ = 8;
pub const __STDC_VERSION__ = @as(c_long, 201112);
pub const MACH_SEND_INVALID_DEST = 0x10000003;
pub const KERN_NODE_DOWN = 47;
pub inline fn __offsetof(type_1: var, field: var) @TypeOf(__builtin_offsetof(type_1, field)) {
    return __builtin_offsetof(type_1, field);
}
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __TVOS_11_4 = 110400;
pub const MACH_MSG_TYPE_PORT_RECEIVE = MACH_MSG_TYPE_MOVE_RECEIVE;
pub const __DARWIN_NBBY = 8;
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = 1;
pub inline fn OSSwapHostToBigConstInt64(x: var) @TypeOf(OSSwapConstInt64(x)) {
    return OSSwapConstInt64(x);
}
pub const PRIxLEAST64 = PRIx64;
pub const __DARWIN_ACL_READ_DATA = 1 << 1;
pub const kAudioComponentValidationParameter_TimeOut = "TimeOut";
pub const PRIXFAST64 = PRIX64;
pub const _POSIX_CLOCKRES_MIN = 20000000;
pub const CLD_KILLED = 2;
pub const DISPATCH_IO_RANDOM = 1;
pub const __IPHONE_12_3 = 120300;
pub const _CTYPE_SWS = 30;
pub const CLD_TRAPPED = 4;
pub const SCNx16 = "hx";
pub const _SC_TZNAME_MAX = 27;
pub const SI_USER = 0x10001;
pub const TARGET_CARBON = 1;
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _SC_SEMAPHORES = 37;
pub const OS_NOT_TAIL_CALLED = __attribute__(__not_tail_called__);
pub const SCNoLEAST16 = SCNo16;
pub const __FINITE_MATH_ONLY__ = 0;
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION_DEP__IPHONE_COMPAT_VERSION = __attribute__(availability(ios, unavailable));
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS = 23;
pub const __UINT_LEAST64_FMTX__ = "llX";
pub inline fn CF_RELATED_TYPE(T: var, C: var, I: var) @TypeOf(__attribute__(objc_bridge_related(T, C, I))) {
    return __attribute__(objc_bridge_related(T, C, I));
}
pub const RLIMIT_STACK = 3;
pub const kAFInfoDictionary_SourceBitDepth = "source bit depth";
pub inline fn va_start(ap: var, param: var) @TypeOf(__builtin_va_start(ap, param)) {
    return __builtin_va_start(ap, param);
}
pub const VM_MAX_PAGE_ADDRESS = if (@typeId(@TypeOf(@as(c_ulonglong, 0x00007FFFFFE00000))) == .Pointer) @ptrCast(user_addr_t, @as(c_ulonglong, 0x00007FFFFFE00000)) else if (@typeId(@TypeOf(@as(c_ulonglong, 0x00007FFFFFE00000))) == .Int) @intToPtr(user_addr_t, @as(c_ulonglong, 0x00007FFFFFE00000)) else @as(user_addr_t, @as(c_ulonglong, 0x00007FFFFFE00000));
pub const EAFNOSUPPORT = 47;
pub const LDBL_DIG = __LDBL_DIG__;
pub const _SC_2_SW_DEV = 24;
pub const EBADARCH = 86;
pub const kAFInfoDictionary_Composer = "composer";
pub const LOCK_NB = 0x04;
pub const __DARWIN_NFDBITS = sizeof(__int32_t) * __DARWIN_NBBY;
pub const __INT_FAST32_FMTd__ = "d";
pub const __INTMAX_FMTi__ = "li";
pub const OS_UNUSED = __attribute__(__unused__);
pub inline fn MACH_MSG_TYPE_PORT_ANY(x: var) @TypeOf(x >= MACH_MSG_TYPE_MOVE_RECEIVE and x <= MACH_MSG_TYPE_MAKE_SEND_ONCE) {
    return x >= MACH_MSG_TYPE_MOVE_RECEIVE and x <= MACH_MSG_TYPE_MAKE_SEND_ONCE;
}
pub const __IPHONE_7_0 = 70000;
pub const __IPHONE_8_3 = 80300;
pub const __bool_true_false_are_defined = 1;
pub const __INT_LEAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const TARGET_OS_SIMULATOR = 0;
pub const kAudioSettings_SettingKey = "key";
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_3, __IPHONE_COMPAT_VERSION);
pub const __IPHONE_8_2 = 80200;
pub const INT_MIN = -2147483647 - 1;
pub const ECHILD = 10;
pub const KERN_INVALID_POLICY = 28;
pub const MACH_PORT_QLIMIT_ZERO = 0;
pub const __INT_FAST16_MAX__ = 32767;
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const RUSAGE_INFO_V2 = 2;
pub const __AVAILABILITY_MACROS_USES_AVAILABILITY = 1;
pub const ENAMETOOLONG = 63;
pub const kCFCoreFoundationVersionNumber10_5_6 = 476.17;
pub const __MAC_OS_X_VERSION_MIN_REQUIRED = __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__;
pub const FD_CLOEXEC = 1;
pub const __COREFOUNDATION_CFURLACCESS__ = 1;
pub const kCFCoreFoundationVersionNumber10_8_3 = 744.18;
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_2_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const MACH_MSG_VIRTUAL_COPY = 1;
pub const kAUPresetNumberKey = "preset-number";
pub const P_tmpdir = "/var/tmp/";
pub const MACH_MSG_SIZE_RELIABLE = if (@typeId(@TypeOf(256 * 1024)) == .Pointer) @ptrCast(mach_msg_size_t, 256 * 1024) else if (@typeId(@TypeOf(256 * 1024)) == .Int) @intToPtr(mach_msg_size_t, 256 * 1024) else @as(mach_msg_size_t, 256 * 1024);
pub inline fn DEFINE_API(_type: var) @TypeOf(_type) {
    return _type;
}
pub const OS_NOTHROW = __attribute__(__nothrow__);
pub const __COREFOUNDATION_CFCHARACTERSET__ = 1;
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const SCNdLEAST8 = SCNd8;
pub const SEEK_END = 2;
pub const SEGV_MAPERR = 1;
pub const kAFInfoDictionary_Copyright = "copyright";
pub const RLIMIT_AS = 5;
pub const _POSIX_SYNCHRONIZED_IO = -1;
pub const __SSP_STRONG__ = 2;
pub const SIGTERM = 15;
pub const TARGET_CPU_PPC = 0;
pub const __API_DEPRECATED_END = _Pragma("clang attribute pop");
pub const F_TRANSCODEKEY = 75;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = 3;
pub const OS_COLD = __attribute__(__cold__);
pub const EBADRPC = 72;
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __SALC = 0x4000;
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const PRIi16 = "hi";
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __DARWIN_ONLY_64_BIT_INO_T = 0;
pub const BIG_ENDIAN = __DARWIN_BIG_ENDIAN;
pub const __NO_INLINE__ = 1;
pub const TRUE = 1;
pub const KAUTH_EXTLOOKUP_WANT_UID = 1 << 6;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = 1;
pub const __LITTLE_ENDIAN__ = 1;
pub const MACH_PORT_INFO_EXT = 7;
pub const kAudioUnitConfigurationInfo_BusCountWritable = "BusCountWritable";
pub const _SC_IPV6 = 118;
pub const CLOCK_ALARM_CURRES = 3;
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const MACH_PORT_TYPE_PORT_RIGHTS = MACH_PORT_TYPE_SEND_RIGHTS | MACH_PORT_TYPE_RECEIVE;
pub const S_IREAD = S_IRUSR;
pub const OPAQUE_UPP_TYPES = 1;
pub const kAudioEndPointUIDKey = "uid";
pub const OS_NONNULL3 = __attribute__(__nonnull__(3));
pub const kCFCoreFoundationVersionNumber10_3_1 = 299.00;
pub inline fn OSSwapHostToLittleInt16(x: var) @TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint16_t, x) else @as(uint16_t, x)) {
    return if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint16_t, x) else @as(uint16_t, x);
}
pub const DISPATCH_PURE = __attribute__(__pure__);
pub inline fn DISPATCH_UNAVAILABLE_MSG(msg: var) @TypeOf(__attribute__(__unavailable__(msg))) {
    return __attribute__(__unavailable__(msg));
}
pub const msgh_reserved = msgh_voucher_port;
pub const _POSIX_VDISABLE = if (@typeId(@TypeOf('\xff')) == .Pointer) @ptrCast(if (@typeId(@TypeOf(char)) == .Pointer) @ptrCast(unsigned, char) else if (@typeId(@TypeOf(char)) == .Int) @intToPtr(unsigned, char) else @as(unsigned, char), '\xff') else if (@typeId(@TypeOf('\xff')) == .Int) @intToPtr(if (@typeId(@TypeOf(char)) == .Pointer) @ptrCast(unsigned, char) else if (@typeId(@TypeOf(char)) == .Int) @intToPtr(unsigned, char) else @as(unsigned, char), '\xff') else @as(if (@typeId(@TypeOf(char)) == .Pointer) @ptrCast(unsigned, char) else if (@typeId(@TypeOf(char)) == .Int) @intToPtr(unsigned, char) else @as(unsigned, char), '\xff');
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_8(x: var) @TypeOf(x) {
    return x;
}
pub const _SC_BC_STRING_MAX = 12;
pub const GUARD_TYPE_MACH_PORT = 0x1;
pub const __PTHREAD_MUTEX_SIZE__ = 56;
pub const __MAC_10_12_2 = 101202;
pub const kCAFRegionChunkHdrSize = offsetof(CAFRegionChunk, mRegions);
pub const kCFCoreFoundationVersionNumber10_6_1 = 550.00;
pub const MACH_MSG_TYPE_MOVE_SEND = 17;
pub const _SC_2_C_DEV = 19;
pub const NSEC_PER_SEC = @as(c_ulonglong, 1000000000);
pub const MAC_OS_X_VERSION_10_11_3 = 101103;
pub const _DARWIN_FEATURE_64_BIT_INODE = 1;
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __MAC_10_12 = 101200;
pub const _POSIX_NO_TRUNC = @as(c_long, 200112);
pub const __volatile = @"volatile";
pub const _SC_2_C_BIND = 18;
pub const _POSIX_CHOWN_RESTRICTED = @as(c_long, 200112);
pub const MACH_SEND_MSG_TOO_SMALL = 0x10000008;
pub const MACH_MSG_TYPE_POLYMORPHIC = mach_msg_type_name_t - 1;
pub const _POSIX_READER_WRITER_LOCKS = @as(c_long, 200112);
pub const KAUTH_FILESEC_XATTR = "com.apple.system.Security";
pub const _WSTOPPED = 0o0177;
pub const CHAR_BIT = 8;
pub const kCFCoreFoundationVersionNumber10_10_1 = 1151.16;
pub inline fn __DARWIN_OSSwapConstInt64(x: var) @TypeOf(if (@typeId(@TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0xff00000000000000) >> 56 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00ff000000000000) >> 40 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x0000ff0000000000) >> 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x000000ff00000000) >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00000000ff000000) << 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x0000000000ff0000) << 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x000000000000ff00) << 40 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00000000000000ff) << 56)) == .Pointer) @ptrCast(__uint64_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0xff00000000000000) >> 56 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00ff000000000000) >> 40 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x0000ff0000000000) >> 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x000000ff00000000) >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00000000ff000000) << 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x0000000000ff0000) << 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x000000000000ff00) << 40 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00000000000000ff) << 56) else if (@typeId(@TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0xff00000000000000) >> 56 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00ff000000000000) >> 40 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x0000ff0000000000) >> 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x000000ff00000000) >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00000000ff000000) << 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x0000000000ff0000) << 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x000000000000ff00) << 40 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00000000000000ff) << 56)) == .Int) @intToPtr(__uint64_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0xff00000000000000) >> 56 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00ff000000000000) >> 40 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x0000ff0000000000) >> 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x000000ff00000000) >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00000000ff000000) << 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x0000000000ff0000) << 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x000000000000ff00) << 40 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00000000000000ff) << 56) else @as(__uint64_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0xff00000000000000) >> 56 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00ff000000000000) >> 40 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x0000ff0000000000) >> 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x000000ff00000000) >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00000000ff000000) << 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x0000000000ff0000) << 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x000000000000ff00) << 40 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00000000000000ff) << 56)) {
    return if (@typeId(@TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0xff00000000000000) >> 56 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00ff000000000000) >> 40 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x0000ff0000000000) >> 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x000000ff00000000) >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00000000ff000000) << 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x0000000000ff0000) << 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x000000000000ff00) << 40 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00000000000000ff) << 56)) == .Pointer) @ptrCast(__uint64_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0xff00000000000000) >> 56 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00ff000000000000) >> 40 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x0000ff0000000000) >> 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x000000ff00000000) >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00000000ff000000) << 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x0000000000ff0000) << 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x000000000000ff00) << 40 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00000000000000ff) << 56) else if (@typeId(@TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0xff00000000000000) >> 56 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00ff000000000000) >> 40 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x0000ff0000000000) >> 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x000000ff00000000) >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00000000ff000000) << 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x0000000000ff0000) << 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x000000000000ff00) << 40 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00000000000000ff) << 56)) == .Int) @intToPtr(__uint64_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0xff00000000000000) >> 56 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00ff000000000000) >> 40 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x0000ff0000000000) >> 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x000000ff00000000) >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00000000ff000000) << 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x0000000000ff0000) << 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x000000000000ff00) << 40 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00000000000000ff) << 56) else @as(__uint64_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0xff00000000000000) >> 56 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00ff000000000000) >> 40 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x0000ff0000000000) >> 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x000000ff00000000) >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00000000ff000000) << 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x0000000000ff0000) << 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x000000000000ff00) << 40 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint64_t, x) else @as(__uint64_t, x) & @as(c_ulonglong, 0x00000000000000ff) << 56);
}
pub const _SC_BARRIERS = 66;
pub const FP_SUBNORMAL = 5;
pub const kCFCoreFoundationVersionNumber10_4_4_PowerPC = 368.25;
pub const PRIdFAST64 = PRId64;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF = 1;
pub const KAUTH_VNODE_GENERIC_WRITE_BITS = KAUTH_VNODE_WRITE_DATA | KAUTH_VNODE_APPEND_DATA | KAUTH_VNODE_DELETE | KAUTH_VNODE_DELETE_CHILD | KAUTH_VNODE_WRITE_ATTRIBUTES | KAUTH_VNODE_WRITE_EXTATTRIBUTES | KAUTH_VNODE_WRITE_SECURITY;
pub const OPAQUE_TOOLBOX_STRUCTS = 1;
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const STDERR_FILENO = 2;
pub inline fn NextCAFRegion(inCAFRegionPtr: var) @TypeOf(if (@typeId(@TypeOf(if (@typeId(@TypeOf(inCAFRegionPtr)) == .Pointer) @ptrCast([*c]char, inCAFRegionPtr) else if (@typeId(@TypeOf(inCAFRegionPtr)) == .Int) @intToPtr([*c]char, inCAFRegionPtr) else @as([*c]char, inCAFRegionPtr) + offsetof(CAFRegion, mMarkers) + inCAFRegionPtr.*.mNumberMarkers * sizeof(CAFMarker))) == .Pointer) @ptrCast([*c]CAFRegion, if (@typeId(@TypeOf(inCAFRegionPtr)) == .Pointer) @ptrCast([*c]char, inCAFRegionPtr) else if (@typeId(@TypeOf(inCAFRegionPtr)) == .Int) @intToPtr([*c]char, inCAFRegionPtr) else @as([*c]char, inCAFRegionPtr) + offsetof(CAFRegion, mMarkers) + inCAFRegionPtr.*.mNumberMarkers * sizeof(CAFMarker)) else if (@typeId(@TypeOf(if (@typeId(@TypeOf(inCAFRegionPtr)) == .Pointer) @ptrCast([*c]char, inCAFRegionPtr) else if (@typeId(@TypeOf(inCAFRegionPtr)) == .Int) @intToPtr([*c]char, inCAFRegionPtr) else @as([*c]char, inCAFRegionPtr) + offsetof(CAFRegion, mMarkers) + inCAFRegionPtr.*.mNumberMarkers * sizeof(CAFMarker))) == .Int) @intToPtr([*c]CAFRegion, if (@typeId(@TypeOf(inCAFRegionPtr)) == .Pointer) @ptrCast([*c]char, inCAFRegionPtr) else if (@typeId(@TypeOf(inCAFRegionPtr)) == .Int) @intToPtr([*c]char, inCAFRegionPtr) else @as([*c]char, inCAFRegionPtr) + offsetof(CAFRegion, mMarkers) + inCAFRegionPtr.*.mNumberMarkers * sizeof(CAFMarker)) else @as([*c]CAFRegion, if (@typeId(@TypeOf(inCAFRegionPtr)) == .Pointer) @ptrCast([*c]char, inCAFRegionPtr) else if (@typeId(@TypeOf(inCAFRegionPtr)) == .Int) @intToPtr([*c]char, inCAFRegionPtr) else @as([*c]char, inCAFRegionPtr) + offsetof(CAFRegion, mMarkers) + inCAFRegionPtr.*.mNumberMarkers * sizeof(CAFMarker))) {
    return if (@typeId(@TypeOf(if (@typeId(@TypeOf(inCAFRegionPtr)) == .Pointer) @ptrCast([*c]char, inCAFRegionPtr) else if (@typeId(@TypeOf(inCAFRegionPtr)) == .Int) @intToPtr([*c]char, inCAFRegionPtr) else @as([*c]char, inCAFRegionPtr) + offsetof(CAFRegion, mMarkers) + inCAFRegionPtr.*.mNumberMarkers * sizeof(CAFMarker))) == .Pointer) @ptrCast([*c]CAFRegion, if (@typeId(@TypeOf(inCAFRegionPtr)) == .Pointer) @ptrCast([*c]char, inCAFRegionPtr) else if (@typeId(@TypeOf(inCAFRegionPtr)) == .Int) @intToPtr([*c]char, inCAFRegionPtr) else @as([*c]char, inCAFRegionPtr) + offsetof(CAFRegion, mMarkers) + inCAFRegionPtr.*.mNumberMarkers * sizeof(CAFMarker)) else if (@typeId(@TypeOf(if (@typeId(@TypeOf(inCAFRegionPtr)) == .Pointer) @ptrCast([*c]char, inCAFRegionPtr) else if (@typeId(@TypeOf(inCAFRegionPtr)) == .Int) @intToPtr([*c]char, inCAFRegionPtr) else @as([*c]char, inCAFRegionPtr) + offsetof(CAFRegion, mMarkers) + inCAFRegionPtr.*.mNumberMarkers * sizeof(CAFMarker))) == .Int) @intToPtr([*c]CAFRegion, if (@typeId(@TypeOf(inCAFRegionPtr)) == .Pointer) @ptrCast([*c]char, inCAFRegionPtr) else if (@typeId(@TypeOf(inCAFRegionPtr)) == .Int) @intToPtr([*c]char, inCAFRegionPtr) else @as([*c]char, inCAFRegionPtr) + offsetof(CAFRegion, mMarkers) + inCAFRegionPtr.*.mNumberMarkers * sizeof(CAFMarker)) else @as([*c]CAFRegion, if (@typeId(@TypeOf(inCAFRegionPtr)) == .Pointer) @ptrCast([*c]char, inCAFRegionPtr) else if (@typeId(@TypeOf(inCAFRegionPtr)) == .Int) @intToPtr([*c]char, inCAFRegionPtr) else @as([*c]char, inCAFRegionPtr) + offsetof(CAFRegion, mMarkers) + inCAFRegionPtr.*.mNumberMarkers * sizeof(CAFMarker));
}
pub const _POSIX_SPIN_LOCKS = -1;
pub const _LC_LAST = 7;
pub const _CS_XBS5_ILP32_OFF32_LIBS = 22;
pub const __OSX_UNAVAILABLE = __OS_AVAILABILITY(macosx, unavailable);
pub const SCNd32 = "d";
pub const KAUTH_EXTLOOKUP_WANT_GID = 1 << 9;
pub const __signed = signed;
pub const SIG_BLOCK = 1;
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _POSIX_V7_LPBIG_OFFBIG = __LPBIG_OFFBIG;
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const MAC_OS_X_VERSION_10_11 = 101100;
pub const OS_NOESCAPE = __attribute__(__noescape__);
pub const SCNuPTR = "lu";
pub const MACH_MSG_TYPE_DISPOSE_SEND_ONCE = 26;
pub inline fn MACH_PORT_MAKE(index_1: var, gen: var) @TypeOf(index_1 << 8 | gen >> 24) {
    return index_1 << 8 | gen >> 24;
}
pub const __deprecated = __attribute__(__deprecated__);
pub const SCNx32 = "x";
pub inline fn FD_SET(n: var, p: var) @TypeOf(__DARWIN_FD_SET(n, p)) {
    return __DARWIN_FD_SET(n, p);
}
pub const DISPATCH_VNODE_REVOKE = 0x40;
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub inline fn OSReadLittleInt64(base: var, byteOffset: var) @TypeOf(_OSReadInt64(base, byteOffset)) {
    return _OSReadInt64(base, byteOffset);
}
pub const _DELETE_OK = 1 << 12;
pub const ILL_BADSTK = 8;
pub const __COREFOUNDATION_CFTREE__ = 1;
pub const INT_FAST8_MAX = INT8_MAX;
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_FAST64_FMTu__ = "llu";
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 3;
pub const MPO_TEMPOWNER = 0x04;
pub const __block = __attribute__(__blocks__(byref));
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const PRIiLEAST16 = PRIi16;
pub const __AVAILABILITY_INTERNAL_DEPRECATED = __attribute__(deprecated);
pub const MACH_PORT_RIGHT_PORT_SET = if (@typeId(@TypeOf(3)) == .Pointer) @ptrCast(mach_port_right_t, 3) else if (@typeId(@TypeOf(3)) == .Int) @intToPtr(mach_port_right_t, 3) else @as(mach_port_right_t, 3);
pub const __LONG_MAX__ = @as(c_long, 9223372036854775807);
pub const MACH_MSG_GUARDED_PORT_DESCRIPTOR = 4;
pub const EPIPE = 32;
pub const TARGET_CPU_SPARC = 0;
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _POSIX_TZNAME_MAX = 6;
pub const S_IWUSR = 0o0000200;
pub const TIME_ABSOLUTE = 0x00;
pub const KERN_INVALID_NAME = 15;
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const VM_MAX_ADDRESS = if (@typeId(@TypeOf(0xFFE00000)) == .Pointer) @ptrCast(vm_offset_t, 0xFFE00000) else if (@typeId(@TypeOf(0xFFE00000)) == .Int) @intToPtr(vm_offset_t, 0xFFE00000) else @as(vm_offset_t, 0xFFE00000);
pub const kCFCoreFoundationVersionNumber10_9_1 = 855.11;
pub const O_SYNC = 0x0080;
pub const __DARWIN_SUF_EXTSN = "$DARWIN_EXTSN";
pub const __MAC_10_11_2 = 101102;
pub inline fn __deprecated_msg(_msg: var) @TypeOf(__attribute__(__deprecated__(_msg))) {
    return __attribute__(__deprecated__(_msg));
}
pub const __HAS_FIXED_CHK_PROTOTYPES = 1;
pub const PRIo32 = "o";
pub const __IPHONE_4_1 = 40100;
pub const _POSIX2_BC_BASE_MAX = 99;
pub const _SC_HOST_NAME_MAX = 72;
pub const RENAME_SWAP = 0x00000002;
pub const _POSIX_THREAD_KEYS_MAX = 128;
pub const SYNC_VOLUME_FULLSYNC = 0x01;
pub const SCNoFAST64 = SCNo64;
pub const kInvalidID = 0;
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __DARWIN_ACL_WRITE_ATTRIBUTES = 1 << 8;
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __x86_64 = 1;
pub const NL_SETMAX = 255;
pub const F_ULOCK = 0;
pub const _SC_XBS5_ILP32_OFF32 = 122;
pub const _CTYPE_I = @as(c_long, 0x00080000);
pub const KAUTH_FILESEC_FLAGS_PRIVATE = KAUTH_ACL_FLAGS_PRIVATE;
pub const TARGET_OS_OSX = 1;
pub const _SC_THREAD_PRIORITY_SCHEDULING = 89;
pub inline fn DEFINE_API_STDCALL(_type: var) @TypeOf(_type) {
    return _type;
}
pub const kAudioSettings_Parameters = "parameters";
pub inline fn WTERMSIG(x: var) @TypeOf(_WSTATUS(x)) {
    return _WSTATUS(x);
}
pub const _SC_SIGQUEUE_MAX = 51;
pub const _POSIX_THREAD_ATTR_STACKSIZE = @as(c_long, 200112);
pub const __OS_ENUM_ATTR_CLOSED = __attribute__(enum_extensibility(closed));
pub const IOPOL_APPLICATION = IOPOL_STANDARD;
pub const CF_EXTENSIBLE_STRING_ENUM = _CF_TYPED_EXTENSIBLE_ENUM;
pub const MACH_MSGH_BITS_RAISEIMP = @as(c_uint, 0x20000000);
pub const _POSIX2_FORT_RUN = @as(c_long, 200112);
pub const S_IFIFO = 0o0010000;
pub const __UINT32_FMTu__ = "u";
pub inline fn MACH_MSGH_BITS_SET(remote: var, local: var, voucher: var, other: var) @TypeOf(MACH_MSGH_BITS_SET_PORTS(remote, local, voucher) | other & ~MACH_MSGH_BITS_PORTS_MASK) {
    return MACH_MSGH_BITS_SET_PORTS(remote, local, voucher) | other & ~MACH_MSGH_BITS_PORTS_MASK;
}
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const LITTLE_ENDIAN = __DARWIN_LITTLE_ENDIAN;
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const SIGVTALRM = 26;
pub const __COREFOUNDATION_CFDATE__ = 1;
pub const __null_unspecified = _Null_unspecified;
pub inline fn INT16_C(v: var) @TypeOf(v) {
    return v;
}
pub const SIGXFSZ = 25;
pub inline fn __sfileno(p: var) @TypeOf(p.*._file) {
    return p.*._file;
}
pub const OS_WARN_RESULT = __attribute__(__warn_unused_result__);
pub const __MAC_10_12_4 = 101204;
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_3(x: var) @TypeOf(x) {
    return x;
}
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const FPE_FLTINV = 5;
pub const L_XTND = SEEK_END;
pub const FUNCTION_PASCAL = 0;
pub const __STDC_WANT_LIB_EXT1__ = 1;
pub inline fn MACH_MSGH_BITS(remote: var, local: var) @TypeOf(remote | local << 8) {
    return remote | local << 8;
}
pub const MACH_SEND_INTERRUPT = 0x00000040;
pub const __IPHONE_8_4 = 80400;
pub const _POSIX_V6_LPBIG_OFFBIG = __LPBIG_OFFBIG;
pub const __INT_FAST32_FMTi__ = "i";
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = 2;
pub inline fn __AVAILABILITY_INTERNAL__IPHONE_NA_DEP__IPHONE_NA_MSG(_msg: var) @TypeOf(__attribute__(availability(ios, unavailable))) {
    return __attribute__(availability(ios, unavailable));
}
pub const KAUTH_ACL_MAX_ENTRIES = 128;
pub const MAC_OS_X_VERSION_10_1 = 1010;
pub const EPROTOTYPE = 41;
pub const OS_NONNULL10 = __attribute__(__nonnull__(10));
pub const __UINT64_FMTo__ = "llo";
pub inline fn dispatch_assert_queue_barrier_debug(q: var) @TypeOf(dispatch_assert_queue_barrier(q)) {
    return dispatch_assert_queue_barrier(q);
}
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __COREFOUNDATION_CFBYTEORDER__ = 1;
pub const MACH_SEND_INVALID_TYPE = 0x1000000f;
pub const _SC_VERSION = 8;
pub const _POSIX2_BC_STRING_MAX = 1000;
pub const ENOTSOCK = 38;
pub const kCFCoreFoundationVersionNumber10_4_3 = 368.18;
pub const TARGET_OS_WATCH = 0;
pub const _POSIX2_PBS_ACCOUNTING = -1;
pub const PAGE_MAX_SHIFT = PAGE_SHIFT;
pub inline fn OS_ALIGNED(n: var) @TypeOf(__attribute__(__aligned__(n))) {
    return __attribute__(__aligned__(n));
}
pub const OS_NONNULL5 = __attribute__(__nonnull__(5));
pub const DISPATCH_APPLY_AUTO_AVAILABLE = 1;
pub const __IPHONE_11_0 = 110000;
pub const EPROTONOSUPPORT = 43;
pub const MACH_RCV_PORT_DIED = 0x10004009;
pub const INT_LEAST8_MIN = INT8_MIN;
pub const EXDEV = 18;
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _SC_THREADS = 96;
pub const MACH_RCV_IN_SET = 0x1000400a;
pub const KAUTH_EXTLOOKUP_WANT_USID = 1 << 8;
pub const __IPHONE_6_1 = 60100;
pub const PRAGMA_STRUCT_ALIGN = 0;
pub const RLIM_INFINITY = if (@typeId(@TypeOf(1 << 63)) == .Pointer) @ptrCast(__uint64_t, 1 << 63) else if (@typeId(@TypeOf(1 << 63)) == .Int) @intToPtr(__uint64_t, 1 << 63) else @as(__uint64_t, 1 << 63) - 1;
pub const kCFCoreFoundationVersionNumber10_2_2 = 263.10;
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const WCOREFLAG = 0o0200;
pub const _SC_AIO_PRIO_DELTA_MAX = 44;
pub const F_SETOWN = 6;
pub const kAFInfoDictionary_Tempo = "tempo";
pub const kAUPresetDataKey = "data";
pub const __IPHONE_5_0 = 50000;
pub const __DARWIN_PDP_ENDIAN = 3412;
pub const F_GETPATH_MTMINFO = 71;
pub const __TVOS_10_2 = 100200;
pub const ERANGE = 34;
pub const __result_use_check = __attribute__(__warn_unused_result__);
pub const MACH_MSG_OOL_VOLATILE_DESCRIPTOR = 3;
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __SIZEOF_LONG_DOUBLE__ = 16;
pub const REALTIME_CLOCK = 0;
pub const kAudioHardwareRunLoopMode = "com.apple.audio.CoreAudio";
pub const kAFInfoDictionary_KeySignature = "key signature";
pub const SCNoFAST32 = SCNo32;
pub const kCFCoreFoundationVersionNumber10_3_3 = 299.30;
pub const MACH_PORT_RIGHT_DEAD_NAME = if (@typeId(@TypeOf(4)) == .Pointer) @ptrCast(mach_port_right_t, 4) else if (@typeId(@TypeOf(4)) == .Int) @intToPtr(mach_port_right_t, 4) else @as(mach_port_right_t, 4);
pub const __DARWIN_C_FULL = @as(c_long, 900000);
pub const __IOS_UNAVAILABLE = __OS_AVAILABILITY(ios, unavailable);
pub const kCFCoreFoundationVersionNumber10_7_5 = 635.21;
pub const __DARWIN_ACL_FLAG_NO_INHERIT = 1 << 17;
pub const SIG_UNBLOCK = 2;
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub inline fn clearerr_unlocked(p: var) @TypeOf(__sclearerr(p)) {
    return __sclearerr(p);
}
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub inline fn OSSwapHostToBigConstInt16(x: var) @TypeOf(OSSwapConstInt16(x)) {
    return OSSwapConstInt16(x);
}
pub const S_IRWXU = 0o0000700;
pub const DISPATCH_NOTHROW = __attribute__(__nothrow__);
pub const ILL_ILLTRP = 2;
pub const TARGET_OS_WIN32 = 0;
pub const KAUTH_FILESEC_WANTED = if (@typeId(@TypeOf(1)) == .Pointer) @ptrCast(kauth_filesec_t, 1) else if (@typeId(@TypeOf(1)) == .Int) @intToPtr(kauth_filesec_t, 1) else @as(kauth_filesec_t, 1);
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_10_3(x: var) @TypeOf(x) {
    return x;
}
pub inline fn OS_OBJECT_GLOBAL_OBJECT(type_1: var, object: var) @TypeOf(if (@typeId(@TypeOf(type_1)) == .Pointer) @ptrCast(OS_OBJECT_BRIDGE, type_1) else if (@typeId(@TypeOf(type_1)) == .Int) @intToPtr(OS_OBJECT_BRIDGE, type_1) else @as(OS_OBJECT_BRIDGE, type_1) & object) {
    return if (@typeId(@TypeOf(type_1)) == .Pointer) @ptrCast(OS_OBJECT_BRIDGE, type_1) else if (@typeId(@TypeOf(type_1)) == .Int) @intToPtr(OS_OBJECT_BRIDGE, type_1) else @as(OS_OBJECT_BRIDGE, type_1) & object;
}
pub const __TVOS_11_0 = 110000;
pub const MACH_PORT_TYPE_PORT_OR_DEAD = MACH_PORT_TYPE_PORT_RIGHTS | MACH_PORT_TYPE_DEAD_NAME;
pub const __DRIVERKIT_19_0 = 190000;
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __LDBL_HAS_INFINITY__ = 1;
pub const __IPHONE_4_0 = 40000;
pub const __nonnull = _Nonnull;
pub inline fn __strfmonlike(fmtarg: var, firstvararg: var) @TypeOf(__attribute__(__format__(__strfmon__, fmtarg, firstvararg))) {
    return __attribute__(__format__(__strfmon__, fmtarg, firstvararg));
}
pub const __DBL_EPSILON__ = 2.2204460492503131e-16;
pub const KAUTH_EXTLOOKUP_VALID_MEMBERSHIP = 1 << 13;
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = 2;
pub const O_DSYNC = 0x400000;
pub const EPROTO = 100;
pub const _SC_THREAD_PRIO_PROTECT = 88;
pub const __COREFOUNDATION_CFSTREAM__ = 1;
pub const SCNxFAST32 = SCNx32;
pub const __UINTPTR_FMTx__ = "lx";
pub const PRIO_PROCESS = 0;
pub const __enum_open = __attribute__(__enum_extensibility__(open));
pub const __DARWIN_ACL_EXTENDED_ALLOW = 1;
pub const _XOPEN_STREAMS = -1;
pub const EISCONN = 56;
pub const FPE_FLTUND = 3;
pub const FUNCTION_WIN32CC = 0;
pub const _SC_TRACE_EVENT_NAME_MAX = 127;
pub const __AES__ = 1;
pub const __FLT_RADIX__ = 2;
pub const PRIuFAST16 = PRIu16;
pub const __amd64 = 1;
pub const kInstrumentInfoKey_LSB = "LSB";
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const MACH_MSG_PHYSICAL_COPY = 0;
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DISPATCH_NOT_TAIL_CALLED = __attribute__(__not_tail_called__);
pub const API_UNAVAILABLE_END = _Pragma("clang attribute pop");
pub const S_IFMT = 0o0170000;
pub const __MAC_10_11_4 = 101104;
pub const __not_tail_called = __attribute__(__not_tail_called__);
pub const __IPHONE_13_1 = 130100;
pub const __INT32_FMTi__ = "i";
pub const CF_USE_OSBYTEORDER_H = 1;
pub const _REXT_OK = 1 << 17;
pub const __GCC_ATOMIC_INT_LOCK_FREE = 2;
pub const kCFCoreFoundationVersionNumber10_6_7 = 550.42;
pub const FP_ILOGBNAN = -2147483647 - 1;
pub const UINT_LEAST16_MAX = UINT16_MAX;
pub const kCFCoreFoundationVersionNumber10_10_5 = 1153.18;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = 2;
pub const WAKEMON_ENABLE = 0x01;
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = 2;
pub inline fn DEFINE_API_C_STDCALL(_type: var) @TypeOf(_type) {
    return _type;
}
pub const __WCHAR_MAX__ = 2147483647;
pub const __ATOMIC_SEQ_CST = 5;
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_13_2(x: var) @TypeOf(x) {
    return x;
}
pub const SA_RESTART = 0x0002;
pub const MAC_OS_X_VERSION_10_7 = 1070;
pub const __used = __attribute__(__used__);
pub const _EXECUTE_OK = 1 << 11;
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const MACH_RCV_VOUCHER = 0x00000800;
pub const MACH_MSG_TYPE_PORT_NAME = 15;
pub const IOPOL_IMPORTANT = 1;
pub const PRIdFAST32 = PRId32;
pub const MACH_SEND_IMPORTANCE = 0x00080000;
pub const __BMI__ = 1;
pub const __FLT_MANT_DIG__ = 24;
pub const _PC_REC_MAX_XFER_SIZE = 21;
pub const _POSIX_THREAD_ATTR_STACKADDR = @as(c_long, 200112);
pub const WAKEMON_DISABLE = 0x02;
pub const AT_FDCWD = -2;
pub const F_GETLK = 7;
pub const __IPHONE_3_1 = 30100;
pub const KAUTH_VNODE_DELETE = @as(c_uint, 1) << 4;
pub const MAC_OS_X_VERSION_10_14_4 = 101404;
pub const __SSTR = 0x0200;
pub const KAUTH_VNODE_SEARCHBYANYONE = @as(c_uint, 1) << 29;
pub const kCFCoreFoundationVersionNumber10_1 = 226.00;
pub const SIGPROF = 27;
pub const DISPATCH_TRANSPARENT_UNION = __attribute__(__transparent_union__);
pub const __WATCHOS_4_3 = 40300;
pub const kCFCoreFoundationVersionNumber10_4_5_Intel = 368.26;
pub const __MAC_10_14_4 = 101404;
pub const OS_NONNULL13 = __attribute__(__nonnull__(13));
pub const kCFCoreFoundationVersionNumber10_2_8 = 263.50;
pub inline fn CAST_USER_ADDR_T(a_ptr: var) @TypeOf(if (@typeId(@TypeOf(if (@typeId(@TypeOf(a_ptr)) == .Pointer) @ptrCast(uintptr_t, a_ptr) else if (@typeId(@TypeOf(a_ptr)) == .Int) @intToPtr(uintptr_t, a_ptr) else @as(uintptr_t, a_ptr))) == .Pointer) @ptrCast(user_addr_t, if (@typeId(@TypeOf(a_ptr)) == .Pointer) @ptrCast(uintptr_t, a_ptr) else if (@typeId(@TypeOf(a_ptr)) == .Int) @intToPtr(uintptr_t, a_ptr) else @as(uintptr_t, a_ptr)) else if (@typeId(@TypeOf(if (@typeId(@TypeOf(a_ptr)) == .Pointer) @ptrCast(uintptr_t, a_ptr) else if (@typeId(@TypeOf(a_ptr)) == .Int) @intToPtr(uintptr_t, a_ptr) else @as(uintptr_t, a_ptr))) == .Int) @intToPtr(user_addr_t, if (@typeId(@TypeOf(a_ptr)) == .Pointer) @ptrCast(uintptr_t, a_ptr) else if (@typeId(@TypeOf(a_ptr)) == .Int) @intToPtr(uintptr_t, a_ptr) else @as(uintptr_t, a_ptr)) else @as(user_addr_t, if (@typeId(@TypeOf(a_ptr)) == .Pointer) @ptrCast(uintptr_t, a_ptr) else if (@typeId(@TypeOf(a_ptr)) == .Int) @intToPtr(uintptr_t, a_ptr) else @as(uintptr_t, a_ptr))) {
    return if (@typeId(@TypeOf(if (@typeId(@TypeOf(a_ptr)) == .Pointer) @ptrCast(uintptr_t, a_ptr) else if (@typeId(@TypeOf(a_ptr)) == .Int) @intToPtr(uintptr_t, a_ptr) else @as(uintptr_t, a_ptr))) == .Pointer) @ptrCast(user_addr_t, if (@typeId(@TypeOf(a_ptr)) == .Pointer) @ptrCast(uintptr_t, a_ptr) else if (@typeId(@TypeOf(a_ptr)) == .Int) @intToPtr(uintptr_t, a_ptr) else @as(uintptr_t, a_ptr)) else if (@typeId(@TypeOf(if (@typeId(@TypeOf(a_ptr)) == .Pointer) @ptrCast(uintptr_t, a_ptr) else if (@typeId(@TypeOf(a_ptr)) == .Int) @intToPtr(uintptr_t, a_ptr) else @as(uintptr_t, a_ptr))) == .Int) @intToPtr(user_addr_t, if (@typeId(@TypeOf(a_ptr)) == .Pointer) @ptrCast(uintptr_t, a_ptr) else if (@typeId(@TypeOf(a_ptr)) == .Int) @intToPtr(uintptr_t, a_ptr) else @as(uintptr_t, a_ptr)) else @as(user_addr_t, if (@typeId(@TypeOf(a_ptr)) == .Pointer) @ptrCast(uintptr_t, a_ptr) else if (@typeId(@TypeOf(a_ptr)) == .Int) @intToPtr(uintptr_t, a_ptr) else @as(uintptr_t, a_ptr));
}
pub const CLD_STOPPED = 5;
pub const _POSIX2_CHARCLASS_NAME_MAX = 14;
pub const F_DUPFD_CLOEXEC = 67;
pub const LOCK_SH = 0x01;
pub const MACH_SEND_INVALID_NOTIFY = 0x1000000b;
pub const WAIT_ANY = -1;
pub const _POSIX_AIO_MAX = 1;
pub const PRIx32 = "x";
pub const CF_STRING_ENUM = _CF_TYPED_ENUM;
pub const TARGET_ABI_USES_IOS_VALUES = TARGET_OS_IPHONE and !TARGET_OS_MACCATALYST;
pub const ILL_ILLOPC = 1;
pub const __CF_ENUM_ATTRIBUTES = __attribute__(enum_extensibility(open));
pub const SA_64REGSET = 0x0200;
pub const CLOCK_ALARM_MAXRES = 5;
pub const OS_NONNULL11 = __attribute__(__nonnull__(11));
pub const SV_ONSTACK = SA_ONSTACK;
pub const _RATTR_OK = 1 << 15;
pub const kCFCoreFoundationVersionNumber10_1_2 = 227.20;
pub const PRIiLEAST8 = PRIi8;
pub const MACH_MSG_IPC_KERNEL = 0x00000800;
pub const SIZE_T_MAX = ULONG_MAX;
pub const _POSIX_SHARED_MEMORY_OBJECTS = -1;
pub const SI_ASYNCIO = 0x10004;
pub const SIGABRT = 6;
pub const CALENDAR_CLOCK = 1;
pub const PRIiPTR = "li";
pub const S_IWOTH = 0o0000002;
pub const EINPROGRESS = 36;
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const POLL_PRI = 5;
pub const MACH_MSG_TYPE_COPY_RECEIVE = 22;
pub const FLT_MIN_10_EXP = __FLT_MIN_10_EXP__;
pub const kCFCoreFoundationVersionNumber10_2_1 = 263.10;
pub const sa_sigaction = __sigaction_u.__sa_sigaction;
pub const SCNdPTR = "ld";
pub const __LP64__ = 1;
pub const PAGE_MASK = PAGE_SIZE - 1;
pub const __LDBL_MAX_10_EXP__ = 4932;
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const WAIT_MYPGRP = 0;
pub const PRIuFAST64 = PRIu64;
pub const __FLT_MIN_EXP__ = -125;
pub const PRIX32 = "X";
pub const INT_FAST16_MAX = INT16_MAX;
pub const _SC_V6_LP64_OFF64 = 105;
pub const _POSIX_ARG_MAX = 4096;
pub inline fn OSSwapBigToHostInt32(x: var) @TypeOf(OSSwapInt32(x)) {
    return OSSwapInt32(x);
}
pub const __UINTMAX_FMTx__ = "lx";
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __code_model_small_ = 1;
pub const _LP64 = 1;
pub const MACH_PORT_QLIMIT_BASIC = 5;
pub const KERN_MEMORY_FAILURE = 9;
pub const SCNdLEAST32 = SCNd32;
pub const _SC_MAPPED_FILES = 47;
pub const MACH_MSG_SIZE_MAX = if (@typeId(@TypeOf(~0)) == .Pointer) @ptrCast(mach_msg_size_t, ~0) else if (@typeId(@TypeOf(~0)) == .Int) @intToPtr(mach_msg_size_t, ~0) else @as(mach_msg_size_t, ~0);
pub const FP_RND_UP = 2;
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __STDC_NO_THREADS__ = 1;
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const KERN_PROTECTION_FAILURE = 2;
pub const MAX_FATAL_kGUARD_EXC_CODE = @as(c_uint, 1) << 6;
pub const _CTYPE_X = @as(c_long, 0x00010000);
pub const R_OK = 1 << 2;
pub const KAUTH_ACE_ALARM = 4;
pub const __LZCNT__ = 1;
pub const __MAC_10_13_4 = 101304;
pub const CPF_MASK = CPF_OVERWRITE | CPF_IGNORE_MODE;
pub const __WATCHOS_2_2 = 20200;
pub const __COREFOUNDATION_CFRUNLOOP__ = 1;
pub const OS_OBJECT_HAVE_OBJC_SUPPORT = 0;
pub const __MAC_10_1 = 1010;
pub const CF_RELEASES_ARGUMENT = __attribute__(cf_consumed);
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 11;
pub const _PC_EXTENDED_SECURITY_NP = 13;
pub const S_IXGRP = 0o0000010;
pub inline fn MACH_MSGH_BITS_LOCAL(bits: var) @TypeOf(bits & MACH_MSGH_BITS_LOCAL_MASK >> 8) {
    return bits & MACH_MSGH_BITS_LOCAL_MASK >> 8;
}
pub const kCFCoreFoundationVersionNumber10_5_5 = 476.15;
pub const DISPATCH_ASSUME_NONNULL_BEGIN = _Pragma("clang assume_nonnull begin");
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub inline fn __darwin_obsz0(object: var) @TypeOf(__builtin_object_size(object, 0)) {
    return __builtin_object_size(object, 0);
}
pub const F_THAW_FS = 54;
pub inline fn MACH_PORT_TYPE(right: var) @TypeOf(if (@typeId(@TypeOf(if (@typeId(@TypeOf(1)) == .Pointer) @ptrCast(mach_port_type_t, 1) else if (@typeId(@TypeOf(1)) == .Int) @intToPtr(mach_port_type_t, 1) else @as(mach_port_type_t, 1) << right + if (@typeId(@TypeOf(16)) == .Pointer) @ptrCast(mach_port_right_t, 16) else if (@typeId(@TypeOf(16)) == .Int) @intToPtr(mach_port_right_t, 16) else @as(mach_port_right_t, 16))) == .Pointer) @ptrCast(mach_port_type_t, if (@typeId(@TypeOf(1)) == .Pointer) @ptrCast(mach_port_type_t, 1) else if (@typeId(@TypeOf(1)) == .Int) @intToPtr(mach_port_type_t, 1) else @as(mach_port_type_t, 1) << right + if (@typeId(@TypeOf(16)) == .Pointer) @ptrCast(mach_port_right_t, 16) else if (@typeId(@TypeOf(16)) == .Int) @intToPtr(mach_port_right_t, 16) else @as(mach_port_right_t, 16)) else if (@typeId(@TypeOf(if (@typeId(@TypeOf(1)) == .Pointer) @ptrCast(mach_port_type_t, 1) else if (@typeId(@TypeOf(1)) == .Int) @intToPtr(mach_port_type_t, 1) else @as(mach_port_type_t, 1) << right + if (@typeId(@TypeOf(16)) == .Pointer) @ptrCast(mach_port_right_t, 16) else if (@typeId(@TypeOf(16)) == .Int) @intToPtr(mach_port_right_t, 16) else @as(mach_port_right_t, 16))) == .Int) @intToPtr(mach_port_type_t, if (@typeId(@TypeOf(1)) == .Pointer) @ptrCast(mach_port_type_t, 1) else if (@typeId(@TypeOf(1)) == .Int) @intToPtr(mach_port_type_t, 1) else @as(mach_port_type_t, 1) << right + if (@typeId(@TypeOf(16)) == .Pointer) @ptrCast(mach_port_right_t, 16) else if (@typeId(@TypeOf(16)) == .Int) @intToPtr(mach_port_right_t, 16) else @as(mach_port_right_t, 16)) else @as(mach_port_type_t, if (@typeId(@TypeOf(1)) == .Pointer) @ptrCast(mach_port_type_t, 1) else if (@typeId(@TypeOf(1)) == .Int) @intToPtr(mach_port_type_t, 1) else @as(mach_port_type_t, 1) << right + if (@typeId(@TypeOf(16)) == .Pointer) @ptrCast(mach_port_right_t, 16) else if (@typeId(@TypeOf(16)) == .Int) @intToPtr(mach_port_right_t, 16) else @as(mach_port_right_t, 16))) {
    return if (@typeId(@TypeOf(if (@typeId(@TypeOf(1)) == .Pointer) @ptrCast(mach_port_type_t, 1) else if (@typeId(@TypeOf(1)) == .Int) @intToPtr(mach_port_type_t, 1) else @as(mach_port_type_t, 1) << right + if (@typeId(@TypeOf(16)) == .Pointer) @ptrCast(mach_port_right_t, 16) else if (@typeId(@TypeOf(16)) == .Int) @intToPtr(mach_port_right_t, 16) else @as(mach_port_right_t, 16))) == .Pointer) @ptrCast(mach_port_type_t, if (@typeId(@TypeOf(1)) == .Pointer) @ptrCast(mach_port_type_t, 1) else if (@typeId(@TypeOf(1)) == .Int) @intToPtr(mach_port_type_t, 1) else @as(mach_port_type_t, 1) << right + if (@typeId(@TypeOf(16)) == .Pointer) @ptrCast(mach_port_right_t, 16) else if (@typeId(@TypeOf(16)) == .Int) @intToPtr(mach_port_right_t, 16) else @as(mach_port_right_t, 16)) else if (@typeId(@TypeOf(if (@typeId(@TypeOf(1)) == .Pointer) @ptrCast(mach_port_type_t, 1) else if (@typeId(@TypeOf(1)) == .Int) @intToPtr(mach_port_type_t, 1) else @as(mach_port_type_t, 1) << right + if (@typeId(@TypeOf(16)) == .Pointer) @ptrCast(mach_port_right_t, 16) else if (@typeId(@TypeOf(16)) == .Int) @intToPtr(mach_port_right_t, 16) else @as(mach_port_right_t, 16))) == .Int) @intToPtr(mach_port_type_t, if (@typeId(@TypeOf(1)) == .Pointer) @ptrCast(mach_port_type_t, 1) else if (@typeId(@TypeOf(1)) == .Int) @intToPtr(mach_port_type_t, 1) else @as(mach_port_type_t, 1) << right + if (@typeId(@TypeOf(16)) == .Pointer) @ptrCast(mach_port_right_t, 16) else if (@typeId(@TypeOf(16)) == .Int) @intToPtr(mach_port_right_t, 16) else @as(mach_port_right_t, 16)) else @as(mach_port_type_t, if (@typeId(@TypeOf(1)) == .Pointer) @ptrCast(mach_port_type_t, 1) else if (@typeId(@TypeOf(1)) == .Int) @intToPtr(mach_port_type_t, 1) else @as(mach_port_type_t, 1) << right + if (@typeId(@TypeOf(16)) == .Pointer) @ptrCast(mach_port_right_t, 16) else if (@typeId(@TypeOf(16)) == .Int) @intToPtr(mach_port_right_t, 16) else @as(mach_port_right_t, 16));
}
pub const ENOMEM = 12;
pub const kAudioUnitConfigurationInfo_SupportedChannelLayoutTags = "SupportedChannelLayoutTags";
pub const _SC_XOPEN_LEGACY = 110;
pub inline fn DISPATCH_EXPECT(x: var, v: var) @TypeOf(__builtin_expect(x, v)) {
    return __builtin_expect(x, v);
}
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const SIGSEGV = 11;
pub const PRIuFAST8 = PRIu8;
pub const kCFCoreFoundationVersionNumber10_3_2 = 299.00;
pub const KAUTH_EXTLOOKUP_VALID_PWNAM = 1 << 15;
pub const ETIMEDOUT = 60;
pub const __WATCHOS_5_2 = 50200;
pub const RENAME_EXCL = 0x00000004;
pub const DISPATCH_NONNULL_ALL = __attribute__(__nonnull__);
pub const INT16_MAX = 32767;
pub const PRIuLEAST8 = PRIu8;
pub const MACH_MSG_IPC_SPACE = 0x00002000;
pub const MACH_RCV_TRAILER_SENDER = 2;
pub const _CTYPE_SW1 = @as(c_long, 0x40000000);
pub inline fn dispatch_assert_queue_debug(q: var) @TypeOf(dispatch_assert_queue(q)) {
    return dispatch_assert_queue(q);
}
pub const OS_OBJECT_USE_OBJC_RETAIN_RELEASE = 0;
pub const SCNiFAST16 = SCNi16;
pub const __restrict = restrict;
pub const ILL_COPROC = 7;
pub const MB_LEN_MAX = 6;
pub const ETXTBSY = 26;
pub const INT64_MIN = -INT64_MAX - 1;
pub const FPE_FLTDIV = 1;
pub const FP_STATE_BYTES = 512;
pub const PLOSS = 6;
pub const BADSIG = SIG_ERR;
pub const KAUTH_EXTLOOKUP_VALID_UID = 1 << 0;
pub const F_GETPATH_NOFIRMLINK = 102;
pub inline fn minor(x: var) @TypeOf(if (@typeId(@TypeOf(x & 0xffffff)) == .Pointer) @ptrCast(int32_t, x & 0xffffff) else if (@typeId(@TypeOf(x & 0xffffff)) == .Int) @intToPtr(int32_t, x & 0xffffff) else @as(int32_t, x & 0xffffff)) {
    return if (@typeId(@TypeOf(x & 0xffffff)) == .Pointer) @ptrCast(int32_t, x & 0xffffff) else if (@typeId(@TypeOf(x & 0xffffff)) == .Int) @intToPtr(int32_t, x & 0xffffff) else @as(int32_t, x & 0xffffff);
}
pub const _SC_TRACE_EVENT_FILTER = 98;
pub const kAudioEndPointDeviceMasterEndPointKey = "master";
pub const __IPHONE_12_0 = 120000;
pub const F_SETSIZE = 43;
pub const _POSIX_AIO_LISTIO_MAX = 2;
pub const MACH_MSG_OOL_DESCRIPTOR = 1;
pub const __WATCHOS_5_0 = 50000;
pub const __GNUC_VA_LIST = 1;
pub const kAudioAggregateDeviceNameKey = "name";
pub const _SC_ARG_MAX = 1;
pub const _SC_LOGIN_NAME_MAX = 73;
pub const kAudioSettings_ValueType = "value type";
pub const __SIZEOF_POINTER__ = 8;
pub const _SC_GETGR_R_SIZE_MAX = 70;
pub const S_IWGRP = 0o0000020;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 33;
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const ILL_ILLOPN = 4;
pub const BC_STRING_MAX = 1000;
pub const _POSIX_PIPE_BUF = 512;
pub const __UINT_FAST64_FMTX__ = "llX";
pub const WINT_MAX = INT32_MAX;
pub const DISPATCH_NONNULL2 = __attribute__(__nonnull__(2));
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_9_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const SEEK_CUR = 1;
pub const mach_msg_kind_t = mach_port_seqno_t;
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub inline fn __swift_unavailable_on(osx_msg: var, ios_msg: var) @TypeOf(__swift_unavailable(osx_msg)) {
    return __swift_unavailable(osx_msg);
}
pub const KAUTH_VNODE_LIST_DIRECTORY = KAUTH_VNODE_READ_DATA;
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const FLT_MIN_EXP = __FLT_MIN_EXP__;
pub const kAudioAggregateDeviceClockDeviceKey = "clock";
pub const F_CHKCLEAN = 41;
pub const __DARWIN_ACL_WRITE_DATA = 1 << 2;
pub inline fn BAD_MACH_TIMESPEC(t: var) @TypeOf(if (@typeId(@TypeOf(NSEC_PER_SEC)) == .Pointer) @ptrCast(t.*.tv_nsec < 0 or t.*.tv_nsec >= long, NSEC_PER_SEC) else if (@typeId(@TypeOf(NSEC_PER_SEC)) == .Int) @intToPtr(t.*.tv_nsec < 0 or t.*.tv_nsec >= long, NSEC_PER_SEC) else @as(t.*.tv_nsec < 0 or t.*.tv_nsec >= long, NSEC_PER_SEC)) {
    return if (@typeId(@TypeOf(NSEC_PER_SEC)) == .Pointer) @ptrCast(t.*.tv_nsec < 0 or t.*.tv_nsec >= long, NSEC_PER_SEC) else if (@typeId(@TypeOf(NSEC_PER_SEC)) == .Int) @intToPtr(t.*.tv_nsec < 0 or t.*.tv_nsec >= long, NSEC_PER_SEC) else @as(t.*.tv_nsec < 0 or t.*.tv_nsec >= long, NSEC_PER_SEC);
}
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const IOPOL_THROTTLE = 3;
pub const _XOPEN_UNIX = 1;
pub const SCNxFAST16 = SCNx16;
pub const kAFInfoDictionary_EncodingApplication = "encoding application";
pub const __ILP32_OFF32 = -1;
pub const API_DEPRECATED_WITH_REPLACEMENT_END = _Pragma("clang attribute pop");
pub const PRIoLEAST64 = PRIo64;
pub const INT64_MAX = @as(c_longlong, 9223372036854775807);
pub const __MAC_10_11 = 101100;
pub const SV_SIGINFO = SA_SIGINFO;
pub const __GNUC_PATCHLEVEL__ = 1;
pub inline fn __IOS_EXTENSION_UNAVAILABLE(_msg: var) @TypeOf(__OS_AVAILABILITY_MSG(ios_app_extension, unavailable, _msg)) {
    return __OS_AVAILABILITY_MSG(ios_app_extension, unavailable, _msg);
}
pub const KAUTH_EXTLOOKUP_RESULT = 1 << 0;
pub const MACH_PORT_SRIGHTS_NONE = 0;
pub const __DARWIN_NO_LONG_LONG = 0;
pub const S_ISTXT = S_ISVTX;
pub const FLT_MAX_10_EXP = __FLT_MAX_10_EXP__;
pub const O_FSYNC = O_SYNC;
pub const POLL_OUT = 2;
pub const SCNdFAST8 = SCNd8;
pub const TARGET_CPU_68K = 0;
pub const _SC_XOPEN_ENH_I18N = 109;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = 2;
pub const UCHAR_MAX = 255;
pub const LONG_MIN = -@as(c_long, 0x7fffffffffffffff) - 1;
pub const __MAC_10_0 = 1000;
pub const KERN_EXCEPTION_PROTECTED = 32;
pub const NL_MSGMAX = 32767;
pub const __INT_FAST16_TYPE__ = short;
pub inline fn OS_EXPECT(x: var, v: var) @TypeOf(__builtin_expect(x, v)) {
    return __builtin_expect(x, v);
}
pub const _SC_2_FORT_RUN = 22;
pub inline fn CF_BRIDGED_MUTABLE_TYPE(T: var) @TypeOf(__attribute__(objc_bridge_mutable(T))) {
    return __attribute__(objc_bridge_mutable(T));
}
pub const M_PI = 3.14159265358979323846264338327950288;
pub const _USE_FORTIFY_LEVEL = 2;
pub const LONG_LONG_MIN = -__LONG_LONG_MAX__ - @as(c_longlong, 1);
pub const FLT_EVAL_METHOD = __FLT_EVAL_METHOD__;
pub const __TVOS_11_2 = 110200;
pub const ENOATTR = 93;
pub inline fn OSSwapHostToBigInt16(x: var) @TypeOf(OSSwapInt16(x)) {
    return OSSwapInt16(x);
}
pub const DISPATCH_MEMORYPRESSURE_WARN = 0x02;
pub const MAC_OS_X_VERSION_10_13_4 = 101304;
pub const O_DP_GETRAWENCRYPTED = 0x0001;
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = 2;
pub const KAUTH_EXTLOOKUP_ISMEMBER = 1 << 14;
pub const KERN_INVALID_PROCESSOR_SET = 26;
pub const __MAC_10_13_1 = 101301;
pub const F_GETFL = 3;
pub const kAUPresetMASDataKey = "masdata";
pub const ERPCMISMATCH = 73;
pub const O_SYMLINK = 0x200000;
pub const UINT_LEAST64_MAX = UINT64_MAX;
pub const CF_RETURNS_NOT_RETAINED = __attribute__(cf_returns_not_retained);
pub const __DARWIN_ACL_SEARCH = __DARWIN_ACL_EXECUTE;
pub const DBL_HAS_SUBNORM = 1;
pub const KAUTH_ACE_GENERIC_EXECUTE = 1 << 22;
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _SC_TRACE_LOG = 100;
pub const _SC_TTY_NAME_MAX = 101;
pub const @"true" = 1;
pub const _POSIX_ASYNCHRONOUS_IO = -1;
pub inline fn OSReadLittleInt(x: var, y: var) @TypeOf(OSReadLittleInt32(x, y)) {
    return OSReadLittleInt32(x, y);
}
pub inline fn FD_CLR(n: var, p: var) @TypeOf(__DARWIN_FD_CLR(n, p)) {
    return __DARWIN_FD_CLR(n, p);
}
pub const _SC_V6_ILP32_OFF32 = 103;
pub const kAFInfoDictionary_Comments = "comments";
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_4_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS = 21;
pub const ENOEXEC = 8;
pub const __WATCHOS_3_2 = 30200;
pub inline fn i386_trunc_page(x: var) @TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(pmap_paddr_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(pmap_paddr_t, x) else @as(pmap_paddr_t, x) & ~I386_PGBYTES - 1) {
    return if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(pmap_paddr_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(pmap_paddr_t, x) else @as(pmap_paddr_t, x) & ~I386_PGBYTES - 1;
}
pub const __IPHONE_6_0 = 60000;
pub const _XBS5_ILP32_OFF32 = __ILP32_OFF32;
pub const KAUTH_EXTLOOKUP_VALID_GID = 1 << 3;
pub const ENFILE = 23;
pub const MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE = 0x40;
pub const _CTYPE_SW0 = @as(c_long, 0x20000000);
pub const __RDRND__ = 1;
pub const KAUTH_EXTLOOKUP_WANT_GSID = 1 << 11;
pub const __seg_fs = __attribute__(address_space(257));
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _POSIX_CHILD_MAX = 25;
pub const KERN_INVALID_LEDGER = 33;
pub const SIGUSR1 = 30;
pub const __WATCHOS_3_1_1 = 30101;
pub const _WPERM_OK = 1 << 20;
pub inline fn __API_DEPRECATED_MSG2(msg: var, x: var) @TypeOf(__API_D(msg, x)) {
    return __API_D(msg, x);
}
pub const DISPATCH_ASSUME_NONNULL_END = _Pragma("clang assume_nonnull end");
pub const UINT64_MAX = @as(c_ulonglong, 18446744073709551615);
pub const __SIG_ATOMIC_WIDTH__ = 32;
pub const F_SETLK = 8;
pub const __MAC_10_8 = 1080;
pub const _PC_REC_INCR_XFER_SIZE = 20;
pub inline fn OSSwapLittleToHostInt32(x: var) @TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint32_t, x) else @as(uint32_t, x)) {
    return if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint32_t, x) else @as(uint32_t, x);
}
pub const I386_PGSHIFT = 12;
pub inline fn CF_EXTENSION_UNAVAILABLE_IOS(_msg: var) @TypeOf(__IOS_EXTENSION_UNAVAILABLE(_msg)) {
    return __IOS_EXTENSION_UNAVAILABLE(_msg);
}
pub const kCFCoreFoundationVersionNumber10_7_4 = 635.21;
pub const KAUTH_ACE_DENY = 2;
pub const __IPHONE_12_1 = 120100;
pub const _QUAD_LOWWORD = 0;
pub const __SSE2_MATH__ = 1;
pub const KAUTH_VNODE_EXECUTE = @as(c_uint, 1) << 3;
pub const __POINTER_WIDTH__ = 64;
pub const _POSIX2_BC_SCALE_MAX = 99;
pub const _SC_2_PBS_CHECKPOINT = 61;
pub const kAudioEndPointDeviceNameKey = "name";
pub const MACH_RCV_TRAILER_NULL = 0;
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_COMPAT_VERSION);
pub const kCFCoreFoundationVersionNumber10_4_8 = 368.27;
pub const __FXSR__ = 1;
pub const KAUTH_FILESEC_DEFER_INHERIT = KAUTH_ACL_DEFER_INHERIT;
pub const S_IFREG = 0o0100000;
pub inline fn __alloca(size: var) @TypeOf(__builtin_alloca(size)) {
    return __builtin_alloca(size);
}
pub const ru_first = ru_ixrss;
pub const __DARWIN_ACL_ENTRY_LIMIT_INHERIT = 1 << 7;
pub const F_WRLCK = 3;
pub const DISPATCH_APPLY_AUTO = if (@typeId(@TypeOf(0)) == .Pointer) @ptrCast(if (@typeId(@TypeOf(_Nonnull)) == .Pointer) @ptrCast(dispatch_queue_t, _Nonnull) else if (@typeId(@TypeOf(_Nonnull)) == .Int) @intToPtr(dispatch_queue_t, _Nonnull) else @as(dispatch_queue_t, _Nonnull), 0) else if (@typeId(@TypeOf(0)) == .Int) @intToPtr(if (@typeId(@TypeOf(_Nonnull)) == .Pointer) @ptrCast(dispatch_queue_t, _Nonnull) else if (@typeId(@TypeOf(_Nonnull)) == .Int) @intToPtr(dispatch_queue_t, _Nonnull) else @as(dispatch_queue_t, _Nonnull), 0) else @as(if (@typeId(@TypeOf(_Nonnull)) == .Pointer) @ptrCast(dispatch_queue_t, _Nonnull) else if (@typeId(@TypeOf(_Nonnull)) == .Int) @intToPtr(dispatch_queue_t, _Nonnull) else @as(dispatch_queue_t, _Nonnull), 0);
pub const PRId16 = "hd";
pub const MACH_PORT_STATUS_FLAG_IMP_DONATION = 0x08;
pub const kCFStringEncodingInvalidId = @as(c_uint, 0xffffffff);
pub const F_PATHPKG_CHECK = 52;
pub const __DARWIN_ACL_WRITE_EXTATTRIBUTES = 1 << 10;
pub const _SC_PHYS_PAGES = 200;
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const API_AVAILABLE_END = _Pragma("clang attribute pop");
pub const ENETUNREACH = 51;
pub const _XOPEN_SHM = 1;
pub const _SC_REALTIME_SIGNALS = 36;
pub const __DARWIN_WEOF = __darwin_wint_t - 1;
pub const __PRI_64_LENGTH_MODIFIER__ = "ll";
pub const EMULTIHOP = 95;
pub const LC_TIME = 5;
pub const kAFInfoDictionary_TrackNumber = "track number";
pub const EAUTH = 80;
pub const OS_OBJECT_USE_OBJC = 0;
pub const TARGET_RT_64_BIT = 1;
pub const MACH_MSG_SUCCESS = 0x00000000;
pub const MAC_OS_X_VERSION_10_12 = 101200;
pub const MACH_PORT_TYPE_NONE = if (@typeId(@TypeOf(@as(c_long, 0))) == .Pointer) @ptrCast(mach_port_type_t, @as(c_long, 0)) else if (@typeId(@TypeOf(@as(c_long, 0))) == .Int) @intToPtr(mach_port_type_t, @as(c_long, 0)) else @as(mach_port_type_t, @as(c_long, 0));
pub const kAudioUnitConfigurationInfo_IconURL = "IconURL";
pub const __weak = __attribute__(objc_gc(weak));
pub inline fn FOUR_CHAR_CODE(x: var) @TypeOf(x) {
    return x;
}
pub const __ATOMIC_CONSUME = 1;
pub const __INT_FAST16_FMTi__ = "hi";
pub const EADDRINUSE = 48;
pub const _SC_CHILD_MAX = 2;
pub const ATTRIBUTE_PACKED = __attribute__(__packed__);
pub const __INT8_MAX__ = 127;
pub const kAFInfoDictionary_RecordedDate = "recorded date";
pub const _POSIX_V6_LP64_OFF64 = __LP64_OFF64;
pub inline fn KAUTH_NTSID_SIZE(_s: var) @TypeOf(KAUTH_NTSID_HDRSIZE + _s.*.sid_authcount * sizeof(u_int32_t)) {
    return KAUTH_NTSID_HDRSIZE + _s.*.sid_authcount * sizeof(u_int32_t);
}
pub const CF_ASSUME_NONNULL_END = _Pragma("clang assume_nonnull end");
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_COMPAT_VERSION);
pub inline fn FD_COPY(f: var, t: var) @TypeOf(__DARWIN_FD_COPY(f, t)) {
    return __DARWIN_FD_COPY(f, t);
}
pub const kMusicTimeStamp_EndOfTrack = DBL_MAX;
pub const __UINT32_FMTo__ = "o";
pub const PIPE_BUF = 512;
pub const __GXX_ABI_VERSION = 1002;
pub const IOPOL_ATIME_UPDATES_OFF = 1;
pub const KERN_LOCK_OWNED = 40;
pub const __IPHONE_12_2 = 120200;
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub inline fn OSSwapHostToBigInt(x: var) @TypeOf(OSSwapHostToBigInt32(x)) {
    return OSSwapHostToBigInt32(x);
}
pub const KAUTH_EXTLOOKUP_WORKER = 1 << 1;
pub const KERN_FAILURE = 5;
pub const CLOCK_REALTIME = _CLOCK_REALTIME;
pub const __clang_major__ = 9;
pub const ECONNRESET = 54;
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_11_2(x: var) @TypeOf(x) {
    return x;
}
pub inline fn i386_ptob(x: var) @TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(pmap_paddr_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(pmap_paddr_t, x) else @as(pmap_paddr_t, x) << I386_PGSHIFT) {
    return if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(pmap_paddr_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(pmap_paddr_t, x) else @as(pmap_paddr_t, x) << I386_PGSHIFT;
}
pub const __AVAILABILITY_INTERNAL__IPHONE_NA_DEP__IPHONE_NA = __attribute__(availability(ios, unavailable));
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const LDBL_MIN_10_EXP = __LDBL_MIN_10_EXP__;
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_10_2(x: var) @TypeOf(x) {
    return x;
}
pub const __PTHREAD_COND_SIZE__ = 40;
pub const ENOTTY = 25;
pub const F_TLOCK = 2;
pub const kCFCoreFoundationVersionNumber10_5_1 = 476.00;
pub const SCNo32 = "o";
pub const DISPATCH_ALWAYS_INLINE = __attribute__(__always_inline__);
pub const __INT_FAST8_FMTi__ = "hhi";
pub const MACH_MSGH_BITS_USED = @as(c_uint, 0xb01f1f1f);
pub const __XSAVES__ = 1;
pub const __MAC_10_10 = 101000;
pub inline fn __API_UNAVAILABLE_BEGIN1(a: var) @TypeOf(__API_U_BEGIN(a)) {
    return __API_U_BEGIN(a);
}
pub const MACH_MSG_MASK = 0x00003e00;
pub const RLIMIT_DATA = 2;
pub const AT_EACCESS = 0x0010;
pub const MACH_MSG_GUARD_FLAGS_UNGUARDED_ON_SEND = 0x0002;
pub const ULONG_LONG_MAX = __LONG_LONG_MAX__ * @as(c_ulonglong, 2) + @as(c_ulonglong, 1);
pub const SCNu16 = "hu";
pub const __llvm__ = 1;
pub const TARGET_IPHONE_SIMULATOR = TARGET_OS_SIMULATOR;
pub const TARGET_API_MAC_OS8 = 0;
pub const F_UNLCK = 2;
pub const DISPATCH_VNODE_LINK = 0x10;
pub const kAUPresetPartKey = "part";
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 9;
pub const KAUTH_FILESEC_MAGIC = 0x012cc16d;
pub const __DARWIN_CTYPE_inline = __header_inline;
pub const __LDBL_MAX_EXP__ = 16384;
pub const PTHREAD_STACK_MIN = 8192;
pub const DISPATCH_NONNULL1 = __attribute__(__nonnull__(1));
pub const MACH_RCV_INVALID_TYPE = 0x1000400d;
pub const _CTYPE_T = @as(c_long, 0x00100000);
pub const _POSIX_THREAD_CPUTIME = -1;
pub const HUGE = MAXFLOAT;
pub const __DARWIN_WCHAR_MIN = -0x7fffffff - 1;
pub const __IPHONE_11_1 = 110100;
pub inline fn OSWriteBigInt32(base: var, byteOffset: var, data: var) @TypeOf(OSWriteSwapInt32(base, byteOffset, data)) {
    return OSWriteSwapInt32(base, byteOffset, data);
}
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __INTPTR_WIDTH__ = 64;
pub const __XSAVE__ = 1;
pub const __WATCHOS_PROHIBITED = __OS_AVAILABILITY(watchos, unavailable);
pub inline fn MACH_PORT_INDEX(name: var) @TypeOf(name >> 8) {
    return name >> 8;
}
pub const TARGET_OS_IOS = 0;
pub const TARGET_CPU_X86_64 = 1;
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const KERN_TERMINATED = 37;
pub inline fn OSWriteLittleInt16(base: var, byteOffset: var, data: var) @TypeOf(_OSWriteInt16(base, byteOffset, data)) {
    return _OSWriteInt16(base, byteOffset, data);
}
pub const SA_NOCLDWAIT = 0x0020;
pub const FILESEC_GUID = FILESEC_UUID;
pub const PRIXLEAST8 = PRIX8;
pub const MACH_SEND_INVALID_REPLY = 0x10000009;
pub const __FLT_HAS_QUIET_NAN__ = 1;
pub const __corei7__ = 1;
pub const RLIMIT_CPU = 0;
pub const _bool = _Bool;
pub const NAN = __builtin_nanf("0x7fc00000");
pub const _SC_MESSAGE_PASSING = 33;
pub const kAudioEndPointOutputChannelsKey = "channels-out";
pub const __COREFOUNDATION_CFARRAY__ = 1;
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const EDESTADDRREQ = 39;
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __LDBL_MANT_DIG__ = 64;
pub const kAudioAggregateDeviceIsStackedKey = "stacked";
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_3_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __IPHONE_8_0 = 80000;
pub const __TVOS_9_1 = 90100;
pub inline fn OSSwapLittleToHostInt64(x: var) @TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint64_t, x) else @as(uint64_t, x)) {
    return if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint64_t, x) else @as(uint64_t, x);
}
pub inline fn feof_unlocked(p: var) @TypeOf(__sfeof(p)) {
    return __sfeof(p);
}
pub const KAUTH_EXTLOOKUP_VALID_SUPGRPS = 1 << 19;
pub const SV_NOCLDSTOP = SA_NOCLDSTOP;
pub const _SC_JOB_CONTROL = 6;
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const OS_NONNULL7 = __attribute__(__nonnull__(7));
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DISPATCH_NONNULL7 = __attribute__(__nonnull__(7));
pub const kCFCoreFoundationVersionNumber10_10_2 = 1152;
pub const __TVOS_11_3 = 110300;
pub const kAFInfoDictionary_ISRC = "ISRC";
pub const O_NOCTTY = 0x20000;
pub const _WRITE_OK = 1 << 10;
pub const SCNdFAST64 = SCNd64;
pub const _SC_TYPED_MEMORY_OBJECTS = 102;
pub const MAC_OS_X_VERSION_10_12_1 = 101201;
pub const __UINT64_FMTX__ = "llX";
pub const SIGXCPU = 24;
pub inline fn CALLBACK_API_STDCALL(_type: var, _name: var) @TypeOf(_type(_name.*)) {
    return _type(_name.*);
}
pub const kCFCoreFoundationVersionNumber10_3_6 = 299.32;
pub inline fn __API_UNAVAILABLE1(x: var) @TypeOf(__API_U(x)) {
    return __API_U(x);
}
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const F_GETOWN = 5;
pub const __LDBL_HAS_DENORM__ = 1;
pub const LDBL_MAX_EXP = __LDBL_MAX_EXP__;
pub const __FMA__ = 1;
pub const ACCESSOR_CALLS_ARE_FUNCTIONS = 1;
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT32_MAX__ = @as(c_uint, 4294967295);
pub const KAUTH_EXTLOOKUP_VALID_USID = 1 << 2;
pub const SIGHUP = 1;
pub const _SC_OPEN_MAX = 5;
pub const VM_DYLD64 = if (@typeId(@TypeOf(@as(c_ulonglong, 0x00007FFF5FC00000))) == .Pointer) @ptrCast(user_addr_t, @as(c_ulonglong, 0x00007FFF5FC00000)) else if (@typeId(@TypeOf(@as(c_ulonglong, 0x00007FFF5FC00000))) == .Int) @intToPtr(user_addr_t, @as(c_ulonglong, 0x00007FFF5FC00000)) else @as(user_addr_t, @as(c_ulonglong, 0x00007FFF5FC00000));
pub const EMLINK = 31;
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const kCFCoreFoundationVersionNumber10_7_3 = 635.19;
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const __UINT8_FMTu__ = "hhu";
pub const __INVPCID__ = 1;
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __UINT8_FMTX__ = "hhX";
pub const OS_WEAK_IMPORT = __attribute__(__weak_import__);
pub const _CTYPE_D = @as(c_long, 0x00000400);
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;
pub const INT_FAST32_MAX = INT32_MAX;
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS = 4;
pub const EIDRM = 90;
pub const _POSIX2_C_DEV = @as(c_long, 200112);
pub const MACH_PORT_QLIMIT_MIN = MACH_PORT_QLIMIT_ZERO;
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _POSIX2_EXPR_NEST_MAX = 32;
pub const __COREFOUNDATION_COREFOUNDATION__ = 1;
pub inline fn __CF_NAMED_ERROR_ENUM(_domain: var, _name: var) @TypeOf(__CF_NAMED_ENUM(CFIndex, _name)) {
    return __CF_NAMED_ENUM(CFIndex, _name);
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_4(x: var) @TypeOf(x) {
    return x;
}
pub const AT_REALDEV = 0x0200;
pub const kCFCoreFoundationVersionNumber10_4_9 = 368.28;
pub const F_DUPFD = 0;
pub const __INT_LEAST64_FMTd__ = "lld";
pub const __SSSE3__ = 1;
pub const __MAC_10_10_3 = 101003;
pub const __IPHONE_13_0 = 130000;
pub const SIGKILL = 9;
pub const MACH_PORT_TYPE_PORT_SET = MACH_PORT_TYPE(MACH_PORT_RIGHT_PORT_SET);
pub const __MAC_10_14 = 101400;
pub const PRIdFAST16 = PRId16;
pub const MACH_RCV_LARGE_IDENTITY = 0x00000008;
pub inline fn i386_btop(x: var) @TypeOf(if (@typeId(@TypeOf(x >> I386_PGSHIFT)) == .Pointer) @ptrCast(ppnum_t, x >> I386_PGSHIFT) else if (@typeId(@TypeOf(x >> I386_PGSHIFT)) == .Int) @intToPtr(ppnum_t, x >> I386_PGSHIFT) else @as(ppnum_t, x >> I386_PGSHIFT)) {
    return if (@typeId(@TypeOf(x >> I386_PGSHIFT)) == .Pointer) @ptrCast(ppnum_t, x >> I386_PGSHIFT) else if (@typeId(@TypeOf(x >> I386_PGSHIFT)) == .Int) @intToPtr(ppnum_t, x >> I386_PGSHIFT) else @as(ppnum_t, x >> I386_PGSHIFT);
}
pub const __TVOS_12_3 = 120300;
pub inline fn fileno_unlocked(p: var) @TypeOf(__sfileno(p)) {
    return __sfileno(p);
}
pub const SCHAR_MAX = 127;
pub const __clang_patchlevel__ = 1;
pub inline fn OSSwapHostToBigInt64(x: var) @TypeOf(OSSwapInt64(x)) {
    return OSSwapInt64(x);
}
pub const FP_CHOP = 3;
pub const KERN_INVALID_TASK = 16;
pub const _SC_MQ_OPEN_MAX = 46;
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _PC_REC_XFER_ALIGN = 23;
pub const INT_FAST32_MIN = INT32_MIN;
pub const __LDBL_DIG__ = 18;
pub const kCFCoreFoundationVersionNumber10_2_4 = 263.30;
pub const CLD_CONTINUED = 6;
pub const _SC_PAGESIZE = 29;
pub const QUAD_MIN = LLONG_MIN;
pub const _PC_XATTR_SIZE_BITS = 26;
pub const __MMX__ = 1;
pub const MACH_MSG_TYPE_DISPOSE_RECEIVE = 24;
pub const SIGINT = 2;
pub const __SIZEOF_WINT_T__ = 4;
pub const KAUTH_NTSID_HDRSIZE = 8;
pub const __DARWIN_C_LEVEL = __DARWIN_C_FULL;
pub const FPE_FLTSUB = 6;
pub const LONG_MAX = @as(c_long, 0x7fffffffffffffff);
pub const KAUTH_VNODE_TAKE_OWNERSHIP = @as(c_uint, 1) << 13;
pub const _SC_RTSIG_MAX = 48;
pub const F_GETPROTECTIONCLASS = 63;
pub const WEAK_IMPORT_ATTRIBUTE = __attribute__(weak_import);
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON = 2;
pub const F_TRIM_ACTIVE_FILE = 100;
pub const EINTR = 4;
pub const KAUTH_CLEAR_CACHES = 1 << 5;
pub const PRIoLEAST16 = PRIo16;
pub const OVERFLOW = 3;
pub const _POSIX_SHELL = @as(c_long, 200112);
pub const __corei7 = 1;
pub const __LDBL_HAS_QUIET_NAN__ = 1;
pub const SIG_SETMASK = 3;
pub const __UINT_FAST32_FMTu__ = "u";
pub const WCHAR_MIN = -WCHAR_MAX - 1;
pub const w_termsig = w_T.w_Termsig;
pub const MACH_PORT_STATUS_FLAG_REVIVE = 0x10;
pub const MPO_INSERT_SEND_RIGHT = 0x10;
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const MACH_RCV_IN_PROGRESS = 0x10004001;
pub const UINT_FAST32_MAX = UINT32_MAX;
pub const DISPATCH_APPLY_QUEUE_ARG_NULLABILITY = _Nullable;
pub const kAudioSubDeviceExtraInputLatencyKey = "latency-in";
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_6_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __COREFOUNDATION_CFURLENUMERATOR__ = 1;
pub const kAudioSubDeviceInputChannelsKey = "channels-in";
pub const _SC_MQ_PRIO_MAX = 75;
pub const SCNuLEAST64 = SCNu64;
pub inline fn fwopen(cookie: var, @"fn": var) @TypeOf(funopen(cookie, 0, @"fn", 0, 0)) {
    return funopen(cookie, 0, @"fn", 0, 0);
}
pub const __SERR = 0x0040;
pub const KERN_NOT_DEPRESSED = 36;
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const INT8_MAX = 127;
pub const __SNPT = 0x0800;
pub inline fn FD_ZERO(p: var) @TypeOf(__DARWIN_FD_ZERO(p)) {
    return __DARWIN_FD_ZERO(p);
}
pub const SEEK_SET = 0;
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DISPATCH_PROC_SIGNAL = 0x08000000;
pub const TARGET_RT_BIG_ENDIAN = 0;
pub inline fn OSReadBigInt32(base: var, byteOffset: var) @TypeOf(OSReadSwapInt32(base, byteOffset)) {
    return OSReadSwapInt32(base, byteOffset);
}
pub const __UINT_LEAST32_MAX__ = @as(c_uint, 4294967295);
pub inline fn MACH_MSG_TYPE_PORT_ANY_SEND(x: var) @TypeOf(x >= MACH_MSG_TYPE_MOVE_SEND and x <= MACH_MSG_TYPE_MAKE_SEND_ONCE) {
    return x >= MACH_MSG_TYPE_MOVE_SEND and x <= MACH_MSG_TYPE_MAKE_SEND_ONCE;
}
pub const PRIuLEAST32 = PRIu32;
pub const _POSIX_SEM_NSEMS_MAX = 256;
pub const OS_NONNULL14 = __attribute__(__nonnull__(14));
pub const S_IFSOCK = 0o0140000;
pub const FALSE = 0;
pub const PRIuPTR = "lu";
pub const __clang_version__ = "9.0.1 (https://github.com/llvm/llvm-project.git 432bf48c08da748e2542cf40e3ab9aee53a744b0)";
pub inline fn __API_DEPRECATED_REP2(rep: var, x: var) @TypeOf(__API_R(rep, x)) {
    return __API_R(rep, x);
}
pub const SCNxFAST64 = SCNx64;
pub const SA_NOCLDSTOP = 0x0008;
pub const kCFCoreFoundationVersionNumber10_5_2 = 476.10;
pub const __DISPATCH_ENUM_ATTR_CLOSED = __attribute__(__enum_extensibility__(closed));
pub const _SC_MEMLOCK_RANGE = 31;
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_5(x: var) @TypeOf(x) {
    return x;
}
pub const OS_NONNULL1 = __attribute__(__nonnull__(1));
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __DARWIN_FD_SETSIZE = 1024;
pub const EBADEXEC = 85;
pub const __API_APPLY_TO = any(record, @"enum", enum_constant, function, objc_method, objc_category, objc_protocol, objc_interface, objc_property, type_alias, variable, field);
pub const KERN_RPC_CONTINUE_ORPHAN = 45;
pub const __header_inline = @"inline";
pub const __INT_LEAST32_FMTi__ = "i";
pub const kCFCoreFoundationVersionNumber10_9_2 = 855.14;
pub const S_IRWXG = 0o0000070;
pub const _POSIX_MEMORY_PROTECTION = @as(c_long, 200112);
pub const KERN_INVALID_HOST = 22;
pub const __WCHAR_WIDTH__ = 32;
pub const TLOSS = 5;
pub const POLL_MSG = 3;
pub const SCNu32 = "u";
pub const AUDIO_TOOLBOX_VERSION = 1060;
pub const ULLONG_MAX = @as(c_ulonglong, 0xffffffffffffffff);
pub const kAudioEndPointInputChannelsKey = "channels-in";
pub const EBADF = 9;
pub const EOPNOTSUPP = 102;
pub const LOCK_EX = 0x02;
pub const __CFXMLParser_DEPRECATION_MSG = "CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead";
pub const TARGET_CPU_MIPS = 0;
pub const FOPEN_MAX = 20;
pub const ACCESSX_MAX_TABLESIZE = 16 * 1024;
pub const _SC_2_CHAR_TERM = 20;
pub const MACH_PORT_RIGHT_NUMBER = if (@typeId(@TypeOf(6)) == .Pointer) @ptrCast(mach_port_right_t, 6) else if (@typeId(@TypeOf(6)) == .Int) @intToPtr(mach_port_right_t, 6) else @as(mach_port_right_t, 6);
pub const INT32_MAX = 2147483647;
pub const INT16_MIN = -32768;
pub const __WATCHOS_3_1 = 30100;
pub const AT_SYMLINK_FOLLOW = 0x0040;
pub const __STDC__ = 1;
pub const ETOOMANYREFS = 59;
pub const ULONG_MAX = @as(c_ulong, 0xffffffffffffffff);
pub const FP_SUPERNORMAL = 6;
pub const kAUPresetRenderQualityKey = "render-quality";
pub const KAUTH_VNODE_WRITE_SECURITY = @as(c_uint, 1) << 12;
pub const S_IFBLK = 0o0060000;
pub inline fn MACH_PORT_GEN(name: var) @TypeOf(name & 0xff << 24) {
    return name & 0xff << 24;
}
pub inline fn MACH_MSGH_BITS_SET_PORTS(remote: var, local: var, voucher: var) @TypeOf(remote & MACH_MSGH_BITS_REMOTE_MASK | local << 8 & MACH_MSGH_BITS_LOCAL_MASK | voucher << 16 & MACH_MSGH_BITS_VOUCHER_MASK) {
    return remote & MACH_MSGH_BITS_REMOTE_MASK | local << 8 & MACH_MSGH_BITS_LOCAL_MASK | voucher << 16 & MACH_MSGH_BITS_VOUCHER_MASK;
}
pub inline fn OSWriteLittleInt(x: var, y: var, z: var) @TypeOf(OSWriteLittleInt32(x, y, z)) {
    return OSWriteLittleInt32(x, y, z);
}
pub const MAC_OS_X_VERSION_10_2 = 1020;
pub const MACH_RCV_LARGE = 0x00000004;
pub const DBL_TRUE_MIN = __DBL_DENORM_MIN__;
pub const kAudioSubDeviceUIDKey = "uid";
pub const MACH_MSGH_BITS_IMPHOLDASRT = @as(c_uint, 0x10000000);
pub const __INTPTR_MAX__ = @as(c_long, 9223372036854775807);
pub const __INTMAX_WIDTH__ = 64;
pub const QUAD_MAX = LLONG_MAX;
pub const KAUTH_GID_NONE = if (@typeId(@TypeOf(0 - 100)) == .Pointer) @ptrCast(~gid_t, 0 - 100) else if (@typeId(@TypeOf(0 - 100)) == .Int) @intToPtr(~gid_t, 0 - 100) else @as(~gid_t, 0 - 100);
pub const _POSIX2_CHAR_TERM = @as(c_long, 200112);
pub const _SC_PRIORITIZED_IO = 34;
pub const MACH_MSG_VM_KERNEL = 0x00000400;
pub const KAUTH_VNODE_SYNCHRONIZE = @as(c_uint, 1) << 20;
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const F_GETLKPID = 66;
pub const PRIdLEAST8 = PRId8;
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;
pub const KERN_LOCK_SET_DESTROYED = 38;
pub const __UINT8_MAX__ = 255;
pub const KAUTH_ACE_FAILURE = 1 << 10;
pub const F_LOG2PHYS_EXT = 65;
pub const _POSIX2_RE_DUP_MAX = 255;
pub const RLIMIT_FOOTPRINT_INTERVAL = 0x4;
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __COREFOUNDATION_CFUTILITIES__ = 1;
pub const _CTYPE_S = @as(c_long, 0x00004000);
pub inline fn htonll(x: var) @TypeOf(__DARWIN_OSSwapInt64(x)) {
    return __DARWIN_OSSwapInt64(x);
}
pub const _XOPEN_REALTIME = -1;
pub const _CRMASK = ~_CACHED_RUNES - 1;
pub const INT_LEAST64_MIN = INT64_MIN;
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const F_ADDSIGS = 59;
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __COREFOUNDATION_CFDATA__ = 1;
pub const DISPATCH_RETURNS_RETAINED_BLOCK = __attribute__(__ns_returns_retained__);
pub const RLIMIT_MEMLOCK = 6;
pub const KAUTH_EXTLOOKUP_WANT_MEMBERSHIP = 1 << 12;
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __UINTMAX_FMTu__ = "lu";
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const MAC_OS_X_VERSION_10_10_2 = 101002;
pub const SCNxLEAST16 = SCNx16;
pub const UINT_MAX = 0xffffffff;
pub const CLD_EXITED = 1;
pub const SIGSTKSZ = 131072;
pub const PAGE_MAX_SIZE = PAGE_SIZE;
pub const _SC_BC_DIM_MAX = 10;
pub const kCFCoreFoundationVersionNumber10_5_3 = 476.13;
pub const SIGBUS = 10;
pub const __SMOD = 0x2000;
pub const _POSIX_NGROUPS_MAX = 8;
pub const _IOLBF = 1;
pub const KAUTH_GUID_SIZE = 16;
pub const SEEK_HOLE = 3;
pub const S_ISVTX = 0o0001000;
pub const kCFCoreFoundationVersionNumber10_8_1 = 744.00;
pub const LC_COLLATE = 1;
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const KAUTH_EXTLOOKUP_REGISTER = 0;
pub const MACH_MSG_ALLOCATE = 2;
pub const __TVOS_12_0 = 120000;
pub const _SC_SPIN_LOCKS = 80;
pub const DISPATCH_NORETURN = __attribute__(__noreturn__);
pub const KAUTH_FILESEC_NONE = if (@typeId(@TypeOf(0)) == .Pointer) @ptrCast(kauth_filesec_t, 0) else if (@typeId(@TypeOf(0)) == .Int) @intToPtr(kauth_filesec_t, 0) else @as(kauth_filesec_t, 0);
pub const kAudioSettings_Unit = "unit";
pub const BC_BASE_MAX = 99;
pub const BC_SCALE_MAX = 99;
pub const MACH_PORT_QLIMIT_SMALL = 16;
pub const KERN_ALREADY_WAITING = 30;
pub const kCFCoreFoundationVersionNumber10_6 = 550.00;
pub const FPE_NOOP = 0;
pub inline fn INT32_C(v: var) @TypeOf(v) {
    return v;
}
pub const EOWNERDEAD = 105;
pub const MPO_IMPORTANCE_RECEIVER = 0x08;
pub const kCFCoreFoundationVersionNumber10_3_5 = 299.31;
pub const kCFCoreFoundationVersionNumber10_4_4_Intel = 368.26;
pub const KAUTH_VNODE_GENERIC_EXECUTE_BITS = KAUTH_VNODE_EXECUTE;
pub const SYNC_VOLUME_WAIT = 0x02;
pub const kAudioAggregateDeviceIsPrivateKey = "private";
pub const MACH_VM_MIN_ADDRESS = if (@typeId(@TypeOf(0)) == .Pointer) @ptrCast(mach_vm_offset_t, 0) else if (@typeId(@TypeOf(0)) == .Int) @intToPtr(mach_vm_offset_t, 0) else @as(mach_vm_offset_t, 0);
pub inline fn __DEVOLATILE(type_1: var, @"var": var) @TypeOf(__CAST_AWAY_QUALIFIER(@"var", @"volatile", type_1)) {
    return __CAST_AWAY_QUALIFIER(@"var", @"volatile", type_1);
}
pub const ENOLINK = 97;
pub const __GNUC_STDC_INLINE__ = 1;
pub const DISPATCH_IO_STRICT_INTERVAL = 0x1;
pub inline fn va_copy(dest: var, src: var) @TypeOf(__builtin_va_copy(dest, src)) {
    return __builtin_va_copy(dest, src);
}
pub const _PC_NAME_MAX = 4;
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const PRIxFAST32 = PRIx32;
pub const MACH_MSGH_BITS_COMPLEX = @as(c_uint, 0x80000000);
pub const GID_MAX = @as(c_uint, 2147483647);
pub const __COREFOUNDATION_CFSOCKET__ = 1;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED = __MAC_10_15;
pub const OPEN_MAX = 10240;
pub inline fn __CF_ANON_ENUM(_type: var) @TypeOf(@"enum") {
    return @"enum";
}
pub const kAudioAggregateDeviceUIDKey = "uid";
pub const RENAME_SECLUDE = 0x00000001;
pub const kAudioSubDeviceDriftCompensationQualityKey = "drift quality";
pub const FFDSYNC = O_DSYNC;
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_11_4(x: var) @TypeOf(x) {
    return x;
}
pub const KAUTH_ACE_LIMIT_INHERIT = 1 << 7;
pub const MACH_RCV_TRAILER_AV = 7;
pub const IOPOL_SCOPE_PROCESS = 0;
pub const LC_CTYPE = 2;
pub const kInstrumentInfoKey_Program = "program";
pub const __SIZEOF_LONG_LONG__ = 8;
pub const _V6_ILP32_OFF32 = __ILP32_OFF32;
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const KAUTH_ACE_AUDIT = 3;
pub inline fn __assert(e: var, file: var, line: var) @TypeOf(__assert_rtn(if (@typeId(@TypeOf([*c]char)) == .Pointer)
    @ptrCast(
        @"const",
        [*c]char,
    )
else if (@typeId(@TypeOf([*c]char)) == .Int)
    @intToPtr(
        @"const",
        [*c]char,
    )
else
    @as(
        @"const",
        [*c]char,
    ) - @as(c_long, 1), file, line, e)) {
    return __assert_rtn(if (@typeId(@TypeOf([*c]char)) == .Pointer)
        @ptrCast(
            @"const",
            [*c]char,
        )
    else if (@typeId(@TypeOf([*c]char)) == .Int)
        @intToPtr(
            @"const",
            [*c]char,
        )
    else
        @as(
            @"const",
            [*c]char,
        ) - @as(c_long, 1), file, line, e);
}
pub const __DBL_MIN_EXP__ = -1021;
pub const TARGET_OS_NANO = TARGET_OS_WATCH;
pub const ACL_MAX_ENTRIES = 128;
pub const MAC_OS_X_VERSION_10_13_1 = 101301;
pub const O_POPUP = 0x80000000;
pub inline fn __API_DEPRECATED_BEGIN_MSG2(msg: var, a: var) @TypeOf(__API_D_BEGIN(msg, a)) {
    return __API_D_BEGIN(msg, a);
}
pub const F_PREALLOCATE = 42;
pub inline fn AUGRAPH_DEPRECATED(macos_intro: var) @TypeOf(API_DEPRECATED("AUGraph is deprecated in favor of AVAudioEngine", macos(macos_intro, API_TO_BE_DEPRECATED), ios(2.0, API_TO_BE_DEPRECATED), watchos(2.0, API_TO_BE_DEPRECATED), tvos(9.0, API_TO_BE_DEPRECATED))) {
    return API_DEPRECATED("AUGraph is deprecated in favor of AVAudioEngine", macos(macos_intro, API_TO_BE_DEPRECATED), ios(2.0, API_TO_BE_DEPRECATED), watchos(2.0, API_TO_BE_DEPRECATED), tvos(9.0, API_TO_BE_DEPRECATED));
}
pub const __MAC_10_10_2 = 101002;
pub const MACH_SEND_INVALID_RT_OOL_SIZE = 0x10000015;
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_10_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _POSIX2_UPE = @as(c_long, 200112);
pub const INT_LEAST32_MAX = INT32_MAX;
pub inline fn OSWriteBigInt16(base: var, byteOffset: var, data: var) @TypeOf(OSWriteSwapInt16(base, byteOffset, data)) {
    return OSWriteSwapInt16(base, byteOffset, data);
}
pub const __COREFOUNDATION_CFNUMBERFORMATTER__ = 1;
pub const CLD_DUMPED = 3;
pub const KAUTH_FILESEC_NO_INHERIT = KAUTH_ACL_NO_INHERIT;
pub const __IPHONE_7_1 = 70100;
pub const _PC_CASE_SENSITIVE = 11;
pub const LC_NUMERIC = 4;
pub const ENOENT = 2;
pub const KERN_MEMORY_ERROR = 10;
pub const RLIMIT_NPROC = 7;
pub const F_NOCACHE = 48;
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_COMPAT_VERSION);
pub const PRIoFAST8 = PRIo8;
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_10_3, __IPHONE_COMPAT_VERSION);
pub const MAC_OS_X_VERSION_10_6 = 1060;
pub const _POSIX_TIMEOUTS = -1;
pub const __enum_closed = __attribute__(__enum_extensibility__(closed));
pub inline fn WEXITSTATUS(x: var) @TypeOf(_W_INT(x) >> 8 & 0x000000ff) {
    return _W_INT(x) >> 8 & 0x000000ff;
}
pub const __UINT_LEAST32_FMTX__ = "X";
pub const EADDRNOTAVAIL = 49;
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DOMAIN = 1;
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_1, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const SIGEV_SIGNAL = 1;
pub const MACH_MSGH_BITS_VOUCHER_MASK = 0x001f0000;
pub const DISPATCH_QUEUE_PRIORITY_BACKGROUND = INT16_MIN;
pub const SIG_ATOMIC_MAX = INT32_MAX;
pub const UQUAD_MAX = ULLONG_MAX;
pub const WORD_BIT = 32;
pub const KERN_NOT_RECEIVER = 7;
pub const ENOSR = 98;
pub const DYNAMIC_TARGETS_ENABLED = 0;
pub const SA_NODEFER = 0x0010;
pub const _POSIX_MAPPED_FILES = @as(c_long, 200112);
pub inline fn MACH_MSGH_BITS_OTHER(bits: var) @TypeOf(bits & ~MACH_MSGH_BITS_PORTS_MASK) {
    return bits & ~MACH_MSGH_BITS_PORTS_MASK;
}
pub const CLOCK_UPTIME_RAW_APPROX = _CLOCK_UPTIME_RAW_APPROX;
pub const kAUPresetManufacturerKey = "manufacturer";
pub const DISPATCH_COLD = __attribute__(__cold__);
pub const kAFInfoDictionary_Year = "year";
pub const BUS_ADRALN = 1;
pub const PRAGMA_ONCE = 0;
pub const FD_SETSIZE = __DARWIN_FD_SETSIZE;
pub const INT_LEAST8_MAX = INT8_MAX;
pub const CHARCLASS_NAME_MAX = 14;
pub const ENOTDIR = 20;
pub const _IOFBF = 0;
pub const PRIxFAST8 = PRIx8;
pub const __SEOF = 0x0020;
pub inline fn W_EXITCODE(ret: var, sig: var) @TypeOf(ret << 8 | sig) {
    return ret << 8 | sig;
}
pub const MACH_MSG_TIMEOUT_NONE = if (@typeId(@TypeOf(0)) == .Pointer) @ptrCast(mach_msg_timeout_t, 0) else if (@typeId(@TypeOf(0)) == .Int) @intToPtr(mach_msg_timeout_t, 0) else @as(mach_msg_timeout_t, 0);
pub const __IPHONE_11_4 = 110400;
pub const _POSIX_SSIZE_MAX = 32767;
pub const _POSIX_CPUTIME = -1;
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __COREFOUNDATION_CFNUMBER__ = 1;
pub const _CTYPE_B = @as(c_long, 0x00020000);
pub const _CS_XBS5_ILP32_OFF32_CFLAGS = 20;
pub const DISPATCH_CURRENT_QUEUE_LABEL = NULL;
pub inline fn CF_EXTENSION_UNAVAILABLE_MAC(_msg: var) @TypeOf(__OSX_EXTENSION_UNAVAILABLE(_msg)) {
    return __OSX_EXTENSION_UNAVAILABLE(_msg);
}
pub inline fn ntohl(x: var) @TypeOf(__DARWIN_OSSwapInt32(x)) {
    return __DARWIN_OSSwapInt32(x);
}
pub const MAC_OS_X_VERSION_10_14_1 = 101401;
pub const _SC_THREAD_PRIO_INHERIT = 87;
pub const __MOVBE__ = 1;
pub const KAUTH_EXTLOOKUP_VALID_GGUID = 1 << 4;
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_11_4, __IPHONE_COMPAT_VERSION);
pub const __const = @"const";
pub const KERN_INVALID_MEMORY_CONTROL = 34;
pub const EXPR_NEST_MAX = 32;
pub const __CF_CLOSED_ENUM_ATTRIBUTES = __attribute__(enum_extensibility(closed));
pub const __COREFOUNDATION__ = 1;
pub const SIG_ATOMIC_MIN = INT32_MIN;
pub const __BLOCKS__ = 1;
pub inline fn OSSwapBigToHostInt64(x: var) @TypeOf(OSSwapInt64(x)) {
    return OSSwapInt64(x);
}
pub const MACH_MSGH_KIND_NOTIFICATION = 0x00000001;
pub const _SC_FILE_LOCKING = 69;
pub const __MAC_10_9 = 1090;
pub const TARGET_OS_TV = 0;
pub const SEGV_NOOP = 0;
pub const MACH_MSGH_BITS_PORTS_MASK = MACH_MSGH_BITS_REMOTE_MASK | MACH_MSGH_BITS_LOCAL_MASK | MACH_MSGH_BITS_VOUCHER_MASK;
pub const MACH_MSG_TRAILER_MINIMUM_SIZE = sizeof(mach_msg_trailer_t);
pub const MACH_SEND_TRAILER = 0x00020000;
pub inline fn OSSwapHostToLittleConstInt16(x: var) @TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint16_t, x) else @as(uint16_t, x)) {
    return if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint16_t, x) else @as(uint16_t, x);
}
pub const ILL_PRVOPC = 3;
pub const kAudioEndPointDeviceEndPointListKey = "endpoints";
pub inline fn __DARWIN_FD_ISSET(n: var, p: var) @TypeOf(__darwin_fd_isset(n, p)) {
    return __darwin_fd_isset(n, p);
}
pub const RSIZE_MAX = SIZE_MAX >> 1;
pub inline fn OSSwapBigToHostInt16(x: var) @TypeOf(OSSwapInt16(x)) {
    return OSSwapInt16(x);
}
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __MAC_10_11_3 = 101103;
pub const O_EVTONLY = 0x8000;
pub const DISPATCH_QUEUE_PRIORITY_LOW = -2;
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_8_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const MACH_PORT_RIGHT_SEND = if (@typeId(@TypeOf(0)) == .Pointer) @ptrCast(mach_port_right_t, 0) else if (@typeId(@TypeOf(0)) == .Int) @intToPtr(mach_port_right_t, 0) else @as(mach_port_right_t, 0);
pub const _QUAD_HIGHWORD = 1;
pub const __x86_64__ = 1;
pub const _POSIX_LINK_MAX = 8;
pub const SCNdFAST32 = SCNd32;
pub const ESHUTDOWN = 58;
pub const __DARWIN_SUF_1050 = "$1050";
pub const STDOUT_FILENO = 1;
pub const _SC_SYMLOOP_MAX = 120;
pub inline fn DISPATCH_DATA_DECL(name: var) @TypeOf(DISPATCH_DECL(name)) {
    return DISPATCH_DECL(name);
}
pub const DISPATCH_PROC_EXEC = 0x20000000;
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_12_2(x: var) @TypeOf(x) {
    return x;
}
pub const F_GETCODEDIR = 72;
pub const _SC_XOPEN_SHM = 113;
pub const MAC_OS_X_VERSION_MIN_REQUIRED = __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__;
pub const __SIZEOF_FLOAT__ = 4;
pub const KAUTH_ACE_KINDMASK = 0xf;
pub inline fn __SCCSID(s: var) @TypeOf(__IDSTRING(sccsid, s)) {
    return __IDSTRING(sccsid, s);
}
pub const __MAC_10_6 = 1060;
pub const __OBJC_BOOL_IS_BOOL = 0;
pub const __IPHONE_9_2 = 90200;
pub const _SC_XBS5_LP64_OFF64 = 124;
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __NO_MATH_INLINES = 1;
pub const _POSIX_HOST_NAME_MAX = 255;
pub const _CTYPE_P = @as(c_long, 0x00002000);
pub const __TVOS_11_1 = 110100;
pub const __ATOMIC_ACQUIRE = 2;
pub const kAUPresetExternalFileRefs = "file-references";
pub const MAC_OS_X_VERSION_10_0 = 1000;
pub const __TVOS_12_2 = 120200;
pub const FPE_FLTRES = 4;
pub const OS_NONNULL9 = __attribute__(__nonnull__(9));
pub const CHAR_MIN = -128;
pub const _POSIX_TRACE_LOG = -1;
pub const _SC_XOPEN_CRYPT = 108;
pub const _PC_AUTH_OPAQUE_NP = 14;
pub const IOPOL_ATIME_UPDATES_DEFAULT = 0;
pub const __DBL_DENORM_MIN__ = 4.9406564584124654e-324;
pub const __IPHONE_4_2 = 40200;
pub const KAUTH_EXTLOOKUP_DEREGISTER = 1 << 2;
pub const MACH_PORT_TYPE_LABELH = MACH_PORT_TYPE(MACH_PORT_RIGHT_LABELH);
pub const PRIxFAST16 = PRIx16;
pub inline fn __API_AVAILABLE1(x: var) @TypeOf(__API_A(x)) {
    return __API_A(x);
}
pub const LOCK_UN = 0x08;
pub const PRIdLEAST16 = PRId16;
pub const ILL_PRVREG = 6;
pub const MAX_TRAILER_SIZE = if (@typeId(@TypeOf(sizeof(mach_msg_max_trailer_t))) == .Pointer) @ptrCast(mach_msg_size_t, sizeof(mach_msg_max_trailer_t)) else if (@typeId(@TypeOf(sizeof(mach_msg_max_trailer_t))) == .Int) @intToPtr(mach_msg_size_t, sizeof(mach_msg_max_trailer_t)) else @as(mach_msg_size_t, sizeof(mach_msg_max_trailer_t));
pub const LONG_LONG_MAX = __LONG_LONG_MAX__;
pub const RLIMIT_FSIZE = 1;
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const OS_NONNULL_ALL = __attribute__(__nonnull__);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __FLT_EVAL_METHOD__ = 0;
pub const PAGE_MIN_MASK = PAGE_MASK;
pub const _SC_XOPEN_XCU_VERSION = 121;
pub const __FLT_MAX_EXP__ = 128;
pub const PRIoLEAST8 = PRIo8;
pub const UINT8_MAX = 255;
pub const SCNuFAST32 = SCNu32;
pub const __WATCHOS_2_1 = 20100;
pub const PRIO_MAX = 20;
pub const M_1_PI = 0.318309886183790671537767526745028724;
pub const PRIuLEAST16 = PRIu16;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS = 26;
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const MACH_SEND_NO_BUFFER = 0x1000000d;
pub const __DARWIN_SUF_64_BIT_INO_T = "$INODE64";
pub const MACH_SEND_TIMEOUT = 0x00000010;
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const kAUPresetSubtypeKey = "subtype";
pub const KERN_MEMORY_PRESENT = 23;
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const RUSAGE_INFO_CURRENT = RUSAGE_INFO_V4;
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_9(x: var) @TypeOf(x) {
    return x;
}
pub inline fn OSReadLittleInt16(base: var, byteOffset: var) @TypeOf(_OSReadInt16(base, byteOffset)) {
    return _OSReadInt16(base, byteOffset);
}
pub const SIGIOT = SIGABRT;
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __DARWIN_ACL_READ_EXTATTRIBUTES = 1 << 9;
pub const S_IRGRP = 0o0000040;
pub const __COREFOUNDATION_CFAVAILABILITY__ = 1;
pub const kCFCoreFoundationVersionNumber10_5_4 = 476.14;
pub const __SIZEOF_SHORT__ = 2;
pub const kCFCoreFoundationVersionNumber10_2_3 = 263.30;
pub inline fn MACH_MSGH_BITS_VOUCHER(bits: var) @TypeOf(bits & MACH_MSGH_BITS_VOUCHER_MASK >> 16) {
    return bits & MACH_MSGH_BITS_VOUCHER_MASK >> 16;
}
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _SC_XOPEN_STREAMS = 114;
pub inline fn i386_round_page(x: var) @TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(pmap_paddr_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(pmap_paddr_t, x) else @as(pmap_paddr_t, x) + I386_PGBYTES - 1 & ~I386_PGBYTES - 1) {
    return if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(pmap_paddr_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(pmap_paddr_t, x) else @as(pmap_paddr_t, x) + I386_PGBYTES - 1 & ~I386_PGBYTES - 1;
}
pub const PRIoFAST64 = PRIo64;
pub const _SC_SYNCHRONIZED_IO = 40;
pub const kCFCoreFoundationVersionNumber10_4_5_PowerPC = 368.25;
pub const ELAST = 106;
pub const RUSAGE_INFO_V4 = 4;
pub const __LPBIG_OFFBIG = 1;
pub const kInstrumentInfoKey_MSB = "MSB";
pub const MACH_SEND_INVALID_RIGHT = 0x1000000a;
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const POLL_IN = 1;
pub const M_LN2 = 0.693147180559945309417232121458176568;
pub const CF_TYPED_EXTENSIBLE_ENUM = _CF_TYPED_EXTENSIBLE_ENUM;
pub const __TVOS_12_1 = 120100;
pub const I386_PGBYTES = 4096;
pub inline fn OS_FORMAT_PRINTF(x: var, y: var) @TypeOf(__attribute__(__format__(printf, x, y))) {
    return __attribute__(__format__(printf, x, y));
}
pub const __UINT32_FMTx__ = "x";
pub const __disable_tail_calls = __attribute__(__disable_tail_calls__);
pub const _POSIX_TRACE_USER_EVENT_MAX = 32;
pub const _SC_2_UPE = 25;
pub const AVAILABLE_MAC_OS_X_VERSION_10_14_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_14, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __UINT_LEAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __DARWIN_NULL = if (@typeId(@TypeOf(0)) == .Pointer) @ptrCast([*c]void, 0) else if (@typeId(@TypeOf(0)) == .Int) @intToPtr([*c]void, 0) else @as([*c]void, 0);
pub const kCFCoreFoundationVersionNumber10_4_6_PowerPC = 368.25;
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const FLT_DIG = __FLT_DIG__;
pub const EEXIST = 17;
pub const _APPEND_OK = 1 << 13;
pub const __INT_FAST32_TYPE__ = int;
pub const kCFCoreFoundationVersionNumber10_9 = 855.11;
pub const S_ISUID = 0o0004000;
pub const BUS_OBJERR = 3;
pub const MACH_MSG_TYPE_DISPOSE_SEND = 25;
pub const kAUPresetCPULoadKey = "cpu-load";
pub const WAKEMON_GET_PARAMS = 0x04;
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const BYTE_SIZE = 8;
pub inline fn __printflike(fmtarg: var, firstvararg: var) @TypeOf(__attribute__(__format__(__printf__, fmtarg, firstvararg))) {
    return __attribute__(__format__(__printf__, fmtarg, firstvararg));
}
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const KERN_ABORTED = 14;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS = 29;
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const I386_LPGBYTES = 2 * 1024 * 1024;
pub const __INT16_FMTd__ = "hd";
pub const MACH_PORT_QLIMIT_MAX = MACH_PORT_QLIMIT_LARGE;
pub const DISPATCH_MEMORYPRESSURE_NORMAL = 0x01;
pub const INT_FAST16_MIN = INT16_MIN;
pub const ALLOW_OBSOLETE_CARBON_MACMEMORY = 0;
pub const NGROUPS_MAX = 16;
pub const TRAP_BRKPT = 1;
pub const MACH_RCV_INVALID_NAME = 0x10004002;
pub const INT32_MIN = -INT32_MAX - 1;
pub inline fn CF_FORMAT_FUNCTION(F: var, A: var) @TypeOf(__attribute__(format(CFString, F, A))) {
    return __attribute__(format(CFString, F, A));
}
pub const F_SPECULATIVE_READ = 101;
pub const __GCC_ATOMIC_LONG_LOCK_FREE = 2;
pub const EOVERFLOW = 84;
pub const PAGE_MIN_SHIFT = PAGE_SHIFT;
pub inline fn _toupper(c: var) @TypeOf(__toupper(c)) {
    return __toupper(c);
}
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const SI_MESGQ = 0x10005;
pub const _POSIX_RAW_SOCKETS = -1;
pub const SEGV_ACCERR = 2;
pub const MACH_PORT_LIMITS_INFO = 1;
pub inline fn OSSwapInt64(x: var) @TypeOf(__DARWIN_OSSwapInt64(x)) {
    return __DARWIN_OSSwapInt64(x);
}
pub const __PRI_MAX_LENGTH_MODIFIER__ = "j";
pub const AU_SUPPORT_INTERAPP_AUDIO = TARGET_OS_IPHONE and !TARGET_OS_MACCATALYST;
pub const kAUPresetVSTDataKey = "vstdata";
pub const __unavailable = __attribute__(__unavailable__);
pub const SCNd16 = "hd";
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_10(x: var) @TypeOf(x) {
    return x;
}
pub const MPO_CONTEXT_AS_GUARD = 0x01;
pub inline fn DISPATCH_COMPILER_CAN_ASSUME(expr: var) @TypeOf(__builtin_assume(expr)) {
    return __builtin_assume(expr);
}
pub const DISPATCH_IO_STOP = 0x1;
pub const KAUTH_VNODE_GENERIC_ALL_BITS = KAUTH_VNODE_GENERIC_READ_BITS | KAUTH_VNODE_GENERIC_WRITE_BITS | KAUTH_VNODE_GENERIC_EXECUTE_BITS;
pub const KERN_RPC_SERVER_TERMINATED = 43;
pub const stderr = __stderrp;
pub const _POSIX_PRIORITIZED_IO = -1;
pub const KERN_RESOURCE_SHORTAGE = 6;
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED = DEPRECATED_ATTRIBUTE;
pub const FOOTPRINT_INTERVAL_RESET = 0x1;
pub const UNIVERSAL_INTERFACES_VERSION = 0x0400;
pub const TARGET_CPU_ALPHA = 0;
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const MACH_SEND_IN_PROGRESS = 0x10000001;
pub const __CHAR_BIT__ = 8;
pub const __SWR = 0x0008;
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __COREFOUNDATION_CFLOCALE__ = 1;
pub const kCFCoreFoundationVersionNumber10_10_Max = 1199;
pub const FASYNC = O_ASYNC;
pub const MPO_QLIMIT = 0x02;
pub const FP_RND_DOWN = 1;
pub const __TVOS_10_0 = 100000;
pub const FLT_DECIMAL_DIG = __FLT_DECIMAL_DIG__;
pub const FP_PREC_24B = 0;
pub const _SC_2_LOCALEDEF = 23;
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const LDBL_DECIMAL_DIG = __LDBL_DECIMAL_DIG__;
pub const MACH_MSG_TYPE_MAKE_SEND = 20;
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_11_2, __IPHONE_COMPAT_VERSION);
pub inline fn CF_AVAILABLE_IOS(_ios: var) @TypeOf(__attribute__(availability(macosx, unavailable))) {
    return __attribute__(availability(macosx, unavailable));
}
pub inline fn OSWriteLittleInt64(base: var, byteOffset: var, data: var) @TypeOf(_OSWriteInt64(base, byteOffset, data)) {
    return _OSWriteInt64(base, byteOffset, data);
}
pub const fsec_entrycount = fsec_acl.acl_entrycount;
pub const __DARWIN_ACL_DELETE_CHILD = 1 << 6;
pub const __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ = 101500;
pub const KERN_POLICY_LIMIT = 27;
pub const O_EXCL = 0x0800;
pub const __INTMAX_MAX__ = @as(c_long, 9223372036854775807);
pub const DISPATCH_NONNULL6 = __attribute__(__nonnull__(6));
pub const DBL_MAX_10_EXP = __DBL_MAX_10_EXP__;
pub const _SC_PASS_MAX = 131;
pub const MACH_MSG_TRAILER_FORMAT_0 = 0;
pub const BLOCK_EXPORT = @"extern";
pub const F_NODIRECT = 62;
pub const _SC_TRACE = 97;
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const F_SETFD = 2;
pub const _CTYPE_A = @as(c_long, 0x00000100);
pub const ru_last = ru_nivcsw;
pub inline fn WCOREDUMP(x: var) @TypeOf(_W_INT(x) & WCOREFLAG) {
    return _W_INT(x) & WCOREFLAG;
}
pub inline fn __DARWIN_OSSwapConstInt32(x: var) @TypeOf(if (@typeId(@TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0xff000000 >> 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x00ff0000 >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x0000ff00 << 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x000000ff << 24)) == .Pointer) @ptrCast(__uint32_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0xff000000 >> 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x00ff0000 >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x0000ff00 << 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x000000ff << 24) else if (@typeId(@TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0xff000000 >> 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x00ff0000 >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x0000ff00 << 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x000000ff << 24)) == .Int) @intToPtr(__uint32_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0xff000000 >> 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x00ff0000 >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x0000ff00 << 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x000000ff << 24) else @as(__uint32_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0xff000000 >> 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x00ff0000 >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x0000ff00 << 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x000000ff << 24)) {
    return if (@typeId(@TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0xff000000 >> 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x00ff0000 >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x0000ff00 << 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x000000ff << 24)) == .Pointer) @ptrCast(__uint32_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0xff000000 >> 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x00ff0000 >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x0000ff00 << 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x000000ff << 24) else if (@typeId(@TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0xff000000 >> 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x00ff0000 >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x0000ff00 << 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x000000ff << 24)) == .Int) @intToPtr(__uint32_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0xff000000 >> 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x00ff0000 >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x0000ff00 << 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x000000ff << 24) else @as(__uint32_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0xff000000 >> 24 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x00ff0000 >> 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x0000ff00 << 8 | if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(__uint32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(__uint32_t, x) else @as(__uint32_t, x) & 0x000000ff << 24);
}
pub const __DARWIN_ACL_CHANGE_OWNER = 1 << 13;
pub const _POSIX_REGEXP = @as(c_long, 200112);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_12, __IPHONE_COMPAT_VERSION);
pub const __DARWIN_ACL_ENTRY_ONLY_INHERIT = 1 << 8;
pub const kAudioUnitConfigurationInfo_InitialInputs = "InitialInputs";
pub const O_TRUNC = 0x0400;
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const _CTYPE_L = @as(c_long, 0x00001000);
pub const SHRT_MIN = -32768;
pub const _SC_V6_LPBIG_OFFBIG = 106;
pub const INTPTR_MIN = -INTPTR_MAX - 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = 1;
pub const F_BARRIERFSYNC = 85;
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __DARWIN_VERS_1050 = 1;
pub const KAUTH_EXTLOOKUP_WANT_UGUID = 1 << 7;
pub const SCNiFAST8 = SCNi8;
pub const F_VOLPOSMODE = 4;
pub const _SC_NGROUPS_MAX = 4;
pub inline fn htons(x: var) @TypeOf(__DARWIN_OSSwapInt16(x)) {
    return __DARWIN_OSSwapInt16(x);
}
pub const ENODEV = 19;
pub const __LDBL_EPSILON__ = @as(f64, 1.08420217248550443401e-19);
pub const DISPATCH_TARGET_QUEUE_DEFAULT = NULL;
pub const static_assert = _Static_assert;
pub const __SAPP = 0x0100;
pub inline fn _W_INT(w: var) @TypeOf([*c]int & w.*) {
    return [*c]int & w.*;
}
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = 1;
pub const DISPATCH_MEMORYPRESSURE_CRITICAL = 0x04;
pub const DBL_MANT_DIG = __DBL_MANT_DIG__;
pub inline fn __strftimelike(fmtarg: var) @TypeOf(__attribute__(__format__(__strftime__, fmtarg, 0))) {
    return __attribute__(__format__(__strftime__, fmtarg, 0));
}
pub const CLOCK_PROCESS_CPUTIME_ID = _CLOCK_PROCESS_CPUTIME_ID;
pub const OS_NONNULL2 = __attribute__(__nonnull__(2));
pub const OS_USED = __attribute__(__used__);
pub const F_ADDFILESIGS_FOR_DYLD_SIM = 83;
pub const __SIGN = 0x8000;
pub const SCNxLEAST8 = SCNx8;
pub const __POPCNT__ = 1;
pub const FLT_RADIX = __FLT_RADIX__;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS = 8;
pub const __UINT_LEAST32_FMTx__ = "x";
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_0(x: var) @TypeOf(x) {
    return x;
}
pub const kCFCoreFoundationVersionNumber10_6_4 = 550.29;
pub const _READ_OK = 1 << 9;
pub const MACH_PORT_TYPE_SPREQUEST_DELAYED = 0x20000000;
pub const kAUPresetVersionKey = "version";
pub inline fn CF_ENUM_AVAILABLE(_mac: var, _ios: var) @TypeOf(CF_AVAILABLE(_mac, _ios)) {
    return CF_AVAILABLE(_mac, _ios);
}
pub const ILL_ILLADR = 5;
pub const kCFCoreFoundationVersionNumber10_4_1 = 368.10;
pub const MACH_MSGH_BITS_USER = @as(c_uint, 0x801f1f1f);
pub const PRIxLEAST16 = PRIx16;
pub const FP_RND_NEAR = 0;
pub const KERN_SUCCESS = 0;
pub const kCFCoreFoundationVersionNumber10_4_7 = 368.27;
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_13 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_13, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const CLOCK_THREAD_CPUTIME_ID = _CLOCK_THREAD_CPUTIME_ID;
pub const dispatch_data_empty = DISPATCH_GLOBAL_OBJECT(dispatch_data_t, _dispatch_data_empty);
pub const _XOPEN_XCU_VERSION = 4;
pub const PRIiFAST16 = PRIi16;
pub const KERN_NOT_WAITING = 48;
pub const DBL_MIN_EXP = __DBL_MIN_EXP__;
pub const TARGET_OS_MAC = 1;
pub const NL_TEXTMAX = 2048;
pub const sv_onstack = sv_flags;
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const CLOCKS_PER_SEC = 1000000;
pub const __WATCHOS_3_0 = 30000;
pub inline fn __DARWIN_FD_COPY(f: var, t: var) @TypeOf(bcopy(f, t, sizeof(f.*))) {
    return bcopy(f, t, sizeof(f.*));
}
pub const __DBL_MANT_DIG__ = 53;
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_11, __IPHONE_COMPAT_VERSION);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const PRIiFAST32 = PRIi32;
pub const __UINT32_FMTX__ = "X";
pub const RUSAGE_INFO_V0 = 0;
pub const __SHRT_MAX__ = 32767;
pub const OS_NONNULL6 = __attribute__(__nonnull__(6));
pub const __UINT_FAST16_FMTX__ = "hX";
pub inline fn CF_ENUM_AVAILABLE_MAC(_mac: var) @TypeOf(CF_AVAILABLE_MAC(_mac)) {
    return CF_AVAILABLE_MAC(_mac);
}
pub const _JBLEN = 9 * 2 + 3 + 16;
pub const SCNuLEAST8 = SCNu8;
pub const __FLT_DECIMAL_DIG__ = 9;
pub const KAUTH_VNODE_READ_SECURITY = @as(c_uint, 1) << 11;
pub const __UINT8_FMTo__ = "hho";
pub inline fn CFCopyLocalizedStringWithDefaultValue(key: var, tbl: var, bundle: var, value: var, comment: var) @TypeOf(CFBundleCopyLocalizedString(bundle, key, value, tbl)) {
    return CFBundleCopyLocalizedString(bundle, key, value, tbl);
}
pub const _SC_XOPEN_VERSION = 116;
pub const _PC_REC_MIN_XFER_SIZE = 22;
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_10_2, __IPHONE_COMPAT_VERSION);
pub const USER_ADDR_NULL = if (@typeId(@TypeOf(0)) == .Pointer) @ptrCast(user_addr_t, 0) else if (@typeId(@TypeOf(0)) == .Int) @intToPtr(user_addr_t, 0) else @as(user_addr_t, 0);
pub const _SC_XOPEN_REALTIME = 111;
pub const SIGWINCH = 28;
pub const RAND_MAX = 0x7fffffff;
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub inline fn htonl(x: var) @TypeOf(__DARWIN_OSSwapInt32(x)) {
    return __DARWIN_OSSwapInt32(x);
}
pub const kAFInfoDictionary_Genre = "genre";
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const OLDROUTINENAMES = 0;
pub const RLIMIT_THREAD_CPULIMITS = 0x3;
pub const __COREFOUNDATION_CFXMLPARSER__ = 1;
pub const BYTE_ORDER = __DARWIN_BYTE_ORDER;
pub const MACH_RCV_HEADER_ERROR = 0x1000400b;
pub const __MAC_10_3 = 1030;
pub const MAC_OS_X_VERSION_10_4 = 1040;
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const kCFCoreFoundationVersionNumber10_3_4 = 299.31;
pub const UNDERFLOW = 4;
pub const DISPATCH_IO_STREAM = 0;
pub const SCNiLEAST8 = SCNi8;
pub const _SC_TRACE_USER_EVENT_MAX = 130;
pub const __pure2 = __attribute__(__const__);
pub const KAUTH_ACE_DIRECTORY_INHERIT = 1 << 6;
pub const MACH_MSG_TYPE_INTEGER_T = MACH_MSG_TYPE_INTEGER_32;
pub const _POSIX_TIMERS = -1;
pub const UINT16_MAX = 65535;
pub const __COREFOUNDATION_CFFILESECURITY__ = 1;
pub const _SC_RE_DUP_MAX = 16;
pub const SCNiFAST64 = SCNi64;
pub const __WORDSIZE = 64;
pub const FREAD = 0x0001;
pub const _SC_XOPEN_REALTIME_THREADS = 112;
pub const SCNiLEAST32 = SCNi32;
pub const kCFCoreFoundationVersionNumber10_4 = 368.00;
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub inline fn __scanflike(fmtarg: var, firstvararg: var) @TypeOf(__attribute__(__format__(__scanf__, fmtarg, firstvararg))) {
    return __attribute__(__format__(__scanf__, fmtarg, firstvararg));
}
pub const _SC_TRACE_NAME_MAX = 128;
pub const ESHLIBVERS = 87;
pub const SCHAR_MIN = -128;
pub const MACH_MSG_TYPE_COPY_SEND = 19;
pub const O_ALERT = 0x20000000;
pub const _CS_PATH = 1;
pub const __DARWIN_UNIX03 = 1;
pub const OS_OBJECT_SWIFT3 = 0;
pub const __PTRDIFF_MAX__ = @as(c_long, 9223372036854775807);
pub const OS_SENTINEL = __attribute__(__sentinel__);
pub const _XBS5_ILP32_OFFBIG = __ILP32_OFFBIG;
pub const O_NONBLOCK = 0x0004;
pub inline fn CF_ENUM_AVAILABLE_IOS(_ios: var) @TypeOf(CF_AVAILABLE_IOS(_ios)) {
    return CF_AVAILABLE_IOS(_ios);
}
pub inline fn CALLBACK_API_C(_type: var, _name: var) @TypeOf(_type(_name.*)) {
    return _type(_name.*);
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_11(x: var) @TypeOf(x) {
    return x;
}
pub const TIME_RELATIVE = 0x01;
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_2_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_2, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_13_1(x: var) @TypeOf(x) {
    return x;
}
pub const w_coredump = w_T.w_Coredump;
pub const SCNuFAST16 = SCNu16;
pub const w_stopsig = w_S.w_Stopsig;
pub const MACH_RCV_TRAILER_LABELS = 8;
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const MAX_INPUT = 1024;
pub const WCONTINUED = 0x00000010;
pub const FAPPEND = O_APPEND;
pub const __WINT_MAX__ = 2147483647;
pub const TARGET_CPU_PPC64 = 0;
pub const __unused = __attribute__(__unused__);
pub const _POSIX_JOB_CONTROL = @as(c_long, 200112);
pub const _POSIX2_PBS_LOCATE = -1;
pub const CLOCK_GET_TIME_RES = 1;
pub const _POSIX_TRACE_EVENT_NAME_MAX = 30;
pub const MACH_MSGH_BITS_LOCAL_MASK = 0x00001f00;
pub inline fn __deprecated_enum_msg(_msg: var) @TypeOf(__deprecated_msg(_msg)) {
    return __deprecated_msg(_msg);
}
pub const RUSAGE_INFO_V1 = 1;
pub const KERN_INVALID_SECURITY = 35;
pub const __IPHONE_9_3 = 90300;
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const F_SETBACKINGSTORE = 70;
pub const ELOOP = 62;
pub const SI_TIMER = 0x10003;
pub const __UINT_FAST16_FMTo__ = "ho";
pub const KAUTH_NTSID_MAX_AUTHORITIES = 16;
pub const SIGCONT = 19;
pub const _POSIX_THREAD_PRIO_INHERIT = -1;
pub const F_RDADVISE = 44;
pub const INT_LEAST32_MIN = INT32_MIN;
pub const MACH_PORT_DNREQUESTS_SIZE_COUNT = 1;
pub const DISPATCH_VNODE_EXTEND = 0x4;
pub const EFAULT = 14;
pub const __XSAVEC__ = 1;
pub const _SC_TRACE_SYS_MAX = 129;
pub const INT8_MIN = -128;
pub const __WATCHOS_5_1 = 50100;
pub const kAudioSubDeviceExtraOutputLatencyKey = "latency-out";
pub const EPFNOSUPPORT = 46;
pub const _PC_PIPE_BUF = 6;
pub inline fn OS_CONCAT(x: var, y: var) @TypeOf(__OS_CONCAT(x, y)) {
    return __OS_CONCAT(x, y);
}
pub const __BMI2__ = 1;
pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = 14;
pub const __COREFOUNDATION_CFBAG__ = 1;
pub inline fn OSSwapLittleToHostConstInt16(x: var) @TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint16_t, x) else @as(uint16_t, x)) {
    return if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint16_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint16_t, x) else @as(uint16_t, x);
}
pub const F_RDAHEAD = 45;
pub const MACH_RCV_TRAILER_SEQNO = 1;
pub const _SC_READER_WRITER_LOCKS = 76;
pub const kCFCoreFoundationVersionNumber10_2 = 263.00;
pub const PRIiFAST64 = PRIi64;
pub const OBJC_NEW_PROPERTIES = 1;
pub const NULL = __DARWIN_NULL;
pub const __UINT32_C_SUFFIX__ = U;
pub inline fn va_end(ap: var) @TypeOf(__builtin_va_end(ap)) {
    return __builtin_va_end(ap);
}
pub const BC_DIM_MAX = 2048;
pub const kAudioSettings_SettingName = "name";
pub const nil = __DARWIN_NULL;
pub const __COREFOUNDATION_CFDICTIONARY__ = 1;
pub const SCNiLEAST16 = SCNi16;
pub inline fn INT8_C(v: var) @TypeOf(v) {
    return v;
}
pub const _XOPEN_NAME_MAX = 255;
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const kAFInfoDictionary_Title = "title";
pub const SIGTTIN = 21;
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_6(x: var) @TypeOf(x) {
    return x;
}
pub const F_LOG2PHYS = 49;
pub const PRIx16 = "hx";
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __tune_corei7__ = 1;
pub inline fn __CF_ANON_ERROR_ENUM(_domain: var) @TypeOf(__CF_ANON_ENUM(CFIndex)) {
    return __CF_ANON_ENUM(CFIndex);
}
pub const DISPATCH_MALLOC = __attribute__(__malloc__);
pub const KAUTH_VNODE_SEARCH = KAUTH_VNODE_EXECUTE;
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __SIG_ATOMIC_MAX__ = 2147483647;
pub const FP_SNAN = FP_NAN;
pub inline fn OSSwapLittleToHostConstInt64(x: var) @TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint64_t, x) else @as(uint64_t, x)) {
    return if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint64_t, x) else @as(uint64_t, x);
}
pub inline fn os_is_compile_time_constant(expr: var) @TypeOf(__builtin_constant_p(expr)) {
    return __builtin_constant_p(expr);
}
pub const MACH_SEND_INVALID_MEMORY = 0x1000000c;
pub const DISPATCH_NONNULL4 = __attribute__(__nonnull__(4));
pub const __API_DEPRECATED_WITH_REPLACEMENT_END = _Pragma("clang attribute pop");
pub const PDP_ENDIAN = __DARWIN_PDP_ENDIAN;
pub const __INT_MAX__ = 2147483647;
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub inline fn CALLBACK_API(_type: var, _name: var) @TypeOf(_type(_name.*)) {
    return _type(_name.*);
}
pub const _WATTR_OK = 1 << 16;
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _SC_TIMER_MAX = 52;
pub const kCFCoreFoundationVersionNumber10_8 = 744.00;
pub const EAGAIN = 35;
pub const __INT64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __SIZEOF_INT128__ = 16;
pub const _POSIX_SPORADIC_SERVER = -1;
pub const TIME_UTC = 1;
pub const CF_ASSUME_NONNULL_BEGIN = _Pragma("clang assume_nonnull begin");
pub const PRIO_DARWIN_NONUI = 0x1001;
pub inline fn CF_AVAILABLE_IPHONE(_ios: var) @TypeOf(CF_AVAILABLE_IOS(_ios)) {
    return CF_AVAILABLE_IOS(_ios);
}
pub const WNOWAIT = 0x00000020;
pub const _PC_LINK_MAX = 1;
pub const __SIZE_FMTx__ = "lx";
pub const _XOPEN_PATH_MAX = 1024;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS = 31;
pub const MPO_IMMOVABLE_RECEIVE = 0x80;
pub const __CLFLUSHOPT__ = 1;
pub const _POSIX_SPAWN = -1;
pub const EROFS = 30;
pub const RLIMIT_CORE = 4;
pub const VM_MIN_ADDRESS = if (@typeId(@TypeOf(0)) == .Pointer) @ptrCast(vm_offset_t, 0) else if (@typeId(@TypeOf(0)) == .Int) @intToPtr(vm_offset_t, 0) else @as(vm_offset_t, 0);
pub const __enum_options = __attribute__(__flag_enum__);
pub const KERN_INVALID_OBJECT = 29;
pub const CF_IMPLICIT_BRIDGING_DISABLED = _Pragma("clang arc_cf_code_audited end");
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const _POSIX_CLOCK_SELECTION = -1;
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const IDENTITYSVC_ENTITLEMENT = "com.apple.private.identitysvc";
pub inline fn CF_FORMAT_ARGUMENT(A: var) @TypeOf(__attribute__(format_arg(A))) {
    return __attribute__(format_arg(A));
}
pub const _SC_LINE_MAX = 15;
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const LDBL_MIN = __LDBL_MIN__;
pub const SIGTTOU = 22;
pub const L_INCR = SEEK_CUR;
pub const kCFCoreFoundationVersionNumber10_3_8 = 299.33;
pub const O_RDWR = 0x0002;
pub const __UINT64_FMTu__ = "llu";
pub const _IONBF = 2;
pub const _POSIX_TRACE = -1;
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const MACH_SEND_INVALID_CONTEXT = 0x10000012;
pub const F_FREEZE_FS = 53;
pub const DISPATCH_DATA_DESTRUCTOR_MUNMAP = _dispatch_data_destructor_munmap;
pub const __DARWIN_ACL_ADD_FILE = __DARWIN_ACL_WRITE_DATA;
pub const _SC_IOV_MAX = 56;
pub const LDBL_MAX = __LDBL_MAX__;
pub const M_LOG10E = 0.434294481903251827651128918916605082;
pub const KAUTH_EXTLOOKUP_WANT_PWNAM = 1 << 16;
pub const _SC_SHARED_MEMORY_OBJECTS = 39;
pub const TARGET_RT_MAC_MACHO = 1;
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = 2;
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_1_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_1, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const O_DP_GETRAWUNENCRYPTED = 0x0002;
pub const MACH_RCV_SCATTER_SMALL = 0x1000400e;
pub const EPROGUNAVAIL = 74;
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = 0;
pub const __INT_LEAST16_MAX__ = 32767;
pub const __PRI_8_LENGTH_MODIFIER__ = "hh";
pub const __GNUC_MINOR__ = 2;
pub const kAUPresetElementNameKey = "element-name";
pub const INT_LEAST16_MAX = INT16_MAX;
pub inline fn REQUESTED_TRAILER_SIZE(y: var) @TypeOf(REQUESTED_TRAILER_SIZE_NATIVE(y)) {
    return REQUESTED_TRAILER_SIZE_NATIVE(y);
}
pub const EDOM = 33;
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub inline fn OSSwapConstInt64(x: var) @TypeOf(__DARWIN_OSSwapConstInt64(x)) {
    return __DARWIN_OSSwapConstInt64(x);
}
pub const MACH_MSG_GUARD_FLAGS_NONE = 0x0000;
pub const PTHREAD_KEYS_MAX = 512;
pub const __RTM__ = 1;
pub const __FLT_HAS_INFINITY__ = 1;
pub inline fn __CAST_AWAY_QUALIFIER(variable: var, qualifier: var, type_1: var) @TypeOf(if (@typeId(@TypeOf(long)) == .Pointer) @ptrCast(type_1, long) else if (@typeId(@TypeOf(long)) == .Int) @intToPtr(type_1, long) else @as(type_1, long)(variable)) {
    return if (@typeId(@TypeOf(long)) == .Pointer) @ptrCast(type_1, long) else if (@typeId(@TypeOf(long)) == .Int) @intToPtr(type_1, long) else @as(type_1, long)(variable);
}
pub const MACH_PORT_QLIMIT_KERNEL = 65534;
pub const SCNdLEAST64 = SCNd64;
pub inline fn OSWriteBigInt(x: var, y: var, z: var) @TypeOf(OSWriteBigInt32(x, y, z)) {
    return OSWriteBigInt32(x, y, z);
}
pub const TARGET_OS_RTKIT = 0;
pub inline fn W_STOPCODE(sig: var) @TypeOf(sig << 8 | _WSTOPPED) {
    return sig << 8 | _WSTOPPED;
}
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = 1;
pub const MACH_RCV_NOTIFY = 0x00000000;
pub inline fn __va_copy(d: var, s: var) @TypeOf(__builtin_va_copy(d, s)) {
    return __builtin_va_copy(d, s);
}
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const KAUTH_EXTLOOKUP_BADRQ = 1;
pub const MACH_MSGH_BITS_ZERO = 0x00000000;
pub const IOPOL_STANDARD = 5;
pub const DISPATCH_NOESCAPE = __attribute__(__noescape__);
pub const sa_handler = __sigaction_u.__sa_handler;
pub const _SC_BC_SCALE_MAX = 11;
pub const kAFInfoDictionary_SourceEncoder = "source encoder";
pub const MACH_SEND_TOO_LARGE = 0x1000000e;
pub const UINT_FAST8_MAX = UINT8_MAX;
pub const KAUTH_VNODE_NOIMMUTABLE = @as(c_uint, 1) << 30;
pub const KERN_CODESIGN_ERROR = 50;
pub const LINK_MAX = 32767;
pub const _POSIX_MEMLOCK = -1;
pub const __IPHONE_9_0 = 90000;
pub const __nullable = _Nullable;
pub inline fn fropen(cookie: var, @"fn": var) @TypeOf(funopen(cookie, @"fn", 0, 0, 0)) {
    return funopen(cookie, @"fn", 0, 0, 0);
}
pub const MAC_OS_X_VERSION_MAX_ALLOWED = MAC_OS_X_VERSION_10_15;
pub const __INTMAX_FMTd__ = "ld";
pub const __SEG_FS = 1;
pub const TMP_MAX = 308915776;
pub const SIGURG = 16;
pub const _POSIX_IPV6 = @as(c_long, 200112);
pub const COREAUDIOTYPES_VERSION = 20150414;
pub const MACH_PORT_TYPE_SPREQUEST = 0x40000000;
pub const MACH_SEND_TIMED_OUT = 0x10000004;
pub const __DARWIN_NON_CANCELABLE = 0;
pub const TARGET_RT_MAC_CFM = 0;
pub const SV_INTERRUPT = SA_RESTART;
pub const S_IFCHR = 0o0020000;
pub const MACH_RCV_TRAILER_AUDIT = 3;
pub const UINT_LEAST8_MAX = UINT8_MAX;
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const LDBL_MANT_DIG = __LDBL_MANT_DIG__;
pub inline fn OSReadLittleInt32(base: var, byteOffset: var) @TypeOf(_OSReadInt32(base, byteOffset)) {
    return _OSReadInt32(base, byteOffset);
}
pub const KAUTH_EXTLOOKUP_WANT_GGUID = 1 << 10;
pub const __APPLE_CC__ = 6000;
pub const __INT_LEAST16_TYPE__ = short;
pub const fsec_ace = fsec_acl.acl_ace;
pub const __IPHONE_10_1 = 100100;
pub const __SSE3__ = 1;
pub const __WATCHOS_2_0 = 20000;
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _CACHED_RUNES = 1 << 8;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 7;
pub const S_ISGID = 0o0002000;
pub inline fn _tolower(c: var) @TypeOf(__tolower(c)) {
    return __tolower(c);
}
pub const EFBIG = 27;
pub const ENOLCK = 77;
pub const PRIoFAST16 = PRIo16;
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const PAGE_MIN_SIZE = PAGE_SIZE;
pub const __SCN_MAX_LENGTH_MODIFIER__ = "j";
pub const _SC_FSYNC = 38;
pub const DISPATCH_VNODE_FUNLOCK = 0x100;
pub const DISPATCH_QUEUE_PRIORITY_DEFAULT = 0;
pub const _XOPEN_REALTIME_THREADS = -1;
pub const EBADMACHO = 88;
pub const MATH_ERREXCEPT = 2;
pub inline fn OSSwapHostToLittleInt64(x: var) @TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint64_t, x) else @as(uint64_t, x)) {
    return if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(uint64_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(uint64_t, x) else @as(uint64_t, x);
}
pub const MACH_MSG_OOL_PORTS_DESCRIPTOR = 2;
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const EPWROFF = 82;
pub const PRIiLEAST64 = PRIi64;
pub const CA_CANONICAL_DEPRECATED = __attribute__(deprecated("The concept of canonical formats is deprecated"));
pub const SIGEV_NONE = 0;
pub const _CTYPE_C = @as(c_long, 0x00000200);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _POSIX_SIGQUEUE_MAX = 32;
pub inline fn OSSwapBigToHostConstInt64(x: var) @TypeOf(OSSwapConstInt64(x)) {
    return OSSwapConstInt64(x);
}
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const PRIxLEAST32 = PRIx32;
pub const TARGET_OS_DRIVERKIT = 0;
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const PRAGMA_STRUCT_PACK = 1;
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_6(x: var) @TypeOf(x) {
    return x;
}
pub const SA_USERTRAMP = 0x0100;
pub const _SC_THREAD_STACK_MIN = 93;
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __IPHONE_4_3 = 40300;
pub const _CS_XBS5_LP64_OFF64_LIBS = 30;
pub const MACH_SEND_INVALID_HEADER = 0x10000010;
pub const __LDBL_DENORM_MIN__ = @as(f64, 3.64519953188247460253e-4951);
pub const OS_NOINLINE = __attribute__(__noinline__);
pub const _POSIX_REALTIME_SIGNALS = -1;
pub const __DARWIN_BIG_ENDIAN = 4321;
pub const KAUTH_VNODE_WRITE_RIGHTS = KAUTH_VNODE_ADD_FILE | KAUTH_VNODE_ADD_SUBDIRECTORY | KAUTH_VNODE_DELETE_CHILD | KAUTH_VNODE_WRITE_DATA | KAUTH_VNODE_APPEND_DATA | KAUTH_VNODE_DELETE | KAUTH_VNODE_WRITE_ATTRIBUTES | KAUTH_VNODE_WRITE_EXTATTRIBUTES | KAUTH_VNODE_WRITE_SECURITY | KAUTH_VNODE_TAKE_OWNERSHIP | KAUTH_VNODE_LINKTARGET | KAUTH_VNODE_CHECKIMMUTABLE;
pub const __UINTMAX_WIDTH__ = 64;
pub const msgh_kind = msgh_seqno;
pub const KERN_NO_SPACE = 3;
pub inline fn __OS_AVAILABILITY(_target: var, _availability: var) @TypeOf(__attribute__(availability(_target, _availability))) {
    return __attribute__(availability(_target, _availability));
}
pub const __WATCHOS_4_0 = 40000;
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __SSE4_1__ = 1;
pub const __LP64_OFF64 = 1;
pub const __INT_FAST64_FMTd__ = "lld";
pub const ENXIO = 6;
pub const NFDBITS = __DARWIN_NFDBITS;
pub const MACH_MSG_TYPE_PORT_SEND_ONCE = MACH_MSG_TYPE_MOVE_SEND_ONCE;
pub const MACH_MSG_OPTION_NONE = 0x00000000;
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub const ECONNREFUSED = 61;
pub const KAUTH_VNODE_WRITE_ATTRIBUTES = @as(c_uint, 1) << 8;
pub const __INT16_FMTi__ = "hi";
pub const WSTOPPED = 0x00000008;
pub const __LDBL_MIN_EXP__ = -16381;
pub const __PRFCHW__ = 1;
pub const TIME_MICROS_MAX = 1000000;
pub const _POSIX_DELAYTIMER_MAX = 32;
pub const MATH_ERRNO = 1;
pub const MPG_IMMOVABLE_RECEIVE = 0x02;
pub const __COREFOUNDATION_CFXMLNODE__ = 1;
pub const __amd64__ = 1;
pub const KAUTH_ACE_FILE_INHERIT = 1 << 5;
pub const DISPATCH_NONNULL3 = __attribute__(__nonnull__(3));
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const kCFCoreFoundationVersionNumber10_7_1 = 635.00;
pub const kAudioUnitConfigurationInfo_HasCustomView = "HasCustomView";
pub const ENOBUFS = 55;
pub const kAFInfoDictionary_Album = "album";
pub const PTHREAD_DESTRUCTOR_ITERATIONS = 4;
pub const SI_QUEUE = 0x10002;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = 2;
pub const fsec_flags = fsec_acl.acl_flags;
pub const __UINT64_FMTx__ = "llx";
pub const S_IFDIR = 0o0040000;
pub const PRIo16 = "ho";
pub const __GNUC__ = 4;
pub const PRIu32 = "u";
pub const __seg_gs = __attribute__(address_space(256));
pub const DECIMAL_DIG = __DECIMAL_DIG__;
pub const EILSEQ = 92;
pub const kAudioSettings_AvailableValues = "available values";
pub const O_ACCMODE = 0x0003;
pub const DISPATCH_MACH_SEND_DEAD = 0x1;
pub const __UINT_FAST16_FMTx__ = "hx";
pub const WNOHANG = 0x00000001;
pub const S_IXUSR = 0o0000100;
pub const kAudioAggregateDeviceSubDeviceListKey = "subdevices";
pub const F_GETFD = 1;
pub const RUSAGE_CHILDREN = -1;
pub const SCNoFAST8 = SCNo8;
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_7(x: var) @TypeOf(x) {
    return x;
}
pub const _SC_SAVED_IDS = 7;
pub const _PC_FILESIZEBITS = 18;
pub const KAUTH_ACL_FLAGS_PRIVATE = 0xffff;
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __IPHONE_2_1 = 20100;
pub const __IPHONE_11_2 = 110200;
pub const LC_ALL = 0;
pub const MACH_PORT_TYPE_SEND_RECEIVE = MACH_PORT_TYPE_SEND | MACH_PORT_TYPE_RECEIVE;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS = 34;
pub const MACH_MSGH_BITS_DENAPHOLDASRT = MACH_MSGH_BITS_IMPHOLDASRT;
pub const IOPOL_TYPE_DISK = 0;
pub const __UINT16_FMTu__ = "hu";
pub const COLL_WEIGHTS_MAX = 2;
pub const __TVOS_10_0_1 = 100001;
pub inline fn __DARWIN_FD_ZERO(p: var) @TypeOf(__builtin_bzero(p, sizeof(p.*))) {
    return __builtin_bzero(p, sizeof(p.*));
}
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const EUSERS = 68;
pub const S_IFWHT = 0o0160000;
pub inline fn OSWriteLittleInt32(base: var, byteOffset: var, data: var) @TypeOf(_OSWriteInt32(base, byteOffset, data)) {
    return _OSWriteInt32(base, byteOffset, data);
}
pub const __INT_LEAST32_FMTd__ = "d";
pub const __DARWIN_ACL_READ_ATTRIBUTES = 1 << 7;
pub inline fn MACH_MSGH_BITS_PORTS(bits: var) @TypeOf(bits & MACH_MSGH_BITS_PORTS_MASK) {
    return bits & MACH_MSGH_BITS_PORTS_MASK;
}
pub const KERN_RPC_TERMINATE_ORPHAN = 44;
pub const KAUTH_VNODE_ACCESS = @as(c_uint, 1) << 31;
pub const __INTPTR_FMTi__ = "li";
pub const OS_NONNULL8 = __attribute__(__nonnull__(8));
pub const USHRT_MAX = 65535;
pub const kCFCoreFoundationVersionNumber10_6_8 = 550.43;
pub const INFINITY = HUGE_VALF;
pub const MACH_SEND_NODENAP = MACH_SEND_NOIMPORTANCE;
pub const __WINT_TYPE__ = int;
pub const DISPATCH_VNODE_DELETE = 0x1;
pub const __UINTPTR_FMTX__ = "lX";
pub const __INT_FAST64_FMTi__ = "lli";
pub const __INT64_FMTi__ = "lli";
pub const ENOPROTOOPT = 42;
pub const KAUTH_ACE_GENERIC_ALL = 1 << 21;
pub const __COREFOUNDATION_CFSTRINGTOKENIZER__ = 1;
pub const CLOCK_ALARM_MINRES = 4;
pub const DBL_MIN_10_EXP = __DBL_MIN_10_EXP__;
pub const DISPATCH_CONST = __attribute__(__const__);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_1, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_8, __IPHONE_COMPAT_VERSION);
pub inline fn CF_BRIDGED_TYPE(T: var) @TypeOf(__attribute__(objc_bridge(T))) {
    return __attribute__(objc_bridge(T));
}
pub const FILENAME_MAX = 1024;
pub const KAUTH_VNODE_GENERIC_READ_BITS = KAUTH_VNODE_READ_DATA | KAUTH_VNODE_READ_ATTRIBUTES | KAUTH_VNODE_READ_EXTATTRIBUTES | KAUTH_VNODE_READ_SECURITY;
pub const BUFSIZ = 1024;
pub const KAUTH_VNODE_READ_ATTRIBUTES = @as(c_uint, 1) << 7;
pub const NL_NMAX = 1;
pub const _FILESEC_UNSET_PROPERTY = if (@typeId(@TypeOf(0)) == .Pointer) @ptrCast([*c]void, 0) else if (@typeId(@TypeOf(0)) == .Int) @intToPtr([*c]void, 0) else @as([*c]void, 0);
pub const __WATCHOS_6_0_1 = 60001;
pub const KERN_NO_ACCESS = 8;
pub const DISPATCH_QUEUE_SERIAL_WITH_AUTORELEASE_POOL = dispatch_queue_attr_make_with_autorelease_frequency(DISPATCH_QUEUE_SERIAL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
pub const W_OK = 1 << 1;
pub const _SC_ATEXIT_MAX = 107;
pub const _POSIX2_EQUIV_CLASS_MAX = 2;
pub const FPE_INTOVF = 8;
pub const OS_NONNULL4 = __attribute__(__nonnull__(4));
pub const NL_ARGMAX = 9;
pub const _PC_CASE_PRESERVING = 12;
pub const PRIi32 = "i";
pub const @"false" = 0;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;
pub const EIO = 5;
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_COMPAT_VERSION);
pub const MB_CUR_MAX = __mb_cur_max;
pub const MACH_PORT_TYPE_DNREQUEST = 0x80000000;
pub const TARGET_CPU_ARM64 = 0;
pub const __OS_ENUM_ATTR = __attribute__(enum_extensibility(open));
pub const _SC_XOPEN_UNIX = 115;
pub const EREMOTE = 71;
pub const __SCN_64_LENGTH_MODIFIER__ = "ll";
pub const L_SET = SEEK_SET;
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const kAFInfoDictionary_NominalBitRate = "nominal bit rate";
pub const kCFCoreFoundationVersionNumber10_11_3 = 1256.14;
pub const _POSIX_BARRIERS = -1;
pub const IOPOL_SCOPE_DARWIN_BG = 2;
pub const OS_CONST = __attribute__(__const__);
pub const DISPATCH_VNODE_WRITE = 0x2;
pub inline fn ferror_unlocked(p: var) @TypeOf(__sferror(p)) {
    return __sferror(p);
}
pub const POLL_HUP = 6;
pub const kCFCoreFoundationVersionNumber10_8_4 = 744.19;
pub const CLOCK_MONOTONIC = _CLOCK_MONOTONIC;
pub const F_GETPATH = 50;
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const OS_ASSUME_NONNULL_END = _Pragma("clang assume_nonnull end");
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_12_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const SCNo16 = "ho";
pub const KERN_INVALID_ADDRESS = 1;
pub const __INT_FAST32_MAX__ = 2147483647;
pub const SCNoLEAST32 = SCNo32;
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const PRIXPTR = "lX";
pub const kCFCoreFoundationVersionNumber10_11_4 = 1258.1;
pub const MAC_OS_X_VERSION_10_8 = 1080;
pub inline fn DEPRECATED_MSG_ATTRIBUTE(s: var) @TypeOf(__attribute__(deprecated(s))) {
    return __attribute__(deprecated(s));
}
pub const MACH_SEND_NOIMPORTANCE = 0x00040000;
pub const __INT_LEAST32_TYPE__ = int;
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const FLT_MAX_EXP = __FLT_MAX_EXP__;
pub const __SIZE_MAX__ = @as(c_ulong, 18446744073709551615);
pub const _SC_XBS5_LPBIG_OFFBIG = 125;
pub const ENODATA = 96;
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const SIGIO = 23;
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = 2;
pub const kCAFMarkerChunkHdrSize = offsetof(CAFMarkerChunk, mMarkers);
pub const _SC_AIO_MAX = 43;
pub const _SC_TRACE_INHERIT = 99;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS = 24;
pub const CLOCK_MONOTONIC_RAW_APPROX = _CLOCK_MONOTONIC_RAW_APPROX;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING = -1;
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const kCFCoreFoundationVersionNumber10_11 = 1253;
pub const UINTMAX_MAX = UINTMAX_C(18446744073709551615);
pub const _CTYPE_SW2 = @as(c_long, 0x80000000);
pub const BUS_NOOP = 0;
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const MACH_SEND_INVALID_VOUCHER = 0x10000005;
pub const ACL_UNDEFINED_ID = NULL;
pub const _SC_NPROCESSORS_ONLN = 58;
pub const IOPOL_PASSIVE = 2;
pub const __COREFOUNDATION_CFURL__ = 1;
pub const _CS_DARWIN_USER_CACHE_DIR = 65538;
pub const __SIZE_FMTo__ = "lo";
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_13_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_13, __IPHONE_COMPAT_VERSION);
pub const _SC_CLK_TCK = 3;
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const ETIME = 101;
pub const KERN_INVALID_CAPABILITY = 20;
pub const kCFCoreFoundationVersionNumber10_2_6 = 263.50;
pub const INT_FAST64_MAX = INT64_MAX;
pub const __SEG_GS = 1;
pub const ENOSYS = 78;
pub const _CS_DARWIN_USER_DIR = 65536;
pub const EDEVERR = 83;
pub const __INT_FAST8_MAX__ = 127;
pub const KERN_LOCK_OWNED_SELF = 41;
pub const kCFCoreFoundationVersionNumber10_11_Max = 1299;
pub const kAudioSettings_Hint = "hint";
pub const OFF_MAX = LLONG_MAX;
pub const S_IXOTH = 0o0000001;
pub const SING = 2;
pub const kAFInfoDictionary_ChannelLayout = "channel layout";
pub const __SSE__ = 1;
pub const kAUPresetVSTPresetKey = "vstpreset";
pub const CPUMON_MAKE_FATAL = 0x1000;
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const PRIXLEAST64 = PRIX64;
pub const kCFCoreFoundationVersionNumber10_6_2 = 550.13;
pub const MACH_SEND_SYNC_OVERRIDE = 0x00100000;
pub const FP_PREC_64B = 3;
pub const INT_FAST8_MIN = INT8_MIN;
pub const FP_QNAN = FP_NAN;
pub const _SC_2_VERSION = 17;
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_2(x: var) @TypeOf(x) {
    return x;
}
pub const _POSIX2_SW_DEV = @as(c_long, 200112);
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 5;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = 1;
pub const KAUTH_ACE_ONLY_INHERIT = 1 << 8;
pub const SCNdLEAST16 = SCNd16;
pub inline fn OSSwapConstInt32(x: var) @TypeOf(__DARWIN_OSSwapConstInt32(x)) {
    return __DARWIN_OSSwapConstInt32(x);
}
pub const _SC_SS_REPL_MAX = 126;
pub const __PTHREAD_SIZE__ = 8176;
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const FLT_TRUE_MIN = __FLT_DENORM_MIN__;
pub const __LDBL_MIN_10_EXP__ = -4931;
pub const ENETDOWN = 50;
pub const _POSIX_THREAD_PRIO_PROTECT = -1;
pub const __DARWIN_ACL_WRITE_SECURITY = 1 << 12;
pub const __MAC_10_7 = 1070;
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __AVAILABILITY_INTERNAL__MAC_NA_DEP__MAC_NA = __attribute__(availability(macosx, unavailable));
pub const _SC_THREAD_THREADS_MAX = 94;
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __DARWIN_ONLY_VERS_1050 = 0;
pub const PRIxFAST64 = PRIx64;
pub inline fn OSSwapLittleToHostInt(x: var) @TypeOf(OSSwapLittleToHostInt32(x)) {
    return OSSwapLittleToHostInt32(x);
}
pub const NZERO = 20;
pub const _POSIX2_PBS_MESSAGE = -1;
pub const DEPRECATED_ATTRIBUTE = __attribute__(deprecated);
pub const KAUTH_VNODE_ADD_SUBDIRECTORY = KAUTH_VNODE_APPEND_DATA;
pub inline fn OSSwapConstInt16(x: var) @TypeOf(__DARWIN_OSSwapConstInt16(x)) {
    return __DARWIN_OSSwapConstInt16(x);
}
pub const PRIu16 = "hu";
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const SIZE_MAX = UINTPTR_MAX;
pub const MAC_OS_X_VERSION_10_5 = 1050;
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_COMPAT_VERSION);
pub const _SC_DELAYTIMER_MAX = 45;
pub const __UINT_FAST32_FMTX__ = "X";
pub const DBL_DECIMAL_DIG = __DBL_DECIMAL_DIG__;
pub const SCNoFAST16 = SCNo16;
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_0_AND_LATER = DEPRECATED_ATTRIBUTE;
pub const TARGET_OS_IPHONE = 0;
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _V6_LP64_OFF64 = __LP64_OFF64;
pub const PRIXFAST16 = PRIX16;
pub const kCFCoreFoundationVersionNumber10_0 = 196.40;
pub const w_stopval = w_S.w_Stopval;
pub const __MPX__ = 1;
pub const EISDIR = 21;
pub const SCNi16 = "hi";
pub const MAC_OS_X_VERSION_10_13 = 101300;
pub const _PC_ASYNC_IO = 17;
pub const TARGET_OS_UNIX = 0;
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const EBADMSG = 94;
pub const __sort_noescape = __attribute__(__noescape__);
pub const DISPATCH_QUEUE_CONCURRENT_WITH_AUTORELEASE_POOL = dispatch_queue_attr_make_with_autorelease_frequency(DISPATCH_QUEUE_CONCURRENT, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
pub const FCNTL_FS_SPECIFIC_BASE = 0x00010000;
pub const KERN_DEFAULT_SET = 31;
pub const F_TEST = 3;
pub inline fn __OSX_EXTENSION_UNAVAILABLE(_msg: var) @TypeOf(__OS_AVAILABILITY_MSG(macosx_app_extension, unavailable, _msg)) {
    return __OS_AVAILABILITY_MSG(macosx_app_extension, unavailable, _msg);
}
pub const I386_LPGSHIFT = 21;
pub const SCNi32 = "i";
pub const DISPATCH_API_VERSION = 20181008;
pub const _POSIX_RTSIG_MAX = 8;
pub const _SC_ASYNCHRONOUS_IO = 28;
pub const __SCHAR_MAX__ = 127;
pub const __IOS_PROHIBITED = __OS_AVAILABILITY(ios, unavailable);
pub const EFTYPE = 79;
pub const ARG_MAX = 256 * 1024;
pub const MPG_FLAGS_STRICT_REPLY_MASK = @as(c_ulonglong, 0xff) << 56;
pub const SIGTRAP = 5;
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const _POSIX2_COLL_WEIGHTS_MAX = 2;
pub const __UINT8_FMTx__ = "hhx";
pub inline fn GET_RCV_ELEMENTS(y: var) @TypeOf(y >> 24 & 0xf) {
    return y >> 24 & 0xf;
}
pub const M_2_PI = 0.636619772367581343075535053490057448;
pub const MACH_RCV_INVALID_NOTIFY = 0x10004007;
pub inline fn machine_btop(x: var) @TypeOf(i386_btop(x)) {
    return i386_btop(x);
}
pub const API_TO_BE_DEPRECATED = 100000;
pub const __clang__ = 1;
pub const MACH_PORT_TYPE_DEAD_NAME = MACH_PORT_TYPE(MACH_PORT_RIGHT_DEAD_NAME);
pub const _PC_NO_TRUNC = 8;
pub const __IPHONE_2_0 = 20000;
pub const _PC_CHOWN_RESTRICTED = 7;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 12;
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const ESTALE = 70;
pub const __FLT_MIN_10_EXP__ = -37;
pub const VM_MIN_ADDRESS64 = if (@typeId(@TypeOf(@as(c_ulonglong, 0x0000000000000000))) == .Pointer) @ptrCast(user_addr_t, @as(c_ulonglong, 0x0000000000000000)) else if (@typeId(@TypeOf(@as(c_ulonglong, 0x0000000000000000))) == .Int) @intToPtr(user_addr_t, @as(c_ulonglong, 0x0000000000000000)) else @as(user_addr_t, @as(c_ulonglong, 0x0000000000000000));
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_4(x: var) @TypeOf(x) {
    return x;
}
pub const MACH_PORT_RIGHT_SEND_ONCE = if (@typeId(@TypeOf(2)) == .Pointer) @ptrCast(mach_port_right_t, 2) else if (@typeId(@TypeOf(2)) == .Int) @intToPtr(mach_port_right_t, 2) else @as(mach_port_right_t, 2);
pub const _POSIX2_PBS_TRACK = -1;
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const OFF_MIN = LLONG_MIN;
pub const SIGSYS = 12;
pub const _PC_VDISABLE = 9;
pub const __MAC_10_14_1 = 101401;
pub const __ATOMIC_RELEASE = 3;
pub const _PC_PATH_MAX = 5;
pub const KERN_NAME_EXISTS = 13;
pub const __IPHONE_13_2 = 130200;
pub const ENEEDAUTH = 81;
pub inline fn __printf0like(fmtarg: var, firstvararg: var) @TypeOf(__attribute__(__format__(__printf0__, fmtarg, firstvararg))) {
    return __attribute__(__format__(__printf0__, fmtarg, firstvararg));
}
pub const VM_USRSTACK32 = if (@typeId(@TypeOf(0xC0000000)) == .Pointer) @ptrCast(vm_offset_t, 0xC0000000) else if (@typeId(@TypeOf(0xC0000000)) == .Int) @intToPtr(vm_offset_t, 0xC0000000) else @as(vm_offset_t, 0xC0000000);
pub const __TVOS_9_0 = 90000;
pub const __WINT_WIDTH__ = 32;
pub const __DARWIN_NSIG = 32;
pub const KAUTH_EXTLOOKUP_SUCCESS = 0;
pub const __FLT_MAX_10_EXP__ = 38;
pub const EPROCLIM = 67;
pub const S_IWRITE = S_IWUSR;
pub const _DEBUG = 1;
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const MACH_PORT_TYPE_SEND = MACH_PORT_TYPE(MACH_PORT_RIGHT_SEND);
pub const __DARWIN_LITTLE_ENDIAN = 1234;
pub const PTRDIFF_MIN = INTMAX_MIN;
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_13_4(x: var) @TypeOf(x) {
    return x;
}
pub const FP_ZERO = 3;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 35;
pub const kAudioSettings_LimitedValues = "limited values";
pub const PRIuFAST32 = PRIu32;
pub const __MACH__ = 1;
pub const CF_TYPED_ENUM = _CF_TYPED_ENUM;
pub const M_PI_2 = 1.57079632679489661923132169163975144;
pub const PRIO_DARWIN_BG = 0x1000;
pub const EBUSY = 16;
pub const __SOPT = 0x0400;
pub const __INT64_FMTd__ = "lld";
pub const KAUTH_EXTLOOKUP_VALID_GRNAM = 1 << 17;
pub const CPF_IGNORE_MODE = 0x0002;
pub const __kCFStringInlineBufferLength = 64;
pub const __UINT16_MAX__ = 65535;
pub inline fn major(x: var) @TypeOf(if (@typeId(@TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(u_int32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(u_int32_t, x) else @as(u_int32_t, x) >> 24 & 0xff)) == .Pointer) @ptrCast(int32_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(u_int32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(u_int32_t, x) else @as(u_int32_t, x) >> 24 & 0xff) else if (@typeId(@TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(u_int32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(u_int32_t, x) else @as(u_int32_t, x) >> 24 & 0xff)) == .Int) @intToPtr(int32_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(u_int32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(u_int32_t, x) else @as(u_int32_t, x) >> 24 & 0xff) else @as(int32_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(u_int32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(u_int32_t, x) else @as(u_int32_t, x) >> 24 & 0xff)) {
    return if (@typeId(@TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(u_int32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(u_int32_t, x) else @as(u_int32_t, x) >> 24 & 0xff)) == .Pointer) @ptrCast(int32_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(u_int32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(u_int32_t, x) else @as(u_int32_t, x) >> 24 & 0xff) else if (@typeId(@TypeOf(if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(u_int32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(u_int32_t, x) else @as(u_int32_t, x) >> 24 & 0xff)) == .Int) @intToPtr(int32_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(u_int32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(u_int32_t, x) else @as(u_int32_t, x) >> 24 & 0xff) else @as(int32_t, if (@typeId(@TypeOf(x)) == .Pointer) @ptrCast(u_int32_t, x) else if (@typeId(@TypeOf(x)) == .Int) @intToPtr(u_int32_t, x) else @as(u_int32_t, x) >> 24 & 0xff);
}
pub const KAUTH_VNODE_WRITE_DATA = @as(c_uint, 1) << 2;
pub const _PC_NAME_CHARS_MAX = 10;
pub const _CTYPE_Q = @as(c_long, 0x00200000);
pub const _XOPEN_LEGACY = -1;
pub const __DARWIN_ACL_SYNCHRONIZE = 1 << 20;
pub const _CTYPE_R = @as(c_long, 0x00040000);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __IPHONE_10_3 = 100300;
pub const EWOULDBLOCK = EAGAIN;
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __MAC_10_13 = 101300;
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub inline fn isgreater(x: var, y: var) @TypeOf(__builtin_isgreater(x, y)) {
    return __builtin_isgreater(x, y);
}
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const MACH_RCV_INVALID_DATA = 0x10004008;
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_11_3, __IPHONE_COMPAT_VERSION);
pub const stdin = __stdinp;
pub const _POSIX_MQ_OPEN_MAX = 8;
pub const _SC_THREAD_ATTR_STACKADDR = 82;
pub const kCFCoreFoundationVersionNumber10_3_7 = 299.33;
pub const __ORDER_BIG_ENDIAN__ = 4321;
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const kCFCoreFoundationVersionNumber10_7 = 635.00;
pub const __IPHONE_11_3 = 110300;
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const KAUTH_VNODE_APPEND_DATA = @as(c_uint, 1) << 5;
pub const ENOMSG = 91;
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_2, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const TARGET_OS_MACCATALYST = 0;
pub const KERN_ALREADY_IN_SET = 11;
pub const _POSIX_FSYNC = @as(c_long, 200112);
pub const kAFInfoDictionary_Lyricist = "lyricist";
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = 2;
pub inline fn OSSwapBigToHostConstInt16(x: var) @TypeOf(OSSwapConstInt16(x)) {
    return OSSwapConstInt16(x);
}
pub const __COREFOUNDATION_CFBUNDLE__ = 1;
pub const KERN_NOT_IN_SET = 12;
pub const __PRAGMA_REDEFINE_EXTNAME = 1;
pub const SCNxLEAST64 = SCNx64;
pub const SIGQUIT = 3;
pub const EHOSTUNREACH = 65;
pub const _SC_THREAD_SAFE_FUNCTIONS = 91;
pub const __TVOS_10_1 = 100100;
pub const MACH_MSG_TYPE_PORT_NONE = 0;
pub const INT_MAX = 2147483647;
pub const _POSIX_THREAD_THREADS_MAX = 64;
pub const _POSIX_MESSAGE_PASSING = -1;
pub const FLT_HAS_SUBNORM = 1;
pub const SIGALRM = 14;
pub const _SC_TIMERS = 41;
pub const M_LOG2E = 1.44269504088896340735992468100189214;
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_13(x: var) @TypeOf(x) {
    return x;
}
pub const FNDELAY = O_NONBLOCK;
pub const FP_FAST_FMAF = 1;
pub const __DARWIN_BYTE_ORDER = __DARWIN_LITTLE_ENDIAN;
pub const MAC_OS_X_VERSION_10_12_4 = 101204;
pub const MACH_SEND_ALWAYS = 0x00010000;
pub const kAudioSettings_Summary = "summary";
pub const OS_NONNULL15 = __attribute__(__nonnull__(15));
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_12_4(x: var) @TypeOf(x) {
    return x;
}
pub const __SGX__ = 1;
pub const PRIoLEAST32 = PRIo32;
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const PRIXLEAST16 = PRIX16;
pub const PRIiLEAST32 = PRIi32;
pub const MACH_MSGH_BITS_REMOTE_MASK = 0x0000001f;
pub const _V6_ILP32_OFFBIG = __ILP32_OFFBIG;
pub const __STDC_HOSTED__ = 1;
pub const OS_NONNULL12 = __attribute__(__nonnull__(12));
pub const __DARWIN_ACL_DELETE = 1 << 4;
pub const _PC_ALLOC_SIZE_MIN = 16;
pub const __PIC__ = 2;
pub const DISPATCH_QUEUE_SERIAL = NULL;
pub const F_SETLKWTIMEOUT = 10;
pub const __SNBF = 0x0002;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS = 85;
pub const O_DIRECTORY = 0x100000;
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_5_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const F_SETLKW = 9;
pub const SYSTEM_CLOCK = 0;
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const SIGINFO = 29;
pub const S_IRWXO = 0o0000007;
pub const kAudioComponentValidationParameter_ForceValidation = "ForceValidation";
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __PTRDIFF_WIDTH__ = 64;
pub const __SIZE_WIDTH__ = 64;
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const kCFCoreFoundationVersionNumber10_1_4 = 227.30;
pub const __INT_LEAST16_FMTd__ = "hd";
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __SIZEOF_PTRDIFF_T__ = 8;
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const MACH_RCV_INVALID_TRAILER = 0x1000400f;
pub const ECANCELED = 89;
pub const SCNiPTR = "li";
pub const __INT_LEAST64_FMTi__ = "lli";
pub const KAUTH_GET_CACHE_SIZES = 1 << 3;
pub const PRAGMA_IMPORT = 0;
pub const SCNiFAST32 = SCNi32;
pub const MACH_PORT_TYPE_SEND_ONCE = MACH_PORT_TYPE(MACH_PORT_RIGHT_SEND_ONCE);
pub const SCNuLEAST32 = SCNu32;
pub const KAUTH_VNODE_ADD_FILE = KAUTH_VNODE_WRITE_DATA;
pub const __MAC_10_15_1 = 101501;
pub const kAUPresetTypeKey = "type";
pub inline fn OSSwapHostToBigConstInt32(x: var) @TypeOf(OSSwapConstInt32(x)) {
    return OSSwapConstInt32(x);
}
pub const MACH_SEND_OVERRIDE = 0x00000020;
pub const kAudioEndPointDeviceIsPrivateKey = "private";
pub const __DARWIN_ACL_ENTRY_DIRECTORY_INHERIT = 1 << 6;
pub const DISPATCH_ONCE_INLINE_FASTPATH = 1;
pub inline fn __API_RANGE_STRINGIFY(x: var) @TypeOf(__API_RANGE_STRINGIFY2(x)) {
    return __API_RANGE_STRINGIFY2(x);
}
pub const DBL_MIN = __DBL_MIN__;
pub const __TVOS_UNAVAILABLE = __OS_AVAILABILITY(tvos, unavailable);
pub const kCFCoreFoundationVersionNumber10_2_7 = 263.50;
pub const _PC_2_SYMLINKS = 15;
pub const F_GETPROTECTIONLEVEL = 77;
pub const _SC_2_PBS = 59;
pub const TARGET_CPU_X86 = 0;
pub const _XOPEN_CRYPT = 1;
pub const __UINT_FAST64_FMTo__ = "llo";
pub const F_PUNCHHOLE = 99;
pub const _POSIX2_PBS_CHECKPOINT = -1;
pub const _POSIX_V6_ILP32_OFF32 = __ILP32_OFF32;
pub const kCFCoreFoundationVersionNumber10_11_1 = 1255.1;
pub const PRIdPTR = "ld";
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = 3;
pub const __INT8_FMTi__ = "hhi";
pub const MACH_PORT_SRIGHTS_PRESENT = 1;
pub const FPE_INTDIV = 7;
pub const __unreachable_ok_pop = _Pragma("clang diagnostic pop");
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __CFXMLNode_DEPRECATION_MSG = "CFXMLNode is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead";
pub const __IPHONE_9_1 = 90100;
pub const FLT_MIN = __FLT_MIN__;
pub const RE_DUP_MAX = 255;
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = 1;
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = 4;
pub const TARGET_RT_LITTLE_ENDIAN = 1;
pub const __INT16_MAX__ = 32767;
pub const _SC_SPAWN = 79;
pub const __SWIFT_UNAVAILABLE = __OS_AVAILABILITY(swift, unavailable);
pub const PRIXFAST32 = PRIX32;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = 2;
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_COMPAT_VERSION);
pub const FWRITE = 0x0002;
pub const _ACCESS_EXTENDED_MASK = _READ_OK | _WRITE_OK | _EXECUTE_OK | _DELETE_OK | _APPEND_OK | _RMFILE_OK | _REXT_OK | _WEXT_OK | _RATTR_OK | _WATTR_OK | _RPERM_OK | _WPERM_OK | _CHOWN_OK;
pub const F_SETPROTECTIONCLASS = 64;
pub const __DISPATCH_ENUM_ATTR = __attribute__(__enum_extensibility__(open));
pub const __UINT16_FMTo__ = "ho";
pub const _SC_THREAD_CPUTIME = 84;
pub const AVAILABLE_MAC_OS_X_VERSION_10_15_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_15, __IPHONE_COMPAT_VERSION);
pub const F_ADDFILESIGS_RETURN = 97;
pub const _POSIX_TTY_NAME_MAX = 9;
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_15(x: var) @TypeOf(x) {
    return x;
}
pub const __SLBF = 0x0001;
pub const __IPHONE_10_2 = 100200;
pub const EHOSTDOWN = 64;
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const SS_DISABLE = 0x0004;
pub const NSEC_PER_MSEC = @as(c_ulonglong, 1000000);
pub const FPE_FLTOVF = 2;
pub const __CONSTANT_CFSTRINGS__ = 1;
pub const KAUTH_VNODE_READ_DATA = @as(c_uint, 1) << 1;
pub const IOPOL_NORMAL = IOPOL_IMPORTANT;
pub const kAudioUnitConfigurationInfo_InitialOutputs = "InitialOutputs";
pub const PRIXLEAST32 = PRIX32;
pub const CF_WARN_UNUSED_RESULT = __attribute__(warn_unused_result);
pub const ENOTCONN = 57;
pub const __GCC_ASM_FLAG_OUTPUTS__ = 1;
pub const MACH_RCV_TIMEOUT = 0x00000100;
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const PRAGMA_STRUCT_PACKPUSH = 1;
pub const __COREFOUNDATION_CFBITVECTOR__ = 1;
pub const LDBL_EPSILON = __LDBL_EPSILON__;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER = @as(c_ulonglong, 0x04) << 56;
pub const KAUTH_INVALIDATE_CACHED_RIGHTS = if (@typeId(@TypeOf(~0)) == .Pointer) @ptrCast(kauth_action_t, ~0) else if (@typeId(@TypeOf(~0)) == .Int) @intToPtr(kauth_action_t, ~0) else @as(kauth_action_t, ~0);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __COREFOUNDATION_CFFILEDESCRIPTOR__ = 1;
pub const _POSIX2_BC_DIM_MAX = 2048;
pub const KAUTH_ACE_GENERIC_WRITE = 1 << 23;
pub const LDBL_MIN_EXP = __LDBL_MIN_EXP__;
pub const DISPATCH_VNODE_ATTRIB = 0x8;
pub const MACH_PORT_STATUS_FLAG_GUARDED = 0x02;
pub const PRIdLEAST64 = PRId64;
pub const __IPHONE_2_2 = 20200;
pub const MACH_RCV_BODY_ERROR = 0x1000400c;
pub const kCFCoreFoundationVersionNumber10_10_4 = 1153.18;
pub const _POSIX_PATH_MAX = 256;
pub const TARGET_OS_EMBEDDED = 0;
pub const MACH_MSG_TYPE_MOVE_SEND_ONCE = 18;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = 0;
pub const OS_PURE = __attribute__(__pure__);
pub inline fn isgreaterequal(x: var, y: var) @TypeOf(__builtin_isgreaterequal(x, y)) {
    return __builtin_isgreaterequal(x, y);
}
pub const MACH_PORT_IMPORTANCE_RECEIVER = 5;
pub const __AVAILABILITY_INTERNAL__IPHONE_NA = __attribute__(availability(ios, unavailable));
pub const PRIO_MIN = -20;
pub const MACH_PORT_TYPE_RECEIVE = MACH_PORT_TYPE(MACH_PORT_RIGHT_RECEIVE);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub const __RDSEED__ = 1;
pub const PTRDIFF_MAX = INTMAX_MAX;
pub const __WATCHOS_6_0 = 60000;
pub const KAUTH_ACL_DEFER_INHERIT = 1 << 16;
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const O_NOFOLLOW = 0x0100;
pub const __BIGGEST_ALIGNMENT__ = 16;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = 4;
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14(x: var) @TypeOf(x) {
    return x;
}
pub const __DARWIN_64_BIT_INO_T = 1;
pub const LC_MONETARY = 3;
pub const F_ADDFILESIGS = 61;
pub const LLONG_MIN = -@as(c_longlong, 0x7fffffffffffffff) - 1;
pub const kCFCoreFoundationVersionNumber10_5 = 476.00;
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const ENOSTR = 99;
pub const KAUTH_SET_CACHE_SIZES = 1 << 4;
pub const _SC_BC_BASE_MAX = 9;
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_1, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const SCNiLEAST64 = SCNi64;
pub const kAFInfoDictionary_ApproximateDurationInSeconds = "approximate duration in seconds";
pub const S_IFLNK = 0o0120000;
pub const UINT_LEAST32_MAX = UINT32_MAX;
pub const _POSIX2_LINE_MAX = 2048;
pub inline fn OSSwapBigToHostConstInt32(x: var) @TypeOf(OSSwapConstInt32(x)) {
    return OSSwapConstInt32(x);
}
pub const MAC_OS_X_VERSION_10_13_2 = 101302;
pub const __F16C__ = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = 1;
pub const __AVAILABILITY_INTERNAL_UNAVAILABLE = __attribute__(unavailable);
pub const _POSIX_TIMER_MAX = 32;
pub const MAC_OS_X_VERSION_10_3 = 1030;
pub const __SIZEOF_INT__ = 4;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP = @as(c_ulonglong, 0x01) << 56;
pub const STDIN_FILENO = 0;
pub const KAUTH_VNODE_DELETE_CHILD = @as(c_uint, 1) << 6;
pub const __INT_LEAST8_MAX__ = 127;
pub const __UINTMAX_FMTo__ = "lo";
pub const _POSIX_STREAM_MAX = 8;
pub inline fn OSSwapBigToHostInt(x: var) @TypeOf(OSSwapBigToHostInt32(x)) {
    return OSSwapBigToHostInt32(x);
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_12(x: var) @TypeOf(x) {
    return x;
}
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const __AVX__ = 1;
pub const __darwin_pthread_handler_rec = struct___darwin_pthread_handler_rec;
pub const _opaque_pthread_attr_t = struct__opaque_pthread_attr_t;
pub const _opaque_pthread_cond_t = struct__opaque_pthread_cond_t;
pub const _opaque_pthread_condattr_t = struct__opaque_pthread_condattr_t;
pub const _opaque_pthread_mutex_t = struct__opaque_pthread_mutex_t;
pub const _opaque_pthread_mutexattr_t = struct__opaque_pthread_mutexattr_t;
pub const _opaque_pthread_once_t = struct__opaque_pthread_once_t;
pub const _opaque_pthread_rwlock_t = struct__opaque_pthread_rwlock_t;
pub const _opaque_pthread_rwlockattr_t = struct__opaque_pthread_rwlockattr_t;
pub const _opaque_pthread_t = struct__opaque_pthread_t;
pub const TimeBaseRecord = struct_TimeBaseRecord;
pub const __CFString = struct___CFString;
pub const __CFNull = struct___CFNull;
pub const __CFAllocator = struct___CFAllocator;
pub const lconv = struct_lconv;
pub const __float2 = struct___float2;
pub const __double2 = struct___double2;
pub const exception = struct_exception;
pub const __darwin_i386_thread_state = struct___darwin_i386_thread_state;
pub const __darwin_fp_control = struct___darwin_fp_control;
pub const __darwin_fp_status = struct___darwin_fp_status;
pub const __darwin_mmst_reg = struct___darwin_mmst_reg;
pub const __darwin_xmm_reg = struct___darwin_xmm_reg;
pub const __darwin_ymm_reg = struct___darwin_ymm_reg;
pub const __darwin_zmm_reg = struct___darwin_zmm_reg;
pub const __darwin_opmask_reg = struct___darwin_opmask_reg;
pub const __darwin_i386_float_state = struct___darwin_i386_float_state;
pub const __darwin_i386_avx_state = struct___darwin_i386_avx_state;
pub const __darwin_i386_avx512_state = struct___darwin_i386_avx512_state;
pub const __darwin_i386_exception_state = struct___darwin_i386_exception_state;
pub const __darwin_x86_debug_state32 = struct___darwin_x86_debug_state32;
pub const __x86_pagein_state = struct___x86_pagein_state;
pub const __darwin_x86_thread_state64 = struct___darwin_x86_thread_state64;
pub const __darwin_x86_thread_full_state64 = struct___darwin_x86_thread_full_state64;
pub const __darwin_x86_float_state64 = struct___darwin_x86_float_state64;
pub const __darwin_x86_avx_state64 = struct___darwin_x86_avx_state64;
pub const __darwin_x86_avx512_state64 = struct___darwin_x86_avx512_state64;
pub const __darwin_x86_exception_state64 = struct___darwin_x86_exception_state64;
pub const __darwin_x86_debug_state64 = struct___darwin_x86_debug_state64;
pub const __darwin_x86_cpmu_state64 = struct___darwin_x86_cpmu_state64;
pub const __darwin_mcontext32 = struct___darwin_mcontext32;
pub const __darwin_mcontext_avx32 = struct___darwin_mcontext_avx32;
pub const __darwin_mcontext_avx512_32 = struct___darwin_mcontext_avx512_32;
pub const __darwin_mcontext64 = struct___darwin_mcontext64;
pub const __darwin_mcontext64_full = struct___darwin_mcontext64_full;
pub const __darwin_mcontext_avx64 = struct___darwin_mcontext_avx64;
pub const __darwin_mcontext_avx64_full = struct___darwin_mcontext_avx64_full;
pub const __darwin_mcontext_avx512_64 = struct___darwin_mcontext_avx512_64;
pub const __darwin_mcontext_avx512_64_full = struct___darwin_mcontext_avx512_64_full;
pub const __darwin_sigaltstack = struct___darwin_sigaltstack;
pub const __darwin_ucontext = struct___darwin_ucontext;
pub const sigval = union_sigval;
pub const sigevent = struct_sigevent;
pub const __siginfo = struct___siginfo;
pub const __sigaction_u = union___sigaction_u;
pub const __sigaction = struct___sigaction;
pub const sigstack = struct_sigstack;
pub const __sbuf = struct___sbuf;
pub const __sFILEX = struct___sFILEX;
pub const __sFILE = struct___sFILE;
pub const __va_list_tag = struct___va_list_tag;
pub const timeval = struct_timeval;
pub const rusage = struct_rusage;
pub const rusage_info_v0 = struct_rusage_info_v0;
pub const rusage_info_v1 = struct_rusage_info_v1;
pub const rusage_info_v2 = struct_rusage_info_v2;
pub const rusage_info_v3 = struct_rusage_info_v3;
pub const rusage_info_v4 = struct_rusage_info_v4;
pub const rlimit = struct_rlimit;
pub const proc_rlimit_control_wakeupmon = struct_proc_rlimit_control_wakeupmon;
pub const timespec = struct_timespec;
pub const tm = struct_tm;
pub const __CFArray = struct___CFArray;
pub const __CFBag = struct___CFBag;
pub const __CFBinaryHeap = struct___CFBinaryHeap;
pub const __CFBitVector = struct___CFBitVector;
pub const __CFByteOrder = enum___CFByteOrder;
pub const __CFDictionary = struct___CFDictionary;
pub const __CFNotificationCenter = struct___CFNotificationCenter;
pub const __CFLocale = struct___CFLocale;
pub const __CFDate = struct___CFDate;
pub const __CFTimeZone = struct___CFTimeZone;
pub const __CFData = struct___CFData;
pub const __CFCharacterSet = struct___CFCharacterSet;
pub const __CFCalendar = struct___CFCalendar;
pub const __CFDateFormatter = struct___CFDateFormatter;
pub const __CFError = struct___CFError;
pub const __CFBoolean = struct___CFBoolean;
pub const __CFNumber = struct___CFNumber;
pub const __CFNumberFormatter = struct___CFNumberFormatter;
pub const __CFURL = struct___CFURL;
pub const FSRef = struct_FSRef;
pub const mach_port_status = struct_mach_port_status;
pub const mach_port_limits = struct_mach_port_limits;
pub const mach_port_info_ext = struct_mach_port_info_ext;
pub const mach_port_qos = struct_mach_port_qos;
pub const mach_port_options = struct_mach_port_options;
pub const mach_port_guard_exception_codes = enum_mach_port_guard_exception_codes;
pub const __CFRunLoop = struct___CFRunLoop;
pub const __CFRunLoopSource = struct___CFRunLoopSource;
pub const __CFRunLoopObserver = struct___CFRunLoopObserver;
pub const __CFRunLoopTimer = struct___CFRunLoopTimer;
pub const __CFSocket = struct___CFSocket;
pub const accessx_descriptor = struct_accessx_descriptor;
pub const fssearchblock = struct_fssearchblock;
pub const searchstate = struct_searchstate;
pub const flocktimeout = struct_flocktimeout;
pub const radvisory = struct_radvisory;
pub const fcodeblobs = struct_fcodeblobs;
pub const fsignatures = struct_fsignatures;
pub const fchecklv = struct_fchecklv;
pub const fstore = struct_fstore;
pub const fpunchhole = struct_fpunchhole;
pub const ftrimactivefile = struct_ftrimactivefile;
pub const fspecread = struct_fspecread;
pub const fbootstraptransfer = struct_fbootstraptransfer;
pub const log2phys = struct_log2phys;
pub const _filesec = struct__filesec;
pub const time_value = struct_time_value;
pub const mach_timespec = struct_mach_timespec;
pub const _os_object_s = struct__os_object_s;
pub const dispatch_object_s = struct_dispatch_object_s;
pub const dispatch_queue_s = struct_dispatch_queue_s;
pub const dispatch_queue_attr_s = struct_dispatch_queue_attr_s;
pub const dispatch_group_s = struct_dispatch_group_s;
pub const dispatch_source_s = struct_dispatch_source_s;
pub const dispatch_channel_s = struct_dispatch_channel_s;
pub const dispatch_mach_s = struct_dispatch_mach_s;
pub const dispatch_mach_msg_s = struct_dispatch_mach_msg_s;
pub const dispatch_semaphore_s = struct_dispatch_semaphore_s;
pub const dispatch_data_s = struct_dispatch_data_s;
pub const dispatch_io_s = struct_dispatch_io_s;
pub const dispatch_source_type_s = struct_dispatch_source_type_s;
pub const __CFReadStream = struct___CFReadStream;
pub const __CFWriteStream = struct___CFWriteStream;
pub const __CFSet = struct___CFSet;
pub const __CFTree = struct___CFTree;
pub const __CFUUID = struct___CFUUID;
pub const __CFBundle = struct___CFBundle;
pub const __CFMessagePort = struct___CFMessagePort;
pub const __CFPlugInInstance = struct___CFPlugInInstance;
pub const __CFMachPort = struct___CFMachPort;
pub const __CFAttributedString = struct___CFAttributedString;
pub const __CFURLEnumerator = struct___CFURLEnumerator;
pub const kauth_identity_extlookup = struct_kauth_identity_extlookup;
pub const kauth_cache_sizes = struct_kauth_cache_sizes;
pub const kauth_ace = struct_kauth_ace;
pub const kauth_acl = struct_kauth_acl;
pub const kauth_filesec = struct_kauth_filesec;
pub const _acl = struct__acl;
pub const _acl_entry = struct__acl_entry;
pub const _acl_permset = struct__acl_permset;
pub const _acl_flagset = struct__acl_flagset;
pub const __CFFileSecurity = struct___CFFileSecurity;
pub const __CFStringTokenizer = struct___CFStringTokenizer;
pub const __CFFileDescriptor = struct___CFFileDescriptor;
pub const __CFUserNotification = struct___CFUserNotification;
pub const __CFXMLNode = struct___CFXMLNode;
pub const __CFXMLParser = struct___CFXMLParser;
pub const OpaqueAudioComponent = struct_OpaqueAudioComponent;
pub const ComponentInstanceRecord = struct_ComponentInstanceRecord;
pub const AudioUnitParameterNameInfo = struct_AudioUnitParameterNameInfo;
pub const OpaqueAudioFileID = struct_OpaqueAudioFileID;
pub const OpaqueAUGraph = struct_OpaqueAUGraph;
pub const ComponentDescription = struct_ComponentDescription;
pub const OpaqueAudioConverter = struct_OpaqueAudioConverter;
pub const OpaqueAudioFileStreamID = struct_OpaqueAudioFileStreamID;
pub const OpaqueAudioQueue = struct_OpaqueAudioQueue;
pub const OpaqueAudioQueueTimeline = struct_OpaqueAudioQueueTimeline;
pub const OpaqueAudioQueueProcessingTap = struct_OpaqueAudioQueueProcessingTap;
pub const CAFAudioFormatListItem = struct_CAFAudioFormatListItem;
pub const OpaqueExtAudioFile = struct_OpaqueExtAudioFile;
pub const OpaqueMusicPlayer = struct_OpaqueMusicPlayer;
pub const OpaqueMusicSequence = struct_OpaqueMusicSequence;
pub const OpaqueMusicTrack = struct_OpaqueMusicTrack;
pub const OpaqueMusicEventIterator = struct_OpaqueMusicEventIterator;
pub const AUListenerBase = struct_AUListenerBase;
pub const OpaqueCAClock = struct_OpaqueCAClock;
